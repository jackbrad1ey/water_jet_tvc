
neptune-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c8  080086c8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d0  080086d0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080086d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  200000fc  080087d4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  080087d4  00021ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001606a  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033be  00000000  00000000  00036196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00039558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac0d  00000000  00000000  0003baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001773d  00000000  00000000  000566fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d3de  00000000  00000000  0006de3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  0010b268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008658 	.word	0x08008658

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008658 	.word	0x08008658

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fcc9 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f873 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fa51 	bl	8000990 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ee:	f000 f92b 	bl	8000748 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004f2:	f000 f95f 	bl	80007b4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80004f6:	f000 f993 	bl	8000820 <MX_SPI3_Init>
  MX_ADC1_Init();
 80004fa:	f000 f8d3 	bl	80006a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004fe:	f000 f9c5 	bl	800088c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000502:	f007 fb93 	bl	8007c2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	482e      	ldr	r0, [pc, #184]	; (80005c4 <main+0xe8>)
 800050a:	f003 fa4b 	bl	80039a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800050e:	2104      	movs	r1, #4
 8000510:	482c      	ldr	r0, [pc, #176]	; (80005c4 <main+0xe8>)
 8000512:	f003 fa47 	bl	80039a4 <HAL_TIM_PWM_Start>
  float duty_cycle = 4;
 8000516:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800051a:	607b      	str	r3, [r7, #4]
  int reverse = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	603b      	str	r3, [r7, #0]

	// 5% duty cycle minimum, 10% maximum
	// 16 bit, 65536 increments

	// arr = 200, duty cycle = ccr / arr * 100
	htim3.Instance->CCR1 = duty_cycle * 200 / 100;
 8000520:	edd7 7a01 	vldr	s15, [r7, #4]
 8000524:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80005c8 <main+0xec>
 8000528:	ee27 7a87 	vmul.f32	s14, s15, s14
 800052c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80005cc <main+0xf0>
 8000530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <main+0xe8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053c:	ee17 2a90 	vmov	r2, s15
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = duty_cycle * 200 / 100;
 8000542:	edd7 7a01 	vldr	s15, [r7, #4]
 8000546:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80005c8 <main+0xec>
 800054a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800054e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80005cc <main+0xf0>
 8000552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <main+0xe8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800055e:	ee17 2a90 	vmov	r2, s15
 8000562:	639a      	str	r2, [r3, #56]	; 0x38

	if (reverse) {
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d008      	beq.n	800057c <main+0xa0>
		duty_cycle -= 3.5;
 800056a:	edd7 7a01 	vldr	s15, [r7, #4]
 800056e:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8000572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000576:	edc7 7a01 	vstr	s15, [r7, #4]
 800057a:	e007      	b.n	800058c <main+0xb0>
	} else {
		duty_cycle += 3.5;
 800057c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000580:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8000584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000588:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	if (duty_cycle > 11) {
 800058c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000590:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8000594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	dd02      	ble.n	80005a4 <main+0xc8>
		reverse = 1;
 800059e:	2301      	movs	r3, #1
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	e00a      	b.n	80005ba <main+0xde>
	} else if (duty_cycle < 4) {
 80005a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80005ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b4:	d501      	bpl.n	80005ba <main+0xde>
		reverse = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
	}

	HAL_Delay(300);
 80005ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005be:	f000 fccd 	bl	8000f5c <HAL_Delay>
	htim3.Instance->CCR1 = duty_cycle * 200 / 100;
 80005c2:	e7ad      	b.n	8000520 <main+0x44>
 80005c4:	20000268 	.word	0x20000268
 80005c8:	43480000 	.word	0x43480000
 80005cc:	42c80000 	.word	0x42c80000

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f008 f832 	bl	8008648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000640:	230c      	movs	r3, #12
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000644:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800064e:	2308      	movs	r3, #8
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fc42 	bl	8002ee0 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000662:	f000 fa15 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fea4 	bl	80033d0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f9ff 	bl	8000a90 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC1_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC1_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC1_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC1_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC1_Init+0x98>)
 8000706:	f000 fc4d 	bl	8000fa4 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 f9be 	bl	8000a90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000714:	2302      	movs	r3, #2
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC1_Init+0x98>)
 8000726:	f000 fc81 	bl	800102c <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 f9ae 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000118 	.word	0x20000118
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2218      	movs	r2, #24
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f002 ffd1 	bl	8003740 <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f974 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000160 	.word	0x20000160
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI2_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI2_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI2_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI2_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI2_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI2_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI2_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI2_Init+0x64>)
 80007e8:	2220      	movs	r2, #32
 80007ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI2_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI2_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI2_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI2_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI2_Init+0x64>)
 8000806:	f002 ff9b 	bl	8003740 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f93e 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200001b8 	.word	0x200001b8
 800081c:	40003800 	.word	0x40003800

08000820 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_SPI3_Init+0x64>)
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <MX_SPI3_Init+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_SPI3_Init+0x64>)
 800082c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_SPI3_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_SPI3_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_SPI3_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_SPI3_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_SPI3_Init+0x64>)
 800084c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000850:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SPI3_Init+0x64>)
 8000854:	2230      	movs	r2, #48	; 0x30
 8000856:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_SPI3_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SPI3_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_SPI3_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_SPI3_Init+0x64>)
 800086c:	220a      	movs	r2, #10
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_SPI3_Init+0x64>)
 8000872:	f002 ff65 	bl	8003740 <HAL_SPI_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800087c:	f000 f908 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000210 	.word	0x20000210
 8000888:	40003c00 	.word	0x40003c00

0800088c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008bc:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <MX_TIM3_Init+0x100>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008c4:	f242 527f 	movw	r2, #9599	; 0x257f
 80008c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008d2:	22c7      	movs	r2, #199	; 0xc7
 80008d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e2:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_TIM3_Init+0xfc>)
 80008e4:	f002 ffb5 	bl	8003852 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008ee:	f000 f8cf 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4822      	ldr	r0, [pc, #136]	; (8000988 <MX_TIM3_Init+0xfc>)
 8000900:	f003 f9c2 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800090a:	f000 f8c1 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800090e:	481e      	ldr	r0, [pc, #120]	; (8000988 <MX_TIM3_Init+0xfc>)
 8000910:	f002 ffee 	bl	80038f0 <HAL_TIM_PWM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800091a:	f000 f8b9 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4619      	mov	r1, r3
 800092c:	4816      	ldr	r0, [pc, #88]	; (8000988 <MX_TIM3_Init+0xfc>)
 800092e:	f003 fd3f 	bl	80043b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000938:	f000 f8aa 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM3_Init+0xfc>)
 8000954:	f003 f8d6 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800095e:	f000 f897 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM3_Init+0xfc>)
 800096a:	f003 f8cb 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000974:	f000 f88c 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM3_Init+0xfc>)
 800097a:	f000 f9d3 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	; 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000268 	.word	0x20000268
 800098c:	40000400 	.word	0x40000400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a35      	ldr	r2, [pc, #212]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xf4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xf4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <MX_GPIO_Init+0xf4>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xf4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210e      	movs	r1, #14
 8000a1a:	481b      	ldr	r0, [pc, #108]	; (8000a88 <MX_GPIO_Init+0xf8>)
 8000a1c:	f000 ffca 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2107      	movs	r1, #7
 8000a24:	4819      	ldr	r0, [pc, #100]	; (8000a8c <MX_GPIO_Init+0xfc>)
 8000a26:	f000 ffc5 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_10O_Pin */
  GPIO_InitStruct.Pin = RF_10O_Pin;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_10O_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xf8>)
 8000a3e:	f000 fe35 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_RESET_Pin RF_CE_Pin SD_CE_Pin */
  GPIO_InitStruct.Pin = RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin;
 8000a42:	230e      	movs	r3, #14
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0xf8>)
 8000a5a:	f000 fe27 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CE_Pin GYR_CE_Pin MAG_CE_Pin */
  GPIO_InitStruct.Pin = ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0xfc>)
 8000a76:	f000 fe19 	bl	80016ac <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_ADC_MspInit+0x7c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d127      	bne.n	8000b5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = S1_FBK_Pin|S2_FBK_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b5a:	f000 fda7 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40012000 	.word	0x40012000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_SPI_MspInit+0x150>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a4a      	ldr	r2, [pc, #296]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b48      	ldr	r3, [pc, #288]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a43      	ldr	r2, [pc, #268]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	; 0xe0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4838      	ldr	r0, [pc, #224]	; (8000ccc <HAL_SPI_MspInit+0x158>)
 8000bea:	f000 fd5f 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bee:	e064      	b.n	8000cba <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <HAL_SPI_MspInit+0x15c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12d      	bne.n	8000c56 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a2a      	ldr	r2, [pc, #168]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8000c32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c44:	2305      	movs	r3, #5
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4821      	ldr	r0, [pc, #132]	; (8000cd4 <HAL_SPI_MspInit+0x160>)
 8000c50:	f000 fd2c 	bl	80016ac <HAL_GPIO_Init>
}
 8000c54:	e031      	b.n	8000cba <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <HAL_SPI_MspInit+0x164>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d12c      	bne.n	8000cba <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_SPI_MspInit+0x154>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000c98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000caa:	2306      	movs	r3, #6
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <HAL_SPI_MspInit+0x168>)
 8000cb6:	f000 fcf9 	bl	80016ac <HAL_GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	3738      	adds	r7, #56	; 0x38
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_TIM_Base_MspInit+0x3c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10d      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_TIM_Base_MspInit+0x40>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_TIM_Base_MspInit+0x40>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40000400 	.word	0x40000400
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <HAL_TIM_MspPostInit+0x68>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d11d      	bne.n	8000d82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_TIM_MspPostInit+0x6c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_TIM_MspPostInit+0x6c>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_TIM_MspPostInit+0x6c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = S1_CTRL_Pin|S2_CTRL_Pin;
 8000d62:	2330      	movs	r3, #48	; 0x30
 8000d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_TIM_MspPostInit+0x70>)
 8000d7e:	f000 fc95 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40000400 	.word	0x40000400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f89a 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <OTG_FS_IRQHandler+0x10>)
 8000df2:	f000 ff48 	bl	8001c86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20001794 	.word	0x20001794

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f007 fbd5 	bl	8008600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fb41 	bl	80004dc <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e68:	080086d8 	.word	0x080086d8
  ldr r2, =_sbss
 8000e6c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e70:	20001ec0 	.word	0x20001ec0

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 fbc1 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fdf6 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fbd9 	bl	8001692 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 fba1 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200002b0 	.word	0x200002b0

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200002b0 	.word	0x200002b0

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e033      	b.n	8001022 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d109      	bne.n	8000fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fd92 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d118      	bne.n	8001014 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fea:	f023 0302 	bic.w	r3, r3, #2
 8000fee:	f043 0202 	orr.w	r2, r3, #2
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f94a 	bl	8001290 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	f043 0201 	orr.w	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
 8001012:	e001      	b.n	8001018 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1c>
 8001044:	2302      	movs	r3, #2
 8001046:	e113      	b.n	8001270 <HAL_ADC_ConfigChannel+0x244>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b09      	cmp	r3, #9
 8001056:	d925      	bls.n	80010a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68d9      	ldr	r1, [r3, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	3b1e      	subs	r3, #30
 800106e:	2207      	movs	r2, #7
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43da      	mvns	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	400a      	ands	r2, r1
 800107c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68d9      	ldr	r1, [r3, #12]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	4603      	mov	r3, r0
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4403      	add	r3, r0
 8001096:	3b1e      	subs	r3, #30
 8001098:	409a      	lsls	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	e022      	b.n	80010ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6919      	ldr	r1, [r3, #16]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	2207      	movs	r2, #7
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	400a      	ands	r2, r1
 80010c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6919      	ldr	r1, [r3, #16]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4403      	add	r3, r0
 80010e0:	409a      	lsls	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d824      	bhi.n	800113c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b05      	subs	r3, #5
 8001104:	221f      	movs	r2, #31
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	400a      	ands	r2, r1
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b05      	subs	r3, #5
 800112e:	fa00 f203 	lsl.w	r2, r0, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
 800113a:	e04c      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b0c      	cmp	r3, #12
 8001142:	d824      	bhi.n	800118e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b23      	subs	r3, #35	; 0x23
 8001156:	221f      	movs	r2, #31
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43da      	mvns	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	400a      	ands	r2, r1
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b23      	subs	r3, #35	; 0x23
 8001180:	fa00 f203 	lsl.w	r2, r0, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
 800118c:	e023      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	3b41      	subs	r3, #65	; 0x41
 80011a0:	221f      	movs	r2, #31
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	400a      	ands	r2, r1
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b41      	subs	r3, #65	; 0x41
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_ADC_ConfigChannel+0x250>)
 80011d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <HAL_ADC_ConfigChannel+0x254>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10f      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1d8>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b12      	cmp	r3, #18
 80011ea:	d10b      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_ADC_ConfigChannel+0x254>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d12b      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x23a>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <HAL_ADC_ConfigChannel+0x258>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d003      	beq.n	8001220 <HAL_ADC_ConfigChannel+0x1f4>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b11      	cmp	r3, #17
 800121e:	d122      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_ADC_ConfigChannel+0x258>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d111      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_ADC_ConfigChannel+0x25c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_ADC_ConfigChannel+0x260>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	0c9a      	lsrs	r2, r3, #18
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001258:	e002      	b.n	8001260 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3b01      	subs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f9      	bne.n	800125a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40012300 	.word	0x40012300
 8001280:	40012000 	.word	0x40012000
 8001284:	10000012 	.word	0x10000012
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001298:	4b79      	ldr	r3, [pc, #484]	; (8001480 <ADC_Init+0x1f0>)
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	021a      	lsls	r2, r3, #8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6899      	ldr	r1, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	4a58      	ldr	r2, [pc, #352]	; (8001484 <ADC_Init+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d022      	beq.n	800136e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001336:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6899      	ldr	r1, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6899      	ldr	r1, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e00f      	b.n	800138e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800137c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800138c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0202 	bic.w	r2, r2, #2
 800139c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
 80013a8:	005a      	lsls	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	3b01      	subs	r3, #1
 80013e8:	035a      	lsls	r2, r3, #13
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	e007      	b.n	8001404 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001402:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	3b01      	subs	r3, #1
 8001420:	051a      	lsls	r2, r3, #20
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6899      	ldr	r1, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001446:	025a      	lsls	r2, r3, #9
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800145e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	029a      	lsls	r2, r3, #10
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40012300 	.word	0x40012300
 8001484:	0f000001 	.word	0x0f000001

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff3e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff31 	bl	80014ec <__NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffa2 	bl	80015e4 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e159      	b.n	800197c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f040 8148 	bne.w	8001976 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d005      	beq.n	80016fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d130      	bne.n	8001760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 0201 	and.w	r2, r3, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b03      	cmp	r3, #3
 800176a:	d017      	beq.n	800179c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d123      	bne.n	80017f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a2 	beq.w	8001976 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b57      	ldr	r3, [pc, #348]	; (8001994 <HAL_GPIO_Init+0x2e8>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x2e8>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_GPIO_Init+0x2e8>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184e:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_GPIO_Init+0x2ec>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_GPIO_Init+0x2f0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x202>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <HAL_GPIO_Init+0x2f4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x1fe>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <HAL_GPIO_Init+0x2f8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x1fa>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a46      	ldr	r2, [pc, #280]	; (80019a8 <HAL_GPIO_Init+0x2fc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x1f6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a45      	ldr	r2, [pc, #276]	; (80019ac <HAL_GPIO_Init+0x300>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x1f2>
 800189a:	2304      	movs	r3, #4
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 800189e:	2307      	movs	r3, #7
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x204>
 80018ae:	2300      	movs	r3, #0
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c0:	4935      	ldr	r1, [pc, #212]	; (8001998 <HAL_GPIO_Init+0x2ec>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_GPIO_Init+0x304>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f2:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_GPIO_Init+0x304>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x304>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <HAL_GPIO_Init+0x304>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x304>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001946:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x304>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x304>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_GPIO_Init+0x304>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	f67f aea2 	bls.w	80016c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40013800 	.word	0x40013800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40013c00 	.word	0x40013c00

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	619a      	str	r2, [r3, #24]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e8:	b08f      	sub	sp, #60	; 0x3c
 80019ea:	af0a      	add	r7, sp, #40	; 0x28
 80019ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e10f      	b.n	8001c18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f006 faea 	bl	8007fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fe3d 	bl	80046b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	687e      	ldr	r6, [r7, #4]
 8001a44:	466d      	mov	r5, sp
 8001a46:	f106 0410 	add.w	r4, r6, #16
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a5a:	1d33      	adds	r3, r6, #4
 8001a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f002 fd14 	bl	800448c <USB_CoreInit>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d0      	b.n	8001c18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fe2b 	bl	80046d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e04a      	b.n	8001b1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	333d      	adds	r3, #61	; 0x3d
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	333c      	adds	r3, #60	; 0x3c
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3344      	adds	r3, #68	; 0x44
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3340      	adds	r3, #64	; 0x40
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3348      	adds	r3, #72	; 0x48
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	334c      	adds	r3, #76	; 0x4c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3354      	adds	r3, #84	; 0x54
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d3af      	bcc.n	8001a88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e044      	b.n	8001bb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3b5      	bcc.n	8001b2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	687e      	ldr	r6, [r7, #4]
 8001bca:	466d      	mov	r5, sp
 8001bcc:	f106 0410 	add.w	r4, r6, #16
 8001bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001be0:	1d33      	adds	r3, r6, #4
 8001be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	f002 fdc3 	bl	8004770 <USB_DevInit>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00d      	b.n	8001c18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 ff12 	bl	8005a3a <USB_DevDisconnect>

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_PCD_Start+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e020      	b.n	8001c7e <HAL_PCD_Start+0x5e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d109      	bne.n	8001c60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d005      	beq.n	8001c60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fd15 	bl	8004694 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fec2 	bl	80059f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c86:	b590      	push	{r4, r7, lr}
 8001c88:	b08d      	sub	sp, #52	; 0x34
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 ff80 	bl	8005ba2 <USB_GetMode>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 848a 	bne.w	80025be <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fee4 	bl	8005a7c <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8480 	beq.w	80025bc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fed1 	bl	8005a7c <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f002 0202 	and.w	r2, r2, #2
 8001cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 febf 	bl	8005a7c <USB_ReadInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b10      	cmp	r3, #16
 8001d06:	d161      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0210 	bic.w	r2, r2, #16
 8001d16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	0c5b      	lsrs	r3, r3, #17
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d124      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d035      	beq.n	8001dbc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	6a38      	ldr	r0, [r7, #32]
 8001d64:	f003 fcf6 	bl	8005754 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d74:	441a      	add	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d86:	441a      	add	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	621a      	str	r2, [r3, #32]
 8001d8c:	e016      	b.n	8001dbc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	0c5b      	lsrs	r3, r3, #17
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d110      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001da0:	2208      	movs	r2, #8
 8001da2:	4619      	mov	r1, r3
 8001da4:	6a38      	ldr	r0, [r7, #32]
 8001da6:	f003 fcd5 	bl	8005754 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db6:	441a      	add	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0210 	orr.w	r2, r2, #16
 8001dca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fe53 	bl	8005a7c <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ddc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001de0:	f040 80a7 	bne.w	8001f32 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fe58 	bl	8005aa2 <USB_ReadDevAllOutEpInterrupt>
 8001df2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001df4:	e099      	b.n	8001f2a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 808e 	beq.w	8001f1e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fe7c 	bl	8005b0a <USB_ReadDevOutEPInterrupt>
 8001e12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fec2 	bl	8002bbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2308      	movs	r3, #8
 8001e52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 ff98 	bl	8002d8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e72:	461a      	mov	r2, r3
 8001e74:	2310      	movs	r3, #16
 8001e76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d030      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b80      	cmp	r3, #128	; 0x80
 8001e8c:	d109      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	78db      	ldrb	r3, [r3, #3]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d108      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f006 f989 	bl	80081e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efa:	461a      	mov	r2, r3
 8001efc:	2320      	movs	r3, #32
 8001efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f16:	461a      	mov	r2, r3
 8001f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3301      	adds	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f af62 	bne.w	8001df6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fda0 	bl	8005a7c <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f46:	f040 80db 	bne.w	8002100 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fdc1 	bl	8005ad6 <USB_ReadDevAllInEpInterrupt>
 8001f54:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f5a:	e0cd      	b.n	80020f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80c2 	beq.w	80020ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fde7 	bl	8005b46 <USB_ReadDevInEPInterrupt>
 8001f78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d057      	beq.n	8002034 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69f9      	ldr	r1, [r7, #28]
 8001fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d132      	bne.n	8002028 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	334c      	adds	r3, #76	; 0x4c
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4403      	add	r3, r0
 8001fe2:	3348      	adds	r3, #72	; 0x48
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4419      	add	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4403      	add	r3, r0
 8001ff6:	334c      	adds	r3, #76	; 0x4c
 8001ff8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d113      	bne.n	8002028 <HAL_PCD_IRQHandler+0x3a2>
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3354      	adds	r3, #84	; 0x54
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002020:	461a      	mov	r2, r3
 8002022:	2101      	movs	r1, #1
 8002024:	f003 fdee 	bl	8005c04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f006 f85d 	bl	80080ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204a:	461a      	mov	r2, r3
 800204c:	2308      	movs	r3, #8
 800204e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002066:	461a      	mov	r2, r3
 8002068:	2310      	movs	r3, #16
 800206a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002082:	461a      	mov	r2, r3
 8002084:	2340      	movs	r3, #64	; 0x40
 8002086:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d023      	beq.n	80020da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002094:	6a38      	ldr	r0, [r7, #32]
 8002096:	f002 fccf 	bl	8004a38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3338      	adds	r3, #56	; 0x38
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	78db      	ldrb	r3, [r3, #3]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d108      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f006 f8a0 	bl	8008208 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d4:	461a      	mov	r2, r3
 80020d6:	2302      	movs	r3, #2
 80020d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fcdb 	bl	8002aa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3301      	adds	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f af2e 	bne.w	8001f5c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fcb9 	bl	8005a7c <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002114:	d122      	bne.n	800215c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002130:	2b01      	cmp	r3, #1
 8002132:	d108      	bne.n	8002146 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800213c:	2100      	movs	r1, #0
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fec2 	bl	8002ec8 <HAL_PCDEx_LPM_Callback>
 8002144:	e002      	b.n	800214c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f006 f83e 	bl	80081c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800215a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fc8b 	bl	8005a7c <USB_ReadInterrupts>
 8002166:	4603      	mov	r3, r0
 8002168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002170:	d112      	bne.n	8002198 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f005 fffa 	bl	800817c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002196:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fc6d 	bl	8005a7c <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ac:	f040 80b7 	bne.w	800231e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2110      	movs	r1, #16
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 fc34 	bl	8004a38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d4:	e046      	b.n	8002264 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	461a      	mov	r2, r3
 80021e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	0151      	lsls	r1, r2, #5
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	440a      	add	r2, r1
 8002200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002204:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002208:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002216:	461a      	mov	r2, r3
 8002218:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800221c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222e:	0151      	lsls	r1, r2, #5
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	440a      	add	r2, r1
 8002234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002238:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800223c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224e:	0151      	lsls	r1, r2, #5
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	440a      	add	r2, r1
 8002254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002258:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800225c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	3301      	adds	r3, #1
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226a:	429a      	cmp	r2, r3
 800226c:	d3b3      	bcc.n	80021d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002280:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800229a:	f043 030b 	orr.w	r3, r3, #11
 800229e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b0:	f043 030b 	orr.w	r3, r3, #11
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	e015      	b.n	80022e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022de:	f043 030b 	orr.w	r3, r3, #11
 80022e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002308:	461a      	mov	r2, r3
 800230a:	f003 fc7b 	bl	8005c04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800231c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fbaa 	bl	8005a7c <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	d124      	bne.n	800237e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fc40 	bl	8005bbe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fbf5 	bl	8004b32 <USB_GetDevSpeed>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681c      	ldr	r4, [r3, #0]
 8002354:	f001 f9e8 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8002358:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	4620      	mov	r0, r4
 8002364:	f002 f8f4 	bl	8004550 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f005 fee8 	bl	800813e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800237c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fb7a 	bl	8005a7c <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b08      	cmp	r3, #8
 8002390:	d10a      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f005 fec5 	bl	8008122 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f002 0208 	and.w	r2, r2, #8
 80023a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fb65 	bl	8005a7c <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d122      	bne.n	8002402 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c8:	2301      	movs	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	e014      	b.n	80023f8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fb27 	bl	8002a40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3e5      	bcc.n	80023ce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fb38 	bl	8005a7c <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002416:	d13b      	bne.n	8002490 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002418:	2301      	movs	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
 800241c:	e02b      	b.n	8002476 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	3340      	adds	r3, #64	; 0x40
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d115      	bne.n	8002470 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002444:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002446:	2b00      	cmp	r3, #0
 8002448:	da12      	bge.n	8002470 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	333f      	adds	r3, #63	; 0x3f
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fae8 	bl	8002a40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3301      	adds	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	429a      	cmp	r2, r3
 800247e:	d3ce      	bcc.n	800241e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 faf1 	bl	8005a7c <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024a4:	d155      	bne.n	8002552 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a6:	2301      	movs	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	e045      	b.n	8002538 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d12e      	bne.n	8002532 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da2b      	bge.n	8002532 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80024e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d121      	bne.n	8002532 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252e:	6053      	str	r3, [r2, #4]
            break;
 8002530:	e007      	b.n	8002542 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	429a      	cmp	r2, r3
 8002540:	d3b4      	bcc.n	80024ac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fa90 	bl	8005a7c <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002566:	d10a      	bne.n	800257e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f005 fe5f 	bl	800822c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800257c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fa7a 	bl	8005a7c <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d115      	bne.n	80025be <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f005 fe4f 	bl	8008248 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e000      	b.n	80025be <HAL_PCD_IRQHandler+0x938>
      return;
 80025bc:	bf00      	nop
    }
  }
}
 80025be:	3734      	adds	r7, #52	; 0x34
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}

080025c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_PCD_SetAddress+0x1a>
 80025da:	2302      	movs	r3, #2
 80025dc:	e013      	b.n	8002606 <HAL_PCD_SetAddress+0x42>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 f9d8 	bl	80059ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	4608      	mov	r0, r1
 8002618:	4611      	mov	r1, r2
 800261a:	461a      	mov	r2, r3
 800261c:	4603      	mov	r3, r0
 800261e:	70fb      	strb	r3, [r7, #3]
 8002620:	460b      	mov	r3, r1
 8002622:	803b      	strh	r3, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800262c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002630:	2b00      	cmp	r3, #0
 8002632:	da0f      	bge.n	8002654 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	3338      	adds	r3, #56	; 0x38
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	705a      	strb	r2, [r3, #1]
 8002652:	e00f      	b.n	8002674 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	3304      	adds	r3, #4
 800266c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002680:	883a      	ldrh	r2, [r7, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	78ba      	ldrb	r2, [r7, #2]
 800268a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800269e:	78bb      	ldrb	r3, [r7, #2]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_PCD_EP_Open+0xaa>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e00e      	b.n	80026d6 <HAL_PCD_EP_Open+0xc8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fa58 	bl	8004b7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026d4:	7afb      	ldrb	r3, [r7, #11]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	da0f      	bge.n	8002712 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	3338      	adds	r3, #56	; 0x38
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	705a      	strb	r2, [r3, #1]
 8002710:	e00f      	b.n	8002732 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_PCD_EP_Close+0x6e>
 8002748:	2302      	movs	r3, #2
 800274a:	e00e      	b.n	800276a <HAL_PCD_EP_Close+0x8c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fa96 	bl	8004c8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	460b      	mov	r3, r1
 8002780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ce:	7afb      	ldrb	r3, [r7, #11]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	6979      	ldr	r1, [r7, #20]
 80027e6:	f002 fd75 	bl	80052d4 <USB_EP0StartXfer>
 80027ea:	e008      	b.n	80027fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6979      	ldr	r1, [r7, #20]
 80027fa:	f002 fb23 	bl	8004e44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	460b      	mov	r3, r1
 8002846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	3338      	adds	r3, #56	; 0x38
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	b2da      	uxtb	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	f002 fd13 	bl	80052d4 <USB_EP0StartXfer>
 80028ae:	e008      	b.n	80028c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6979      	ldr	r1, [r7, #20]
 80028be:	f002 fac1 	bl	8004e44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d901      	bls.n	80028ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e050      	b.n	800298c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da0f      	bge.n	8002912 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	3338      	adds	r3, #56	; 0x38
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	705a      	strb	r2, [r3, #1]
 8002910:	e00d      	b.n	800292e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_PCD_EP_SetStall+0x82>
 800294a:	2302      	movs	r3, #2
 800294c:	e01e      	b.n	800298c <HAL_PCD_EP_SetStall+0xc0>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	4618      	mov	r0, r3
 800295e:	f002 ff51 	bl	8005804 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2d9      	uxtb	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800297c:	461a      	mov	r2, r3
 800297e:	f003 f941 	bl	8005c04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d901      	bls.n	80029b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e042      	b.n	8002a38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0f      	bge.n	80029da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3338      	adds	r3, #56	; 0x38
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
 80029d8:	e00f      	b.n	80029fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_PCD_EP_ClrStall+0x86>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e00e      	b.n	8002a38 <HAL_PCD_EP_ClrStall+0xa4>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 ff59 	bl	80058e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da0c      	bge.n	8002a6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 020f 	and.w	r2, r3, #15
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	3338      	adds	r3, #56	; 0x38
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e00c      	b.n	8002a88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 020f 	and.w	r2, r3, #15
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fd78 	bl	8005584 <USB_EPStopXfer>
 8002a94:	4603      	mov	r3, r0
 8002a96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08a      	sub	sp, #40	; 0x28
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	3338      	adds	r3, #56	; 0x38
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d901      	bls.n	8002ada <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06c      	b.n	8002bb4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d902      	bls.n	8002af6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3303      	adds	r3, #3
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002afe:	e02b      	b.n	8002b58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d902      	bls.n	8002b1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	3303      	adds	r3, #3
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4603      	mov	r3, r0
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f002 fdcc 	bl	80056d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	441a      	add	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d809      	bhi.n	8002b82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d203      	bcs.n	8002b82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1be      	bne.n	8002b00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d811      	bhi.n	8002bb2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	2201      	movs	r2, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	6939      	ldr	r1, [r7, #16]
 8002baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bae:	4013      	ands	r3, r2
 8002bb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	333c      	adds	r3, #60	; 0x3c
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d17b      	bne.n	8002cea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	f240 80b9 	bls.w	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80b3 	beq.w	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c24:	6093      	str	r3, [r2, #8]
 8002c26:	e0a7      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2320      	movs	r3, #32
 8002c42:	6093      	str	r3, [r2, #8]
 8002c44:	e098      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 8093 	bne.w	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d90f      	bls.n	8002c7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	461a      	mov	r2, r3
 8002c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c76:	6093      	str	r3, [r2, #8]
 8002c78:	e07e      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	0159      	lsls	r1, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d114      	bne.n	8002cdc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	f002 ff9c 	bl	8005c04 <USB_EP0_OutStart>
 8002ccc:	e006      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	441a      	add	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f005 f9e8 	bl	80080b8 <HAL_PCD_DataOutStageCallback>
 8002ce8:	e046      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d124      	bne.n	8002d3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0e:	6093      	str	r3, [r2, #8]
 8002d10:	e032      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f005 f9bf 	bl	80080b8 <HAL_PCD_DataOutStageCallback>
 8002d3a:	e01d      	b.n	8002d78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d114      	bne.n	8002d6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d64:	461a      	mov	r2, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	f002 ff4c 	bl	8005c04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f005 f9a0 	bl	80080b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	4f54300a 	.word	0x4f54300a
 8002d88:	4f54310a 	.word	0x4f54310a

08002d8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	333c      	adds	r3, #60	; 0x3c
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d90e      	bls.n	8002de0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f005 f957 	bl	8008094 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d90c      	bls.n	8002e08 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d108      	bne.n	8002e08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e00:	461a      	mov	r2, r3
 8002e02:	2101      	movs	r1, #1
 8002e04:	f002 fefe 	bl	8005c04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	4f54300a 	.word	0x4f54300a

08002e18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
 8002e24:	4613      	mov	r3, r2
 8002e26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d107      	bne.n	8002e46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e36:	883b      	ldrh	r3, [r7, #0]
 8002e38:	0419      	lsls	r1, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
 8002e44:	e028      	b.n	8002e98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e00d      	b.n	8002e76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	3340      	adds	r3, #64	; 0x40
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3301      	adds	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3ec      	bcc.n	8002e5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e80:	883b      	ldrh	r3, [r7, #0]
 8002e82:	0418      	lsls	r0, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	4302      	orrs	r2, r0
 8002e90:	3340      	adds	r3, #64	; 0x40
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e267      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d075      	beq.n	8002fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0a:	4b85      	ldr	r3, [pc, #532]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e242      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x74>
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6f      	ldr	r2, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6c      	ldr	r2, [pc, #432]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f78:	4b69      	ldr	r3, [pc, #420]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a68      	ldr	r2, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b66      	ldr	r3, [pc, #408]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fd ffd4 	bl	8000f44 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fd ffd0 	bl	8000f44 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e207      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fd ffc0 	bl	8000f44 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fd ffbc 	bl	8000f44 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1f3      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b51      	ldr	r3, [pc, #324]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1c7      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x244>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd ff75 	bl	8000f44 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fd ff71 	bl	8000f44 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1a8      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4925      	ldr	r1, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x244>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fd ff54 	bl	8000f44 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fd ff50 	bl	8000f44 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e187      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d036      	beq.n	8003138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x248>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fd ff34 	bl	8000f44 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fd ff30 	bl	8000f44 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e167      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x240>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x200>
 80030fe:	e01b      	b.n	8003138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_OscConfig+0x248>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fd ff1d 	bl	8000f44 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e00e      	b.n	800312c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fd ff19 	bl	8000f44 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d907      	bls.n	800312c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e150      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
 8003120:	40023800 	.word	0x40023800
 8003124:	42470000 	.word	0x42470000
 8003128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ea      	bne.n	800310e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8097 	beq.w	8003274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b81      	ldr	r3, [pc, #516]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b7d      	ldr	r3, [pc, #500]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a7c      	ldr	r2, [pc, #496]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b7a      	ldr	r3, [pc, #488]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b77      	ldr	r3, [pc, #476]	; (8003354 <HAL_RCC_OscConfig+0x474>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d118      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b74      	ldr	r3, [pc, #464]	; (8003354 <HAL_RCC_OscConfig+0x474>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a73      	ldr	r2, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x474>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fd fed9 	bl	8000f44 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003196:	f7fd fed5 	bl	8000f44 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e10c      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x474>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x2ea>
 80031bc:	4b64      	ldr	r3, [pc, #400]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	e01c      	b.n	8003204 <HAL_RCC_OscConfig+0x324>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x30c>
 80031d2:	4b5f      	ldr	r3, [pc, #380]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a5e      	ldr	r2, [pc, #376]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x324>
 80031ec:	4b58      	ldr	r3, [pc, #352]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a57      	ldr	r2, [pc, #348]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	4b55      	ldr	r3, [pc, #340]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a54      	ldr	r2, [pc, #336]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fd fe9a 	bl	8000f44 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd fe96 	bl	8000f44 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0cb      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	4b49      	ldr	r3, [pc, #292]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ee      	beq.n	8003214 <HAL_RCC_OscConfig+0x334>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fd fe84 	bl	8000f44 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fd fe80 	bl	8000f44 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0b5      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ee      	bne.n	8003240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a1 	beq.w	80033c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b08      	cmp	r3, #8
 8003288:	d05c      	beq.n	8003344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d141      	bne.n	8003316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCC_OscConfig+0x478>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fd fe54 	bl	8000f44 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd fe50 	bl	8000f44 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e087      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	3b01      	subs	r3, #1
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	491b      	ldr	r1, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x478>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fd fe29 	bl	8000f44 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fd fe25 	bl	8000f44 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e05c      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x416>
 8003314:	e054      	b.n	80033c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_RCC_OscConfig+0x478>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fd fe12 	bl	8000f44 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fd fe0e 	bl	8000f44 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e045      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_OscConfig+0x470>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x444>
 8003342:	e03d      	b.n	80033c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e038      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
 8003350:	40023800 	.word	0x40023800
 8003354:	40007000 	.word	0x40007000
 8003358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d028      	beq.n	80033bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d121      	bne.n	80033bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d11a      	bne.n	80033bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003394:	4293      	cmp	r3, r2
 8003396:	d111      	bne.n	80033bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	3b01      	subs	r3, #1
 80033a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0cc      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d90c      	bls.n	800340c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d044      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d119      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d003      	beq.n	800348e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	2b03      	cmp	r3, #3
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e067      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4934      	ldr	r1, [pc, #208]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fd fd40 	bl	8000f44 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fd fd3c 	bl	8000f44 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e04f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d20c      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fca0 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	080086b8 	.word	0x080086b8
 8003594:	20000000 	.word	0x20000000
 8003598:	20000004 	.word	0x20000004

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a0:	b090      	sub	sp, #64	; 0x40
 80035a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ac:	2300      	movs	r3, #0
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d00d      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x40>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	f200 80a1 	bhi.w	8003708 <HAL_RCC_GetSysClockFreq+0x16c>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ce:	e09b      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_GetSysClockFreq+0x184>)
 80035d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035d4:	e09b      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d6:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035da:	e098      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e6:	4b4d      	ldr	r3, [pc, #308]	; (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d028      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	2200      	movs	r2, #0
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	627a      	str	r2, [r7, #36]	; 0x24
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003604:	2100      	movs	r1, #0
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_GetSysClockFreq+0x188>)
 8003608:	fb03 f201 	mul.w	r2, r3, r1
 800360c:	2300      	movs	r3, #0
 800360e:	fb00 f303 	mul.w	r3, r0, r3
 8003612:	4413      	add	r3, r2
 8003614:	4a43      	ldr	r2, [pc, #268]	; (8003724 <HAL_RCC_GetSysClockFreq+0x188>)
 8003616:	fba0 1202 	umull	r1, r2, r0, r2
 800361a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800361c:	460a      	mov	r2, r1
 800361e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003622:	4413      	add	r3, r2
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	2200      	movs	r2, #0
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003636:	f7fc fdcf 	bl	80001d8 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4613      	mov	r3, r2
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003642:	e053      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003644:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	2200      	movs	r2, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	617a      	str	r2, [r7, #20]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003656:	f04f 0b00 	mov.w	fp, #0
 800365a:	4652      	mov	r2, sl
 800365c:	465b      	mov	r3, fp
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	ebb2 080a 	subs.w	r8, r2, sl
 8003676:	eb63 090b 	sbc.w	r9, r3, fp
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003686:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800368a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800368e:	ebb2 0408 	subs.w	r4, r2, r8
 8003692:	eb63 0509 	sbc.w	r5, r3, r9
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	00eb      	lsls	r3, r5, #3
 80036a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a4:	00e2      	lsls	r2, r4, #3
 80036a6:	4614      	mov	r4, r2
 80036a8:	461d      	mov	r5, r3
 80036aa:	eb14 030a 	adds.w	r3, r4, sl
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	eb45 030b 	adc.w	r3, r5, fp
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c2:	4629      	mov	r1, r5
 80036c4:	028b      	lsls	r3, r1, #10
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036cc:	4621      	mov	r1, r4
 80036ce:	028a      	lsls	r2, r1, #10
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	2200      	movs	r2, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e0:	f7fc fd7a 	bl	80001d8 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003706:	e002      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetSysClockFreq+0x184>)
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800370c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003710:	4618      	mov	r0, r3
 8003712:	3740      	adds	r7, #64	; 0x40
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	00f42400 	.word	0x00f42400
 8003724:	00b71b00 	.word	0x00b71b00

08003728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_GetHCLKFreq+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000000 	.word	0x20000000

08003740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07b      	b.n	800384a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003762:	d009      	beq.n	8003778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	61da      	str	r2, [r3, #28]
 800376a:	e005      	b.n	8003778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f9ee 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0104 	and.w	r1, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0210 	and.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e041      	b.n	80038e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd fa31 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 fac1 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e041      	b.n	8003986 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f839 	bl	800398e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 fa72 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start+0x24>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e022      	b.n	8003a0e <HAL_TIM_PWM_Start+0x6a>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d109      	bne.n	80039e2 <HAL_TIM_PWM_Start+0x3e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	bf14      	ite	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	2300      	moveq	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e015      	b.n	8003a0e <HAL_TIM_PWM_Start+0x6a>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d109      	bne.n	80039fc <HAL_TIM_PWM_Start+0x58>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e008      	b.n	8003a0e <HAL_TIM_PWM_Start+0x6a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e068      	b.n	8003ae8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_PWM_Start+0x82>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a24:	e013      	b.n	8003a4e <HAL_TIM_PWM_Start+0xaa>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_PWM_Start+0x92>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a34:	e00b      	b.n	8003a4e <HAL_TIM_PWM_Start+0xaa>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d104      	bne.n	8003a46 <HAL_TIM_PWM_Start+0xa2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a44:	e003      	b.n	8003a4e <HAL_TIM_PWM_Start+0xaa>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2201      	movs	r2, #1
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fc84 	bl	8004364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a23      	ldr	r2, [pc, #140]	; (8003af0 <HAL_TIM_PWM_Start+0x14c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_TIM_PWM_Start+0x14c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x10e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d013      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x10e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_TIM_PWM_Start+0x150>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x10e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <HAL_TIM_PWM_Start+0x154>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x10e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_TIM_PWM_Start+0x158>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x10e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_TIM_PWM_Start+0x15c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d111      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d010      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	e007      	b.n	8003ae6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40014000 	.word	0x40014000

08003b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0ae      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	f200 809f 	bhi.w	8003c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003c71 	.word	0x08003c71
 8003b40:	08003c71 	.word	0x08003c71
 8003b44:	08003c71 	.word	0x08003c71
 8003b48:	08003bad 	.word	0x08003bad
 8003b4c:	08003c71 	.word	0x08003c71
 8003b50:	08003c71 	.word	0x08003c71
 8003b54:	08003c71 	.word	0x08003c71
 8003b58:	08003bef 	.word	0x08003bef
 8003b5c:	08003c71 	.word	0x08003c71
 8003b60:	08003c71 	.word	0x08003c71
 8003b64:	08003c71 	.word	0x08003c71
 8003b68:	08003c2f 	.word	0x08003c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f9d0 	bl	8003f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	619a      	str	r2, [r3, #24]
      break;
 8003baa:	e064      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa16 	bl	8003fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]
      break;
 8003bec:	e043      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fa61 	bl	80040bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0208 	orr.w	r2, r2, #8
 8003c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0204 	bic.w	r2, r2, #4
 8003c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	61da      	str	r2, [r3, #28]
      break;
 8003c2c:	e023      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 faab 	bl	8004190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69d9      	ldr	r1, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	021a      	lsls	r2, r3, #8
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	61da      	str	r2, [r3, #28]
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0b4      	b.n	8003e0e <HAL_TIM_ConfigClockSource+0x186>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cdc:	d03e      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xd4>
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	f200 8087 	bhi.w	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_TIM_ConfigClockSource+0x172>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	d87f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b70      	cmp	r3, #112	; 0x70
 8003cf6:	d01a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xa6>
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d87b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b60      	cmp	r3, #96	; 0x60
 8003cfe:	d050      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d877      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b50      	cmp	r3, #80	; 0x50
 8003d06:	d03c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xfa>
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d873      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d058      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d86f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d064      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d86b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d060      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d867      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d05c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d05a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	e062      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f000 faf1 	bl	8004324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e04f      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f000 fada 	bl	8004324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7e:	609a      	str	r2, [r3, #8]
      break;
 8003d80:	e03c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 fa4e 	bl	8004230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2150      	movs	r1, #80	; 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 faa7 	bl	80042ee <TIM_ITRx_SetConfig>
      break;
 8003da0:	e02c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fa6d 	bl	800428e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2160      	movs	r1, #96	; 0x60
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fa97 	bl	80042ee <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 fa2e 	bl	8004230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2140      	movs	r1, #64	; 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fa87 	bl	80042ee <TIM_ITRx_SetConfig>
      break;
 8003de0:	e00c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 fa7e 	bl	80042ee <TIM_ITRx_SetConfig>
      break;
 8003df2:	e003      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e000      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a34      	ldr	r2, [pc, #208]	; (8003efc <TIM_Base_SetConfig+0xe4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x38>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a31      	ldr	r2, [pc, #196]	; (8003f00 <TIM_Base_SetConfig+0xe8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x38>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a30      	ldr	r2, [pc, #192]	; (8003f04 <TIM_Base_SetConfig+0xec>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x38>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <TIM_Base_SetConfig+0xf0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a25      	ldr	r2, [pc, #148]	; (8003efc <TIM_Base_SetConfig+0xe4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01b      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d017      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <TIM_Base_SetConfig+0xe8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <TIM_Base_SetConfig+0xec>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00f      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <TIM_Base_SetConfig+0xf0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a1f      	ldr	r2, [pc, #124]	; (8003f0c <TIM_Base_SetConfig+0xf4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <TIM_Base_SetConfig+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <TIM_Base_SetConfig+0xfc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d108      	bne.n	8003eb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <TIM_Base_SetConfig+0xe4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d103      	bne.n	8003ee8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	615a      	str	r2, [r3, #20]
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800

08003f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 0302 	bic.w	r3, r3, #2
 8003f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <TIM_OC1_SetConfig+0xc8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10c      	bne.n	8003f8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0308 	bic.w	r3, r3, #8
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <TIM_OC1_SetConfig+0xc8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d111      	bne.n	8003fba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40010000 	.word	0x40010000

08003fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0320 	bic.w	r3, r3, #32
 800402e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <TIM_OC2_SetConfig+0xd4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10d      	bne.n	8004060 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <TIM_OC2_SetConfig+0xd4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d113      	bne.n	8004090 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800406e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000

080040bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <TIM_OC3_SetConfig+0xd0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10d      	bne.n	8004136 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <TIM_OC3_SetConfig+0xd0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d113      	bne.n	8004166 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800414c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40010000 	.word	0x40010000

08004190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	031b      	lsls	r3, r3, #12
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <TIM_OC4_SetConfig+0x9c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d109      	bne.n	8004204 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	019b      	lsls	r3, r3, #6
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000

08004230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f023 0201 	bic.w	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f023 030a 	bic.w	r3, r3, #10
 800426c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428e:	b480      	push	{r7}
 8004290:	b087      	sub	sp, #28
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f023 0210 	bic.w	r2, r3, #16
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	031b      	lsls	r3, r3, #12
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	f043 0307 	orr.w	r3, r3, #7
 8004310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	609a      	str	r2, [r3, #8]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800433e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	431a      	orrs	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4313      	orrs	r3, r2
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2201      	movs	r2, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	43db      	mvns	r3, r3
 8004386:	401a      	ands	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	431a      	orrs	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e050      	b.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d013      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10c      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40014000 	.word	0x40014000

0800448c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800448c:	b084      	sub	sp, #16
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	f107 001c 	add.w	r0, r7, #28
 800449a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d122      	bne.n	80044ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fbee 	bl	8005cc0 <USB_CoreReset>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]
 80044e8:	e01a      	b.n	8004520 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f001 fbe2 	bl	8005cc0 <USB_CoreReset>
 80044fc:	4603      	mov	r3, r0
 80044fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
 8004512:	e005      	b.n	8004520 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10b      	bne.n	800453e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f043 0206 	orr.w	r2, r3, #6
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800454a:	b004      	add	sp, #16
 800454c:	4770      	bx	lr
	...

08004550 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d165      	bne.n	8004630 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4a41      	ldr	r2, [pc, #260]	; (800466c <USB_SetTurnaroundTime+0x11c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d906      	bls.n	800457a <USB_SetTurnaroundTime+0x2a>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4a40      	ldr	r2, [pc, #256]	; (8004670 <USB_SetTurnaroundTime+0x120>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d202      	bcs.n	800457a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004574:	230f      	movs	r3, #15
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e062      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <USB_SetTurnaroundTime+0x120>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d306      	bcc.n	8004590 <USB_SetTurnaroundTime+0x40>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <USB_SetTurnaroundTime+0x124>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d202      	bcs.n	8004590 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800458a:	230e      	movs	r3, #14
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e057      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4a38      	ldr	r2, [pc, #224]	; (8004674 <USB_SetTurnaroundTime+0x124>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d306      	bcc.n	80045a6 <USB_SetTurnaroundTime+0x56>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a37      	ldr	r2, [pc, #220]	; (8004678 <USB_SetTurnaroundTime+0x128>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d202      	bcs.n	80045a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045a0:	230d      	movs	r3, #13
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e04c      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a33      	ldr	r2, [pc, #204]	; (8004678 <USB_SetTurnaroundTime+0x128>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d306      	bcc.n	80045bc <USB_SetTurnaroundTime+0x6c>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4a32      	ldr	r2, [pc, #200]	; (800467c <USB_SetTurnaroundTime+0x12c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d802      	bhi.n	80045bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045b6:	230c      	movs	r3, #12
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e041      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a2f      	ldr	r2, [pc, #188]	; (800467c <USB_SetTurnaroundTime+0x12c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d906      	bls.n	80045d2 <USB_SetTurnaroundTime+0x82>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a2e      	ldr	r2, [pc, #184]	; (8004680 <USB_SetTurnaroundTime+0x130>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d802      	bhi.n	80045d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045cc:	230b      	movs	r3, #11
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e036      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <USB_SetTurnaroundTime+0x130>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d906      	bls.n	80045e8 <USB_SetTurnaroundTime+0x98>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a29      	ldr	r2, [pc, #164]	; (8004684 <USB_SetTurnaroundTime+0x134>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d802      	bhi.n	80045e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045e2:	230a      	movs	r3, #10
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e02b      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a26      	ldr	r2, [pc, #152]	; (8004684 <USB_SetTurnaroundTime+0x134>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d906      	bls.n	80045fe <USB_SetTurnaroundTime+0xae>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a25      	ldr	r2, [pc, #148]	; (8004688 <USB_SetTurnaroundTime+0x138>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d202      	bcs.n	80045fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045f8:	2309      	movs	r3, #9
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e020      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a21      	ldr	r2, [pc, #132]	; (8004688 <USB_SetTurnaroundTime+0x138>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d306      	bcc.n	8004614 <USB_SetTurnaroundTime+0xc4>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <USB_SetTurnaroundTime+0x13c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d802      	bhi.n	8004614 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800460e:	2308      	movs	r3, #8
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e015      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <USB_SetTurnaroundTime+0x13c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d906      	bls.n	800462a <USB_SetTurnaroundTime+0xda>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <USB_SetTurnaroundTime+0x140>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d202      	bcs.n	800462a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004624:	2307      	movs	r3, #7
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e00a      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800462a:	2306      	movs	r3, #6
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e007      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004636:	2309      	movs	r3, #9
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e001      	b.n	8004640 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800463c:	2309      	movs	r3, #9
 800463e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	00d8acbf 	.word	0x00d8acbf
 8004670:	00e4e1c0 	.word	0x00e4e1c0
 8004674:	00f42400 	.word	0x00f42400
 8004678:	01067380 	.word	0x01067380
 800467c:	011a499f 	.word	0x011a499f
 8004680:	01312cff 	.word	0x01312cff
 8004684:	014ca43f 	.word	0x014ca43f
 8004688:	016e3600 	.word	0x016e3600
 800468c:	01a6ab1f 	.word	0x01a6ab1f
 8004690:	01e84800 	.word	0x01e84800

08004694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f043 0201 	orr.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 0201 	bic.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d115      	bne.n	8004726 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004706:	2001      	movs	r0, #1
 8004708:	f7fc fc28 	bl	8000f5c <HAL_Delay>
      ms++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fa45 	bl	8005ba2 <USB_GetMode>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d01e      	beq.n	800475c <USB_SetCurrentMode+0x84>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b31      	cmp	r3, #49	; 0x31
 8004722:	d9f0      	bls.n	8004706 <USB_SetCurrentMode+0x2e>
 8004724:	e01a      	b.n	800475c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d115      	bne.n	8004758 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004738:	2001      	movs	r0, #1
 800473a:	f7fc fc0f 	bl	8000f5c <HAL_Delay>
      ms++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 fa2c 	bl	8005ba2 <USB_GetMode>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <USB_SetCurrentMode+0x84>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b31      	cmp	r3, #49	; 0x31
 8004754:	d9f0      	bls.n	8004738 <USB_SetCurrentMode+0x60>
 8004756:	e001      	b.n	800475c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e005      	b.n	8004768 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b32      	cmp	r3, #50	; 0x32
 8004760:	d101      	bne.n	8004766 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004770:	b084      	sub	sp, #16
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800477e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e009      	b.n	80047a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3340      	adds	r3, #64	; 0x40
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	2200      	movs	r2, #0
 800479c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3301      	adds	r3, #1
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0e      	cmp	r3, #14
 80047a8:	d9f2      	bls.n	8004790 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11c      	bne.n	80047ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
 80047e8:	e00b      	b.n	8004802 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004808:	461a      	mov	r2, r3
 800480a:	2300      	movs	r3, #0
 800480c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	4619      	mov	r1, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	461a      	mov	r2, r3
 800481e:	680b      	ldr	r3, [r1, #0]
 8004820:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	2b01      	cmp	r3, #1
 8004826:	d10c      	bne.n	8004842 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800482e:	2100      	movs	r1, #0
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f965 	bl	8004b00 <USB_SetDevSpeed>
 8004836:	e008      	b.n	800484a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004838:	2101      	movs	r1, #1
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f960 	bl	8004b00 <USB_SetDevSpeed>
 8004840:	e003      	b.n	800484a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004842:	2103      	movs	r1, #3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f95b 	bl	8004b00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800484a:	2110      	movs	r1, #16
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f8f3 	bl	8004a38 <USB_FlushTxFifo>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f91f 	bl	8004aa0 <USB_FlushRxFifo>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	461a      	mov	r2, r3
 8004880:	2300      	movs	r3, #0
 8004882:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e043      	b.n	800491e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ac:	d118      	bne.n	80048e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	461a      	mov	r2, r3
 80048c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e013      	b.n	80048f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	461a      	mov	r2, r3
 80048d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e008      	b.n	80048f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	461a      	mov	r2, r3
 80048ee:	2300      	movs	r3, #0
 80048f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	461a      	mov	r2, r3
 8004912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004916:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3301      	adds	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3b7      	bcc.n	8004896 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e043      	b.n	80049b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004942:	d118      	bne.n	8004976 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	461a      	mov	r2, r3
 8004958:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e013      	b.n	8004988 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	e008      	b.n	8004988 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3b7      	bcc.n	800492c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f043 0210 	orr.w	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <USB_DevInit+0x2c4>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f043 0208 	orr.w	r2, r3, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d107      	bne.n	8004a24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a1c:	f043 0304 	orr.w	r3, r3, #4
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a30:	b004      	add	sp, #16
 8004a32:	4770      	bx	lr
 8004a34:	803c3800 	.word	0x803c3800

08004a38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <USB_FlushTxFifo+0x64>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e01b      	b.n	8004a90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	daf2      	bge.n	8004a46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	019b      	lsls	r3, r3, #6
 8004a68:	f043 0220 	orr.w	r2, r3, #32
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <USB_FlushTxFifo+0x64>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e006      	b.n	8004a90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d0f0      	beq.n	8004a70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	00030d40 	.word	0x00030d40

08004aa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <USB_FlushRxFifo+0x5c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e018      	b.n	8004af0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	daf2      	bge.n	8004aac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2210      	movs	r2, #16
 8004ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <USB_FlushRxFifo+0x5c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e006      	b.n	8004af0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d0f0      	beq.n	8004ad0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	00030d40 	.word	0x00030d40

08004b00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	68f9      	ldr	r1, [r7, #12]
 8004b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b087      	sub	sp, #28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0306 	and.w	r3, r3, #6
 8004b4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]
 8004b56:	e00a      	b.n	8004b6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d002      	beq.n	8004b64 <USB_GetDevSpeed+0x32>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b06      	cmp	r3, #6
 8004b62:	d102      	bne.n	8004b6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b64:	2302      	movs	r3, #2
 8004b66:	75fb      	strb	r3, [r7, #23]
 8004b68:	e001      	b.n	8004b6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b6a:	230f      	movs	r3, #15
 8004b6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d13a      	bne.n	8004c0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	2101      	movs	r1, #1
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d155      	bne.n	8004c7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	791b      	ldrb	r3, [r3, #4]
 8004bea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	059b      	lsls	r3, r3, #22
 8004bf2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e036      	b.n	8004c7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	68f9      	ldr	r1, [r7, #12]
 8004c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d11a      	bne.n	8004c7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	791b      	ldrb	r3, [r3, #4]
 8004c60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c62:	430b      	orrs	r3, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d161      	bne.n	8004d6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cbe:	d11f      	bne.n	8004d00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	2101      	movs	r1, #1
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d20:	4013      	ands	r3, r2
 8004d22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d44:	4013      	ands	r3, r2
 8004d46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0159      	lsls	r1, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	440b      	add	r3, r1
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	4619      	mov	r1, r3
 8004d64:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <USB_DeactivateEndpoint+0x1b0>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
 8004d6a:	e060      	b.n	8004e2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d82:	d11f      	bne.n	8004dc4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de4:	4013      	ands	r3, r2
 8004de6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	43db      	mvns	r3, r3
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	4619      	mov	r1, r3
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <USB_DeactivateEndpoint+0x1b4>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	ec337800 	.word	0xec337800
 8004e40:	eff37800 	.word	0xeff37800

08004e44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 815c 	bne.w	800511e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d132      	bne.n	8004ed4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	0cdb      	lsrs	r3, r3, #19
 8004ece:	04db      	lsls	r3, r3, #19
 8004ed0:	6113      	str	r3, [r2, #16]
 8004ed2:	e074      	b.n	8004fbe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eee:	0cdb      	lsrs	r3, r3, #19
 8004ef0:	04db      	lsls	r3, r3, #19
 8004ef2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	440b      	add	r3, r1
 8004f30:	1e59      	subs	r1, r3, #1
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f3a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f3c:	4b9d      	ldr	r3, [pc, #628]	; (80051b4 <USB_EPStartXfer+0x370>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	0148      	lsls	r0, r1, #5
 8004f44:	69f9      	ldr	r1, [r7, #28]
 8004f46:	4401      	add	r1, r0
 8004f48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f66:	69b9      	ldr	r1, [r7, #24]
 8004f68:	0148      	lsls	r0, r1, #5
 8004f6a:	69f9      	ldr	r1, [r7, #28]
 8004f6c:	4401      	add	r1, r0
 8004f6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f72:	4313      	orrs	r3, r2
 8004f74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	791b      	ldrb	r3, [r3, #4]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d11f      	bne.n	8004fbe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fbc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d14b      	bne.n	800505c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d128      	bne.n	800503a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	440a      	add	r2, r1
 800500e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e00f      	b.n	800503a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005038:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e133      	b.n	80052c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005076:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800507a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	791b      	ldrb	r3, [r3, #4]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d015      	beq.n	80050b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 811b 	beq.w	80052c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	2101      	movs	r1, #1
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	69f9      	ldr	r1, [r7, #28]
 80050a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050aa:	4313      	orrs	r3, r2
 80050ac:	634b      	str	r3, [r1, #52]	; 0x34
 80050ae:	e109      	b.n	80052c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d110      	bne.n	80050e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	e00f      	b.n	8005102 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005100:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6919      	ldr	r1, [r3, #16]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	b298      	uxth	r0, r3
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	4603      	mov	r3, r0
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fade 	bl	80056d8 <USB_WritePacket>
 800511c:	e0d2      	b.n	80052c4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005138:	0cdb      	lsrs	r3, r3, #19
 800513a:	04db      	lsls	r3, r3, #19
 800513c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005158:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800515c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005160:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d126      	bne.n	80051b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005180:	69b9      	ldr	r1, [r7, #24]
 8005182:	0148      	lsls	r0, r1, #5
 8005184:	69f9      	ldr	r1, [r7, #28]
 8005186:	4401      	add	r1, r0
 8005188:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800518c:	4313      	orrs	r3, r2
 800518e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ae:	6113      	str	r3, [r2, #16]
 80051b0:	e03a      	b.n	8005228 <USB_EPStartXfer+0x3e4>
 80051b2:	bf00      	nop
 80051b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	8afa      	ldrh	r2, [r7, #22]
 80051d4:	fb03 f202 	mul.w	r2, r3, r2
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	8afb      	ldrh	r3, [r7, #22]
 80051ec:	04d9      	lsls	r1, r3, #19
 80051ee:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <USB_EPStartXfer+0x48c>)
 80051f0:	400b      	ands	r3, r1
 80051f2:	69b9      	ldr	r1, [r7, #24]
 80051f4:	0148      	lsls	r0, r1, #5
 80051f6:	69f9      	ldr	r1, [r7, #28]
 80051f8:	4401      	add	r1, r0
 80051fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	69f9      	ldr	r1, [r7, #28]
 800521e:	4401      	add	r1, r0
 8005220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10d      	bne.n	800524a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6919      	ldr	r1, [r3, #16]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	460a      	mov	r2, r1
 8005248:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	791b      	ldrb	r3, [r3, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d128      	bne.n	80052a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d110      	bne.n	8005284 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e00f      	b.n	80052a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	1ff80000 	.word	0x1ff80000

080052d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 80ce 	bne.w	8005492 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	0cdb      	lsrs	r3, r3, #19
 800535e:	04db      	lsls	r3, r3, #19
 8005360:	6113      	str	r3, [r2, #16]
 8005362:	e04e      	b.n	8005402 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	0cdb      	lsrs	r3, r3, #19
 8005380:	04db      	lsls	r3, r3, #19
 8005382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11e      	bne.n	8005446 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e097      	b.n	8005576 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005464:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8083 	beq.w	8005576 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548c:	4313      	orrs	r3, r2
 800548e:	634b      	str	r3, [r1, #52]	; 0x34
 8005490:	e071      	b.n	8005576 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	0cdb      	lsrs	r3, r3, #19
 80054ae:	04db      	lsls	r3, r3, #19
 80054b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800550c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005524:	6939      	ldr	r1, [r7, #16]
 8005526:	0148      	lsls	r0, r1, #5
 8005528:	6979      	ldr	r1, [r7, #20]
 800552a:	4401      	add	r1, r0
 800552c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005530:	4313      	orrs	r3, r2
 8005532:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10d      	bne.n	8005556 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	460a      	mov	r2, r1
 8005554:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005574:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d14a      	bne.n	8005638 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ba:	f040 8086 	bne.w	80056ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005604:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005612:	4293      	cmp	r3, r2
 8005614:	d902      	bls.n	800561c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
          break;
 800561a:	e056      	b.n	80056ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005634:	d0e7      	beq.n	8005606 <USB_EPStopXfer+0x82>
 8005636:	e048      	b.n	80056ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005650:	d13b      	bne.n	80056ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005674:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005698:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d902      	bls.n	80056b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
          break;
 80056ae:	e00c      	b.n	80056ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c8:	d0e7      	beq.n	800569a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	460b      	mov	r3, r1
 80056e8:	71fb      	strb	r3, [r7, #7]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d123      	bne.n	8005746 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056fe:	88bb      	ldrh	r3, [r7, #4]
 8005700:	3303      	adds	r3, #3
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e018      	b.n	800573e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	031a      	lsls	r2, r3, #12
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005718:	461a      	mov	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	3301      	adds	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3301      	adds	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	3301      	adds	r3, #1
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d3e2      	bcc.n	800570c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3724      	adds	r7, #36	; 0x24
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005754:	b480      	push	{r7}
 8005756:	b08b      	sub	sp, #44	; 0x2c
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	b29b      	uxth	r3, r3
 8005770:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	e014      	b.n	80057aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	601a      	str	r2, [r3, #0]
    pDest++;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	3301      	adds	r3, #1
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	3301      	adds	r3, #1
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	3301      	adds	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	3301      	adds	r3, #1
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	3301      	adds	r3, #1
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3e6      	bcc.n	8005780 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057b2:	8bfb      	ldrh	r3, [r7, #30]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c2:	461a      	mov	r2, r3
 80057c4:	f107 0310 	add.w	r3, r7, #16
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	701a      	strb	r2, [r3, #0]
      i++;
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	3301      	adds	r3, #1
 80057e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057ea:	8bfb      	ldrh	r3, [r7, #30]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057f0:	8bfb      	ldrh	r3, [r7, #30]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1ea      	bne.n	80057cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	372c      	adds	r7, #44	; 0x2c
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d12c      	bne.n	800587a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	db12      	blt.n	8005858 <USB_EPSetStall+0x54>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00f      	beq.n	8005858 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005856:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e02b      	b.n	80058d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	db12      	blt.n	80058b2 <USB_EPSetStall+0xae>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00f      	beq.n	80058b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d128      	bne.n	800594e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800591a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	791b      	ldrb	r3, [r3, #4]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d003      	beq.n	800592c <USB_EPClearStall+0x4c>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	791b      	ldrb	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d138      	bne.n	800599e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	e027      	b.n	800599e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800596c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	791b      	ldrb	r3, [r3, #4]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d003      	beq.n	800597e <USB_EPClearStall+0x9e>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d10f      	bne.n	800599e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a26:	f023 0302 	bic.w	r3, r3, #2
 8005a2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a54:	f023 0303 	bic.w	r3, r3, #3
 8005a58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a94:	68fb      	ldr	r3, [r7, #12]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	b29b      	uxth	r3, r3
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b38:	68bb      	ldr	r3, [r7, #8]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b087      	sub	sp, #28
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4013      	ands	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b94:	68bb      	ldr	r3, [r7, #8]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0301 	and.w	r3, r3, #1
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	333c      	adds	r3, #60	; 0x3c
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <USB_EP0_OutStart+0xb8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d90a      	bls.n	8005c3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d101      	bne.n	8005c3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e037      	b.n	8005cae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	461a      	mov	r2, r3
 8005c46:	2300      	movs	r3, #0
 8005c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6c:	f043 0318 	orr.w	r3, r3, #24
 8005c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d10f      	bne.n	8005cac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005caa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	4f54300a 	.word	0x4f54300a

08005cc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <USB_CoreReset+0x64>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e01b      	b.n	8005d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	daf2      	bge.n	8005ccc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f043 0201 	orr.w	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <USB_CoreReset+0x64>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d901      	bls.n	8005d08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e006      	b.n	8005d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d0f0      	beq.n	8005cf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	00030d40 	.word	0x00030d40

08005d28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d38:	f002 fc1e 	bl	8008578 <USBD_static_malloc>
 8005d3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	32b0      	adds	r2, #176	; 0xb0
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d54:	2302      	movs	r3, #2
 8005d56:	e0d4      	b.n	8005f02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d58:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f002 fc72 	bl	8008648 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	32b0      	adds	r2, #176	; 0xb0
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32b0      	adds	r2, #176	; 0xb0
 8005d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7c1b      	ldrb	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d138      	bne.n	8005e02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d90:	4b5e      	ldr	r3, [pc, #376]	; (8005f0c <USBD_CDC_Init+0x1e4>)
 8005d92:	7819      	ldrb	r1, [r3, #0]
 8005d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d98:	2202      	movs	r2, #2
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f002 fac9 	bl	8008332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005da0:	4b5a      	ldr	r3, [pc, #360]	; (8005f0c <USBD_CDC_Init+0x1e4>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2201      	movs	r2, #1
 8005db8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dba:	4b55      	ldr	r3, [pc, #340]	; (8005f10 <USBD_CDC_Init+0x1e8>)
 8005dbc:	7819      	ldrb	r1, [r3, #0]
 8005dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f002 fab4 	bl	8008332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dca:	4b51      	ldr	r3, [pc, #324]	; (8005f10 <USBD_CDC_Init+0x1e8>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f003 020f 	and.w	r2, r3, #15
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005de2:	2201      	movs	r2, #1
 8005de4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005de6:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <USBD_CDC_Init+0x1ec>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	3326      	adds	r3, #38	; 0x26
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e035      	b.n	8005e6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e02:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <USBD_CDC_Init+0x1e4>)
 8005e04:	7819      	ldrb	r1, [r3, #0]
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2202      	movs	r2, #2
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f002 fa91 	bl	8008332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e10:	4b3e      	ldr	r3, [pc, #248]	; (8005f0c <USBD_CDC_Init+0x1e4>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3324      	adds	r3, #36	; 0x24
 8005e26:	2201      	movs	r2, #1
 8005e28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e2a:	4b39      	ldr	r3, [pc, #228]	; (8005f10 <USBD_CDC_Init+0x1e8>)
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	2340      	movs	r3, #64	; 0x40
 8005e30:	2202      	movs	r2, #2
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f002 fa7d 	bl	8008332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e38:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <USBD_CDC_Init+0x1e8>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e50:	2201      	movs	r2, #1
 8005e52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e54:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <USBD_CDC_Init+0x1ec>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 020f 	and.w	r2, r3, #15
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	3326      	adds	r3, #38	; 0x26
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <USBD_CDC_Init+0x1ec>)
 8005e70:	7819      	ldrb	r1, [r3, #0]
 8005e72:	2308      	movs	r3, #8
 8005e74:	2203      	movs	r2, #3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fa5b 	bl	8008332 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <USBD_CDC_Init+0x1ec>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3324      	adds	r3, #36	; 0x24
 8005e92:	2201      	movs	r2, #1
 8005e94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	33b0      	adds	r3, #176	; 0xb0
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e018      	b.n	8005f02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	7c1b      	ldrb	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <USBD_CDC_Init+0x1e8>)
 8005eda:	7819      	ldrb	r1, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f002 fb12 	bl	8008510 <USBD_LL_PrepareReceive>
 8005eec:	e008      	b.n	8005f00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <USBD_CDC_Init+0x1e8>)
 8005ef0:	7819      	ldrb	r1, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f002 fb08 	bl	8008510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000093 	.word	0x20000093
 8005f10:	20000094 	.word	0x20000094
 8005f14:	20000095 	.word	0x20000095

08005f18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <USBD_CDC_DeInit+0xf8>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f002 fa27 	bl	800837e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f30:	4b37      	ldr	r3, [pc, #220]	; (8006010 <USBD_CDC_DeInit+0xf8>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3324      	adds	r3, #36	; 0x24
 8005f46:	2200      	movs	r2, #0
 8005f48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f4a:	4b32      	ldr	r3, [pc, #200]	; (8006014 <USBD_CDC_DeInit+0xfc>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 fa14 	bl	800837e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <USBD_CDC_DeInit+0xfc>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f003 020f 	and.w	r2, r3, #15
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f6e:	2200      	movs	r2, #0
 8005f70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f72:	4b29      	ldr	r3, [pc, #164]	; (8006018 <USBD_CDC_DeInit+0x100>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f002 fa00 	bl	800837e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <USBD_CDC_DeInit+0x100>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	f003 020f 	and.w	r2, r3, #15
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	2200      	movs	r2, #0
 8005f96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f98:	4b1f      	ldr	r3, [pc, #124]	; (8006018 <USBD_CDC_DeInit+0x100>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f003 020f 	and.w	r2, r3, #15
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3326      	adds	r3, #38	; 0x26
 8005fae:	2200      	movs	r2, #0
 8005fb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	32b0      	adds	r2, #176	; 0xb0
 8005fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01f      	beq.n	8006004 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	33b0      	adds	r3, #176	; 0xb0
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32b0      	adds	r2, #176	; 0xb0
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 fad4 	bl	8008594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32b0      	adds	r2, #176	; 0xb0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000093 	.word	0x20000093
 8006014:	20000094 	.word	0x20000094
 8006018:	20000095 	.word	0x20000095

0800601c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	32b0      	adds	r2, #176	; 0xb0
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	e0bf      	b.n	80061cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006054:	2b00      	cmp	r3, #0
 8006056:	d050      	beq.n	80060fa <USBD_CDC_Setup+0xde>
 8006058:	2b20      	cmp	r3, #32
 800605a:	f040 80af 	bne.w	80061bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	88db      	ldrh	r3, [r3, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d03a      	beq.n	80060dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b25b      	sxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	da1b      	bge.n	80060a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	33b0      	adds	r3, #176	; 0xb0
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006086:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	88d2      	ldrh	r2, [r2, #6]
 800608c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	88db      	ldrh	r3, [r3, #6]
 8006092:	2b07      	cmp	r3, #7
 8006094:	bf28      	it	cs
 8006096:	2307      	movcs	r3, #7
 8006098:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	89fa      	ldrh	r2, [r7, #14]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fd43 	bl	8007b2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060a6:	e090      	b.n	80061ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	785a      	ldrb	r2, [r3, #1]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	88db      	ldrh	r3, [r3, #6]
 80060b6:	2b3f      	cmp	r3, #63	; 0x3f
 80060b8:	d803      	bhi.n	80060c2 <USBD_CDC_Setup+0xa6>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	88db      	ldrh	r3, [r3, #6]
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	e000      	b.n	80060c4 <USBD_CDC_Setup+0xa8>
 80060c2:	2240      	movs	r2, #64	; 0x40
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060ca:	6939      	ldr	r1, [r7, #16]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060d2:	461a      	mov	r2, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fd55 	bl	8007b84 <USBD_CtlPrepareRx>
      break;
 80060da:	e076      	b.n	80061ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	33b0      	adds	r3, #176	; 0xb0
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	7850      	ldrb	r0, [r2, #1]
 80060f2:	2200      	movs	r2, #0
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	4798      	blx	r3
      break;
 80060f8:	e067      	b.n	80061ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b0b      	cmp	r3, #11
 8006100:	d851      	bhi.n	80061a6 <USBD_CDC_Setup+0x18a>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <USBD_CDC_Setup+0xec>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006139 	.word	0x08006139
 800610c:	080061b5 	.word	0x080061b5
 8006110:	080061a7 	.word	0x080061a7
 8006114:	080061a7 	.word	0x080061a7
 8006118:	080061a7 	.word	0x080061a7
 800611c:	080061a7 	.word	0x080061a7
 8006120:	080061a7 	.word	0x080061a7
 8006124:	080061a7 	.word	0x080061a7
 8006128:	080061a7 	.word	0x080061a7
 800612c:	080061a7 	.word	0x080061a7
 8006130:	08006163 	.word	0x08006163
 8006134:	0800618d 	.word	0x0800618d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b03      	cmp	r3, #3
 8006142:	d107      	bne.n	8006154 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006144:	f107 030a 	add.w	r3, r7, #10
 8006148:	2202      	movs	r2, #2
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fced 	bl	8007b2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006152:	e032      	b.n	80061ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fc77 	bl	8007a4a <USBD_CtlError>
            ret = USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	75fb      	strb	r3, [r7, #23]
          break;
 8006160:	e02b      	b.n	80061ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b03      	cmp	r3, #3
 800616c:	d107      	bne.n	800617e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800616e:	f107 030d 	add.w	r3, r7, #13
 8006172:	2201      	movs	r2, #1
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 fcd8 	bl	8007b2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800617c:	e01d      	b.n	80061ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fc62 	bl	8007a4a <USBD_CtlError>
            ret = USBD_FAIL;
 8006186:	2303      	movs	r3, #3
 8006188:	75fb      	strb	r3, [r7, #23]
          break;
 800618a:	e016      	b.n	80061ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b03      	cmp	r3, #3
 8006196:	d00f      	beq.n	80061b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fc55 	bl	8007a4a <USBD_CtlError>
            ret = USBD_FAIL;
 80061a0:	2303      	movs	r3, #3
 80061a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061a4:	e008      	b.n	80061b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fc4e 	bl	8007a4a <USBD_CtlError>
          ret = USBD_FAIL;
 80061ae:	2303      	movs	r3, #3
 80061b0:	75fb      	strb	r3, [r7, #23]
          break;
 80061b2:	e002      	b.n	80061ba <USBD_CDC_Setup+0x19e>
          break;
 80061b4:	bf00      	nop
 80061b6:	e008      	b.n	80061ca <USBD_CDC_Setup+0x1ae>
          break;
 80061b8:	bf00      	nop
      }
      break;
 80061ba:	e006      	b.n	80061ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fc43 	bl	8007a4a <USBD_CtlError>
      ret = USBD_FAIL;
 80061c4:	2303      	movs	r3, #3
 80061c6:	75fb      	strb	r3, [r7, #23]
      break;
 80061c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80061e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32b0      	adds	r2, #176	; 0xb0
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e065      	b.n	80062ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	32b0      	adds	r2, #176	; 0xb0
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	f003 020f 	and.w	r2, r3, #15
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3318      	adds	r3, #24
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d02f      	beq.n	8006288 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	3318      	adds	r3, #24
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	f003 010f 	and.w	r1, r3, #15
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	460b      	mov	r3, r1
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	440b      	add	r3, r1
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4403      	add	r3, r0
 8006250:	3348      	adds	r3, #72	; 0x48
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	fbb2 f1f3 	udiv	r1, r2, r3
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800625e:	2b00      	cmp	r3, #0
 8006260:	d112      	bne.n	8006288 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 020f 	and.w	r2, r3, #15
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3318      	adds	r3, #24
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800627a:	78f9      	ldrb	r1, [r7, #3]
 800627c:	2300      	movs	r3, #0
 800627e:	2200      	movs	r2, #0
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f002 f924 	bl	80084ce <USBD_LL_Transmit>
 8006286:	e01f      	b.n	80062c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	33b0      	adds	r3, #176	; 0xb0
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	33b0      	adds	r3, #176	; 0xb0
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	32b0      	adds	r2, #176	; 0xb0
 80062e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	32b0      	adds	r2, #176	; 0xb0
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	e01a      	b.n	800633a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f002 f922 	bl	8008552 <USBD_LL_GetRxDataSize>
 800630e:	4602      	mov	r2, r0
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	33b0      	adds	r3, #176	; 0xb0
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006334:	4611      	mov	r1, r2
 8006336:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	32b0      	adds	r2, #176	; 0xb0
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	e025      	b.n	80063b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	33b0      	adds	r3, #176	; 0xb0
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <USBD_CDC_EP0_RxReady+0x6c>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800637e:	2bff      	cmp	r3, #255	; 0xff
 8006380:	d015      	beq.n	80063ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	33b0      	adds	r3, #176	; 0xb0
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800639a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063a2:	b292      	uxth	r2, r2
 80063a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	22ff      	movs	r2, #255	; 0xff
 80063aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063c0:	2182      	movs	r1, #130	; 0x82
 80063c2:	4818      	ldr	r0, [pc, #96]	; (8006424 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063c4:	f000 fd09 	bl	8006dda <USBD_GetEpDesc>
 80063c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063ca:	2101      	movs	r1, #1
 80063cc:	4815      	ldr	r0, [pc, #84]	; (8006424 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063ce:	f000 fd04 	bl	8006dda <USBD_GetEpDesc>
 80063d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063d4:	2181      	movs	r1, #129	; 0x81
 80063d6:	4813      	ldr	r0, [pc, #76]	; (8006424 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063d8:	f000 fcff 	bl	8006dda <USBD_GetEpDesc>
 80063dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2210      	movs	r2, #16
 80063e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f8:	711a      	strb	r2, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d006      	beq.n	8006412 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800640c:	711a      	strb	r2, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2243      	movs	r2, #67	; 0x43
 8006416:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000050 	.word	0x20000050

08006428 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006430:	2182      	movs	r1, #130	; 0x82
 8006432:	4818      	ldr	r0, [pc, #96]	; (8006494 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006434:	f000 fcd1 	bl	8006dda <USBD_GetEpDesc>
 8006438:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800643a:	2101      	movs	r1, #1
 800643c:	4815      	ldr	r0, [pc, #84]	; (8006494 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800643e:	f000 fccc 	bl	8006dda <USBD_GetEpDesc>
 8006442:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006444:	2181      	movs	r1, #129	; 0x81
 8006446:	4813      	ldr	r0, [pc, #76]	; (8006494 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006448:	f000 fcc7 	bl	8006dda <USBD_GetEpDesc>
 800644c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2210      	movs	r2, #16
 8006458:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2200      	movs	r2, #0
 8006464:	711a      	strb	r2, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f042 0202 	orr.w	r2, r2, #2
 800646c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	711a      	strb	r2, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f042 0202 	orr.w	r2, r2, #2
 8006480:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2243      	movs	r2, #67	; 0x43
 8006486:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006488:	4b02      	ldr	r3, [pc, #8]	; (8006494 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000050 	.word	0x20000050

08006498 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064a0:	2182      	movs	r1, #130	; 0x82
 80064a2:	4818      	ldr	r0, [pc, #96]	; (8006504 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064a4:	f000 fc99 	bl	8006dda <USBD_GetEpDesc>
 80064a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064aa:	2101      	movs	r1, #1
 80064ac:	4815      	ldr	r0, [pc, #84]	; (8006504 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064ae:	f000 fc94 	bl	8006dda <USBD_GetEpDesc>
 80064b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b4:	2181      	movs	r1, #129	; 0x81
 80064b6:	4813      	ldr	r0, [pc, #76]	; (8006504 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064b8:	f000 fc8f 	bl	8006dda <USBD_GetEpDesc>
 80064bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2210      	movs	r2, #16
 80064c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d8:	711a      	strb	r2, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ec:	711a      	strb	r2, [r3, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2243      	movs	r2, #67	; 0x43
 80064f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064f8:	4b02      	ldr	r3, [pc, #8]	; (8006504 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000050 	.word	0x20000050

08006508 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	220a      	movs	r2, #10
 8006514:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	2000000c 	.word	0x2000000c

08006528 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006538:	2303      	movs	r3, #3
 800653a:	e009      	b.n	8006550 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	33b0      	adds	r3, #176	; 0xb0
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	32b0      	adds	r2, #176	; 0xb0
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	e008      	b.n	8006594 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	32b0      	adds	r2, #176	; 0xb0
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e004      	b.n	80065ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	; 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	e018      	b.n	800663c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7c1b      	ldrb	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <USBD_CDC_ReceivePacket+0x68>)
 8006614:	7819      	ldrb	r1, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800661c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 ff75 	bl	8008510 <USBD_LL_PrepareReceive>
 8006626:	e008      	b.n	800663a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <USBD_CDC_ReceivePacket+0x68>)
 800662a:	7819      	ldrb	r1, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 ff6b 	bl	8008510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000094 	.word	0x20000094

08006648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	e01f      	b.n	80066a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	79fa      	ldrb	r2, [r7, #7]
 8006692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fde5 	bl	8008264 <USBD_LL_Init>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	e025      	b.n	800670c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32ae      	adds	r2, #174	; 0xae
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00f      	beq.n	80066fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32ae      	adds	r2, #174	; 0xae
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	f107 020e 	add.w	r2, r7, #14
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	4602      	mov	r2, r0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fded 	bl	80082fc <USBD_LL_Start>
 8006722:	4603      	mov	r3, r0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	4611      	mov	r1, r2
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	4611      	mov	r1, r2
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 f908 	bl	80079d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d01a      	beq.n	8006820 <USBD_LL_SetupStage+0x72>
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d822      	bhi.n	8006834 <USBD_LL_SetupStage+0x86>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <USBD_LL_SetupStage+0x4a>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d00a      	beq.n	800680c <USBD_LL_SetupStage+0x5e>
 80067f6:	e01d      	b.n	8006834 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb5f 	bl	8006ec4 <USBD_StdDevReq>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
      break;
 800680a:	e020      	b.n	800684e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fbc7 	bl	8006fa8 <USBD_StdItfReq>
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]
      break;
 800681e:	e016      	b.n	800684e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fc29 	bl	8007080 <USBD_StdEPReq>
 800682e:	4603      	mov	r3, r0
 8006830:	73fb      	strb	r3, [r7, #15]
      break;
 8006832:	e00c      	b.n	800684e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800683a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800683e:	b2db      	uxtb	r3, r3
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fdba 	bl	80083bc <USBD_LL_StallEP>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]
      break;
 800684c:	bf00      	nop
  }

  return ret;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	460b      	mov	r3, r1
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d16e      	bne.n	800694e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006876:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800687e:	2b03      	cmp	r3, #3
 8006880:	f040 8098 	bne.w	80069b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	429a      	cmp	r2, r3
 800688e:	d913      	bls.n	80068b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bf28      	it	cs
 80068aa:	4613      	movcs	r3, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f001 f984 	bl	8007bbe <USBD_CtlContinueRx>
 80068b6:	e07d      	b.n	80069b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d014      	beq.n	80068f0 <USBD_LL_DataOutStage+0x98>
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d81d      	bhi.n	8006906 <USBD_LL_DataOutStage+0xae>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <USBD_LL_DataOutStage+0x7c>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d003      	beq.n	80068da <USBD_LL_DataOutStage+0x82>
 80068d2:	e018      	b.n	8006906 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	75bb      	strb	r3, [r7, #22]
            break;
 80068d8:	e018      	b.n	800690c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fa5e 	bl	8006da6 <USBD_CoreFindIF>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75bb      	strb	r3, [r7, #22]
            break;
 80068ee:	e00d      	b.n	800690c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fa60 	bl	8006dc0 <USBD_CoreFindEP>
 8006900:	4603      	mov	r3, r0
 8006902:	75bb      	strb	r3, [r7, #22]
            break;
 8006904:	e002      	b.n	800690c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	75bb      	strb	r3, [r7, #22]
            break;
 800690a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800690c:	7dbb      	ldrb	r3, [r7, #22]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d119      	bne.n	8006946 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b03      	cmp	r3, #3
 800691c:	d113      	bne.n	8006946 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800691e:	7dba      	ldrb	r2, [r7, #22]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	32ae      	adds	r2, #174	; 0xae
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800692e:	7dba      	ldrb	r2, [r7, #22]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006936:	7dba      	ldrb	r2, [r7, #22]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	32ae      	adds	r2, #174	; 0xae
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f94a 	bl	8007be0 <USBD_CtlSendStatus>
 800694c:	e032      	b.n	80069b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800694e:	7afb      	ldrb	r3, [r7, #11]
 8006950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa31 	bl	8006dc0 <USBD_CoreFindEP>
 800695e:	4603      	mov	r3, r0
 8006960:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006962:	7dbb      	ldrb	r3, [r7, #22]
 8006964:	2bff      	cmp	r3, #255	; 0xff
 8006966:	d025      	beq.n	80069b4 <USBD_LL_DataOutStage+0x15c>
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d122      	bne.n	80069b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d117      	bne.n	80069aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800697a:	7dba      	ldrb	r2, [r7, #22]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	32ae      	adds	r2, #174	; 0xae
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00f      	beq.n	80069aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800698a:	7dba      	ldrb	r2, [r7, #22]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006992:	7dba      	ldrb	r2, [r7, #22]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	32ae      	adds	r2, #174	; 0xae
 8006998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	7afa      	ldrb	r2, [r7, #11]
 80069a0:	4611      	mov	r1, r2
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	e000      	b.n	80069b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	460b      	mov	r3, r1
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d16f      	bne.n	8006ab2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3314      	adds	r3, #20
 80069d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d15a      	bne.n	8006a98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d914      	bls.n	8006a18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f001 f8ac 	bl	8007b62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 fd7d 	bl	8008510 <USBD_LL_PrepareReceive>
 8006a16:	e03f      	b.n	8006a98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d11c      	bne.n	8006a5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d316      	bcc.n	8006a5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20f      	bcs.n	8006a5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f001 f88d 	bl	8007b62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 fd5a 	bl	8008510 <USBD_LL_PrepareReceive>
 8006a5c:	e01c      	b.n	8006a98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d10f      	bne.n	8006a8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a8a:	2180      	movs	r1, #128	; 0x80
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f001 fc95 	bl	80083bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f001 f8b7 	bl	8007c06 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d03a      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fe42 	bl	800672c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ab0:	e032      	b.n	8006b18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f97f 	bl	8006dc0 <USBD_CoreFindEP>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	2bff      	cmp	r3, #255	; 0xff
 8006aca:	d025      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d122      	bne.n	8006b18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d11c      	bne.n	8006b18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ade:	7dfa      	ldrb	r2, [r7, #23]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	32ae      	adds	r2, #174	; 0xae
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d014      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006aee:	7dfa      	ldrb	r2, [r7, #23]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006af6:	7dfa      	ldrb	r2, [r7, #23]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	32ae      	adds	r2, #174	; 0xae
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	7afa      	ldrb	r2, [r7, #11]
 8006b04:	4611      	mov	r1, r2
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	4798      	blx	r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b0e:	7dbb      	ldrb	r3, [r7, #22]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b14:	7dbb      	ldrb	r3, [r7, #22]
 8006b16:	e000      	b.n	8006b1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d014      	beq.n	8006b88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00e      	beq.n	8006b88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6852      	ldr	r2, [r2, #4]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	4611      	mov	r1, r2
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b88:	2340      	movs	r3, #64	; 0x40
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fbcf 	bl	8008332 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2240      	movs	r2, #64	; 0x40
 8006ba0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ba4:	2340      	movs	r3, #64	; 0x40
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fbc1 	bl	8008332 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2240      	movs	r2, #64	; 0x40
 8006bba:	621a      	str	r2, [r3, #32]

  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	78fa      	ldrb	r2, [r7, #3]
 8006bd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d106      	bne.n	8006c34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d110      	bne.n	8006c78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	32ae      	adds	r2, #174	; 0xae
 8006c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e01c      	b.n	8006cde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d115      	bne.n	8006cdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	32ae      	adds	r2, #174	; 0xae
 8006cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	32ae      	adds	r2, #174	; 0xae
 8006cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	32ae      	adds	r2, #174	; 0xae
 8006cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e01c      	b.n	8006d42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d115      	bne.n	8006d40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32ae      	adds	r2, #174	; 0xae
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	; 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	78fa      	ldrb	r2, [r7, #3]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00e      	beq.n	8006d9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6852      	ldr	r2, [r2, #4]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006db2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	460b      	mov	r3, r1
 8006de4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	885b      	ldrh	r3, [r3, #2]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d920      	bls.n	8006e44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e0a:	e013      	b.n	8006e34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e0c:	f107 030a 	add.w	r3, r7, #10
 8006e10:	4619      	mov	r1, r3
 8006e12:	6978      	ldr	r0, [r7, #20]
 8006e14:	f000 f81b 	bl	8006e4e <USBD_GetNextDesc>
 8006e18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	d108      	bne.n	8006e34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	789b      	ldrb	r3, [r3, #2]
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d008      	beq.n	8006e42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	897b      	ldrh	r3, [r7, #10]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d8e5      	bhi.n	8006e0c <USBD_GetEpDesc+0x32>
 8006e40:	e000      	b.n	8006e44 <USBD_GetEpDesc+0x6a>
          break;
 8006e42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e44:	693b      	ldr	r3, [r7, #16]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	881a      	ldrh	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4413      	add	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ea6:	8a3b      	ldrh	r3, [r7, #16]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	b21a      	sxth	r2, r3
 8006eac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006eb6:	89fb      	ldrh	r3, [r7, #14]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d005      	beq.n	8006eea <USBD_StdDevReq+0x26>
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d857      	bhi.n	8006f92 <USBD_StdDevReq+0xce>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00f      	beq.n	8006f06 <USBD_StdDevReq+0x42>
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d153      	bne.n	8006f92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	32ae      	adds	r2, #174	; 0xae
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
      break;
 8006f04:	e04a      	b.n	8006f9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	2b09      	cmp	r3, #9
 8006f0c:	d83b      	bhi.n	8006f86 <USBD_StdDevReq+0xc2>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBD_StdDevReq+0x50>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f69 	.word	0x08006f69
 8006f18:	08006f7d 	.word	0x08006f7d
 8006f1c:	08006f87 	.word	0x08006f87
 8006f20:	08006f73 	.word	0x08006f73
 8006f24:	08006f87 	.word	0x08006f87
 8006f28:	08006f47 	.word	0x08006f47
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f87 	.word	0x08006f87
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	08006f51 	.word	0x08006f51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa3c 	bl	80073bc <USBD_GetDescriptor>
          break;
 8006f44:	e024      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fba1 	bl	8007690 <USBD_SetAddress>
          break;
 8006f4e:	e01f      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fbe0 	bl	8007718 <USBD_SetConfig>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8006f5c:	e018      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc83 	bl	800786c <USBD_GetConfig>
          break;
 8006f66:	e013      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fcb4 	bl	80078d8 <USBD_GetStatus>
          break;
 8006f70:	e00e      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fce3 	bl	8007940 <USBD_SetFeature>
          break;
 8006f7a:	e009      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fd07 	bl	8007992 <USBD_ClrFeature>
          break;
 8006f84:	e004      	b.n	8006f90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fd5e 	bl	8007a4a <USBD_CtlError>
          break;
 8006f8e:	bf00      	nop
      }
      break;
 8006f90:	e004      	b.n	8006f9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fd58 	bl	8007a4a <USBD_CtlError>
      break;
 8006f9a:	bf00      	nop
  }

  return ret;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop

08006fa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d005      	beq.n	8006fce <USBD_StdItfReq+0x26>
 8006fc2:	2b40      	cmp	r3, #64	; 0x40
 8006fc4:	d852      	bhi.n	800706c <USBD_StdItfReq+0xc4>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <USBD_StdItfReq+0x26>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d14e      	bne.n	800706c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d840      	bhi.n	800705e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	889b      	ldrh	r3, [r3, #4]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d836      	bhi.n	8007054 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	889b      	ldrh	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff fed9 	bl	8006da6 <USBD_CoreFindIF>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2bff      	cmp	r3, #255	; 0xff
 8006ffc:	d01d      	beq.n	800703a <USBD_StdItfReq+0x92>
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11a      	bne.n	800703a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007004:	7bba      	ldrb	r2, [r7, #14]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32ae      	adds	r2, #174	; 0xae
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007014:	7bba      	ldrb	r2, [r7, #14]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800701c:	7bba      	ldrb	r2, [r7, #14]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	32ae      	adds	r2, #174	; 0xae
 8007022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007032:	e004      	b.n	800703e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007034:	2303      	movs	r3, #3
 8007036:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007038:	e001      	b.n	800703e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800703a:	2303      	movs	r3, #3
 800703c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88db      	ldrh	r3, [r3, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d110      	bne.n	8007068 <USBD_StdItfReq+0xc0>
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10d      	bne.n	8007068 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fdc7 	bl	8007be0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007052:	e009      	b.n	8007068 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fcf7 	bl	8007a4a <USBD_CtlError>
          break;
 800705c:	e004      	b.n	8007068 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fcf2 	bl	8007a4a <USBD_CtlError>
          break;
 8007066:	e000      	b.n	800706a <USBD_StdItfReq+0xc2>
          break;
 8007068:	bf00      	nop
      }
      break;
 800706a:	e004      	b.n	8007076 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fceb 	bl	8007a4a <USBD_CtlError>
      break;
 8007074:	bf00      	nop
  }

  return ret;
 8007076:	7bfb      	ldrb	r3, [r7, #15]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	889b      	ldrh	r3, [r3, #4]
 8007092:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d007      	beq.n	80070b0 <USBD_StdEPReq+0x30>
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	f200 817f 	bhi.w	80073a4 <USBD_StdEPReq+0x324>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d02a      	beq.n	8007100 <USBD_StdEPReq+0x80>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	f040 817a 	bne.w	80073a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fe83 	bl	8006dc0 <USBD_CoreFindEP>
 80070ba:	4603      	mov	r3, r0
 80070bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070be:	7b7b      	ldrb	r3, [r7, #13]
 80070c0:	2bff      	cmp	r3, #255	; 0xff
 80070c2:	f000 8174 	beq.w	80073ae <USBD_StdEPReq+0x32e>
 80070c6:	7b7b      	ldrb	r3, [r7, #13]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8170 	bne.w	80073ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070ce:	7b7a      	ldrb	r2, [r7, #13]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070d6:	7b7a      	ldrb	r2, [r7, #13]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32ae      	adds	r2, #174	; 0xae
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8163 	beq.w	80073ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070e8:	7b7a      	ldrb	r2, [r7, #13]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32ae      	adds	r2, #174	; 0xae
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070fe:	e156      	b.n	80073ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d008      	beq.n	800711a <USBD_StdEPReq+0x9a>
 8007108:	2b03      	cmp	r3, #3
 800710a:	f300 8145 	bgt.w	8007398 <USBD_StdEPReq+0x318>
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 809b 	beq.w	800724a <USBD_StdEPReq+0x1ca>
 8007114:	2b01      	cmp	r3, #1
 8007116:	d03c      	beq.n	8007192 <USBD_StdEPReq+0x112>
 8007118:	e13e      	b.n	8007398 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d002      	beq.n	800712c <USBD_StdEPReq+0xac>
 8007126:	2b03      	cmp	r3, #3
 8007128:	d016      	beq.n	8007158 <USBD_StdEPReq+0xd8>
 800712a:	e02c      	b.n	8007186 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <USBD_StdEPReq+0xce>
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b80      	cmp	r3, #128	; 0x80
 8007136:	d00a      	beq.n	800714e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f93d 	bl	80083bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f939 	bl	80083bc <USBD_LL_StallEP>
 800714a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800714c:	e020      	b.n	8007190 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fc7a 	bl	8007a4a <USBD_CtlError>
              break;
 8007156:	e01b      	b.n	8007190 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10e      	bne.n	800717e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <USBD_StdEPReq+0xfe>
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b80      	cmp	r3, #128	; 0x80
 800716a:	d008      	beq.n	800717e <USBD_StdEPReq+0xfe>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	88db      	ldrh	r3, [r3, #6]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d104      	bne.n	800717e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f91f 	bl	80083bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fd2e 	bl	8007be0 <USBD_CtlSendStatus>

              break;
 8007184:	e004      	b.n	8007190 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fc5e 	bl	8007a4a <USBD_CtlError>
              break;
 800718e:	bf00      	nop
          }
          break;
 8007190:	e107      	b.n	80073a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d002      	beq.n	80071a4 <USBD_StdEPReq+0x124>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d016      	beq.n	80071d0 <USBD_StdEPReq+0x150>
 80071a2:	e04b      	b.n	800723c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <USBD_StdEPReq+0x146>
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d00a      	beq.n	80071c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f901 	bl	80083bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ba:	2180      	movs	r1, #128	; 0x80
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f8fd 	bl	80083bc <USBD_LL_StallEP>
 80071c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c4:	e040      	b.n	8007248 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc3e 	bl	8007a4a <USBD_CtlError>
              break;
 80071ce:	e03b      	b.n	8007248 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	885b      	ldrh	r3, [r3, #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d136      	bne.n	8007246 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f907 	bl	80083fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fcf7 	bl	8007be0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fde2 	bl	8006dc0 <USBD_CoreFindEP>
 80071fc:	4603      	mov	r3, r0
 80071fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007200:	7b7b      	ldrb	r3, [r7, #13]
 8007202:	2bff      	cmp	r3, #255	; 0xff
 8007204:	d01f      	beq.n	8007246 <USBD_StdEPReq+0x1c6>
 8007206:	7b7b      	ldrb	r3, [r7, #13]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11c      	bne.n	8007246 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800720c:	7b7a      	ldrb	r2, [r7, #13]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	32ae      	adds	r2, #174	; 0xae
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d010      	beq.n	8007246 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007224:	7b7a      	ldrb	r2, [r7, #13]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	32ae      	adds	r2, #174	; 0xae
 800722a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800723a:	e004      	b.n	8007246 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fc03 	bl	8007a4a <USBD_CtlError>
              break;
 8007244:	e000      	b.n	8007248 <USBD_StdEPReq+0x1c8>
              break;
 8007246:	bf00      	nop
          }
          break;
 8007248:	e0ab      	b.n	80073a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d002      	beq.n	800725c <USBD_StdEPReq+0x1dc>
 8007256:	2b03      	cmp	r3, #3
 8007258:	d032      	beq.n	80072c0 <USBD_StdEPReq+0x240>
 800725a:	e097      	b.n	800738c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <USBD_StdEPReq+0x1f2>
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d004      	beq.n	8007272 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fbed 	bl	8007a4a <USBD_CtlError>
                break;
 8007270:	e091      	b.n	8007396 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	da0b      	bge.n	8007292 <USBD_StdEPReq+0x212>
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	3310      	adds	r3, #16
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4413      	add	r3, r2
 800728e:	3304      	adds	r3, #4
 8007290:	e00b      	b.n	80072aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	3304      	adds	r3, #4
 80072aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2202      	movs	r2, #2
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc37 	bl	8007b2c <USBD_CtlSendData>
              break;
 80072be:	e06a      	b.n	8007396 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da11      	bge.n	80072ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	f003 020f 	and.w	r2, r3, #15
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	3324      	adds	r3, #36	; 0x24
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d117      	bne.n	8007312 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fbb0 	bl	8007a4a <USBD_CtlError>
                  break;
 80072ea:	e054      	b.n	8007396 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	f003 020f 	and.w	r2, r3, #15
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fb9d 	bl	8007a4a <USBD_CtlError>
                  break;
 8007310:	e041      	b.n	8007396 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da0b      	bge.n	8007332 <USBD_StdEPReq+0x2b2>
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	3310      	adds	r3, #16
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	3304      	adds	r3, #4
 8007330:	e00b      	b.n	800734a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	4413      	add	r3, r2
 8007348:	3304      	adds	r3, #4
 800734a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <USBD_StdEPReq+0x2d8>
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b80      	cmp	r3, #128	; 0x80
 8007356:	d103      	bne.n	8007360 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e00e      	b.n	800737e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f867 	bl	8008438 <USBD_LL_IsStallEP>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e002      	b.n	800737e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2202      	movs	r2, #2
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fbd1 	bl	8007b2c <USBD_CtlSendData>
              break;
 800738a:	e004      	b.n	8007396 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb5b 	bl	8007a4a <USBD_CtlError>
              break;
 8007394:	bf00      	nop
          }
          break;
 8007396:	e004      	b.n	80073a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fb55 	bl	8007a4a <USBD_CtlError>
          break;
 80073a0:	bf00      	nop
      }
      break;
 80073a2:	e005      	b.n	80073b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fb4f 	bl	8007a4a <USBD_CtlError>
      break;
 80073ac:	e000      	b.n	80073b0 <USBD_StdEPReq+0x330>
      break;
 80073ae:	bf00      	nop
  }

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	885b      	ldrh	r3, [r3, #2]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b06      	cmp	r3, #6
 80073de:	f200 8128 	bhi.w	8007632 <USBD_GetDescriptor+0x276>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <USBD_GetDescriptor+0x2c>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007405 	.word	0x08007405
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800745d 	.word	0x0800745d
 80073f4:	08007633 	.word	0x08007633
 80073f8:	08007633 	.word	0x08007633
 80073fc:	080075d3 	.word	0x080075d3
 8007400:	080075ff 	.word	0x080075ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
      break;
 800741a:	e112      	b.n	8007642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7c1b      	ldrb	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f107 0208 	add.w	r2, r7, #8
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
 8007434:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	2202      	movs	r2, #2
 800743c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800743e:	e100      	b.n	8007642 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	f107 0208 	add.w	r2, r7, #8
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
 8007450:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	2202      	movs	r2, #2
 8007458:	701a      	strb	r2, [r3, #0]
      break;
 800745a:	e0f2      	b.n	8007642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b05      	cmp	r3, #5
 8007464:	f200 80ac 	bhi.w	80075c0 <USBD_GetDescriptor+0x204>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <USBD_GetDescriptor+0xb4>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007489 	.word	0x08007489
 8007474:	080074bd 	.word	0x080074bd
 8007478:	080074f1 	.word	0x080074f1
 800747c:	08007525 	.word	0x08007525
 8007480:	08007559 	.word	0x08007559
 8007484:	0800758d 	.word	0x0800758d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074aa:	e091      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 facb 	bl	8007a4a <USBD_CtlError>
            err++;
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	3301      	adds	r3, #1
 80074b8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ba:	e089      	b.n	80075d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	7c12      	ldrb	r2, [r2, #16]
 80074d4:	f107 0108 	add.w	r1, r7, #8
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074de:	e077      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fab1 	bl	8007a4a <USBD_CtlError>
            err++;
 80074e8:	7afb      	ldrb	r3, [r7, #11]
 80074ea:	3301      	adds	r3, #1
 80074ec:	72fb      	strb	r3, [r7, #11]
          break;
 80074ee:	e06f      	b.n	80075d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	7c12      	ldrb	r2, [r2, #16]
 8007508:	f107 0108 	add.w	r1, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007512:	e05d      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa97 	bl	8007a4a <USBD_CtlError>
            err++;
 800751c:	7afb      	ldrb	r3, [r7, #11]
 800751e:	3301      	adds	r3, #1
 8007520:	72fb      	strb	r3, [r7, #11]
          break;
 8007522:	e055      	b.n	80075d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7c12      	ldrb	r2, [r2, #16]
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007546:	e043      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa7d 	bl	8007a4a <USBD_CtlError>
            err++;
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	3301      	adds	r3, #1
 8007554:	72fb      	strb	r3, [r7, #11]
          break;
 8007556:	e03b      	b.n	80075d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	7c12      	ldrb	r2, [r2, #16]
 8007570:	f107 0108 	add.w	r1, r7, #8
 8007574:	4610      	mov	r0, r2
 8007576:	4798      	blx	r3
 8007578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757a:	e029      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa63 	bl	8007a4a <USBD_CtlError>
            err++;
 8007584:	7afb      	ldrb	r3, [r7, #11]
 8007586:	3301      	adds	r3, #1
 8007588:	72fb      	strb	r3, [r7, #11]
          break;
 800758a:	e021      	b.n	80075d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7c12      	ldrb	r2, [r2, #16]
 80075a4:	f107 0108 	add.w	r1, r7, #8
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ae:	e00f      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa49 	bl	8007a4a <USBD_CtlError>
            err++;
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	3301      	adds	r3, #1
 80075bc:	72fb      	strb	r3, [r7, #11]
          break;
 80075be:	e007      	b.n	80075d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa41 	bl	8007a4a <USBD_CtlError>
          err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075ce:	bf00      	nop
      }
      break;
 80075d0:	e037      	b.n	8007642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7c1b      	ldrb	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e2:	f107 0208 	add.w	r2, r7, #8
 80075e6:	4610      	mov	r0, r2
 80075e8:	4798      	blx	r3
 80075ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075ec:	e029      	b.n	8007642 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fa2a 	bl	8007a4a <USBD_CtlError>
        err++;
 80075f6:	7afb      	ldrb	r3, [r7, #11]
 80075f8:	3301      	adds	r3, #1
 80075fa:	72fb      	strb	r3, [r7, #11]
      break;
 80075fc:	e021      	b.n	8007642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7c1b      	ldrb	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10d      	bne.n	8007622 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	f107 0208 	add.w	r2, r7, #8
 8007612:	4610      	mov	r0, r2
 8007614:	4798      	blx	r3
 8007616:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	2207      	movs	r2, #7
 800761e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007620:	e00f      	b.n	8007642 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa10 	bl	8007a4a <USBD_CtlError>
        err++;
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	3301      	adds	r3, #1
 800762e:	72fb      	strb	r3, [r7, #11]
      break;
 8007630:	e007      	b.n	8007642 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fa08 	bl	8007a4a <USBD_CtlError>
      err++;
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	3301      	adds	r3, #1
 800763e:	72fb      	strb	r3, [r7, #11]
      break;
 8007640:	bf00      	nop
  }

  if (err != 0U)
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d11e      	bne.n	8007686 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	88db      	ldrh	r3, [r3, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d016      	beq.n	800767e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007650:	893b      	ldrh	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00e      	beq.n	8007674 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	88da      	ldrh	r2, [r3, #6]
 800765a:	893b      	ldrh	r3, [r7, #8]
 800765c:	4293      	cmp	r3, r2
 800765e:	bf28      	it	cs
 8007660:	4613      	movcs	r3, r2
 8007662:	b29b      	uxth	r3, r3
 8007664:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007666:	893b      	ldrh	r3, [r7, #8]
 8007668:	461a      	mov	r2, r3
 800766a:	68f9      	ldr	r1, [r7, #12]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa5d 	bl	8007b2c <USBD_CtlSendData>
 8007672:	e009      	b.n	8007688 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9e7 	bl	8007a4a <USBD_CtlError>
 800767c:	e004      	b.n	8007688 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 faae 	bl	8007be0 <USBD_CtlSendStatus>
 8007684:	e000      	b.n	8007688 <USBD_GetDescriptor+0x2cc>
    return;
 8007686:	bf00      	nop
  }
}
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop

08007690 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	889b      	ldrh	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d131      	bne.n	8007706 <USBD_SetAddress+0x76>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d12d      	bne.n	8007706 <USBD_SetAddress+0x76>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	885b      	ldrh	r3, [r3, #2]
 80076ae:	2b7f      	cmp	r3, #127	; 0x7f
 80076b0:	d829      	bhi.n	8007706 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d104      	bne.n	80076d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f9bc 	bl	8007a4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	e01d      	b.n	8007710 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fed5 	bl	8008490 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa7a 	bl	8007be0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fa:	e009      	b.n	8007710 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007704:	e004      	b.n	8007710 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f99e 	bl	8007a4a <USBD_CtlError>
  }
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	b2da      	uxtb	r2, r3
 800772c:	4b4e      	ldr	r3, [pc, #312]	; (8007868 <USBD_SetConfig+0x150>)
 800772e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007730:	4b4d      	ldr	r3, [pc, #308]	; (8007868 <USBD_SetConfig+0x150>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d905      	bls.n	8007744 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f985 	bl	8007a4a <USBD_CtlError>
    return USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	e08c      	b.n	800785e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d002      	beq.n	8007756 <USBD_SetConfig+0x3e>
 8007750:	2b03      	cmp	r3, #3
 8007752:	d029      	beq.n	80077a8 <USBD_SetConfig+0x90>
 8007754:	e075      	b.n	8007842 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007756:	4b44      	ldr	r3, [pc, #272]	; (8007868 <USBD_SetConfig+0x150>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d020      	beq.n	80077a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800775e:	4b42      	ldr	r3, [pc, #264]	; (8007868 <USBD_SetConfig+0x150>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007768:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <USBD_SetConfig+0x150>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fe ffe7 	bl	8006742 <USBD_SetClassConfig>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f962 	bl	8007a4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800778e:	e065      	b.n	800785c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fa25 	bl	8007be0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2203      	movs	r2, #3
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800779e:	e05d      	b.n	800785c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa1d 	bl	8007be0 <USBD_CtlSendStatus>
      break;
 80077a6:	e059      	b.n	800785c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077a8:	4b2f      	ldr	r3, [pc, #188]	; (8007868 <USBD_SetConfig+0x150>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d112      	bne.n	80077d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077b8:	4b2b      	ldr	r3, [pc, #172]	; (8007868 <USBD_SetConfig+0x150>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077c2:	4b29      	ldr	r3, [pc, #164]	; (8007868 <USBD_SetConfig+0x150>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7fe ffd6 	bl	800677a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa06 	bl	8007be0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077d4:	e042      	b.n	800785c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077d6:	4b24      	ldr	r3, [pc, #144]	; (8007868 <USBD_SetConfig+0x150>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d02a      	beq.n	800783a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7fe ffc4 	bl	800677a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <USBD_SetConfig+0x150>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077fc:	4b1a      	ldr	r3, [pc, #104]	; (8007868 <USBD_SetConfig+0x150>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fe ff9d 	bl	8006742 <USBD_SetClassConfig>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00f      	beq.n	8007832 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f918 	bl	8007a4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fe ffa9 	bl	800677a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007830:	e014      	b.n	800785c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9d4 	bl	8007be0 <USBD_CtlSendStatus>
      break;
 8007838:	e010      	b.n	800785c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9d0 	bl	8007be0 <USBD_CtlSendStatus>
      break;
 8007840:	e00c      	b.n	800785c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f900 	bl	8007a4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <USBD_SetConfig+0x150>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fe ff92 	bl	800677a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	73fb      	strb	r3, [r7, #15]
      break;
 800785a:	bf00      	nop
  }

  return ret;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200002b4 	.word	0x200002b4

0800786c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88db      	ldrh	r3, [r3, #6]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d004      	beq.n	8007888 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f8e2 	bl	8007a4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007886:	e023      	b.n	80078d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	dc02      	bgt.n	800789a <USBD_GetConfig+0x2e>
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc03      	bgt.n	80078a0 <USBD_GetConfig+0x34>
 8007898:	e015      	b.n	80078c6 <USBD_GetConfig+0x5a>
 800789a:	2b03      	cmp	r3, #3
 800789c:	d00b      	beq.n	80078b6 <USBD_GetConfig+0x4a>
 800789e:	e012      	b.n	80078c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3308      	adds	r3, #8
 80078aa:	2201      	movs	r2, #1
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f93c 	bl	8007b2c <USBD_CtlSendData>
        break;
 80078b4:	e00c      	b.n	80078d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	2201      	movs	r2, #1
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f934 	bl	8007b2c <USBD_CtlSendData>
        break;
 80078c4:	e004      	b.n	80078d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f8be 	bl	8007a4a <USBD_CtlError>
        break;
 80078ce:	bf00      	nop
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d81e      	bhi.n	800792e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	88db      	ldrh	r3, [r3, #6]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d004      	beq.n	8007902 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f8a5 	bl	8007a4a <USBD_CtlError>
        break;
 8007900:	e01a      	b.n	8007938 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f043 0202 	orr.w	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	330c      	adds	r3, #12
 8007922:	2202      	movs	r2, #2
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f900 	bl	8007b2c <USBD_CtlSendData>
      break;
 800792c:	e004      	b.n	8007938 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f88a 	bl	8007a4a <USBD_CtlError>
      break;
 8007936:	bf00      	nop
  }
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d107      	bne.n	8007962 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f940 	bl	8007be0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007960:	e013      	b.n	800798a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d10b      	bne.n	8007982 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	889b      	ldrh	r3, [r3, #4]
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	b29b      	uxth	r3, r3
 8007972:	b2da      	uxtb	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f930 	bl	8007be0 <USBD_CtlSendStatus>
}
 8007980:	e003      	b.n	800798a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f860 	bl	8007a4a <USBD_CtlError>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d80b      	bhi.n	80079c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	885b      	ldrh	r3, [r3, #2]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d10c      	bne.n	80079cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f910 	bl	8007be0 <USBD_CtlSendStatus>
      }
      break;
 80079c0:	e004      	b.n	80079cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f840 	bl	8007a4a <USBD_CtlError>
      break;
 80079ca:	e000      	b.n	80079ce <USBD_ClrFeature+0x3c>
      break;
 80079cc:	bf00      	nop
  }
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	781a      	ldrb	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	781a      	ldrb	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3301      	adds	r3, #1
 80079fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff fa41 	bl	8006e88 <SWAPBYTE>
 8007a06:	4603      	mov	r3, r0
 8007a08:	461a      	mov	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff fa34 	bl	8006e88 <SWAPBYTE>
 8007a20:	4603      	mov	r3, r0
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff fa27 	bl	8006e88 <SWAPBYTE>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	80da      	strh	r2, [r3, #6]
}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fcb0 	bl	80083bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fcac 	bl	80083bc <USBD_LL_StallEP>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d036      	beq.n	8007af0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a86:	6938      	ldr	r0, [r7, #16]
 8007a88:	f000 f836 	bl	8007af8 <USBD_GetLen>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	3301      	adds	r3, #1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7812      	ldrb	r2, [r2, #0]
 8007aa4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007abc:	e013      	b.n	8007ae6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3301      	adds	r3, #1
 8007ace:	613b      	str	r3, [r7, #16]
    idx++;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	4413      	add	r3, r2
 8007adc:	2200      	movs	r2, #0
 8007ade:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e7      	bne.n	8007abe <USBD_GetString+0x52>
 8007aee:	e000      	b.n	8007af2 <USBD_GetString+0x86>
    return;
 8007af0:	bf00      	nop
  }
}
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b08:	e005      	b.n	8007b16 <USBD_GetLen+0x1e>
  {
    len++;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f5      	bne.n	8007b0a <USBD_GetLen+0x12>
  }

  return len;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	2100      	movs	r1, #0
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fcbb 	bl	80084ce <USBD_LL_Transmit>

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fcaa 	bl	80084ce <USBD_LL_Transmit>

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2203      	movs	r2, #3
 8007b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	2100      	movs	r1, #0
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fcae 	bl	8008510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fc9d 	bl	8008510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2204      	movs	r2, #4
 8007bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc69 	bl	80084ce <USBD_LL_Transmit>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2205      	movs	r2, #5
 8007c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c16:	2300      	movs	r3, #0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fc77 	bl	8008510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c30:	2200      	movs	r2, #0
 8007c32:	4912      	ldr	r1, [pc, #72]	; (8007c7c <MX_USB_DEVICE_Init+0x50>)
 8007c34:	4812      	ldr	r0, [pc, #72]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c36:	f7fe fd07 	bl	8006648 <USBD_Init>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c40:	f7f8 ff26 	bl	8000a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c44:	490f      	ldr	r1, [pc, #60]	; (8007c84 <MX_USB_DEVICE_Init+0x58>)
 8007c46:	480e      	ldr	r0, [pc, #56]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c48:	f7fe fd2e 	bl	80066a8 <USBD_RegisterClass>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c52:	f7f8 ff1d 	bl	8000a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c56:	490c      	ldr	r1, [pc, #48]	; (8007c88 <MX_USB_DEVICE_Init+0x5c>)
 8007c58:	4809      	ldr	r0, [pc, #36]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c5a:	f7fe fc65 	bl	8006528 <USBD_CDC_RegisterInterface>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c64:	f7f8 ff14 	bl	8000a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c68:	4805      	ldr	r0, [pc, #20]	; (8007c80 <MX_USB_DEVICE_Init+0x54>)
 8007c6a:	f7fe fd53 	bl	8006714 <USBD_Start>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c74:	f7f8 ff0c 	bl	8000a90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c78:	bf00      	nop
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	200000ac 	.word	0x200000ac
 8007c80:	200002b8 	.word	0x200002b8
 8007c84:	20000018 	.word	0x20000018
 8007c88:	20000098 	.word	0x20000098

08007c8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c90:	2200      	movs	r2, #0
 8007c92:	4905      	ldr	r1, [pc, #20]	; (8007ca8 <CDC_Init_FS+0x1c>)
 8007c94:	4805      	ldr	r0, [pc, #20]	; (8007cac <CDC_Init_FS+0x20>)
 8007c96:	f7fe fc61 	bl	800655c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c9a:	4905      	ldr	r1, [pc, #20]	; (8007cb0 <CDC_Init_FS+0x24>)
 8007c9c:	4803      	ldr	r0, [pc, #12]	; (8007cac <CDC_Init_FS+0x20>)
 8007c9e:	f7fe fc7f 	bl	80065a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ca2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000d94 	.word	0x20000d94
 8007cac:	200002b8 	.word	0x200002b8
 8007cb0:	20000594 	.word	0x20000594

08007cb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	71fb      	strb	r3, [r7, #7]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	2b23      	cmp	r3, #35	; 0x23
 8007cd8:	d84a      	bhi.n	8007d70 <CDC_Control_FS+0xac>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <CDC_Control_FS+0x1c>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007d71 	.word	0x08007d71
 8007ce4:	08007d71 	.word	0x08007d71
 8007ce8:	08007d71 	.word	0x08007d71
 8007cec:	08007d71 	.word	0x08007d71
 8007cf0:	08007d71 	.word	0x08007d71
 8007cf4:	08007d71 	.word	0x08007d71
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d71 	.word	0x08007d71
 8007d00:	08007d71 	.word	0x08007d71
 8007d04:	08007d71 	.word	0x08007d71
 8007d08:	08007d71 	.word	0x08007d71
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d71 	.word	0x08007d71
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007d71 	.word	0x08007d71
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d71 	.word	0x08007d71
 8007d2c:	08007d71 	.word	0x08007d71
 8007d30:	08007d71 	.word	0x08007d71
 8007d34:	08007d71 	.word	0x08007d71
 8007d38:	08007d71 	.word	0x08007d71
 8007d3c:	08007d71 	.word	0x08007d71
 8007d40:	08007d71 	.word	0x08007d71
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007d71 	.word	0x08007d71
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d71 	.word	0x08007d71
 8007d68:	08007d71 	.word	0x08007d71
 8007d6c:	08007d71 	.word	0x08007d71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d70:	bf00      	nop
  }

  return (USBD_OK);
 8007d72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <CDC_Receive_FS+0x24>)
 8007d8e:	f7fe fc07 	bl	80065a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d92:	4804      	ldr	r0, [pc, #16]	; (8007da4 <CDC_Receive_FS+0x24>)
 8007d94:	f7fe fc22 	bl	80065dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200002b8 	.word	0x200002b8

08007da8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2212      	movs	r2, #18
 8007ddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007dde:	4b03      	ldr	r3, [pc, #12]	; (8007dec <USBD_FS_DeviceDescriptor+0x20>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	200000c8 	.word	0x200000c8

08007df0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	200000dc 	.word	0x200000dc

08007e14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4907      	ldr	r1, [pc, #28]	; (8007e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e2a:	4808      	ldr	r0, [pc, #32]	; (8007e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e2c:	f7ff fe1e 	bl	8007a6c <USBD_GetString>
 8007e30:	e004      	b.n	8007e3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4904      	ldr	r1, [pc, #16]	; (8007e48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e36:	4805      	ldr	r0, [pc, #20]	; (8007e4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e38:	f7ff fe18 	bl	8007a6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001594 	.word	0x20001594
 8007e4c:	08008670 	.word	0x08008670

08007e50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	6039      	str	r1, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	4904      	ldr	r1, [pc, #16]	; (8007e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e60:	4804      	ldr	r0, [pc, #16]	; (8007e74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e62:	f7ff fe03 	bl	8007a6c <USBD_GetString>
  return USBD_StrDesc;
 8007e66:	4b02      	ldr	r3, [pc, #8]	; (8007e70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20001594 	.word	0x20001594
 8007e74:	08008688 	.word	0x08008688

08007e78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	221a      	movs	r2, #26
 8007e88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e8a:	f000 f843 	bl	8007f14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e8e:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	200000e0 	.word	0x200000e0

08007e9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d105      	bne.n	8007eba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	4907      	ldr	r1, [pc, #28]	; (8007ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eb2:	4808      	ldr	r0, [pc, #32]	; (8007ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007eb4:	f7ff fdda 	bl	8007a6c <USBD_GetString>
 8007eb8:	e004      	b.n	8007ec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ebe:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ec0:	f7ff fdd4 	bl	8007a6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001594 	.word	0x20001594
 8007ed4:	0800869c 	.word	0x0800869c

08007ed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6039      	str	r1, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d105      	bne.n	8007ef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4907      	ldr	r1, [pc, #28]	; (8007f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007eee:	4808      	ldr	r0, [pc, #32]	; (8007f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ef0:	f7ff fdbc 	bl	8007a6c <USBD_GetString>
 8007ef4:	e004      	b.n	8007f00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	4904      	ldr	r1, [pc, #16]	; (8007f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007efa:	4805      	ldr	r0, [pc, #20]	; (8007f10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007efc:	f7ff fdb6 	bl	8007a6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20001594 	.word	0x20001594
 8007f10:	080086a8 	.word	0x080086a8

08007f14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f1a:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <Get_SerialNum+0x44>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f20:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <Get_SerialNum+0x48>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f26:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <Get_SerialNum+0x4c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	4909      	ldr	r1, [pc, #36]	; (8007f64 <Get_SerialNum+0x50>)
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 f814 	bl	8007f6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f44:	2204      	movs	r2, #4
 8007f46:	4908      	ldr	r1, [pc, #32]	; (8007f68 <Get_SerialNum+0x54>)
 8007f48:	68b8      	ldr	r0, [r7, #8]
 8007f4a:	f000 f80f 	bl	8007f6c <IntToUnicode>
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	1fff7a10 	.word	0x1fff7a10
 8007f5c:	1fff7a14 	.word	0x1fff7a14
 8007f60:	1fff7a18 	.word	0x1fff7a18
 8007f64:	200000e2 	.word	0x200000e2
 8007f68:	200000f2 	.word	0x200000f2

08007f6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]
 8007f82:	e027      	b.n	8007fd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	0f1b      	lsrs	r3, r3, #28
 8007f88:	2b09      	cmp	r3, #9
 8007f8a:	d80b      	bhi.n	8007fa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	0f1b      	lsrs	r3, r3, #28
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	4619      	mov	r1, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3230      	adds	r2, #48	; 0x30
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e00a      	b.n	8007fba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	0f1b      	lsrs	r3, r3, #28
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	4619      	mov	r1, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	440b      	add	r3, r1
 8007fb4:	3237      	adds	r2, #55	; 0x37
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	4413      	add	r3, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	75fb      	strb	r3, [r7, #23]
 8007fd4:	7dfa      	ldrb	r2, [r7, #23]
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d3d3      	bcc.n	8007f84 <IntToUnicode+0x18>
  }
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
	...

08007fec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff4:	f107 0314 	add.w	r3, r7, #20
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	609a      	str	r2, [r3, #8]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800800c:	d13a      	bne.n	8008084 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	4b1e      	ldr	r3, [pc, #120]	; (800808c <HAL_PCD_MspInit+0xa0>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	4a1d      	ldr	r2, [pc, #116]	; (800808c <HAL_PCD_MspInit+0xa0>)
 8008018:	f043 0301 	orr.w	r3, r3, #1
 800801c:	6313      	str	r3, [r2, #48]	; 0x30
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <HAL_PCD_MspInit+0xa0>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800802a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800802e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008030:	2302      	movs	r3, #2
 8008032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008034:	2300      	movs	r3, #0
 8008036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008038:	2303      	movs	r3, #3
 800803a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800803c:	230a      	movs	r3, #10
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	4619      	mov	r1, r3
 8008046:	4812      	ldr	r0, [pc, #72]	; (8008090 <HAL_PCD_MspInit+0xa4>)
 8008048:	f7f9 fb30 	bl	80016ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <HAL_PCD_MspInit+0xa0>)
 800804e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008050:	4a0e      	ldr	r2, [pc, #56]	; (800808c <HAL_PCD_MspInit+0xa0>)
 8008052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008056:	6353      	str	r3, [r2, #52]	; 0x34
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <HAL_PCD_MspInit+0xa0>)
 800805e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <HAL_PCD_MspInit+0xa0>)
 8008062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008066:	6453      	str	r3, [r2, #68]	; 0x44
 8008068:	4b08      	ldr	r3, [pc, #32]	; (800808c <HAL_PCD_MspInit+0xa0>)
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008074:	2200      	movs	r2, #0
 8008076:	2100      	movs	r1, #0
 8008078:	2043      	movs	r0, #67	; 0x43
 800807a:	f7f9 fae0 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800807e:	2043      	movs	r0, #67	; 0x43
 8008080:	f7f9 faf9 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008084:	bf00      	nop
 8008086:	3728      	adds	r7, #40	; 0x28
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40023800 	.word	0x40023800
 8008090:	40020000 	.word	0x40020000

08008094 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f7fe fb7f 	bl	80067ae <USBD_LL_SetupStage>
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80080ca:	78fa      	ldrb	r2, [r7, #3]
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
 80080d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	4619      	mov	r1, r3
 80080e2:	f7fe fbb9 	bl	8006858 <USBD_LL_DataOutStage>
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008100:	78fa      	ldrb	r2, [r7, #3]
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	334c      	adds	r3, #76	; 0x4c
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	4619      	mov	r1, r3
 8008116:	f7fe fc52 	bl	80069be <USBD_LL_DataInStage>
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fd86 	bl	8006c42 <USBD_LL_SOF>
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008146:	2301      	movs	r3, #1
 8008148:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d001      	beq.n	8008156 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008152:	f7f8 fc9d 	bl	8000a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800815c:	7bfa      	ldrb	r2, [r7, #15]
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fd30 	bl	8006bc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fcd8 	bl	8006b22 <USBD_LL_Reset>
}
 8008172:	bf00      	nop
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fd2b 	bl	8006be6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6812      	ldr	r2, [r2, #0]
 800819e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <HAL_PCD_SuspendCallback+0x48>)
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	4a03      	ldr	r2, [pc, #12]	; (80081c4 <HAL_PCD_SuspendCallback+0x48>)
 80081b6:	f043 0306 	orr.w	r3, r3, #6
 80081ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	e000ed00 	.word	0xe000ed00

080081c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fd1b 	bl	8006c12 <USBD_LL_Resume>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fd73 	bl	8006ce6 <USBD_LL_IsoOUTIncomplete>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	4611      	mov	r1, r2
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fd2f 	bl	8006c82 <USBD_LL_IsoINIncomplete>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fd85 	bl	8006d4a <USBD_LL_DevConnected>
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fd82 	bl	8006d60 <USBD_LL_DevDisconnected>
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d13c      	bne.n	80082ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008274:	4a20      	ldr	r2, [pc, #128]	; (80082f8 <USBD_LL_Init+0x94>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <USBD_LL_Init+0x94>)
 8008280:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008284:	4b1c      	ldr	r3, [pc, #112]	; (80082f8 <USBD_LL_Init+0x94>)
 8008286:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800828a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <USBD_LL_Init+0x94>)
 800828e:	2204      	movs	r2, #4
 8008290:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008292:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <USBD_LL_Init+0x94>)
 8008294:	2202      	movs	r2, #2
 8008296:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <USBD_LL_Init+0x94>)
 800829a:	2200      	movs	r2, #0
 800829c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800829e:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <USBD_LL_Init+0x94>)
 80082a0:	2202      	movs	r2, #2
 80082a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082a4:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <USBD_LL_Init+0x94>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <USBD_LL_Init+0x94>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <USBD_LL_Init+0x94>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082b6:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <USBD_LL_Init+0x94>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082bc:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <USBD_LL_Init+0x94>)
 80082be:	2200      	movs	r2, #0
 80082c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082c2:	480d      	ldr	r0, [pc, #52]	; (80082f8 <USBD_LL_Init+0x94>)
 80082c4:	f7f9 fb8f 	bl	80019e6 <HAL_PCD_Init>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082ce:	f7f8 fbdf 	bl	8000a90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082d2:	2180      	movs	r1, #128	; 0x80
 80082d4:	4808      	ldr	r0, [pc, #32]	; (80082f8 <USBD_LL_Init+0x94>)
 80082d6:	f7fa fde6 	bl	8002ea6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082da:	2240      	movs	r2, #64	; 0x40
 80082dc:	2100      	movs	r1, #0
 80082de:	4806      	ldr	r0, [pc, #24]	; (80082f8 <USBD_LL_Init+0x94>)
 80082e0:	f7fa fd9a 	bl	8002e18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082e4:	2280      	movs	r2, #128	; 0x80
 80082e6:	2101      	movs	r1, #1
 80082e8:	4803      	ldr	r0, [pc, #12]	; (80082f8 <USBD_LL_Init+0x94>)
 80082ea:	f7fa fd95 	bl	8002e18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20001794 	.word	0x20001794

080082fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008312:	4618      	mov	r0, r3
 8008314:	f7f9 fc84 	bl	8001c20 <HAL_PCD_Start>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f942 	bl	80085a8 <USBD_Get_USB_Status>
 8008324:	4603      	mov	r3, r0
 8008326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008328:	7bbb      	ldrb	r3, [r7, #14]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	461a      	mov	r2, r3
 8008340:	4603      	mov	r3, r0
 8008342:	70fb      	strb	r3, [r7, #3]
 8008344:	460b      	mov	r3, r1
 8008346:	70bb      	strb	r3, [r7, #2]
 8008348:	4613      	mov	r3, r2
 800834a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800835a:	78bb      	ldrb	r3, [r7, #2]
 800835c:	883a      	ldrh	r2, [r7, #0]
 800835e:	78f9      	ldrb	r1, [r7, #3]
 8008360:	f7fa f955 	bl	800260e <HAL_PCD_EP_Open>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f91c 	bl	80085a8 <USBD_Get_USB_Status>
 8008370:	4603      	mov	r3, r0
 8008372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008374:	7bbb      	ldrb	r3, [r7, #14]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008398:	78fa      	ldrb	r2, [r7, #3]
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f7fa f99e 	bl	80026de <HAL_PCD_EP_Close>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f8fd 	bl	80085a8 <USBD_Get_USB_Status>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fa fa76 	bl	80028cc <HAL_PCD_EP_SetStall>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f8de 	bl	80085a8 <USBD_Get_USB_Status>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008414:	78fa      	ldrb	r2, [r7, #3]
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f7fa fabb 	bl	8002994 <HAL_PCD_EP_ClrStall>
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 f8bf 	bl	80085a8 <USBD_Get_USB_Status>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800844a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800844c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008450:	2b00      	cmp	r3, #0
 8008452:	da0b      	bge.n	800846c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	333e      	adds	r3, #62	; 0x3e
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	e00b      	b.n	8008484 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008482:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084aa:	78fa      	ldrb	r2, [r7, #3]
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fa f888 	bl	80025c4 <HAL_PCD_SetAddress>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f874 	bl	80085a8 <USBD_Get_USB_Status>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	460b      	mov	r3, r1
 80084dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084ec:	7af9      	ldrb	r1, [r7, #11]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	f7fa f9a1 	bl	8002838 <HAL_PCD_EP_Transmit>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 f853 	bl	80085a8 <USBD_Get_USB_Status>
 8008502:	4603      	mov	r3, r0
 8008504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008506:	7dbb      	ldrb	r3, [r7, #22]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	460b      	mov	r3, r1
 800851e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800852e:	7af9      	ldrb	r1, [r7, #11]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f7fa f91d 	bl	8002772 <HAL_PCD_EP_Receive>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f832 	bl	80085a8 <USBD_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008548:	7dbb      	ldrb	r3, [r7, #22]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7fa f94d 	bl	8002808 <HAL_PCD_EP_GetRxCount>
 800856e:	4603      	mov	r3, r0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_static_malloc+0x18>)
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20001ca0 	.word	0x20001ca0

08008594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d817      	bhi.n	80085ec <USBD_Get_USB_Status+0x44>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <USBD_Get_USB_Status+0x1c>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085db 	.word	0x080085db
 80085cc:	080085e1 	.word	0x080085e1
 80085d0:	080085e7 	.word	0x080085e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
    break;
 80085d8:	e00b      	b.n	80085f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
    break;
 80085de:	e008      	b.n	80085f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
    break;
 80085e4:	e005      	b.n	80085f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	73fb      	strb	r3, [r7, #15]
    break;
 80085ea:	e002      	b.n	80085f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
    break;
 80085f0:	bf00      	nop
  }
  return usb_status;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <__libc_init_array>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4d0d      	ldr	r5, [pc, #52]	; (8008638 <__libc_init_array+0x38>)
 8008604:	4c0d      	ldr	r4, [pc, #52]	; (800863c <__libc_init_array+0x3c>)
 8008606:	1b64      	subs	r4, r4, r5
 8008608:	10a4      	asrs	r4, r4, #2
 800860a:	2600      	movs	r6, #0
 800860c:	42a6      	cmp	r6, r4
 800860e:	d109      	bne.n	8008624 <__libc_init_array+0x24>
 8008610:	4d0b      	ldr	r5, [pc, #44]	; (8008640 <__libc_init_array+0x40>)
 8008612:	4c0c      	ldr	r4, [pc, #48]	; (8008644 <__libc_init_array+0x44>)
 8008614:	f000 f820 	bl	8008658 <_init>
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	2600      	movs	r6, #0
 800861e:	42a6      	cmp	r6, r4
 8008620:	d105      	bne.n	800862e <__libc_init_array+0x2e>
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f855 3b04 	ldr.w	r3, [r5], #4
 8008628:	4798      	blx	r3
 800862a:	3601      	adds	r6, #1
 800862c:	e7ee      	b.n	800860c <__libc_init_array+0xc>
 800862e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008632:	4798      	blx	r3
 8008634:	3601      	adds	r6, #1
 8008636:	e7f2      	b.n	800861e <__libc_init_array+0x1e>
 8008638:	080086d0 	.word	0x080086d0
 800863c:	080086d0 	.word	0x080086d0
 8008640:	080086d0 	.word	0x080086d0
 8008644:	080086d4 	.word	0x080086d4

08008648 <memset>:
 8008648:	4402      	add	r2, r0
 800864a:	4603      	mov	r3, r0
 800864c:	4293      	cmp	r3, r2
 800864e:	d100      	bne.n	8008652 <memset+0xa>
 8008650:	4770      	bx	lr
 8008652:	f803 1b01 	strb.w	r1, [r3], #1
 8008656:	e7f9      	b.n	800864c <memset+0x4>

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
