
neptune-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001192c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08011ad0  08011ad0  00021ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120e4  080120e4  00030304  2**0
                  CONTENTS
  4 .ARM          00000008  080120e4  080120e4  000220e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120ec  080120ec  00030304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120ec  080120ec  000220ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120f0  080120f0  000220f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  20000000  080120f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068e0  20000304  080123f8  00030304  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006be4  080123f8  00036be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263ab  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578a  00000000  00000000  000566df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  0005be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c58  00000000  00000000  0005dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7d3  00000000  00000000  0005f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023afc  00000000  00000000  0007e17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac55a  00000000  00000000  000a1c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0014e1d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000922c  00000000  00000000  0014e294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000c27  00000000  00000000  001574c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011ab4 	.word	0x08011ab4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	08011ab4 	.word	0x08011ab4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <BMX055_init>:
/**
 @brief Begin Device
 @retval true normaly done
 @retval false device error
 */
bool BMX055_init(BMX055_Handle *bmx055) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	// Set CS pins HIGH
	HAL_GPIO_WritePin(bmx055->acc_CS_port, bmx055->acc_CS_pin, GPIO_PIN_SET);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6858      	ldr	r0, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	891b      	ldrh	r3, [r3, #8]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f003 f8ea 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->gyro_CS_port, bmx055->gyro_CS_pin, GPIO_PIN_SET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6918      	ldr	r0, [r3, #16]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	8a9b      	ldrh	r3, [r3, #20]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f003 f8e2 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->mag_CS_port, bmx055->mag_CS_pin, GPIO_PIN_SET);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69d8      	ldr	r0, [r3, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8c1b      	ldrh	r3, [r3, #32]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f003 f8da 	bl	8004148 <HAL_GPIO_WritePin>

	// Set accel scale factor and map to m/s^2
	// 12bit (4096) accelerometer maps to specified range. This is used to calculate scale factor.
	// Note: +-16g is range of 32g
	switch (bmx055->acc_range) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a9b      	ldrb	r3, [r3, #10]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d826      	bhi.n	8000fec <BMX055_init+0x90>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <BMX055_init+0x48>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fe5 	.word	0x08000fe5
 8000fa8:	08000fed 	.word	0x08000fed
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fed 	.word	0x08000fed
 8000fb4:	08000fed 	.word	0x08000fed
 8000fb8:	08000fd5 	.word	0x08000fd5
 8000fbc:	08000fed 	.word	0x08000fed
 8000fc0:	08000fed 	.word	0x08000fed
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08000fcd 	.word	0x08000fcd
	case BMX055_ACC_RANGE_16:
		// 16g
		bmx055->acc_rescale = (2.0 * 16.0 / 4096.0) * 9.81;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <BMX055_init+0x118>)
 8000fd0:	60da      	str	r2, [r3, #12]
		break;
 8000fd2:	e00b      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_8:
		// 8g
		bmx055->acc_rescale = (2.0 * 8.0 / 4096.0) * 9.81;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <BMX055_init+0x11c>)
 8000fd8:	60da      	str	r2, [r3, #12]
		break;
 8000fda:	e007      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_4:
		// 4g
		bmx055->acc_rescale = (2.0 * 4.0 / 4096.0) * 9.81;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <BMX055_init+0x120>)
 8000fe0:	60da      	str	r2, [r3, #12]
		break;
 8000fe2:	e003      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_2:
		// 2g
		bmx055->acc_rescale = (2.0 * 2.0 / 4096.0) * 9.81;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a26      	ldr	r2, [pc, #152]	; (8001080 <BMX055_init+0x124>)
 8000fe8:	60da      	str	r2, [r3, #12]
		break;
 8000fea:	bf00      	nop
	}

	// Set gyro scale factor for map to degrees and map from deg to rad
	// 16bit (65536) gyro maps to specified range. This is used to calculate scale factor.
	// Note: +-2000 deg/s is range of 4000 deg/s
	switch (bmx055->gyro_range) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7d9b      	ldrb	r3, [r3, #22]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d821      	bhi.n	8001038 <BMX055_init+0xdc>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <BMX055_init+0xa0>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	08001011 	.word	0x08001011
 8001000:	08001019 	.word	0x08001019
 8001004:	08001021 	.word	0x08001021
 8001008:	08001029 	.word	0x08001029
 800100c:	08001031 	.word	0x08001031
	case BMX055_GYRO_RANGE_16_4:
		// 2000
		bmx055->gyro_rescale = (2.0 * 2000.0 / 65536.0) * (M_PI / 180.0);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <BMX055_init+0x128>)
 8001014:	619a      	str	r2, [r3, #24]
		break;
 8001016:	e00f      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_32_8:
		// 1000
		bmx055->gyro_rescale = (2.0 * 1000.0 / 65536.0) * (M_PI / 180.0);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <BMX055_init+0x12c>)
 800101c:	619a      	str	r2, [r3, #24]
		break;
 800101e:	e00b      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_65_6:
		// 500
		bmx055->gyro_rescale = (2.0 * 500.0 / 65536.0) * (M_PI / 180.0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <BMX055_init+0x130>)
 8001024:	619a      	str	r2, [r3, #24]
		break;
 8001026:	e007      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_131_2:
		// 250
		bmx055->gyro_rescale = (2.0 * 250.0 / 65536.0) * (M_PI / 180.0);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <BMX055_init+0x134>)
 800102c:	619a      	str	r2, [r3, #24]
		break;
 800102e:	e003      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_262_4:
		// 125
		bmx055->gyro_rescale = (2.0 * 125.0 / 65536.0) * (M_PI / 180.0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <BMX055_init+0x138>)
 8001034:	619a      	str	r2, [r3, #24]
		break;
 8001036:	bf00      	nop
	}

	// Set mag scale factor to units of uT
	// XY axes are 12bit (4096) and Z axis is 15bit (32768).
	// XY axis maximum value is +-1300uT and Z axis maximum value is +-2500uT
	bmx055->mag_rescale_xy = (2.0*1300.0 / 4096.0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <BMX055_init+0x13c>)
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
	bmx055->mag_rescale_z = (2.0*2500.0 / 32768.0);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <BMX055_init+0x140>)
 8001042:	629a      	str	r2, [r3, #40]	; 0x28


	if (BMX055_searchDevice(bmx055)) {
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f82b 	bl	80010a0 <BMX055_searchDevice>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <BMX055_init+0x10e>
		BMX055_configuration(bmx055);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f878 	bl	8001146 <BMX055_configuration>
//		uint8_t res = perform_adv_self_test(bmx055);
		if (!perform_normal_self_test(bmx055))
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fc0a 	bl	8001870 <perform_normal_self_test>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <BMX055_init+0x10a>
			return true;
 8001062:	2301      	movs	r3, #1
 8001064:	e002      	b.n	800106c <BMX055_init+0x110>
		else
			return false;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <BMX055_init+0x110>
	} else {
		return false;
 800106a:	2300      	movs	r3, #0
	}
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	3d9cf5c3 	.word	0x3d9cf5c3
 8001078:	3d1cf5c3 	.word	0x3d1cf5c3
 800107c:	3c9cf5c3 	.word	0x3c9cf5c3
 8001080:	3c1cf5c3 	.word	0x3c1cf5c3
 8001084:	3a8ba058 	.word	0x3a8ba058
 8001088:	3a0ba058 	.word	0x3a0ba058
 800108c:	398ba058 	.word	0x398ba058
 8001090:	390ba058 	.word	0x390ba058
 8001094:	388ba058 	.word	0x388ba058
 8001098:	3f228000 	.word	0x3f228000
 800109c:	3e1c4000 	.word	0x3e1c4000

080010a0 <BMX055_searchDevice>:
/**
 * @brief Search bmx055
 * @retval true  Found Device
 * @retval false : Not Found Device
 */
bool BMX055_searchDevice(BMX055_Handle *bmx055) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t acc_device = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	uint8_t mag_device = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

	// Mag SoftReset
	uint8_t data = 0x82;
 80010b0:	2382      	movs	r3, #130	; 0x82
 80010b2:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69d9      	ldr	r1, [r3, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8c1a      	ldrh	r2, [r3, #32]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030d 	add.w	r3, r7, #13
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	234b      	movs	r3, #75	; 0x4b
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fb6f 	bl	80017ac <BMX055_writeSPI>
	HAL_Delay(2);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f002 fadc 	bl	800368c <HAL_Delay>

	/* Mag Setting */
	// set sleep mode
	data = BMX055_MAG_POW_CTL_SLEEP_MODE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69d9      	ldr	r1, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	8c1a      	ldrh	r2, [r3, #32]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f107 030d 	add.w	r3, r7, #13
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	234b      	movs	r3, #75	; 0x4b
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fb5d 	bl	80017ac <BMX055_writeSPI>
	HAL_Delay(3);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f002 faca 	bl	800368c <HAL_Delay>

	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_WHO_AM_I_REG, &acc_device, 1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6859      	ldr	r1, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	891a      	ldrh	r2, [r3, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fb79 	bl	8001804 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_CHIP_ID, &mag_device, 1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69d9      	ldr	r1, [r3, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	8c1a      	ldrh	r2, [r3, #32]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f107 030e 	add.w	r3, r7, #14
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fb6c 	bl	8001804 <BMX055_readSPI>

	if (acc_device == BMX055_ACC_DEVICE && mag_device == BMX055_MAG_DEVICE) {
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2bfa      	cmp	r3, #250	; 0xfa
 8001130:	d104      	bne.n	800113c <BMX055_searchDevice+0x9c>
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	2b32      	cmp	r3, #50	; 0x32
 8001136:	d101      	bne.n	800113c <BMX055_searchDevice+0x9c>
		return true;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <BMX055_searchDevice+0x9e>
	} else {
		return false;
 800113c:	2300      	movs	r3, #0
	}
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <BMX055_configuration>:

/**
 * @brief Set Config
 */
void BMX055_configuration(BMX055_Handle *bmx055) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af02      	add	r7, sp, #8
 800114c:	6078      	str	r0, [r7, #4]
	/* SoftReset */
	uint8_t data = BMX055_INITIATED_SOFT_RESET;
 800114e:	23b6      	movs	r3, #182	; 0xb6
 8001150:	73fb      	strb	r3, [r7, #15]
	// Accel SoftReset
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_RESET_REG, &data, 1);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6859      	ldr	r1, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	891a      	ldrh	r2, [r3, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2314      	movs	r3, #20
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fb20 	bl	80017ac <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 800116c:	2002      	movs	r0, #2
 800116e:	f002 fa8d 	bl	800368c <HAL_Delay>
	// Gyro SoftReset
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_RESET_REG, &data, 1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8a9a      	ldrh	r2, [r3, #20]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2314      	movs	r3, #20
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fb10 	bl	80017ac <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 800118c:	2002      	movs	r0, #2
 800118e:	f002 fa7d 	bl	800368c <HAL_Delay>

	// adv.st, DataRate, OperationMode, SelfTest (NomalMode)
	data = bmx055->mag_data_rate;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001198:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69d9      	ldr	r1, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	8c1a      	ldrh	r2, [r3, #32]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 030f 	add.w	r3, r7, #15
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	234c      	movs	r3, #76	; 0x4c
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fafc 	bl	80017ac <BMX055_writeSPI>
	// Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
	data = 0x04;
 80011b4:	2304      	movs	r3, #4
 80011b6:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_XY_REG, &data, 1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8c1a      	ldrh	r2, [r3, #32]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2351      	movs	r3, #81	; 0x51
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 faed 	bl	80017ac <BMX055_writeSPI>
	// Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
	data = 0x0F;
 80011d2:	230f      	movs	r3, #15
 80011d4:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_Z_REG, &data, 1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69d9      	ldr	r1, [r3, #28]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	8c1a      	ldrh	r2, [r3, #32]
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f107 030f 	add.w	r3, r7, #15
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2352      	movs	r3, #82	; 0x52
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fade 	bl	80017ac <BMX055_writeSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69d9      	ldr	r1, [r3, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	8c1a      	ldrh	r2, [r3, #32]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	234c      	movs	r3, #76	; 0x4c
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fafd 	bl	8001804 <BMX055_readSPI>

	/* Accel Setting */
	// Select Accel PMU Range
	data = bmx055->acc_range;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_RANGE_REG, &data, 1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891a      	ldrh	r2, [r3, #8]
 8001218:	2301      	movs	r3, #1
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	f107 030f 	add.w	r3, r7, #15
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	230f      	movs	r3, #15
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fac1 	bl	80017ac <BMX055_writeSPI>
	// Select Accel PMU_BW
	data = bmx055->acc_range;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a9b      	ldrb	r3, [r3, #10]
 800122e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_BW_REG, &data, 1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	891a      	ldrh	r2, [r3, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 030f 	add.w	r3, r7, #15
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2310      	movs	r3, #16
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fab1 	bl	80017ac <BMX055_writeSPI>
	// Select Accel PMU_LPW  (NomalMode, SleepDuration 0.5ms)
	data = BMX055_ACC_PMU_LPW_MODE_NOMAL | BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_LPW_REG, &data, 1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6859      	ldr	r1, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891a      	ldrh	r2, [r3, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f107 030f 	add.w	r3, r7, #15
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2311      	movs	r3, #17
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 faa2 	bl	80017ac <BMX055_writeSPI>

	/* Gyro Setting */
	// Select Gyro Range
	data = bmx055->gyro_range;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7d9b      	ldrb	r3, [r3, #22]
 800126c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_RANGE_REG, &data, 1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	8a9a      	ldrh	r2, [r3, #20]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	230f      	movs	r3, #15
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fa92 	bl	80017ac <BMX055_writeSPI>
	// Select Gyro BW
	data = bmx055->gyro_bandwidth;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7ddb      	ldrb	r3, [r3, #23]
 800128c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_BW_REG, &data, 1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8a9a      	ldrh	r2, [r3, #20]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2310      	movs	r3, #16
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa82 	bl	80017ac <BMX055_writeSPI>
	// Select Gyro LPM1 (NomalMode, SleepDuration 2ms)
	data = BMX055_GYRO_LPM1_MODE_NOMAL | BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_LPM1_REG, &data, 1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6919      	ldr	r1, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	8a9a      	ldrh	r2, [r3, #20]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 030f 	add.w	r3, r7, #15
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2311      	movs	r3, #17
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fa73 	bl	80017ac <BMX055_writeSPI>

	HAL_Delay(200);
 80012c6:	20c8      	movs	r0, #200	; 0xc8
 80012c8:	f002 f9e0 	bl	800368c <HAL_Delay>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <BMX055_readAccel>:

/**
 * @brief Read Accel
 * @param [out] *accl : accel value  (X-accel : accl[0], Y-accel : accl[1], Z-accel : accl[2])
 */
void BMX055_readAccel(BMX055_Handle *bmx055, float *accl) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b08d      	sub	sp, #52	; 0x34
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	uint16_t accl_data[6] = { 0 };
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
	int accel_read[3];

	// read accel value
	for (int i = 0; i < 6; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	e017      	b.n	8001320 <BMX055_readAccel+0x4c>
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8918      	ldrh	r0, [r3, #8]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3302      	adds	r3, #2
 80012fe:	b2dc      	uxtb	r4, r3
		BMX055_ACC_DATA_START_REG + i, &accl_data[i], 1);
 8001300:	f107 0218 	add.w	r2, r7, #24
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 800130a:	2201      	movs	r2, #1
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4623      	mov	r3, r4
 8001312:	4602      	mov	r2, r0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fa75 	bl	8001804 <BMX055_readSPI>
	for (int i = 0; i < 6; i++) {
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b05      	cmp	r3, #5
 8001324:	dde4      	ble.n	80012f0 <BMX055_readAccel+0x1c>
	}

	// conv data  accel:12bit
	accel_read[0] = ((accl_data[1] << 4) | (accl_data[0] >> 4));
 8001326:	8b7b      	ldrh	r3, [r7, #26]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	8b3a      	ldrh	r2, [r7, #24]
 800132c:	0912      	lsrs	r2, r2, #4
 800132e:	b292      	uxth	r2, r2
 8001330:	4313      	orrs	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

	if (accel_read[0] > 2047) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133a:	db03      	blt.n	8001344 <BMX055_readAccel+0x70>
		accel_read[0] -= 4096;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001342:	60fb      	str	r3, [r7, #12]
	}
	accl[0] = accel_read[0] * bmx055->acc_rescale;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a03 	vldr	s15, [r3, #12]
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	edc3 7a00 	vstr	s15, [r3]

	accel_read[1] = ((accl_data[3] << 4) | (accl_data[2] >> 4));
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	8bba      	ldrh	r2, [r7, #28]
 8001364:	0912      	lsrs	r2, r2, #4
 8001366:	b292      	uxth	r2, r2
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
	if (accel_read[1] > 2047) {
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001372:	db03      	blt.n	800137c <BMX055_readAccel+0xa8>
		accel_read[1] -= 4096;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800137a:	613b      	str	r3, [r7, #16]
	}
	accl[1] = accel_read[1] * bmx055->acc_rescale;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edd3 7a03 	vldr	s15, [r3, #12]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	edc3 7a00 	vstr	s15, [r3]

	accel_read[2] = ((accl_data[5] << 4) | (accl_data[4] >> 4));
 8001398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	8c3a      	ldrh	r2, [r7, #32]
 800139e:	0912      	lsrs	r2, r2, #4
 80013a0:	b292      	uxth	r2, r2
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
	if (accel_read[2] > 2047) {
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013ac:	db03      	blt.n	80013b6 <BMX055_readAccel+0xe2>
		accel_read[2] -= 4096;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80013b4:	617b      	str	r3, [r7, #20]
	}
	accl[2] = accel_read[2] * bmx055->acc_rescale;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3308      	adds	r3, #8
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc3 7a00 	vstr	s15, [r3]
}
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <BMX055_readGyro>:

/**
 * @brief Read Gyro
 * @param [out] *gyro gyro value (X-gyro: gyro[0], Y-gyro: gyro[1], Z-gyro: gyro[2])
 */
void BMX055_readGyro(BMX055_Handle *bmx055, float *gyro) {
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b08b      	sub	sp, #44	; 0x2c
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
	uint8_t gyro_data[6];
	int gyro_read[3];

	// read gyro value
	for (int i = 0; i < 6; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	e016      	b.n	8001418 <BMX055_readGyro+0x3e>
		BMX055_readSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6919      	ldr	r1, [r3, #16]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	8a98      	ldrh	r0, [r3, #20]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3302      	adds	r3, #2
 80013f8:	b2dc      	uxtb	r4, r3
 80013fa:	f107 0214 	add.w	r2, r7, #20
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	2201      	movs	r2, #1
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	4602      	mov	r2, r0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f9f9 	bl	8001804 <BMX055_readSPI>
	for (int i = 0; i < 6; i++) {
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b05      	cmp	r3, #5
 800141c:	dde5      	ble.n	80013ea <BMX055_readGyro+0x10>
		BMX055_GYRO_DATA_START_REG + i, &gyro_data[i], 1);
	}

	// conv data  gyro:16bit
	gyro_read[0] = ((gyro_data[1] << 8) + gyro_data[0]);
 800141e:	7d7b      	ldrb	r3, [r7, #21]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	7d3a      	ldrb	r2, [r7, #20]
 8001424:	4413      	add	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
	if (gyro_read[0] > 32767) {
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800142e:	db03      	blt.n	8001438 <BMX055_readGyro+0x5e>
		gyro_read[0] -= 65536;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001436:	60bb      	str	r3, [r7, #8]
	}
	gyro[0] = gyro_read[0] * bmx055->gyro_rescale;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edd3 7a06 	vldr	s15, [r3, #24]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	edc3 7a00 	vstr	s15, [r3]

	gyro_read[1] = ((gyro_data[3] << 8) + gyro_data[2]);
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	7dba      	ldrb	r2, [r7, #22]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
	if (gyro_read[1] > 32767) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001462:	db03      	blt.n	800146c <BMX055_readGyro+0x92>
		gyro_read[1] -= 65536;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800146a:	60fb      	str	r3, [r7, #12]
	}
	gyro[1] = gyro_read[1] * bmx055->gyro_rescale;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a06 	vldr	s15, [r3, #24]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001484:	edc3 7a00 	vstr	s15, [r3]

	gyro_read[2] = ((gyro_data[5] << 8) + gyro_data[4]);
 8001488:	7e7b      	ldrb	r3, [r7, #25]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	7e3a      	ldrb	r2, [r7, #24]
 800148e:	4413      	add	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
	if (gyro_read[2] > 32767) {
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001498:	db03      	blt.n	80014a2 <BMX055_readGyro+0xc8>
		gyro_read[2] -= 65536;
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80014a0:	613b      	str	r3, [r7, #16]
	}
	gyro[2] = gyro_read[2] * bmx055->gyro_rescale;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3308      	adds	r3, #8
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	edc3 7a00 	vstr	s15, [r3]
}
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
	...

080014c8 <BMX055_readRawMag>:

/**
 * @brief Read Mag
 * @param [out] *mag mag value (X-mag: mag[0], Y-mag: mag[1], Z-mag: mag[2])
 */
void BMX055_readRawMag(BMX055_Handle *bmx055, float *mag) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	uint8_t mag_data[8];

	// read mag value
	for (int i = 0; i < 8; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e016      	b.n	8001506 <BMX055_readRawMag+0x3e>
		BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69d9      	ldr	r1, [r3, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8c18      	ldrh	r0, [r3, #32]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3342      	adds	r3, #66	; 0x42
 80014e6:	b2dc      	uxtb	r4, r3
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4413      	add	r3, r2
 80014f0:	2201      	movs	r2, #1
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	4602      	mov	r2, r0
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f982 	bl	8001804 <BMX055_readSPI>
	for (int i = 0; i < 8; i++) {
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b07      	cmp	r3, #7
 800150a:	dde5      	ble.n	80014d8 <BMX055_readRawMag+0x10>
		BMX055_MAG_DATA_START_REG + i, &mag_data[i], 1);
	}

	// conv data  mag x:12bit
	mag[0] = ((int16_t) (mag_data[1] << 5) + (int16_t) (mag_data[0] >> 3));
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	015b      	lsls	r3, r3, #5
 8001510:	b21b      	sxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	7b3b      	ldrb	r3, [r7, #12]
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4413      	add	r3, r2
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	edc3 7a00 	vstr	s15, [r3]
	if (mag[0] > 4095) {
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80015f8 <BMX055_readRawMag+0x130>
 8001534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	dd09      	ble.n	8001552 <BMX055_readRawMag+0x8a>
		mag[0] -= 8192;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80015fc <BMX055_readRawMag+0x134>
 8001548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	edc3 7a00 	vstr	s15, [r3]
	}

	// conv data  mag y:12bit
	mag[1] = ((int16_t) (mag_data[3] << 5) + (int16_t) (mag_data[2] >> 3));
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	b21b      	sxth	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	441a      	add	r2, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3304      	adds	r3, #4
 8001566:	ee07 2a90 	vmov	s15, r2
 800156a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156e:	edc3 7a00 	vstr	s15, [r3]
	if (mag[1] > 4095) {
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3304      	adds	r3, #4
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015f8 <BMX055_readRawMag+0x130>
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	dd0b      	ble.n	80015a0 <BMX055_readRawMag+0xd8>
		mag[1] -= 8192;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3304      	adds	r3, #4
 8001594:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015fc <BMX055_readRawMag+0x134>
 8001598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800159c:	edc3 7a00 	vstr	s15, [r3]
	}

	// conv data  mag z:15bit
	mag[2] = ((int16_t) (mag_data[5] << 7) + (int16_t) (mag_data[4] >> 1));
 80015a0:	7c7b      	ldrb	r3, [r7, #17]
 80015a2:	01db      	lsls	r3, r3, #7
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	441a      	add	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3308      	adds	r3, #8
 80015b4:	ee07 2a90 	vmov	s15, r2
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	edc3 7a00 	vstr	s15, [r3]
	if (mag[2] > 16383) {
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3308      	adds	r3, #8
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001600 <BMX055_readRawMag+0x138>
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	dc00      	bgt.n	80015d8 <BMX055_readRawMag+0x110>
		mag[2] -= 32768;
	}
}
 80015d6:	e00b      	b.n	80015f0 <BMX055_readRawMag+0x128>
		mag[2] -= 32768;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3308      	adds	r3, #8
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3308      	adds	r3, #8
 80015e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001604 <BMX055_readRawMag+0x13c>
 80015e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ec:	edc3 7a00 	vstr	s15, [r3]
}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	457ff000 	.word	0x457ff000
 80015fc:	46000000 	.word	0x46000000
 8001600:	467ffc00 	.word	0x467ffc00
 8001604:	47000000 	.word	0x47000000

08001608 <BMX055_readCompensatedMag>:

arm_status BMX055_readCompensatedMag(BMX055_Handle *bmx055, float *mag) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b090      	sub	sp, #64	; 0x40
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	// Read raw mag data
	BMX055_readRawMag(bmx055, mag);
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff57 	bl	80014c8 <BMX055_readRawMag>

	// Apply scale factor to raw mag data
	mag[0] *= bmx055->mag_rescale_xy;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	edc3 7a00 	vstr	s15, [r3]
	mag[1] *= bmx055->mag_rescale_xy;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	edc3 7a00 	vstr	s15, [r3]
	mag[2] *= bmx055->mag_rescale_z;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3308      	adds	r3, #8
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3308      	adds	r3, #8
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc3 7a00 	vstr	s15, [r3]

	// Put data into dsp struct
	arm_matrix_instance_f32 raw_data;
	arm_mat_init_f32(&raw_data, 3, 1, mag);
 8001664:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	2103      	movs	r1, #3
 800166e:	f00d f995 	bl	800e99c <arm_mat_init_f32>

	// Apply hard iron compensation
	arm_matrix_instance_f32 hard_iron_compensated;
	float hard_iron_compensated_buff[3];
	arm_mat_init_f32(&hard_iron_compensated, 3, 1, hard_iron_compensated_buff);
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800167a:	2201      	movs	r2, #1
 800167c:	2103      	movs	r1, #3
 800167e:	f00d f98d 	bl	800e99c <arm_mat_init_f32>

	arm_status result = arm_mat_sub_f32(&raw_data, &bmx055->mag_hard_iron_offsets, &hard_iron_compensated);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001688:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800168c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001690:	4618      	mov	r0, r3
 8001692:	f00d f883 	bl	800e79c <arm_mat_sub_f32>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (result)
 800169c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <BMX055_readCompensatedMag+0xa2>
		return result;
 80016a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016a8:	e01b      	b.n	80016e2 <BMX055_readCompensatedMag+0xda>

	// Apply soft iron compensation
	arm_matrix_instance_f32 soft_iron_compensated;
	float soft_iron_compensated_buff[3];
	arm_mat_init_f32(&soft_iron_compensated, 3, 1, soft_iron_compensated_buff);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	f107 0018 	add.w	r0, r7, #24
 80016b2:	2201      	movs	r2, #1
 80016b4:	2103      	movs	r1, #3
 80016b6:	f00d f971 	bl	800e99c <arm_mat_init_f32>
	result = arm_mat_mult_f32(&bmx055->mag_soft_iron_offsets, &hard_iron_compensated, &soft_iron_compensated);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3334      	adds	r3, #52	; 0x34
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00d f8c4 	bl	800e854 <arm_mat_mult_f32>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	// Return compensated data in uT
	memcpy(mag, &soft_iron_compensated.pData[0], 3 * sizeof(float));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f00d fb18 	bl	800ed0e <memcpy>

	return result;
 80016de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3740      	adds	r7, #64	; 0x40
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <BMX055_exp_filter>:
	data = (read_data | 0b10000000) & 0b10111000;
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_AXES_REG, &data, 1);
	HAL_Delay(10);
}

void BMX055_exp_filter(float *prev_data, float *current_data, float *result, size_t len, float alpha) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b094      	sub	sp, #80	; 0x50
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6178      	str	r0, [r7, #20]
 80016f2:	6139      	str	r1, [r7, #16]
 80016f4:	60fa      	str	r2, [r7, #12]
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	ed87 0a01 	vstr	s0, [r7, #4]
	arm_matrix_instance_f32 cur_dat;
	arm_matrix_instance_f32 prev_dat;
	arm_matrix_instance_f32 res;
	float current_data_float[3];
	float prev_data_float[3];
	arm_scale_f32((float*) current_data, alpha, (float*) current_data, len);
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	ed97 0a01 	vldr	s0, [r7, #4]
 8001704:	6938      	ldr	r0, [r7, #16]
 8001706:	f00d f9a9 	bl	800ea5c <arm_scale_f32>
	arm_scale_f32((float*) prev_data, (1 - alpha), (float*) prev_data, len);
 800170a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800170e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	6979      	ldr	r1, [r7, #20]
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f00d f99c 	bl	800ea5c <arm_scale_f32>
	// Copy and cast data into arrays. arm_mat_init requires float_32 arrays
	for (int i = 0; i < len; i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001728:	e018      	b.n	800175c <BMX055_exp_filter+0x72>
		current_data_float[i] = (float) current_data[i];
 800172a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	3350      	adds	r3, #80	; 0x50
 800173a:	443b      	add	r3, r7
 800173c:	3b28      	subs	r3, #40	; 0x28
 800173e:	601a      	str	r2, [r3, #0]
		prev_data_float[i] = (float) prev_data[i];
 8001740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	3350      	adds	r3, #80	; 0x50
 8001750:	443b      	add	r3, r7
 8001752:	3b34      	subs	r3, #52	; 0x34
 8001754:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001758:	3301      	adds	r3, #1
 800175a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800175c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8e2      	bhi.n	800172a <BMX055_exp_filter+0x40>
	}
	arm_mat_init_f32(&cur_dat, 3, 1, current_data_float);
 8001764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001768:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800176c:	2201      	movs	r2, #1
 800176e:	2103      	movs	r1, #3
 8001770:	f00d f914 	bl	800e99c <arm_mat_init_f32>
	arm_mat_init_f32(&prev_dat, 3, 1, prev_data_float);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800177c:	2201      	movs	r2, #1
 800177e:	2103      	movs	r1, #3
 8001780:	f00d f90c 	bl	800e99c <arm_mat_init_f32>
	arm_mat_init_f32(&res, 3, 1, result);
 8001784:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	2103      	movs	r1, #3
 800178e:	f00d f905 	bl	800e99c <arm_mat_init_f32>
	arm_mat_add_f32(&cur_dat, &prev_dat, &res);
 8001792:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001796:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800179a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800179e:	4618      	mov	r0, r3
 80017a0:	f00d f900 	bl	800e9a4 <arm_mat_add_f32>
}
 80017a4:	bf00      	nop
 80017a6:	3750      	adds	r7, #80	; 0x50
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <BMX055_writeSPI>:
 * @param [in] CS_Pin
 * @param [in] register_addr
 * @param [in] data
 * @param [in] len
 */
void BMX055_writeSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	4613      	mov	r3, r2
 80017c0:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2200      	movs	r2, #0
 80017c6:	4619      	mov	r1, r3
 80017c8:	68b8      	ldr	r0, [r7, #8]
 80017ca:	f002 fcbd 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(bmx055->hspi, &register_addr, 1, 1000);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	1d79      	adds	r1, r7, #5
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	2201      	movs	r2, #1
 80017da:	f004 fc1e 	bl	800601a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(bmx055->hspi, data, len, 1000);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	f004 fc15 	bl	800601a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	68b8      	ldr	r0, [r7, #8]
 80017f8:	f002 fca6 	bl	8004148 <HAL_GPIO_WritePin>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <BMX055_readSPI>:
 * @param [in] device Device type (gyro, accel or mag)
 * @param [in] register_addr Register Address
 * @param [in] num Data Length
 * @param [out] *buf Read Data
 */
void BMX055_readSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b08d      	sub	sp, #52	; 0x34
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	460b      	mov	r3, r1
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	4613      	mov	r3, r2
 8001818:	717b      	strb	r3, [r7, #5]
	// Add RW bit to start of register
	register_addr = register_addr | 0x80;
 800181a:	797b      	ldrb	r3, [r7, #5]
 800181c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001820:	b2db      	uxtb	r3, r3
 8001822:	717b      	strb	r3, [r7, #5]
	uint8_t packet[20];

	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f002 fc8c 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmx055->hspi, &register_addr, packet, len + 1, 1000);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001836:	b29b      	uxth	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	f107 0214 	add.w	r2, r7, #20
 8001840:	1d79      	adds	r1, r7, #5
 8001842:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001846:	9400      	str	r4, [sp, #0]
 8001848:	f004 fe34 	bl	80064b4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	2201      	movs	r2, #1
 8001850:	4619      	mov	r1, r3
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f002 fc78 	bl	8004148 <HAL_GPIO_WritePin>

	// Copy data into "data" spot in memory
	memcpy(data, &packet[1], len);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	3301      	adds	r3, #1
 800185e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001860:	4619      	mov	r1, r3
 8001862:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001864:	f00d fa53 	bl	800ed0e <memcpy>
}
 8001868:	bf00      	nop
 800186a:	372c      	adds	r7, #44	; 0x2c
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <perform_normal_self_test>:
}

/*!
 * @brief This internal API is used to perform normal self test
 */
static int8_t perform_normal_self_test(BMX055_Handle *bmx055) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	6078      	str	r0, [r7, #4]
	uint8_t read_data;
	uint8_t data;
	// Set sleep mode
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &read_data, 1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69d9      	ldr	r1, [r3, #28]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	8c1a      	ldrh	r2, [r3, #32]
 8001880:	2301      	movs	r3, #1
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	f107 030e 	add.w	r3, r7, #14
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	234c      	movs	r3, #76	; 0x4c
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffb9 	bl	8001804 <BMX055_readSPI>
	data = read_data | 0b00000110; // Set opMode to sleep
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	f043 0306 	orr.w	r3, r3, #6
 8001898:	b2db      	uxtb	r3, r3
 800189a:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69d9      	ldr	r1, [r3, #28]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8c1a      	ldrh	r2, [r3, #32]
 80018a4:	2301      	movs	r3, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	f107 030d 	add.w	r3, r7, #13
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	234c      	movs	r3, #76	; 0x4c
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff7b 	bl	80017ac <BMX055_writeSPI>

	/* Set the Self Test bit(bit0) of the 0x4C register */
	data = read_data | 0b00000001; // Set opMode to sleep
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69d9      	ldr	r1, [r3, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8c1a      	ldrh	r2, [r3, #32]
 80018c8:	2301      	movs	r3, #1
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f107 030d 	add.w	r3, r7, #13
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	234c      	movs	r3, #76	; 0x4c
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff69 	bl	80017ac <BMX055_writeSPI>
	HAL_Delay(2);
 80018da:	2002      	movs	r0, #2
 80018dc:	f001 fed6 	bl	800368c <HAL_Delay>

	/* Validate normal self test */
	uint8_t self_test_rslt[3];
	uint8_t status;
	// Read the data from register 0x42, 0x44 and 0x46
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG, &self_test_rslt[0], 1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69d9      	ldr	r1, [r3, #28]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	8c1a      	ldrh	r2, [r3, #32]
 80018e8:	2301      	movs	r3, #1
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2342      	movs	r3, #66	; 0x42
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff85 	bl	8001804 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 2, &self_test_rslt[1], 1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69d9      	ldr	r1, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8c1a      	ldrh	r2, [r3, #32]
 8001902:	2301      	movs	r3, #1
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	3301      	adds	r3, #1
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2344      	movs	r3, #68	; 0x44
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff77 	bl	8001804 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 4, &self_test_rslt[2], 1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69d9      	ldr	r1, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	8c1a      	ldrh	r2, [r3, #32]
 800191e:	2301      	movs	r3, #1
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	3302      	adds	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2346      	movs	r3, #70	; 0x46
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff69 	bl	8001804 <BMX055_readSPI>

	/* Combine the self test status and store it in the first
	 * 3 bits of the status variable for processing
	 */
	status = (uint8_t) ((self_test_rslt[2] & 1) & (self_test_rslt[1] & 1) & (self_test_rslt[0] & 1));
 8001932:	7aba      	ldrb	r2, [r7, #10]
 8001934:	7a7b      	ldrb	r3, [r7, #9]
 8001936:	4013      	ands	r3, r2
 8001938:	b2da      	uxtb	r2, r3
 800193a:	7a3b      	ldrb	r3, [r7, #8]
 800193c:	4013      	ands	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]

	if (status)
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <perform_normal_self_test+0xe0>
		return BMX055_MAG_SELF_TEST_SUCCESS;
 800194c:	2300      	movs	r3, #0
 800194e:	e000      	b.n	8001952 <perform_normal_self_test+0xe2>
	else
		return BMX055_MAG_SELF_TEST_FAIL;
 8001950:	2307      	movs	r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800195a:	b4b0      	push	{r4, r5, r7}
 800195c:	b08f      	sub	sp, #60	; 0x3c
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001962:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 8001968:	2307      	movs	r3, #7
 800196a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 800196e:	2307      	movs	r3, #7
 8001970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 800197a:	23ff      	movs	r3, #255	; 0xff
 800197c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 8001980:	2364      	movs	r3, #100	; 0x64
 8001982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 8001986:	2308      	movs	r3, #8
 8001988:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	461d      	mov	r5, r3
 800198e:	f107 0408 	add.w	r4, r7, #8
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800199e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	373c      	adds	r7, #60	; 0x3c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bcb0      	pop	{r4, r5, r7}
 80019aa:	4770      	bx	lr

080019ac <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	899b      	ldrh	r3, [r3, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	f002 fbc2 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f001 fe61 	bl	800368c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6898      	ldr	r0, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	899b      	ldrh	r3, [r3, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4619      	mov	r1, r3
 80019d6:	f002 fbb7 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019da:	2064      	movs	r0, #100	; 0x64
 80019dc:	f001 fe56 	bl	800368c <HAL_Delay>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80019f2:	2101      	movs	r1, #1
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa63 	bl	8001ec0 <LoRa_read>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73bb      	strb	r3, [r7, #14]
	data = read;
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d107      	bne.n	8001a18 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	f023 0307 	bic.w	r3, r3, #7
 8001a0e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
 8001a16:	e05e      	b.n	8001ad6 <LoRa_gotoMode+0xee>
	}else if (mode == STNBY_MODE){
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d10c      	bne.n	8001a38 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a22:	f023 0307 	bic.w	r3, r3, #7
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	61da      	str	r2, [r3, #28]
 8001a36:	e04e      	b.n	8001ad6 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_TX) {
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d10c      	bne.n	8001a58 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x02;
 8001a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a42:	f023 0307 	bic.w	r3, r3, #7
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = FS_MODE_TX;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	61da      	str	r2, [r3, #28]
 8001a56:	e03e      	b.n	8001ad6 <LoRa_gotoMode+0xee>
	}else if (mode == TRANSMIT_MODE){
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d10c      	bne.n	8001a78 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x03;
 8001a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a62:	f023 0307 	bic.w	r3, r3, #7
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	f043 0303 	orr.w	r3, r3, #3
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	61da      	str	r2, [r3, #28]
 8001a76:	e02e      	b.n	8001ad6 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_RX){
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d10c      	bne.n	8001a98 <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x04;
 8001a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	61da      	str	r2, [r3, #28]
 8001a96:	e01e      	b.n	8001ad6 <LoRa_gotoMode+0xee>
	}else if (mode == RXCONTIN_MODE){
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <LoRa_gotoMode+0xd0>
		data = (read & 0xF8) | 0x05;
 8001a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	f043 0305 	orr.w	r3, r3, #5
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	61da      	str	r2, [r3, #28]
 8001ab6:	e00e      	b.n	8001ad6 <LoRa_gotoMode+0xee>
	}else if (mode == RXSINGLE_MODE){
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d10b      	bne.n	8001ad6 <LoRa_gotoMode+0xee>
		data = (read & 0xF8) | 0x06;
 8001abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ac2:	f023 0307 	bic.w	r3, r3, #7
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	f043 0306 	orr.w	r3, r3, #6
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2206      	movs	r2, #6
 8001ad4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2101      	movs	r1, #1
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fa09 	bl	8001ef4 <LoRa_write>
	HAL_Delay(10);
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f001 fdd2 	bl	800368c <HAL_Delay>
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LoRa_setModulation>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes. 0->FSK, 1->OOK, 2->LoRa
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setModulation(LoRa* _LoRa, int mode) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	uint8_t read = LoRa_read(_LoRa, RegOpMode);
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f9df 	bl	8001ec0 <LoRa_read>
 8001b02:	4603      	mov	r3, r0
 8001b04:	73fb      	strb	r3, [r7, #15]
	uint8_t data = read;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	73bb      	strb	r3, [r7, #14]
//	uint8_t prev_mode = _LoRa->current_mode;

	// Set modem to sleep mode
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff6b 	bl	80019e8 <LoRa_gotoMode>

	// Toggle first RegOpMode bit
	if(mode == 2) {	// LoRa
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d116      	bne.n	8001b46 <LoRa_setModulation+0x56>
		LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001b18:	2100      	movs	r1, #0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff64 	bl	80019e8 <LoRa_gotoMode>
		LoRa_write(_LoRa, RegOpMode, 0b10000000);
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	2101      	movs	r1, #1
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f9e5 	bl	8001ef4 <LoRa_write>
		HAL_Delay(100);
 8001b2a:	2064      	movs	r0, #100	; 0x64
 8001b2c:	f001 fdae 	bl	800368c <HAL_Delay>
		read = LoRa_read(_LoRa, RegOpMode);
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f9c4 	bl	8001ec0 <LoRa_read>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
		_LoRa->modulationMode = LORA_MODULATION;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001b44:	e037      	b.n	8001bb6 <LoRa_setModulation+0xc6>
	}
	else if (mode == 1) {	// OOK
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11b      	bne.n	8001b84 <LoRa_setModulation+0x94>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	2101      	movs	r1, #1
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f9cb 	bl	8001ef4 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60) | 0x20);
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	f043 0320 	orr.w	r3, r3, #32
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	2101      	movs	r1, #1
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f9bd 	bl	8001ef4 <LoRa_write>
		_LoRa->modulationMode = OOK_MODULATION;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001b82:	e018      	b.n	8001bb6 <LoRa_setModulation+0xc6>
	}
	else if (mode == 0) {	// FSK
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <LoRa_setModulation+0xc6>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	2101      	movs	r1, #1
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f9ac 	bl	8001ef4 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60));
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f9a3 	bl	8001ef4 <LoRa_write>
		_LoRa->modulationMode = FSK_MODULATION;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	HAL_Delay(10);
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f001 fd68 	bl	800368c <HAL_Delay>
//	LoRa_gotoMode(_LoRa, prev_mode);
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	889b      	ldrh	r3, [r3, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	f002 fab2 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6998      	ldr	r0, [r3, #24]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	f004 fa13 	bl	800601a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001bf4:	bf00      	nop
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fdfc 	bl	80067f8 <HAL_SPI_GetState>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d1f7      	bne.n	8001bf6 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6998      	ldr	r0, [r3, #24]
 8001c0a:	8b3a      	ldrh	r2, [r7, #24]
 8001c0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	f004 fb3e 	bl	8006292 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001c16:	bf00      	nop
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 fdeb 	bl	80067f8 <HAL_SPI_GetState>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d1f7      	bne.n	8001c18 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f002 fa88 	bl	8004148 <HAL_GPIO_WritePin>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	889b      	ldrh	r3, [r3, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f002 fa74 	bl	8004148 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6998      	ldr	r0, [r3, #24]
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	f004 f9d5 	bl	800601a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001c70:	bf00      	nop
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fdbe 	bl	80067f8 <HAL_SPI_GetState>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d1f7      	bne.n	8001c72 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6998      	ldr	r0, [r3, #24]
 8001c86:	8b3a      	ldrh	r2, [r7, #24]
 8001c88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	f004 f9c4 	bl	800601a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001c92:	bf00      	nop
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 fdad 	bl	80067f8 <HAL_SPI_GetState>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d1f7      	bne.n	8001c94 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f002 fa4a 	bl	8004148 <HAL_GPIO_WritePin>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	04db      	lsls	r3, r3, #19
 8001cca:	115b      	asrs	r3, r3, #5
 8001ccc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2106      	movs	r1, #6
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f90a 	bl	8001ef4 <LoRa_write>
	HAL_Delay(5);
 8001ce0:	2005      	movs	r0, #5
 8001ce2:	f001 fcd3 	bl	800368c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2107      	movs	r1, #7
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8fe 	bl	8001ef4 <LoRa_write>
	HAL_Delay(5);
 8001cf8:	2005      	movs	r0, #5
 8001cfa:	f001 fcc7 	bl	800368c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	461a      	mov	r2, r3
 8001d06:	2108      	movs	r1, #8
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8f3 	bl	8001ef4 <LoRa_write>
	HAL_Delay(5);
 8001d0e:	2005      	movs	r0, #5
 8001d10:	f001 fcbc 	bl	800368c <HAL_Delay>
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	dd01      	ble.n	8001d30 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	dc01      	bgt.n	8001d3a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001d36:	2307      	movs	r3, #7
 8001d38:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001d3a:	211e      	movs	r1, #30
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8bf 	bl	8001ec0 <LoRa_read>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001d46:	200a      	movs	r0, #10
 8001d48:	f001 fca0 	bl	800368c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	461a      	mov	r2, r3
 8001d64:	211e      	movs	r1, #30
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8c4 	bl	8001ef4 <LoRa_write>
	HAL_Delay(10);
 8001d6c:	200a      	movs	r0, #10
 8001d6e:	f001 fc8d 	bl	800368c <HAL_Delay>
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2109      	movs	r1, #9
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8b1 	bl	8001ef4 <LoRa_write>
	HAL_Delay(10);
 8001d92:	200a      	movs	r0, #10
 8001d94:	f001 fc7a 	bl	800368c <HAL_Delay>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	2b2c      	cmp	r3, #44	; 0x2c
 8001db4:	d801      	bhi.n	8001dba <LoRa_setOCP+0x1a>
		current = 45;
 8001db6:	232d      	movs	r3, #45	; 0x2d
 8001db8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2bf0      	cmp	r3, #240	; 0xf0
 8001dbe:	d901      	bls.n	8001dc4 <LoRa_setOCP+0x24>
		current = 240;
 8001dc0:	23f0      	movs	r3, #240	; 0xf0
 8001dc2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b78      	cmp	r3, #120	; 0x78
 8001dc8:	d809      	bhi.n	8001dde <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	3b2d      	subs	r3, #45	; 0x2d
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <LoRa_setOCP+0x78>)
 8001dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd4:	1052      	asrs	r2, r2, #1
 8001dd6:	17db      	asrs	r3, r3, #31
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e00b      	b.n	8001df6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	2bf0      	cmp	r3, #240	; 0xf0
 8001de2:	d808      	bhi.n	8001df6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	331e      	adds	r3, #30
 8001de8:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <LoRa_setOCP+0x78>)
 8001dea:	fb82 1203 	smull	r1, r2, r2, r3
 8001dee:	1092      	asrs	r2, r2, #2
 8001df0:	17db      	asrs	r3, r3, #31
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3320      	adds	r3, #32
 8001dfa:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	210b      	movs	r1, #11
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f876 	bl	8001ef4 <LoRa_write>
	HAL_Delay(10);
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f001 fc3f 	bl	800368c <HAL_Delay>
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	66666667 	.word	0x66666667

08001e1c <LoRa_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setCRCon(LoRa* _LoRa) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d110      	bne.n	8001e50 <LoRa_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 8001e2e:	211e      	movs	r1, #30
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f845 	bl	8001ec0 <LoRa_read>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xFB) | 0x04;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8001e42:	7bbb      	ldrb	r3, [r7, #14]
 8001e44:	461a      	mov	r2, r3
 8001e46:	211e      	movs	r1, #30
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f853 	bl	8001ef4 <LoRa_write>
	else {
		read = LoRa_read(_LoRa, RegPacketConfig1);
		data = (read & 0xEF) | 0x10;
		LoRa_write(_LoRa, RegModemConfig2, data);
	}
}
 8001e4e:	e00f      	b.n	8001e70 <LoRa_setCRCon+0x54>
		read = LoRa_read(_LoRa, RegPacketConfig1);
 8001e50:	2130      	movs	r1, #48	; 0x30
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f834 	bl	8001ec0 <LoRa_read>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xEF) | 0x10;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	461a      	mov	r2, r3
 8001e68:	211e      	movs	r1, #30
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f842 	bl	8001ef4 <LoRa_write>
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d110      	bne.n	8001eac <LoRa_setTOMsb_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 8001e8a:	211e      	movs	r1, #30
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f817 	bl	8001ec0 <LoRa_read>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
		data = read | 0x07;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f043 0307 	orr.w	r3, r3, #7
 8001e9c:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8001e9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	211e      	movs	r1, #30
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f825 	bl	8001ef4 <LoRa_write>
 8001eaa:	e002      	b.n	8001eb2 <LoRa_setTOMsb_setCRCon+0x3a>
	}
	else {
		LoRa_setCRCon(_LoRa);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffb5 	bl	8001e1c <LoRa_setCRCon>
	}

	HAL_Delay(10);
 8001eb2:	200a      	movs	r0, #10
 8001eb4:	f001 fbea 	bl	800368c <HAL_Delay>
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001ed6:	f107 030f 	add.w	r3, r7, #15
 8001eda:	f107 010e 	add.w	r1, r7, #14
 8001ede:	2201      	movs	r2, #1
 8001ee0:	9200      	str	r2, [sp, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fe6d 	bl	8001bc4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
 8001f00:	4613      	mov	r3, r2
 8001f02:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001f0e:	78bb      	ldrb	r3, [r7, #2]
 8001f10:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001f12:	f107 030f 	add.w	r3, r7, #15
 8001f16:	f107 010e 	add.w	r1, r7, #14
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	9200      	str	r2, [sp, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe8d 	bl	8001c40 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	889b      	ldrh	r3, [r3, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	4619      	mov	r1, r3
 8001f58:	f002 f8f6 	bl	8004148 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6998      	ldr	r0, [r3, #24]
 8001f60:	f107 0117 	add.w	r1, r7, #23
 8001f64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f004 f856 	bl	800601a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001f6e:	bf00      	nop
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 fc3f 	bl	80067f8 <HAL_SPI_GetState>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d1f7      	bne.n	8001f70 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6998      	ldr	r0, [r3, #24]
 8001f84:	7abb      	ldrb	r3, [r7, #10]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	f004 f844 	bl	800601a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001f92:	bf00      	nop
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fc2d 	bl	80067f8 <HAL_SPI_GetState>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d1f7      	bne.n	8001f94 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	889b      	ldrh	r3, [r3, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f002 f8ca 	bl	8004148 <HAL_GPIO_WritePin>
}
 8001fb4:	bf00      	nop
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	return 1;
 8001fc4:	2301      	movs	r3, #1
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001fee:	2101      	movs	r1, #1
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7ff fcf9 	bl	80019e8 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001ff6:	210e      	movs	r1, #14
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff ff61 	bl	8001ec0 <LoRa_read>
 8001ffe:	4603      	mov	r3, r0
 8002000:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	461a      	mov	r2, r3
 8002006:	210d      	movs	r1, #13
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff ff73 	bl	8001ef4 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	461a      	mov	r2, r3
 8002012:	2132      	movs	r1, #50	; 0x32
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff ff6d 	bl	8001ef4 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	2100      	movs	r1, #0
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff ff84 	bl	8001f2e <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8002026:	2103      	movs	r1, #3
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fcdd 	bl	80019e8 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800202e:	2112      	movs	r1, #18
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7ff ff45 	bl	8001ec0 <LoRa_read>
 8002036:	4603      	mov	r3, r0
 8002038:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800203a:	7cfb      	ldrb	r3, [r7, #19]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	2112      	movs	r1, #18
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff ff53 	bl	8001ef4 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fcc9 	bl	80019e8 <LoRa_gotoMode>
			return 1;
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	3b01      	subs	r3, #1
 800205e:	80bb      	strh	r3, [r7, #4]
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fcbd 	bl	80019e8 <LoRa_gotoMode>
				return 0;
 800206e:	2300      	movs	r3, #0
 8002070:	e003      	b.n	800207a <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8002072:	2001      	movs	r0, #1
 8002074:	f001 fb0a 	bl	800368c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002078:	e7d9      	b.n	800202e <LoRa_transmit+0x5c>
	}

}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800208a:	2105      	movs	r1, #5
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fcab 	bl	80019e8 <LoRa_gotoMode>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800209a:	b590      	push	{r4, r7, lr}
 800209c:	b089      	sub	sp, #36	; 0x24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	4613      	mov	r3, r2
 80020a6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	e007      	b.n	80020c2 <LoRa_receive+0x28>
		data[i]=0;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	3301      	adds	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dbf3      	blt.n	80020b2 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80020ca:	2101      	movs	r1, #1
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fc8b 	bl	80019e8 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80020d2:	2112      	movs	r1, #18
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff fef3 	bl	8001ec0 <LoRa_read>
 80020da:	4603      	mov	r3, r0
 80020dc:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02f      	beq.n	8002148 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80020e8:	22ff      	movs	r2, #255	; 0xff
 80020ea:	2112      	movs	r1, #18
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff ff01 	bl	8001ef4 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80020f2:	2113      	movs	r1, #19
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fee3 	bl	8001ec0 <LoRa_read>
 80020fa:	4603      	mov	r3, r0
 80020fc:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80020fe:	2110      	movs	r1, #16
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fedd 	bl	8001ec0 <LoRa_read>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	461a      	mov	r2, r3
 800210e:	210d      	movs	r1, #13
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff feef 	bl	8001ef4 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8002116:	7cba      	ldrb	r2, [r7, #18]
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4293      	cmp	r3, r2
 800211c:	bf28      	it	cs
 800211e:	4613      	movcs	r3, r2
 8002120:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e00b      	b.n	8002140 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	18d4      	adds	r4, r2, r3
 800212e:	2100      	movs	r1, #0
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fec5 	bl	8001ec0 <LoRa_read>
 8002136:	4603      	mov	r3, r0
 8002138:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	7ffb      	ldrb	r3, [r7, #31]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	dbef      	blt.n	8002128 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002148:	2105      	movs	r1, #5
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff fc4c 	bl	80019e8 <LoRa_gotoMode>
    return min;
 8002150:	7ffb      	ldrb	r3, [r7, #31]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}

0800215a <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	// Check modulation mode
	read = LoRa_read(_LoRa, RegOpMode);
 8002162:	2101      	movs	r1, #1
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff feab 	bl	8001ec0 <LoRa_read>
 800216a:	4603      	mov	r3, r0
 800216c:	73fb      	strb	r3, [r7, #15]
	if((read & 0x80) == 0x80) _LoRa->modulationMode = LORA_MODULATION;
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da04      	bge.n	8002180 <LoRa_init+0x26>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800217e:	e012      	b.n	80021a6 <LoRa_init+0x4c>
	else {
		if((read & 0x60) == 0x00) _LoRa->modulationMode = FSK_MODULATION;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <LoRa_init+0x3a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002192:	e008      	b.n	80021a6 <LoRa_init+0x4c>
		else if((read & 0x60) == 0x20) _LoRa->modulationMode = OOK_MODULATION;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800219a:	2b20      	cmp	r3, #32
 800219c:	d103      	bne.n	80021a6 <LoRa_init+0x4c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(LoRa_isvalid(_LoRa)){
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff08 	bl	8001fbc <LoRa_isvalid>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80c8 	beq.w	8002344 <LoRa_init+0x1ea>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80021b4:	2100      	movs	r1, #0
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fc16 	bl	80019e8 <LoRa_gotoMode>
			HAL_Delay(10);
 80021bc:	200a      	movs	r0, #10
 80021be:	f001 fa65 	bl	800368c <HAL_Delay>
			if( _LoRa->modulationMode == LORA_MODULATION) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d115      	bne.n	80021f8 <LoRa_init+0x9e>
				// turn on lora mode:
				read = LoRa_read(_LoRa, RegOpMode);
 80021cc:	2101      	movs	r1, #1
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fe76 	bl	8001ec0 <LoRa_read>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
				HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f001 fa57 	bl	800368c <HAL_Delay>
				data = read | 0x80;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021e4:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	461a      	mov	r2, r3
 80021ea:	2101      	movs	r1, #1
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff fe81 	bl	8001ef4 <LoRa_write>
				HAL_Delay(100);
 80021f2:	2064      	movs	r0, #100	; 0x64
 80021f4:	f001 fa4a 	bl	800368c <HAL_Delay>
			}

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fd5c 	bl	8001cbc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fdb4 	bl	8001d7a <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fdc0 	bl	8001da0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002220:	2223      	movs	r2, #35	; 0x23
 8002222:	210c      	movs	r1, #12
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fe65 	bl	8001ef4 <LoRa_write>

		// Set Tx start condition
			if(_LoRa->modulationMode != LORA_MODULATION) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002230:	2b02      	cmp	r3, #2
 8002232:	d004      	beq.n	800223e <LoRa_init+0xe4>
				LoRa_write(_LoRa, RegFifoThresh, 0x80);
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	2135      	movs	r1, #53	; 0x35
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fe5b 	bl	8001ef4 <LoRa_write>
			}

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fe1a 	bl	8001e78 <LoRa_setTOMsb_setCRCon>
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800224a:	2b02      	cmp	r3, #2
 800224c:	d11f      	bne.n	800228e <LoRa_init+0x134>
				LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fd60 	bl	8001d1c <LoRa_setSpreadingFactor>
				// set Timeout Lsb:
				LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	211f      	movs	r1, #31
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fe47 	bl	8001ef4 <LoRa_write>
				// set bandwidth, coding rate and expilicit mode:
				// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
				//       bits represent --> |   bandwidth   |     CR    |I/E|
				data = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	73bb      	strb	r3, [r7, #14]
				data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	4413      	add	r3, r2
 8002280:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegModemConfig1, data);
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	461a      	mov	r2, r3
 8002286:	211d      	movs	r1, #29
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fe33 	bl	8001ef4 <LoRa_write>
			}

		// set preamble:
			if(_LoRa->modulationMode == LORA_MODULATION) {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002294:	2b02      	cmp	r3, #2
 8002296:	d112      	bne.n	80022be <LoRa_init+0x164>
				LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b29b      	uxth	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	2120      	movs	r1, #32
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fe24 	bl	8001ef4 <LoRa_write>
				LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	2121      	movs	r1, #33	; 0x21
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe1c 	bl	8001ef4 <LoRa_write>
 80022bc:	e004      	b.n	80022c8 <LoRa_init+0x16e>
			}
			else {
				LoRa_write(_LoRa, RegPreambleDetect, 0xAA);		// Preamble detect ON, preable detect size 2 bytes, detector tolerance 0x0A (default)
 80022be:	22aa      	movs	r2, #170	; 0xaa
 80022c0:	211f      	movs	r1, #31
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fe16 	bl	8001ef4 <LoRa_write>
			}

		// DIO mapping:   --> DIO: RxDone
			if(_LoRa->modulationMode == LORA_MODULATION) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d110      	bne.n	80022f4 <LoRa_init+0x19a>
				read = LoRa_read(_LoRa, RegDioMapping1);
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fdf3 	bl	8001ec0 <LoRa_read>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80022e4:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 80022e6:	7bbb      	ldrb	r3, [r7, #14]
 80022e8:	461a      	mov	r2, r3
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe01 	bl	8001ef4 <LoRa_write>
 80022f2:	e00f      	b.n	8002314 <LoRa_init+0x1ba>
			}
			else {
				// DIO2: RxDone
				read = LoRa_read(_LoRa, RegDioMapping1);
 80022f4:	2140      	movs	r1, #64	; 0x40
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fde2 	bl	8001ec0 <LoRa_read>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002306:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	461a      	mov	r2, r3
 800230c:	2140      	movs	r1, #64	; 0x40
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fdf0 	bl	8001ef4 <LoRa_write>
			}


		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002314:	2101      	movs	r1, #1
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fb66 	bl	80019e8 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8002322:	200a      	movs	r0, #10
 8002324:	f001 f9b2 	bl	800368c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002328:	2142      	movs	r1, #66	; 0x42
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fdc8 	bl	8001ec0 <LoRa_read>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b12      	cmp	r3, #18
 8002338:	d101      	bne.n	800233e <LoRa_init+0x1e4>
				return LORA_OK;
 800233a:	23c8      	movs	r3, #200	; 0xc8
 800233c:	e004      	b.n	8002348 <LoRa_init+0x1ee>
			else
				return LORA_NOT_FOUND;
 800233e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8002342:	e001      	b.n	8002348 <LoRa_init+0x1ee>
	}
	else {
		return LORA_UNAVAILABLE;
 8002344:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
uint32_t micros(TIM_HandleTypeDef *timer) {
	return __HAL_TIM_GET_COUNTER(timer);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af02      	add	r7, sp, #8
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
	// Give notification to Sample_Sensors_Handle so that scheduler enables the task
//	vTaskNotifyGiveFromISR(Sample_Sensors_Handle, NULL);
	switch (GPIO_Pin) {
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d109      	bne.n	8002374 <HAL_GPIO_EXTI_Callback+0x24>
	// 	bmx055_data.mag[3] = micros(Micros_Timer);
	// 	xTaskNotifyFromISR(SensorReadHandle, (uint32_t)Mag_Sensor, eSetBits, NULL);
	// 	return;
	case GPIO_PIN_0:
		/* LoRa interrupt */
		xTaskNotifyFromISR(LoRaHandle, NULL, eNoAction, NULL);
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	f00a fc43 	bl	800cbf8 <xTaskGenericNotifyFromISR>
	default:
		return;
 8002372:	bf00      	nop
 8002374:	bf00      	nop
	}
}
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000504 	.word	0x20000504

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002386:	f001 f90f 	bl	80035a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238a:	f000 f8cd 	bl	8002528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238e:	f000 faf7 	bl	8002980 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002392:	f000 f985 	bl	80026a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002396:	f000 f9b9 	bl	800270c <MX_SPI2_Init>
  MX_SPI3_Init();
 800239a:	f000 f9ed 	bl	8002778 <MX_SPI3_Init>
  MX_ADC1_Init();
 800239e:	f000 f92d 	bl	80025fc <MX_ADC1_Init>
  MX_TIM3_Init();
 80023a2:	f000 fa6b 	bl	800287c <MX_TIM3_Init>
  MX_TIM2_Init();
 80023a6:	f000 fa1d 	bl	80027e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80023aa:	2006      	movs	r0, #6
 80023ac:	f001 fd2d 	bl	8003e0a <HAL_NVIC_DisableIRQ>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80023b0:	2100      	movs	r1, #0
 80023b2:	484b      	ldr	r0, [pc, #300]	; (80024e0 <main+0x160>)
 80023b4:	f004 fc62 	bl	8006c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80023b8:	2104      	movs	r1, #4
 80023ba:	4849      	ldr	r0, [pc, #292]	; (80024e0 <main+0x160>)
 80023bc:	f004 fc5e 	bl	8006c7c <HAL_TIM_PWM_Start>

  /* LoRa configurations */
	LoRa_Handle = newLoRa();
 80023c0:	4c48      	ldr	r4, [pc, #288]	; (80024e4 <main+0x164>)
 80023c2:	463b      	mov	r3, r7
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fac8 	bl	800195a <newLoRa>
 80023ca:	4625      	mov	r5, r4
 80023cc:	463c      	mov	r4, r7
 80023ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	LoRa_Handle.hSPIx = &hspi2;
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <main+0x164>)
 80023e0:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <main+0x168>)
 80023e2:	619a      	str	r2, [r3, #24]
	LoRa_Handle.CS_port = RF_CE_GPIO_Port;
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <main+0x164>)
 80023e6:	4a41      	ldr	r2, [pc, #260]	; (80024ec <main+0x16c>)
 80023e8:	601a      	str	r2, [r3, #0]
	LoRa_Handle.CS_pin = RF_CE_Pin;
 80023ea:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <main+0x164>)
 80023ec:	2204      	movs	r2, #4
 80023ee:	809a      	strh	r2, [r3, #4]
	LoRa_Handle.reset_port = RF_RESET_GPIO_Port;
 80023f0:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <main+0x164>)
 80023f2:	4a3e      	ldr	r2, [pc, #248]	; (80024ec <main+0x16c>)
 80023f4:	609a      	str	r2, [r3, #8]
	LoRa_Handle.reset_pin = RF_RESET_Pin;
 80023f6:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <main+0x164>)
 80023f8:	2202      	movs	r2, #2
 80023fa:	819a      	strh	r2, [r3, #12]
	LoRa_Handle.DIO0_port = RF_10O_GPIO_Port;
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <main+0x164>)
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <main+0x16c>)
 8002400:	611a      	str	r2, [r3, #16]
	LoRa_Handle.DIO0_pin = RF_10O_Pin;
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <main+0x164>)
 8002404:	2201      	movs	r2, #1
 8002406:	829a      	strh	r2, [r3, #20]

	LoRa_Handle.frequency = 915;
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <main+0x164>)
 800240a:	f240 3293 	movw	r2, #915	; 0x393
 800240e:	621a      	str	r2, [r3, #32]
	LoRa_Handle.spredingFactor = SF_7;						// default = SF_7
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <main+0x164>)
 8002412:	2207      	movs	r2, #7
 8002414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	LoRa_Handle.bandWidth = BW_125KHz;				  	// default = BW_125KHz
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <main+0x164>)
 800241a:	2207      	movs	r2, #7
 800241c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	LoRa_Handle.crcRate = CR_4_5;						// default = CR_4_5
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <main+0x164>)
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	LoRa_Handle.power = POWER_20db;					// default = 20db
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <main+0x164>)
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	LoRa_Handle.overCurrentProtection = 120; 				// default = 100 mA
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <main+0x164>)
 8002432:	2278      	movs	r2, #120	; 0x78
 8002434:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	LoRa_Handle.preamble = 8;		  					// default = 8;
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <main+0x164>)
 800243a:	2208      	movs	r2, #8
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28

	HAL_GPIO_WritePin(RF_CE_GPIO_Port, RF_CE_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2104      	movs	r1, #4
 8002442:	482a      	ldr	r0, [pc, #168]	; (80024ec <main+0x16c>)
 8002444:	f001 fe80 	bl	8004148 <HAL_GPIO_WritePin>

  /* Assign magnetometer calibration constants */
	arm_mat_init_f32(&bmx055.mag_hard_iron_offsets, 3, 1, hard_iron_offset_data);
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <main+0x170>)
 800244a:	2201      	movs	r2, #1
 800244c:	2103      	movs	r1, #3
 800244e:	4829      	ldr	r0, [pc, #164]	; (80024f4 <main+0x174>)
 8002450:	f00c faa4 	bl	800e99c <arm_mat_init_f32>
	arm_mat_init_f32(&bmx055.mag_soft_iron_offsets, 3, 3, soft_iron_offset_data);
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <main+0x178>)
 8002456:	2203      	movs	r2, #3
 8002458:	2103      	movs	r1, #3
 800245a:	4828      	ldr	r0, [pc, #160]	; (80024fc <main+0x17c>)
 800245c:	f00c fa9e 	bl	800e99c <arm_mat_init_f32>

  /* BMX055 configurations */
	bmx055.hspi = &hspi1;
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <main+0x180>)
 8002462:	4a28      	ldr	r2, [pc, #160]	; (8002504 <main+0x184>)
 8002464:	601a      	str	r2, [r3, #0]
	// Accelerometer parameters
	bmx055.acc_CS_port = ACC_CE_GPIO_Port;
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <main+0x180>)
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <main+0x188>)
 800246a:	605a      	str	r2, [r3, #4]
	bmx055.acc_CS_pin = ACC_CE_Pin;
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <main+0x180>)
 800246e:	2201      	movs	r2, #1
 8002470:	811a      	strh	r2, [r3, #8]
	bmx055.acc_range = BMX055_ACC_RANGE_4;
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <main+0x180>)
 8002474:	2205      	movs	r2, #5
 8002476:	729a      	strb	r2, [r3, #10]
	bmx055.acc_bandwidth = BMX055_ACC_PMU_BW_7_81;
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <main+0x180>)
 800247a:	2208      	movs	r2, #8
 800247c:	72da      	strb	r2, [r3, #11]

	// Gyroscope parameters
	bmx055.gyro_CS_port = GYR_CE_GPIO_Port;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <main+0x180>)
 8002480:	4a21      	ldr	r2, [pc, #132]	; (8002508 <main+0x188>)
 8002482:	611a      	str	r2, [r3, #16]
	bmx055.gyro_CS_pin = GYR_CE_Pin;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <main+0x180>)
 8002486:	2202      	movs	r2, #2
 8002488:	829a      	strh	r2, [r3, #20]
	bmx055.gyro_range = BMX055_GYRO_RANGE_65_6;		// 500 deg/s
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <main+0x180>)
 800248c:	2202      	movs	r2, #2
 800248e:	759a      	strb	r2, [r3, #22]
	bmx055.gyro_bandwidth = BMX055_GYRO_BW_64;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <main+0x180>)
 8002492:	2206      	movs	r2, #6
 8002494:	75da      	strb	r2, [r3, #23]

	// Magnetometer parameters
	bmx055.mag_CS_port = MAG_CE_GPIO_Port;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <main+0x180>)
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <main+0x188>)
 800249a:	61da      	str	r2, [r3, #28]
	bmx055.mag_CS_pin = MAG_CE_Pin;
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <main+0x180>)
 800249e:	2204      	movs	r2, #4
 80024a0:	841a      	strh	r2, [r3, #32]
	bmx055.mag_data_rate = BMX055_MAG_DATA_RATE_30;
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <main+0x180>)
 80024a4:	2238      	movs	r2, #56	; 0x38
 80024a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  /* Servo configurations */

	/* Start timers */
	HAL_TIM_Base_Start(Micros_Timer);
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <main+0x18c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fb30 	bl	8006b14 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024b4:	f008 fda0 	bl	800aff8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SensorRead */
  SensorReadHandle = osThreadNew(start_sensor_reading, NULL, &SensorRead_attributes);
 80024b8:	4a15      	ldr	r2, [pc, #84]	; (8002510 <main+0x190>)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4815      	ldr	r0, [pc, #84]	; (8002514 <main+0x194>)
 80024be:	f008 fde5 	bl	800b08c <osThreadNew>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <main+0x198>)
 80024c6:	6013      	str	r3, [r2, #0]

  /* creation of LoRa */
  LoRaHandle = osThreadNew(start_LoRa_task, NULL, &LoRa_attributes);
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <main+0x19c>)
 80024ca:	2100      	movs	r1, #0
 80024cc:	4814      	ldr	r0, [pc, #80]	; (8002520 <main+0x1a0>)
 80024ce:	f008 fddd 	bl	800b08c <osThreadNew>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a13      	ldr	r2, [pc, #76]	; (8002524 <main+0x1a4>)
 80024d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024d8:	f008 fdb2 	bl	800b040 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <main+0x15c>
 80024de:	bf00      	nop
 80024e0:	200004b8 	.word	0x200004b8
 80024e4:	20000580 	.word	0x20000580
 80024e8:	200003c0 	.word	0x200003c0
 80024ec:	40020800 	.word	0x40020800
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000534 	.word	0x20000534
 80024f8:	2000000c 	.word	0x2000000c
 80024fc:	2000053c 	.word	0x2000053c
 8002500:	20000508 	.word	0x20000508
 8002504:	20000368 	.word	0x20000368
 8002508:	40020400 	.word	0x40020400
 800250c:	20000030 	.word	0x20000030
 8002510:	08011cb0 	.word	0x08011cb0
 8002514:	08002a91 	.word	0x08002a91
 8002518:	20000500 	.word	0x20000500
 800251c:	08011cd4 	.word	0x08011cd4
 8002520:	08002b21 	.word	0x08002b21
 8002524:	20000504 	.word	0x20000504

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b094      	sub	sp, #80	; 0x50
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	2230      	movs	r2, #48	; 0x30
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f00c fbf7 	bl	800ed2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <SystemClock_Config+0xcc>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <SystemClock_Config+0xcc>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <SystemClock_Config+0xcc>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <SystemClock_Config+0xd0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <SystemClock_Config+0xd0>)
 8002572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <SystemClock_Config+0xd0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002584:	2301      	movs	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258e:	2302      	movs	r3, #2
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002598:	230c      	movs	r3, #12
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 800259c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025a2:	2304      	movs	r3, #4
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80025a6:	2308      	movs	r3, #8
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f87a 	bl	80056a8 <HAL_RCC_OscConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025ba:	f000 fb6f 	bl	8002c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025be:	230f      	movs	r3, #15
 80025c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c2:	2302      	movs	r3, #2
 80025c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	2103      	movs	r1, #3
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fadc 	bl	8005b98 <HAL_RCC_ClockConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025e6:	f000 fb59 	bl	8002c9c <Error_Handler>
  }
}
 80025ea:	bf00      	nop
 80025ec:	3750      	adds	r7, #80	; 0x50
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000

080025fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002602:	463b      	mov	r3, r7
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <MX_ADC1_Init+0x98>)
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <MX_ADC1_Init+0x9c>)
 8002612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_ADC1_Init+0x98>)
 8002616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800261a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <MX_ADC1_Init+0x98>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <MX_ADC1_Init+0x98>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_ADC1_Init+0x98>)
 800262a:	2200      	movs	r2, #0
 800262c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <MX_ADC1_Init+0x98>)
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_ADC1_Init+0x98>)
 8002638:	2200      	movs	r2, #0
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_ADC1_Init+0x98>)
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <MX_ADC1_Init+0xa0>)
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_ADC1_Init+0x98>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <MX_ADC1_Init+0x98>)
 800264a:	2201      	movs	r2, #1
 800264c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_ADC1_Init+0x98>)
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_ADC1_Init+0x98>)
 8002658:	2201      	movs	r2, #1
 800265a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_ADC1_Init+0x98>)
 800265e:	f001 f839 	bl	80036d4 <HAL_ADC_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002668:	f000 fb18 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800266c:	2302      	movs	r3, #2
 800266e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	4619      	mov	r1, r3
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_ADC1_Init+0x98>)
 800267e:	f001 f86d 	bl	800375c <HAL_ADC_ConfigChannel>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002688:	f000 fb08 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000320 	.word	0x20000320
 8002698:	40012000 	.word	0x40012000
 800269c:	0f000001 	.word	0x0f000001

080026a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_SPI1_Init+0x64>)
 80026a6:	4a18      	ldr	r2, [pc, #96]	; (8002708 <MX_SPI1_Init+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <MX_SPI1_Init+0x64>)
 80026ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <MX_SPI1_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_SPI1_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <MX_SPI1_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <MX_SPI1_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <MX_SPI1_Init+0x64>)
 80026cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <MX_SPI1_Init+0x64>)
 80026d4:	2218      	movs	r2, #24
 80026d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <MX_SPI1_Init+0x64>)
 80026da:	2200      	movs	r2, #0
 80026dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <MX_SPI1_Init+0x64>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <MX_SPI1_Init+0x64>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <MX_SPI1_Init+0x64>)
 80026ec:	220a      	movs	r2, #10
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <MX_SPI1_Init+0x64>)
 80026f2:	f003 fc09 	bl	8005f08 <HAL_SPI_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026fc:	f000 face 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000368 	.word	0x20000368
 8002708:	40013000 	.word	0x40013000

0800270c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <MX_SPI2_Init+0x64>)
 8002712:	4a18      	ldr	r2, [pc, #96]	; (8002774 <MX_SPI2_Init+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <MX_SPI2_Init+0x64>)
 8002718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800271c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <MX_SPI2_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <MX_SPI2_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_SPI2_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <MX_SPI2_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_SPI2_Init+0x64>)
 8002738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_SPI2_Init+0x64>)
 8002740:	2220      	movs	r2, #32
 8002742:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <MX_SPI2_Init+0x64>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_SPI2_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <MX_SPI2_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_SPI2_Init+0x64>)
 8002758:	220a      	movs	r2, #10
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_SPI2_Init+0x64>)
 800275e:	f003 fbd3 	bl	8005f08 <HAL_SPI_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002768:	f000 fa98 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200003c0 	.word	0x200003c0
 8002774:	40003800 	.word	0x40003800

08002778 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <MX_SPI3_Init+0x64>)
 800277e:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <MX_SPI3_Init+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <MX_SPI3_Init+0x64>)
 8002784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002788:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <MX_SPI3_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <MX_SPI3_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_SPI3_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <MX_SPI3_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_SPI3_Init+0x64>)
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_SPI3_Init+0x64>)
 80027ac:	2230      	movs	r2, #48	; 0x30
 80027ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <MX_SPI3_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_SPI3_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <MX_SPI3_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_SPI3_Init+0x64>)
 80027c4:	220a      	movs	r2, #10
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <MX_SPI3_Init+0x64>)
 80027ca:	f003 fb9d 	bl	8005f08 <HAL_SPI_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80027d4:	f000 fa62 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000418 	.word	0x20000418
 80027e0:	40003c00 	.word	0x40003c00

080027e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f8:	463b      	mov	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <MX_TIM2_Init+0x94>)
 8002802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 192-1;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <MX_TIM2_Init+0x94>)
 800280a:	22bf      	movs	r2, #191	; 0xbf
 800280c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_TIM2_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <MX_TIM2_Init+0x94>)
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_TIM2_Init+0x94>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_TIM2_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002828:	4813      	ldr	r0, [pc, #76]	; (8002878 <MX_TIM2_Init+0x94>)
 800282a:	f004 f923 	bl	8006a74 <HAL_TIM_Base_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002834:	f000 fa32 	bl	8002c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4619      	mov	r1, r3
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <MX_TIM2_Init+0x94>)
 8002846:	f004 fb8b 	bl	8006f60 <HAL_TIM_ConfigClockSource>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002850:	f000 fa24 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800285c:	463b      	mov	r3, r7
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_TIM2_Init+0x94>)
 8002862:	f004 ff11 	bl	8007688 <HAL_TIMEx_MasterConfigSynchronization>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800286c:	f000 fa16 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000470 	.word	0x20000470

0800287c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08e      	sub	sp, #56	; 0x38
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002890:	f107 0320 	add.w	r3, r7, #32
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
 80028a8:	615a      	str	r2, [r3, #20]
 80028aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028ae:	4a33      	ldr	r2, [pc, #204]	; (800297c <MX_TIM3_Init+0x100>)
 80028b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028b4:	f242 527f 	movw	r2, #9599	; 0x257f
 80028b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028c2:	22c7      	movs	r2, #199	; 0xc7
 80028c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028d2:	4829      	ldr	r0, [pc, #164]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028d4:	f004 f8ce 	bl	8006a74 <HAL_TIM_Base_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80028de:	f000 f9dd 	bl	8002c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ec:	4619      	mov	r1, r3
 80028ee:	4822      	ldr	r0, [pc, #136]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028f0:	f004 fb36 	bl	8006f60 <HAL_TIM_ConfigClockSource>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80028fa:	f000 f9cf 	bl	8002c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028fe:	481e      	ldr	r0, [pc, #120]	; (8002978 <MX_TIM3_Init+0xfc>)
 8002900:	f004 f962 	bl	8006bc8 <HAL_TIM_PWM_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800290a:	f000 f9c7 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002916:	f107 0320 	add.w	r3, r7, #32
 800291a:	4619      	mov	r1, r3
 800291c:	4816      	ldr	r0, [pc, #88]	; (8002978 <MX_TIM3_Init+0xfc>)
 800291e:	f004 feb3 	bl	8007688 <HAL_TIMEx_MasterConfigSynchronization>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002928:	f000 f9b8 	bl	8002c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800292c:	2360      	movs	r3, #96	; 0x60
 800292e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	4619      	mov	r1, r3
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <MX_TIM3_Init+0xfc>)
 8002944:	f004 fa4a 	bl	8006ddc <HAL_TIM_PWM_ConfigChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800294e:	f000 f9a5 	bl	8002c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	2204      	movs	r2, #4
 8002956:	4619      	mov	r1, r3
 8002958:	4807      	ldr	r0, [pc, #28]	; (8002978 <MX_TIM3_Init+0xfc>)
 800295a:	f004 fa3f 	bl	8006ddc <HAL_TIM_PWM_ConfigChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002964:	f000 f99a 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002968:	4803      	ldr	r0, [pc, #12]	; (8002978 <MX_TIM3_Init+0xfc>)
 800296a:	f000 fcad 	bl	80032c8 <HAL_TIM_MspPostInit>

}
 800296e:	bf00      	nop
 8002970:	3738      	adds	r7, #56	; 0x38
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200004b8 	.word	0x200004b8
 800297c:	40000400 	.word	0x40000400

08002980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <MX_GPIO_Init+0x104>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a39      	ldr	r2, [pc, #228]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <MX_GPIO_Init+0x104>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	210e      	movs	r1, #14
 8002a0a:	481f      	ldr	r0, [pc, #124]	; (8002a88 <MX_GPIO_Init+0x108>)
 8002a0c:	f001 fb9c 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin, GPIO_PIN_RESET);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2107      	movs	r1, #7
 8002a14:	481d      	ldr	r0, [pc, #116]	; (8002a8c <MX_GPIO_Init+0x10c>)
 8002a16:	f001 fb97 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_10O_Pin */
  GPIO_InitStruct.Pin = RF_10O_Pin;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_10O_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4816      	ldr	r0, [pc, #88]	; (8002a88 <MX_GPIO_Init+0x108>)
 8002a30:	f001 fa06 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_RESET_Pin RF_CE_Pin SD_CE_Pin */
  GPIO_InitStruct.Pin = RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin;
 8002a34:	230e      	movs	r3, #14
 8002a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480f      	ldr	r0, [pc, #60]	; (8002a88 <MX_GPIO_Init+0x108>)
 8002a4c:	f001 f9f8 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CE_Pin GYR_CE_Pin MAG_CE_Pin */
  GPIO_InitStruct.Pin = ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin;
 8002a50:	2307      	movs	r3, #7
 8002a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4619      	mov	r1, r3
 8002a66:	4809      	ldr	r0, [pc, #36]	; (8002a8c <MX_GPIO_Init+0x10c>)
 8002a68:	f001 f9ea 	bl	8003e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2105      	movs	r1, #5
 8002a70:	2006      	movs	r0, #6
 8002a72:	f001 f9a0 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a76:	2006      	movs	r0, #6
 8002a78:	f001 f9b9 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 8002a7c:	bf00      	nop
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020400 	.word	0x40020400

08002a90 <start_sensor_reading>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_reading */
void start_sensor_reading(void *argument)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002a98:	f00b f970 	bl	800dd7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	// Init BMX055
	if (!BMX055_init(&bmx055)) {
 8002a9c:	481a      	ldr	r0, [pc, #104]	; (8002b08 <start_sensor_reading+0x78>)
 8002a9e:	f7fe fa5d 	bl	8000f5c <BMX055_init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f083 0301 	eor.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <start_sensor_reading+0x24>
		printf("[main] BMX055 failed to start\r\n");
 8002aae:	4817      	ldr	r0, [pc, #92]	; (8002b0c <start_sensor_reading+0x7c>)
 8002ab0:	f00c feb0 	bl	800f814 <puts>
//	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
	// HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

	// Sensor type that is ready when task is released
	uint32_t sensor_type;
  osDelay(2000);  // give it a lil
 8002ab4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ab8:	f008 fb7a 	bl	800b1b0 <osDelay>
		// xTaskNotifyWait(0, 0, &sensor_type, (TickType_t) portMAX_DELAY);

		/* Check each sensor each loop for new data */
    float accel_data[3];
    float gyro_data[3];
    BMX055_readAccel(&bmx055, accel_data);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4811      	ldr	r0, [pc, #68]	; (8002b08 <start_sensor_reading+0x78>)
 8002ac4:	f7fe fc06 	bl	80012d4 <BMX055_readAccel>
    BMX055_exp_filter(bmx055_data.accel, accel_data, bmx055_data.accel, sizeof(accel_data) / sizeof(int),
 8002ac8:	f107 0114 	add.w	r1, r7, #20
 8002acc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002b10 <start_sensor_reading+0x80>
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <start_sensor_reading+0x84>)
 8002ad4:	480f      	ldr	r0, [pc, #60]	; (8002b14 <start_sensor_reading+0x84>)
 8002ad6:	f7fe fe08 	bl	80016ea <BMX055_exp_filter>
    ACCEL_ALPHA);
    BMX055_readGyro(&bmx055, gyro_data);
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <start_sensor_reading+0x78>)
 8002ae2:	f7fe fc7a 	bl	80013da <BMX055_readGyro>
    BMX055_exp_filter(bmx055_data.gyro, gyro_data, bmx055_data.gyro, sizeof(gyro_data) / sizeof(int),
 8002ae6:	f107 0108 	add.w	r1, r7, #8
 8002aea:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002aee:	2303      	movs	r3, #3
 8002af0:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <start_sensor_reading+0x88>)
 8002af2:	4809      	ldr	r0, [pc, #36]	; (8002b18 <start_sensor_reading+0x88>)
 8002af4:	f7fe fdf9 	bl	80016ea <BMX055_exp_filter>
    GYRO_ALPHA);
    BMX055_readCompensatedMag(&bmx055, bmx055_data.mag);
 8002af8:	4908      	ldr	r1, [pc, #32]	; (8002b1c <start_sensor_reading+0x8c>)
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <start_sensor_reading+0x78>)
 8002afc:	f7fe fd84 	bl	8001608 <BMX055_readCompensatedMag>

    osDelay(30);  // every 30ms let's grab some new data
 8002b00:	201e      	movs	r0, #30
 8002b02:	f008 fb55 	bl	800b1b0 <osDelay>
	for (;;) {
 8002b06:	e7d9      	b.n	8002abc <start_sensor_reading+0x2c>
 8002b08:	20000508 	.word	0x20000508
 8002b0c:	08011b04 	.word	0x08011b04
 8002b10:	3f666666 	.word	0x3f666666
 8002b14:	20000544 	.word	0x20000544
 8002b18:	20000558 	.word	0x20000558
 8002b1c:	2000056c 	.word	0x2000056c

08002b20 <start_LoRa_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LoRa_task */
void start_LoRa_task(void *argument)
{
 8002b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b22:	b0d5      	sub	sp, #340	; 0x154
 8002b24:	af10      	add	r7, sp, #64	; 0x40
 8002b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b2e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_LoRa_task */
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b30:	2006      	movs	r0, #6
 8002b32:	f001 f95c 	bl	8003dee <HAL_NVIC_EnableIRQ>
  LoRa_reset(&LoRa_Handle);
 8002b36:	4856      	ldr	r0, [pc, #344]	; (8002c90 <start_LoRa_task+0x170>)
 8002b38:	f7fe ff38 	bl	80019ac <LoRa_reset>
	LoRa_setModulation(&LoRa_Handle, LORA_MODULATION);
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4854      	ldr	r0, [pc, #336]	; (8002c90 <start_LoRa_task+0x170>)
 8002b40:	f7fe ffd6 	bl	8001af0 <LoRa_setModulation>
	if (LoRa_init(&LoRa_Handle) != LORA_OK) {
 8002b44:	4852      	ldr	r0, [pc, #328]	; (8002c90 <start_LoRa_task+0x170>)
 8002b46:	f7ff fb08 	bl	800215a <LoRa_init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2bc8      	cmp	r3, #200	; 0xc8
 8002b4e:	d003      	beq.n	8002b58 <start_LoRa_task+0x38>
      CDC_Transmit_FS("LoRa connection failed\r\n", strlen("LoRa connection failed\r\n"));
 8002b50:	2118      	movs	r1, #24
 8002b52:	4850      	ldr	r0, [pc, #320]	; (8002c94 <start_LoRa_task+0x174>)
 8002b54:	f00b f9d0 	bl	800def8 <CDC_Transmit_FS>
	}

	LoRa_startReceiving(&LoRa_Handle);
 8002b58:	484d      	ldr	r0, [pc, #308]	; (8002c90 <start_LoRa_task+0x170>)
 8002b5a:	f7ff fa92 	bl	8002082 <LoRa_startReceiving>
//  }
  /* Infinite loop */
  for(;;)
  {
    // Wait for LoRa to be ready before running task
    xTaskNotifyWait(0, 0, NULL, (TickType_t) portMAX_DELAY);
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	2000      	movs	r0, #0
 8002b68:	f009 ffe6 	bl	800cb38 <xTaskNotifyWait>

    // Read bytes in FIFO buffer
    uint8_t read_data[255];
    size_t bytes_read = LoRa_receive(&LoRa_Handle, read_data, sizeof(read_data));
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	22ff      	movs	r2, #255	; 0xff
 8002b72:	4619      	mov	r1, r3
 8002b74:	4846      	ldr	r0, [pc, #280]	; (8002c90 <start_LoRa_task+0x170>)
 8002b76:	f7ff fa90 	bl	800209a <LoRa_receive>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    switch (read_data[0]) {
 8002b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d070      	beq.n	8002c70 <start_LoRa_task+0x150>
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	dc7a      	bgt.n	8002c88 <start_LoRa_task+0x168>
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <start_LoRa_task+0x7c>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d057      	beq.n	8002c4a <start_LoRa_task+0x12a>
      case PONG: ;
        uint8_t resp = 1;
        LoRa_transmit(&LoRa_Handle, &resp, 1, 0xffff);
        break;
      default:
        break;
 8002b9a:	e075      	b.n	8002c88 <start_LoRa_task+0x168>
      	if (bytes_read < 3) break;
 8002b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d973      	bls.n	8002c8c <start_LoRa_task+0x16c>
      	float a = (float) read_data[bytes_read-2];
 8002ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba8:	3b02      	subs	r3, #2
 8002baa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbc:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
      	set_motor(1, 1, (float) read_data[bytes_read-2], htim3);
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc4:	3b02      	subs	r3, #2
 8002bc6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002bca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd8:	4e2f      	ldr	r6, [pc, #188]	; (8002c98 <start_LoRa_task+0x178>)
 8002bda:	466d      	mov	r5, sp
 8002bdc:	f106 0408 	add.w	r4, r6, #8
 8002be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002bf4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f000 f8b0 	bl	8002d64 <set_motor>
      	set_motor(2, 1, (float) read_data[bytes_read-1], htim3);
 8002c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002c0e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1c:	4e1e      	ldr	r6, [pc, #120]	; (8002c98 <start_LoRa_task+0x178>)
 8002c1e:	466d      	mov	r5, sp
 8002c20:	f106 0408 	add.w	r4, r6, #8
 8002c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c38:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	2101      	movs	r1, #1
 8002c42:	2002      	movs	r0, #2
 8002c44:	f000 f88e 	bl	8002d64 <set_motor>
        break;
 8002c48:	e021      	b.n	8002c8e <start_LoRa_task+0x16e>
        gimble_test(htim3);
 8002c4a:	4e13      	ldr	r6, [pc, #76]	; (8002c98 <start_LoRa_task+0x178>)
 8002c4c:	466d      	mov	r5, sp
 8002c4e:	f106 0410 	add.w	r4, r6, #16
 8002c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c6a:	f000 f8dd 	bl	8002e28 <gimble_test>
        break;
 8002c6e:	e00e      	b.n	8002c8e <start_LoRa_task+0x16e>
        uint8_t resp = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
        LoRa_transmit(&LoRa_Handle, &resp, 1, 0xffff);
 8002c76:	f207 1107 	addw	r1, r7, #263	; 0x107
 8002c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <start_LoRa_task+0x170>)
 8002c82:	f7ff f9a6 	bl	8001fd2 <LoRa_transmit>
        break;
 8002c86:	e002      	b.n	8002c8e <start_LoRa_task+0x16e>
        break;
 8002c88:	bf00      	nop
 8002c8a:	e768      	b.n	8002b5e <start_LoRa_task+0x3e>
      	if (bytes_read < 3) break;
 8002c8c:	bf00      	nop
  {
 8002c8e:	e766      	b.n	8002b5e <start_LoRa_task+0x3e>
 8002c90:	20000580 	.word	0x20000580
 8002c94:	08011b24 	.word	0x08011b24
 8002c98:	200004b8 	.word	0x200004b8

08002c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca0:	b672      	cpsid	i
}
 8002ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <Error_Handler+0x8>
	...

08002ca8 <_degrees_to_duty_cycle>:
 *      Author: jb
 */

#include "servos.h"

float _degrees_to_duty_cycle(float degrees) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty_cycle = MIN_DUTY_CYCLE + ((MAX_DUTY_CYCLE - MIN_DUTY_CYCLE) / (MAX_ANGLE - MIN_ANGLE)) * (degrees - MIN_ANGLE);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fc50 	bl	8000558 <__aeabi_f2d>
 8002cb8:	a310      	add	r3, pc, #64	; (adr r3, 8002cfc <_degrees_to_duty_cycle+0x54>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fca3 	bl	8000608 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <_degrees_to_duty_cycle+0x50>)
 8002cd0:	f7fd fae4 	bl	800029c <__adddf3>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd ff6c 	bl	8000bb8 <__aeabi_d2f>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

	return duty_cycle;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	40040000 	.word	0x40040000
 8002cfc:	16c16c17 	.word	0x16c16c17
 8002d00:	3fa6c16c 	.word	0x3fa6c16c
 8002d04:	00000000 	.word	0x00000000

08002d08 <_byte_to_duty_cycle>:

float _byte_to_duty_cycle(float byte) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty_cycle = MIN_DUTY_CYCLE + ((MAX_DUTY_CYCLE - MIN_DUTY_CYCLE) / 255) * byte;
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fc20 	bl	8000558 <__aeabi_f2d>
 8002d18:	a310      	add	r3, pc, #64	; (adr r3, 8002d5c <_byte_to_duty_cycle+0x54>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fc73 	bl	8000608 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <_byte_to_duty_cycle+0x50>)
 8002d30:	f7fd fab4 	bl	800029c <__adddf3>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd ff3c 	bl	8000bb8 <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]

	return duty_cycle;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	ee07 3a90 	vmov	s15, r3
}
 8002d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	f3af 8000 	nop.w
 8002d58:	40040000 	.word	0x40040000
 8002d5c:	10101010 	.word	0x10101010
 8002d60:	3fa01010 	.word	0x3fa01010

08002d64 <set_motor>:

void set_motor(int motor_id, int mode, float input, TIM_HandleTypeDef htim) {
 8002d64:	b082      	sub	sp, #8
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b094      	sub	sp, #80	; 0x50
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d74:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d78:	e881 000c 	stmia.w	r1, {r2, r3}
	float duty_cycle;
	if (mode == 0) {
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <set_motor+0x2c>
		duty_cycle = _degrees_to_duty_cycle(input);
 8002d82:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d86:	f7ff ff8f 	bl	8002ca8 <_degrees_to_duty_cycle>
 8002d8a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 8002d8e:	e005      	b.n	8002d9c <set_motor+0x38>
	} else {
		duty_cycle = _byte_to_duty_cycle(input);
 8002d90:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d94:	f7ff ffb8 	bl	8002d08 <_byte_to_duty_cycle>
 8002d98:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	}

	// duty cycle = ccr / arr * 100
	float normalised = duty_cycle * 200 / 100;
 8002d9c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002da0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002e1c <set_motor+0xb8>
 8002da4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002da8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002e20 <set_motor+0xbc>
 8002dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	if (motor_id == 1) {
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <set_motor+0x68>
		htim.Instance->CCR1 = normalised;
 8002dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dbc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc4:	ee17 2a90 	vmov	r2, s15
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
		// log an error over USB
		char buff[50];
		sprintf(buff, "ERROR: Invalid motor ID: %d\n", motor_id);
		CDC_Transmit_FS(buff, strlen(buff));
	}
}
 8002dca:	e01f      	b.n	8002e0c <set_motor+0xa8>
	} else if (motor_id == 2) {
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d108      	bne.n	8002de4 <set_motor+0x80>
		htim.Instance->CCR2 = normalised;
 8002dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dd4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ddc:	ee17 2a90 	vmov	r2, s15
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002de2:	e013      	b.n	8002e0c <set_motor+0xa8>
		sprintf(buff, "ERROR: Invalid motor ID: %d\n", motor_id);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <set_motor+0xc0>)
 8002dec:	4618      	mov	r0, r3
 8002dee:	f00c fd93 	bl	800f918 <siprintf>
		CDC_Transmit_FS(buff, strlen(buff));
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd f9f2 	bl	80001e0 <strlen>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f00b f876 	bl	800def8 <CDC_Transmit_FS>
}
 8002e0c:	bf00      	nop
 8002e0e:	3750      	adds	r7, #80	; 0x50
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e16:	b002      	add	sp, #8
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	43480000 	.word	0x43480000
 8002e20:	42c80000 	.word	0x42c80000
 8002e24:	08011c30 	.word	0x08011c30

08002e28 <gimble_test>:

void gimble_test(TIM_HandleTypeDef htim) {
 8002e28:	b084      	sub	sp, #16
 8002e2a:	b5b0      	push	{r4, r5, r7, lr}
 8002e2c:	b092      	sub	sp, #72	; 0x48
 8002e2e:	af10      	add	r7, sp, #64	; 0x40
 8002e30:	f107 0418 	add.w	r4, r7, #24
 8002e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	set_motor(1, 0, 0, htim);
 8002e38:	466d      	mov	r5, sp
 8002e3a:	f107 0420 	add.w	r4, r7, #32
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e52:	f107 0318 	add.w	r3, r7, #24
 8002e56:	cb0c      	ldmia	r3, {r2, r3}
 8002e58:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8003004 <gimble_test+0x1dc>
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7ff ff80 	bl	8002d64 <set_motor>
	HAL_Delay(1000);
 8002e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e68:	f000 fc10 	bl	800368c <HAL_Delay>
	set_motor(1, 0, 180, htim);
 8002e6c:	466d      	mov	r5, sp
 8002e6e:	f107 0420 	add.w	r4, r7, #32
 8002e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e86:	f107 0318 	add.w	r3, r7, #24
 8002e8a:	cb0c      	ldmia	r3, {r2, r3}
 8002e8c:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8003008 <gimble_test+0x1e0>
 8002e90:	2100      	movs	r1, #0
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7ff ff66 	bl	8002d64 <set_motor>
	HAL_Delay(1000);
 8002e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9c:	f000 fbf6 	bl	800368c <HAL_Delay>
	set_motor(1, 0, 90, htim);
 8002ea0:	466d      	mov	r5, sp
 8002ea2:	f107 0420 	add.w	r4, r7, #32
 8002ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002eb6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002eba:	f107 0318 	add.w	r3, r7, #24
 8002ebe:	cb0c      	ldmia	r3, {r2, r3}
 8002ec0:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800300c <gimble_test+0x1e4>
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7ff ff4c 	bl	8002d64 <set_motor>
	HAL_Delay(1000);
 8002ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed0:	f000 fbdc 	bl	800368c <HAL_Delay>
	set_motor(2, 0, 0, htim);
 8002ed4:	466d      	mov	r5, sp
 8002ed6:	f107 0420 	add.w	r4, r7, #32
 8002eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002eea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002eee:	f107 0318 	add.w	r3, r7, #24
 8002ef2:	cb0c      	ldmia	r3, {r2, r3}
 8002ef4:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003004 <gimble_test+0x1dc>
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2002      	movs	r0, #2
 8002efc:	f7ff ff32 	bl	8002d64 <set_motor>
	HAL_Delay(1000);
 8002f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f04:	f000 fbc2 	bl	800368c <HAL_Delay>
	set_motor(2, 0, 180, htim);
 8002f08:	466d      	mov	r5, sp
 8002f0a:	f107 0420 	add.w	r4, r7, #32
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f22:	f107 0318 	add.w	r3, r7, #24
 8002f26:	cb0c      	ldmia	r3, {r2, r3}
 8002f28:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003008 <gimble_test+0x1e0>
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f7ff ff18 	bl	8002d64 <set_motor>
	HAL_Delay(1000);
 8002f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f38:	f000 fba8 	bl	800368c <HAL_Delay>
	set_motor(2, 0, 90, htim);
 8002f3c:	466d      	mov	r5, sp
 8002f3e:	f107 0420 	add.w	r4, r7, #32
 8002f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f52:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f56:	f107 0318 	add.w	r3, r7, #24
 8002f5a:	cb0c      	ldmia	r3, {r2, r3}
 8002f5c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800300c <gimble_test+0x1e4>
 8002f60:	2100      	movs	r1, #0
 8002f62:	2002      	movs	r0, #2
 8002f64:	f7ff fefe 	bl	8002d64 <set_motor>
	HAL_Delay(1000);
 8002f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f6c:	f000 fb8e 	bl	800368c <HAL_Delay>

	for (int angle=0; angle < 180; angle++) {
 8002f70:	2300      	movs	r3, #0
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	e03b      	b.n	8002fee <gimble_test+0x1c6>
		set_motor(1, 0, angle, htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f80:	466d      	mov	r5, sp
 8002f82:	f107 0420 	add.w	r4, r7, #32
 8002f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f9a:	f107 0318 	add.w	r3, r7, #24
 8002f9e:	cb0c      	ldmia	r3, {r2, r3}
 8002fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7ff fedc 	bl	8002d64 <set_motor>
		set_motor(2, 0, angle, htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb6:	466d      	mov	r5, sp
 8002fb8:	f107 0420 	add.w	r4, r7, #32
 8002fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002fd0:	f107 0318 	add.w	r3, r7, #24
 8002fd4:	cb0c      	ldmia	r3, {r2, r3}
 8002fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f7ff fec1 	bl	8002d64 <set_motor>
		HAL_Delay(10);
 8002fe2:	200a      	movs	r0, #10
 8002fe4:	f000 fb52 	bl	800368c <HAL_Delay>
	for (int angle=0; angle < 180; angle++) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3301      	adds	r3, #1
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2bb3      	cmp	r3, #179	; 0xb3
 8002ff2:	ddc0      	ble.n	8002f76 <gimble_test+0x14e>
	}
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003000:	b004      	add	sp, #16
 8003002:	4770      	bx	lr
 8003004:	00000000 	.word	0x00000000
 8003008:	43340000 	.word	0x43340000
 800300c:	42b40000 	.word	0x42b40000

08003010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_MspInit+0x54>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_MspInit+0x54>)
 8003020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003024:	6453      	str	r3, [r2, #68]	; 0x44
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_MspInit+0x54>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_MspInit+0x54>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_MspInit+0x54>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_MspInit+0x54>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	210f      	movs	r1, #15
 8003052:	f06f 0001 	mvn.w	r0, #1
 8003056:	f000 feae 	bl	8003db6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_ADC_MspInit+0x7c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d127      	bne.n	80030da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_ADC_MspInit+0x80>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <HAL_ADC_MspInit+0x80>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6453      	str	r3, [r2, #68]	; 0x44
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_ADC_MspInit+0x80>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_ADC_MspInit+0x80>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <HAL_ADC_MspInit+0x80>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_ADC_MspInit+0x80>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = S1_FBK_Pin|S2_FBK_Pin;
 80030c2:	230c      	movs	r3, #12
 80030c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c6:	2303      	movs	r3, #3
 80030c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 0314 	add.w	r3, r7, #20
 80030d2:	4619      	mov	r1, r3
 80030d4:	4805      	ldr	r0, [pc, #20]	; (80030ec <HAL_ADC_MspInit+0x84>)
 80030d6:	f000 feb3 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40012000 	.word	0x40012000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000

080030f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	; 0x38
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4c      	ldr	r2, [pc, #304]	; (8003240 <HAL_SPI_MspInit+0x150>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d12c      	bne.n	800316c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_SPI_MspInit+0x154>)
 800311c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b48      	ldr	r3, [pc, #288]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	4b44      	ldr	r3, [pc, #272]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a43      	ldr	r2, [pc, #268]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 800314a:	23e0      	movs	r3, #224	; 0xe0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800315a:	2305      	movs	r3, #5
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003162:	4619      	mov	r1, r3
 8003164:	4838      	ldr	r0, [pc, #224]	; (8003248 <HAL_SPI_MspInit+0x158>)
 8003166:	f000 fe6b 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800316a:	e064      	b.n	8003236 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a36      	ldr	r2, [pc, #216]	; (800324c <HAL_SPI_MspInit+0x15c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d12d      	bne.n	80031d2 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_SPI_MspInit+0x154>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_SPI_MspInit+0x154>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_SPI_MspInit+0x154>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 80031ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c0:	2305      	movs	r3, #5
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	4619      	mov	r1, r3
 80031ca:	4821      	ldr	r0, [pc, #132]	; (8003250 <HAL_SPI_MspInit+0x160>)
 80031cc:	f000 fe38 	bl	8003e40 <HAL_GPIO_Init>
}
 80031d0:	e031      	b.n	8003236 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_SPI_MspInit+0x164>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d12c      	bne.n	8003236 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_SPI_MspInit+0x154>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a17      	ldr	r2, [pc, #92]	; (8003244 <HAL_SPI_MspInit+0x154>)
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_SPI_MspInit+0x154>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_SPI_MspInit+0x154>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	4a10      	ldr	r2, [pc, #64]	; (8003244 <HAL_SPI_MspInit+0x154>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6313      	str	r3, [r2, #48]	; 0x30
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_SPI_MspInit+0x154>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003214:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003226:	2306      	movs	r3, #6
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <HAL_SPI_MspInit+0x168>)
 8003232:	f000 fe05 	bl	8003e40 <HAL_GPIO_Init>
}
 8003236:	bf00      	nop
 8003238:	3738      	adds	r7, #56	; 0x38
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40013000 	.word	0x40013000
 8003244:	40023800 	.word	0x40023800
 8003248:	40020000 	.word	0x40020000
 800324c:	40003800 	.word	0x40003800
 8003250:	40020400 	.word	0x40020400
 8003254:	40003c00 	.word	0x40003c00
 8003258:	40020800 	.word	0x40020800

0800325c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d10e      	bne.n	800328c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_TIM_Base_MspInit+0x64>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIM_Base_MspInit+0x64>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_TIM_Base_MspInit+0x64>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800328a:	e012      	b.n	80032b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_TIM_Base_MspInit+0x68>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_TIM_Base_MspInit+0x64>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_TIM_Base_MspInit+0x64>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_TIM_Base_MspInit+0x64>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40000400 	.word	0x40000400

080032c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_TIM_MspPostInit+0x68>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d11d      	bne.n	8003326 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_TIM_MspPostInit+0x6c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_TIM_MspPostInit+0x6c>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_TIM_MspPostInit+0x6c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = S1_CTRL_Pin|S2_CTRL_Pin;
 8003306:	2330      	movs	r3, #48	; 0x30
 8003308:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003316:	2302      	movs	r3, #2
 8003318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	4619      	mov	r1, r3
 8003320:	4805      	ldr	r0, [pc, #20]	; (8003338 <HAL_TIM_MspPostInit+0x70>)
 8003322:	f000 fd8d 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003326:	bf00      	nop
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40000400 	.word	0x40000400
 8003334:	40023800 	.word	0x40023800
 8003338:	40020400 	.word	0x40020400

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <NMI_Handler+0x4>

08003342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <MemManage_Handler+0x4>

0800334e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <BusFault_Handler+0x4>

08003354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <UsageFault_Handler+0x4>

0800335a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336c:	f000 f96e 	bl	800364c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003370:	f009 fb56 	bl	800ca20 <xTaskGetSchedulerState>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800337a:	f00a fa85 	bl	800d888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}

08003382 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_10O_Pin);
 8003386:	2001      	movs	r0, #1
 8003388:	f000 fef8 	bl	800417c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <OTG_FS_IRQHandler+0x10>)
 8003396:	f001 f859 	bl	800444c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200064a8 	.word	0x200064a8

080033a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return 1;
 80033a8:	2301      	movs	r3, #1
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_kill>:

int _kill(int pid, int sig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033be:	f00b fb83 	bl	800eac8 <__errno>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2216      	movs	r2, #22
 80033c6:	601a      	str	r2, [r3, #0]
  return -1;
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_exit>:

void _exit (int status)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffe7 	bl	80033b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033e6:	e7fe      	b.n	80033e6 <_exit+0x12>

080033e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e00a      	b.n	8003410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033fa:	f3af 8000 	nop.w
 80033fe:	4601      	mov	r1, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	60ba      	str	r2, [r7, #8]
 8003406:	b2ca      	uxtb	r2, r1
 8003408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	dbf0      	blt.n	80033fa <_read+0x12>
  }

  return len;
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e009      	b.n	8003448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	60ba      	str	r2, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	dbf1      	blt.n	8003434 <_write+0x12>
  }
  return len;
 8003450:	687b      	ldr	r3, [r7, #4]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_close>:

int _close(int file)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003482:	605a      	str	r2, [r3, #4]
  return 0;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_isatty>:

int _isatty(int file)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <_sbrk+0x5c>)
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <_sbrk+0x60>)
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <_sbrk+0x64>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <_sbrk+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <_sbrk+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d207      	bcs.n	8003504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f4:	f00b fae8 	bl	800eac8 <__errno>
 80034f8:	4603      	mov	r3, r0
 80034fa:	220c      	movs	r2, #12
 80034fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	e009      	b.n	8003518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <_sbrk+0x64>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <_sbrk+0x64>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <_sbrk+0x64>)
 8003514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20020000 	.word	0x20020000
 8003524:	00000400 	.word	0x00000400
 8003528:	200005b0 	.word	0x200005b0
 800352c:	20006be8 	.word	0x20006be8

08003530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <SystemInit+0x20>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <SystemInit+0x20>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800358c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800355a:	490e      	ldr	r1, [pc, #56]	; (8003594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003560:	e002      	b.n	8003568 <LoopCopyDataInit>

08003562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003566:	3304      	adds	r3, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800356c:	d3f9      	bcc.n	8003562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003570:	4c0b      	ldr	r4, [pc, #44]	; (80035a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003574:	e001      	b.n	800357a <LoopFillZerobss>

08003576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003578:	3204      	adds	r2, #4

0800357a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800357c:	d3fb      	bcc.n	8003576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800357e:	f7ff ffd7 	bl	8003530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003582:	f00b fb9d 	bl	800ecc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003586:	f7fe fefb 	bl	8002380 <main>
  bx  lr    
 800358a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800358c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003594:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8003598:	080120f4 	.word	0x080120f4
  ldr r2, =_sbss
 800359c:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 80035a0:	20006be4 	.word	0x20006be4

080035a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC_IRQHandler>
	...

080035a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_Init+0x40>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_Init+0x40>)
 80035be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_Init+0x40>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 fbe5 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d6:	200f      	movs	r0, #15
 80035d8:	f000 f808 	bl	80035ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035dc:	f7ff fd18 	bl	8003010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_InitTick+0x54>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_InitTick+0x58>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fc0b 	bl	8003e26 <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00e      	b.n	8003638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d80a      	bhi.n	8003636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f000 fbc5 	bl	8003db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4a06      	ldr	r2, [pc, #24]	; (8003648 <HAL_InitTick+0x5c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000034 	.word	0x20000034
 8003644:	2000003c 	.word	0x2000003c
 8003648:	20000038 	.word	0x20000038

0800364c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_IncTick+0x20>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_IncTick+0x24>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4413      	add	r3, r2
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_IncTick+0x24>)
 800365e:	6013      	str	r3, [r2, #0]
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	2000003c 	.word	0x2000003c
 8003670:	200005b4 	.word	0x200005b4

08003674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return uwTick;
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_GetTick+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200005b4 	.word	0x200005b4

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff ffee 	bl	8003674 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036b2:	bf00      	nop
 80036b4:	f7ff ffde 	bl	8003674 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000003c 	.word	0x2000003c

080036d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e033      	b.n	8003752 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fcb8 	bl	8003068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800371a:	f023 0302 	bic.w	r3, r3, #2
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f94a 	bl	80039c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
 8003742:	e001      	b.n	8003748 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1c>
 8003774:	2302      	movs	r3, #2
 8003776:	e113      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x244>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d925      	bls.n	80037d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68d9      	ldr	r1, [r3, #12]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	3b1e      	subs	r3, #30
 800379e:	2207      	movs	r2, #7
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43da      	mvns	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	400a      	ands	r2, r1
 80037ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68d9      	ldr	r1, [r3, #12]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	4603      	mov	r3, r0
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4403      	add	r3, r0
 80037c6:	3b1e      	subs	r3, #30
 80037c8:	409a      	lsls	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	e022      	b.n	800381a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6919      	ldr	r1, [r3, #16]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	2207      	movs	r2, #7
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43da      	mvns	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	400a      	ands	r2, r1
 80037f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6919      	ldr	r1, [r3, #16]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	4618      	mov	r0, r3
 800380a:	4603      	mov	r3, r0
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4403      	add	r3, r0
 8003810:	409a      	lsls	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d824      	bhi.n	800386c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	3b05      	subs	r3, #5
 8003834:	221f      	movs	r2, #31
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	400a      	ands	r2, r1
 8003842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	4618      	mov	r0, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	3b05      	subs	r3, #5
 800385e:	fa00 f203 	lsl.w	r2, r0, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	635a      	str	r2, [r3, #52]	; 0x34
 800386a:	e04c      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	d824      	bhi.n	80038be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	3b23      	subs	r3, #35	; 0x23
 8003886:	221f      	movs	r2, #31
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43da      	mvns	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	400a      	ands	r2, r1
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4618      	mov	r0, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	3b23      	subs	r3, #35	; 0x23
 80038b0:	fa00 f203 	lsl.w	r2, r0, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
 80038bc:	e023      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3b41      	subs	r3, #65	; 0x41
 80038d0:	221f      	movs	r2, #31
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	400a      	ands	r2, r1
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	3b41      	subs	r3, #65	; 0x41
 80038fa:	fa00 f203 	lsl.w	r2, r0, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_ADC_ConfigChannel+0x250>)
 8003908:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a28      	ldr	r2, [pc, #160]	; (80039b0 <HAL_ADC_ConfigChannel+0x254>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d10f      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x1d8>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b12      	cmp	r3, #18
 800391a:	d10b      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1d      	ldr	r2, [pc, #116]	; (80039b0 <HAL_ADC_ConfigChannel+0x254>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d12b      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x23a>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_ADC_ConfigChannel+0x258>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <HAL_ADC_ConfigChannel+0x1f4>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b11      	cmp	r3, #17
 800394e:	d122      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <HAL_ADC_ConfigChannel+0x258>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d111      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_ADC_ConfigChannel+0x25c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_ADC_ConfigChannel+0x260>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	0c9a      	lsrs	r2, r3, #18
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003988:	e002      	b.n	8003990 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3b01      	subs	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f9      	bne.n	800398a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40012300 	.word	0x40012300
 80039b0:	40012000 	.word	0x40012000
 80039b4:	10000012 	.word	0x10000012
 80039b8:	20000034 	.word	0x20000034
 80039bc:	431bde83 	.word	0x431bde83

080039c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c8:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <ADC_Init+0x1f0>)
 80039ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	021a      	lsls	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <ADC_Init+0x1f4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6899      	ldr	r1, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	e00f      	b.n	8003abe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0202 	bic.w	r2, r2, #2
 8003acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7e1b      	ldrb	r3, [r3, #24]
 8003ad8:	005a      	lsls	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	3b01      	subs	r3, #1
 8003b18:	035a      	lsls	r2, r3, #13
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e007      	b.n	8003b34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	051a      	lsls	r2, r3, #20
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b76:	025a      	lsls	r2, r3, #9
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	029a      	lsls	r2, r3, #10
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40012300 	.word	0x40012300
 8003bb4:	0f000001 	.word	0x0f000001

08003bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bea:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60d3      	str	r3, [r2, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <__NVIC_GetPriorityGrouping+0x18>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 0307 	and.w	r3, r3, #7
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0b      	blt.n	8003c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	4907      	ldr	r1, [pc, #28]	; (8003c54 <__NVIC_EnableIRQ+0x38>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	db12      	blt.n	8003c90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	490a      	ldr	r1, [pc, #40]	; (8003c9c <__NVIC_DisableIRQ+0x44>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2001      	movs	r0, #1
 8003c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7e:	3320      	adds	r3, #32
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c84:	f3bf 8f4f 	dsb	sy
}
 8003c88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c8a:	f3bf 8f6f 	isb	sy
}
 8003c8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000e100 	.word	0xe000e100

08003ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db0a      	blt.n	8003cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	490c      	ldr	r1, [pc, #48]	; (8003cec <__NVIC_SetPriority+0x4c>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc8:	e00a      	b.n	8003ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <__NVIC_SetPriority+0x50>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3b04      	subs	r3, #4
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	761a      	strb	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f1c3 0307 	rsb	r3, r3, #7
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf28      	it	cs
 8003d12:	2304      	movcs	r3, #4
 8003d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d902      	bls.n	8003d24 <NVIC_EncodePriority+0x30>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3b03      	subs	r3, #3
 8003d22:	e000      	b.n	8003d26 <NVIC_EncodePriority+0x32>
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	401a      	ands	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	4313      	orrs	r3, r2
         );
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff8e 	bl	8003ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff05 	bl	8003bb8 <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff1a 	bl	8003c00 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff8e 	bl	8003cf4 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5d 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff0d 	bl	8003c1c <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff1d 	bl	8003c58 <__NVIC_DisableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ff94 	bl	8003d5c <SysTick_Config>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e159      	b.n	8004110 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	f040 8148 	bne.w	800410a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d005      	beq.n	8003e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d130      	bne.n	8003ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 0201 	and.w	r2, r3, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d017      	beq.n	8003f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d123      	bne.n	8003f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	08da      	lsrs	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3208      	adds	r2, #8
 8003f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a2 	beq.w	800410a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4b57      	ldr	r3, [pc, #348]	; (8004128 <HAL_GPIO_Init+0x2e8>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_GPIO_Init+0x2e8>)
 8003fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <HAL_GPIO_Init+0x2e8>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe2:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_GPIO_Init+0x2ec>)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	220f      	movs	r2, #15
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a49      	ldr	r2, [pc, #292]	; (8004130 <HAL_GPIO_Init+0x2f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d019      	beq.n	8004042 <HAL_GPIO_Init+0x202>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a48      	ldr	r2, [pc, #288]	; (8004134 <HAL_GPIO_Init+0x2f4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_GPIO_Init+0x1fe>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a47      	ldr	r2, [pc, #284]	; (8004138 <HAL_GPIO_Init+0x2f8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00d      	beq.n	800403a <HAL_GPIO_Init+0x1fa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a46      	ldr	r2, [pc, #280]	; (800413c <HAL_GPIO_Init+0x2fc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <HAL_GPIO_Init+0x1f6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a45      	ldr	r2, [pc, #276]	; (8004140 <HAL_GPIO_Init+0x300>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_GPIO_Init+0x1f2>
 800402e:	2304      	movs	r3, #4
 8004030:	e008      	b.n	8004044 <HAL_GPIO_Init+0x204>
 8004032:	2307      	movs	r3, #7
 8004034:	e006      	b.n	8004044 <HAL_GPIO_Init+0x204>
 8004036:	2303      	movs	r3, #3
 8004038:	e004      	b.n	8004044 <HAL_GPIO_Init+0x204>
 800403a:	2302      	movs	r3, #2
 800403c:	e002      	b.n	8004044 <HAL_GPIO_Init+0x204>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_GPIO_Init+0x204>
 8004042:	2300      	movs	r3, #0
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	f002 0203 	and.w	r2, r2, #3
 800404a:	0092      	lsls	r2, r2, #2
 800404c:	4093      	lsls	r3, r2
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004054:	4935      	ldr	r1, [pc, #212]	; (800412c <HAL_GPIO_Init+0x2ec>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	3302      	adds	r3, #2
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004062:	4b38      	ldr	r3, [pc, #224]	; (8004144 <HAL_GPIO_Init+0x304>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004086:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <HAL_GPIO_Init+0x304>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_GPIO_Init+0x304>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b0:	4a24      	ldr	r2, [pc, #144]	; (8004144 <HAL_GPIO_Init+0x304>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <HAL_GPIO_Init+0x304>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040da:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <HAL_GPIO_Init+0x304>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040e0:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_GPIO_Init+0x304>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004104:	4a0f      	ldr	r2, [pc, #60]	; (8004144 <HAL_GPIO_Init+0x304>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	f67f aea2 	bls.w	8003e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40013800 	.word	0x40013800
 8004130:	40020000 	.word	0x40020000
 8004134:	40020400 	.word	0x40020400
 8004138:	40020800 	.word	0x40020800
 800413c:	40020c00 	.word	0x40020c00
 8004140:	40021000 	.word	0x40021000
 8004144:	40013c00 	.word	0x40013c00

08004148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
 8004154:	4613      	mov	r3, r2
 8004156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004158:	787b      	ldrb	r3, [r7, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004164:	e003      	b.n	800416e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	041a      	lsls	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	4013      	ands	r3, r2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d006      	beq.n	80041a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004192:	4a05      	ldr	r2, [pc, #20]	; (80041a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe f8d8 	bl	8002350 <HAL_GPIO_EXTI_Callback>
  }
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40013c00 	.word	0x40013c00

080041ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ae:	b08f      	sub	sp, #60	; 0x3c
 80041b0:	af0a      	add	r7, sp, #40	; 0x28
 80041b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e10f      	b.n	80043de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f009 ffd5 	bl	800e188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 fbc6 	bl	800798e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	687e      	ldr	r6, [r7, #4]
 800420a:	466d      	mov	r5, sp
 800420c:	f106 0410 	add.w	r4, r6, #16
 8004210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004218:	e894 0003 	ldmia.w	r4, {r0, r1}
 800421c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004220:	1d33      	adds	r3, r6, #4
 8004222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004224:	6838      	ldr	r0, [r7, #0]
 8004226:	f003 fa9d 	bl	8007764 <USB_CoreInit>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0d0      	b.n	80043de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f003 fbb4 	bl	80079b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e04a      	b.n	80042e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	333d      	adds	r3, #61	; 0x3d
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	333c      	adds	r3, #60	; 0x3c
 8004272:	7bfa      	ldrb	r2, [r7, #15]
 8004274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	b298      	uxth	r0, r3
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3344      	adds	r3, #68	; 0x44
 800428a:	4602      	mov	r2, r0
 800428c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3340      	adds	r3, #64	; 0x40
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	3348      	adds	r3, #72	; 0x48
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	334c      	adds	r3, #76	; 0x4c
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3354      	adds	r3, #84	; 0x54
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	3301      	adds	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d3af      	bcc.n	800424e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e044      	b.n	800437e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042f4:	7bfa      	ldrb	r2, [r7, #15]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	3301      	adds	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d3b5      	bcc.n	80042f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	687e      	ldr	r6, [r7, #4]
 8004390:	466d      	mov	r5, sp
 8004392:	f106 0410 	add.w	r4, r6, #16
 8004396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a6:	1d33      	adds	r3, r6, #4
 80043a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043aa:	6838      	ldr	r0, [r7, #0]
 80043ac:	f003 fb4c 	bl	8007a48 <USB_DevInit>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e00d      	b.n	80043de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fc9b 	bl	8008d12 <USB_DevDisconnect>

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_PCD_Start+0x1c>
 80043fe:	2302      	movs	r3, #2
 8004400:	e020      	b.n	8004444 <HAL_PCD_Start+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	2b01      	cmp	r3, #1
 8004410:	d109      	bne.n	8004426 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004416:	2b01      	cmp	r3, #1
 8004418:	d005      	beq.n	8004426 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f003 fa9e 	bl	800796c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 fc4b 	bl	8008cd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b08d      	sub	sp, #52	; 0x34
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f004 fd09 	bl	8008e7a <USB_GetMode>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 848a 	bne.w	8004d84 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f004 fc6d 	bl	8008d54 <USB_ReadInterrupts>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8480 	beq.w	8004d82 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fc5a 	bl	8008d54 <USB_ReadInterrupts>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d107      	bne.n	80044ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f002 0202 	and.w	r2, r2, #2
 80044b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 fc48 	bl	8008d54 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d161      	bne.n	8004592 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0210 	bic.w	r2, r2, #16
 80044dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	3304      	adds	r3, #4
 80044fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	0c5b      	lsrs	r3, r3, #17
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	2b02      	cmp	r3, #2
 8004508:	d124      	bne.n	8004554 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d035      	beq.n	8004582 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004524:	b29b      	uxth	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	6a38      	ldr	r0, [r7, #32]
 800452a:	f004 fa7f 	bl	8008a2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453a:	441a      	add	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800454c:	441a      	add	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	621a      	str	r2, [r3, #32]
 8004552:	e016      	b.n	8004582 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	0c5b      	lsrs	r3, r3, #17
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	2b06      	cmp	r3, #6
 800455e:	d110      	bne.n	8004582 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004566:	2208      	movs	r2, #8
 8004568:	4619      	mov	r1, r3
 800456a:	6a38      	ldr	r0, [r7, #32]
 800456c:	f004 fa5e 	bl	8008a2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800457c:	441a      	add	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0210 	orr.w	r2, r2, #16
 8004590:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 fbdc 	bl	8008d54 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045a6:	f040 80a7 	bne.w	80046f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 fbe1 	bl	8008d7a <USB_ReadDevAllOutEpInterrupt>
 80045b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80045ba:	e099      	b.n	80046f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 808e 	beq.w	80046e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f004 fc05 	bl	8008de2 <USB_ReadDevOutEPInterrupt>
 80045d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00c      	beq.n	80045fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	2301      	movs	r3, #1
 80045f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fec3 	bl	8005384 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	461a      	mov	r2, r3
 8004616:	2308      	movs	r3, #8
 8004618:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800461a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 ff99 	bl	8005554 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	461a      	mov	r2, r3
 800463a:	2310      	movs	r3, #16
 800463c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d030      	beq.n	80046aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d109      	bne.n	8004668 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004666:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	3304      	adds	r3, #4
 800467c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	78db      	ldrb	r3, [r3, #3]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d108      	bne.n	8004698 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f009 fe74 	bl	800e380 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	461a      	mov	r2, r3
 80046a6:	2302      	movs	r3, #2
 80046a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	2320      	movs	r3, #32
 80046c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	3301      	adds	r3, #1
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f47f af62 	bne.w	80045bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 fb29 	bl	8008d54 <USB_ReadInterrupts>
 8004702:	4603      	mov	r3, r0
 8004704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800470c:	f040 80db 	bne.w	80048c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f004 fb4a 	bl	8008dae <USB_ReadDevAllInEpInterrupt>
 800471a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004720:	e0cd      	b.n	80048be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80c2 	beq.w	80048b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f004 fb70 	bl	8008e1e <USB_ReadDevInEPInterrupt>
 800473e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d057      	beq.n	80047fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	2201      	movs	r2, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43db      	mvns	r3, r3
 8004764:	69f9      	ldr	r1, [r7, #28]
 8004766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476a:	4013      	ands	r3, r2
 800476c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	461a      	mov	r2, r3
 800477c:	2301      	movs	r3, #1
 800477e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d132      	bne.n	80047ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334c      	adds	r3, #76	; 0x4c
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4403      	add	r3, r0
 80047a8:	3348      	adds	r3, #72	; 0x48
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4419      	add	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4403      	add	r3, r0
 80047bc:	334c      	adds	r3, #76	; 0x4c
 80047be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <HAL_PCD_IRQHandler+0x3a2>
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3354      	adds	r3, #84	; 0x54
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047e6:	461a      	mov	r2, r3
 80047e8:	2101      	movs	r1, #1
 80047ea:	f004 fb77 	bl	8008edc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f009 fd48 	bl	800e28a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	461a      	mov	r2, r3
 8004812:	2308      	movs	r3, #8
 8004814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	461a      	mov	r2, r3
 800482e:	2310      	movs	r3, #16
 8004830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	2340      	movs	r3, #64	; 0x40
 800484c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800485a:	6a38      	ldr	r0, [r7, #32]
 800485c:	f003 fa58 	bl	8007d10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	3338      	adds	r3, #56	; 0x38
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	3304      	adds	r3, #4
 8004872:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d108      	bne.n	800488e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f009 fd8b 	bl	800e3a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	2302      	movs	r3, #2
 800489e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fcdb 	bl	8005268 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	3301      	adds	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af2e 	bne.w	8004722 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 fa42 	bl	8008d54 <USB_ReadInterrupts>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d122      	bne.n	8004922 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d108      	bne.n	800490c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004902:	2100      	movs	r1, #0
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fec3 	bl	8005690 <HAL_PCDEx_LPM_Callback>
 800490a:	e002      	b.n	8004912 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f009 fd29 	bl	800e364 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f004 fa14 	bl	8008d54 <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004936:	d112      	bne.n	800495e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f009 fce5 	bl	800e318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800495c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f004 f9f6 	bl	8008d54 <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	f040 80b7 	bne.w	8004ae4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2110      	movs	r1, #16
 8004990:	4618      	mov	r0, r3
 8004992:	f003 f9bd 	bl	8007d10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800499a:	e046      	b.n	8004a2a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	3301      	adds	r3, #1
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d3b3      	bcc.n	800499c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a60:	f043 030b 	orr.w	r3, r3, #11
 8004a64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a76:	f043 030b 	orr.w	r3, r3, #11
 8004a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8004a7c:	e015      	b.n	8004aaa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa4:	f043 030b 	orr.w	r3, r3, #11
 8004aa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004abc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f004 fa04 	bl	8008edc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f004 f933 	bl	8008d54 <USB_ReadInterrupts>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d124      	bne.n	8004b44 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 f9c9 	bl	8008e96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 f97e 	bl	8007e0a <USB_GetDevSpeed>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681c      	ldr	r4, [r3, #0]
 8004b1a:	f001 f9e9 	bl	8005ef0 <HAL_RCC_GetHCLKFreq>
 8004b1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f002 fe7d 	bl	8007828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f009 fbd3 	bl	800e2da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f004 f903 	bl	8008d54 <USB_ReadInterrupts>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d10a      	bne.n	8004b6e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f009 fbb0 	bl	800e2be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f002 0208 	and.w	r2, r2, #8
 8004b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 f8ee 	bl	8008d54 <USB_ReadInterrupts>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d122      	bne.n	8004bc8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b8e:	2301      	movs	r3, #1
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	e014      	b.n	8004bbe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fb27 	bl	8005206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	3301      	adds	r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3e5      	bcc.n	8004b94 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f004 f8c1 	bl	8008d54 <USB_ReadInterrupts>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bdc:	d13b      	bne.n	8004c56 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bde:	2301      	movs	r3, #1
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	e02b      	b.n	8004c3c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	3340      	adds	r3, #64	; 0x40
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d115      	bne.n	8004c36 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	da12      	bge.n	8004c36 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	333f      	adds	r3, #63	; 0x3f
 8004c20:	2201      	movs	r2, #1
 8004c22:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fae8 	bl	8005206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	3301      	adds	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d3ce      	bcc.n	8004be4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 f87a 	bl	8008d54 <USB_ReadInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c6a:	d155      	bne.n	8004d18 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e045      	b.n	8004cfe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d12e      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da2b      	bge.n	8004cf8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004cac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d121      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cf4:	6053      	str	r3, [r2, #4]
            break;
 8004cf6:	e007      	b.n	8004d08 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d3b4      	bcc.n	8004c72 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f004 f819 	bl	8008d54 <USB_ReadInterrupts>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d10a      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f009 fb4a 	bl	800e3c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f004 f803 	bl	8008d54 <USB_ReadInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d115      	bne.n	8004d84 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f009 fb3a 	bl	800e3e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	e000      	b.n	8004d84 <HAL_PCD_IRQHandler+0x938>
      return;
 8004d82:	bf00      	nop
    }
  }
}
 8004d84:	3734      	adds	r7, #52	; 0x34
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}

08004d8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_PCD_SetAddress+0x1a>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e013      	b.n	8004dcc <HAL_PCD_SetAddress+0x42>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f003 ff61 	bl	8008c84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	70fb      	strb	r3, [r7, #3]
 8004de6:	460b      	mov	r3, r1
 8004de8:	803b      	strh	r3, [r7, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da0f      	bge.n	8004e1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	3338      	adds	r3, #56	; 0x38
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3304      	adds	r3, #4
 8004e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	705a      	strb	r2, [r3, #1]
 8004e18:	e00f      	b.n	8004e3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	f003 020f 	and.w	r2, r3, #15
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3304      	adds	r3, #4
 8004e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e46:	883a      	ldrh	r2, [r7, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	78ba      	ldrb	r2, [r7, #2]
 8004e50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e64:	78bb      	ldrb	r3, [r7, #2]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d102      	bne.n	8004e70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_PCD_EP_Open+0xaa>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e00e      	b.n	8004e9c <HAL_PCD_EP_Open+0xc8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f002 ffe1 	bl	8007e54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	da0f      	bge.n	8004ed8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	3338      	adds	r3, #56	; 0x38
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3304      	adds	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	705a      	strb	r2, [r3, #1]
 8004ed6:	e00f      	b.n	8004ef8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	f003 020f 	and.w	r2, r3, #15
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	3304      	adds	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_PCD_EP_Close+0x6e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e00e      	b.n	8004f30 <HAL_PCD_EP_Close+0x8c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 f81f 	bl	8007f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	460b      	mov	r3, r1
 8004f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	7afb      	ldrb	r3, [r7, #11]
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3304      	adds	r3, #4
 8004f60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d102      	bne.n	8004f94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f94:	7afb      	ldrb	r3, [r7, #11]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	f003 fafe 	bl	80085ac <USB_EP0StartXfer>
 8004fb0:	e008      	b.n	8004fc4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	f003 f8ac 	bl	800811c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004ff0:	681b      	ldr	r3, [r3, #0]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	460b      	mov	r3, r1
 800500c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800500e:	7afb      	ldrb	r3, [r7, #11]
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	3338      	adds	r3, #56	; 0x38
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	3304      	adds	r3, #4
 8005024:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2201      	movs	r2, #1
 800503c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800503e:	7afb      	ldrb	r3, [r7, #11]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	b2da      	uxtb	r2, r3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005058:	7afb      	ldrb	r3, [r7, #11]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	f003 fa9c 	bl	80085ac <USB_EP0StartXfer>
 8005074:	e008      	b.n	8005088 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	f003 f84a 	bl	800811c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d901      	bls.n	80050b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e050      	b.n	8005152 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da0f      	bge.n	80050d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	3338      	adds	r3, #56	; 0x38
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	3304      	adds	r3, #4
 80050ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	705a      	strb	r2, [r3, #1]
 80050d6:	e00d      	b.n	80050f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_PCD_EP_SetStall+0x82>
 8005110:	2302      	movs	r3, #2
 8005112:	e01e      	b.n	8005152 <HAL_PCD_EP_SetStall+0xc0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	4618      	mov	r0, r3
 8005124:	f003 fcda 	bl	8008adc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	b2d9      	uxtb	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005142:	461a      	mov	r2, r3
 8005144:	f003 feca 	bl	8008edc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	f003 020f 	and.w	r2, r3, #15
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d901      	bls.n	8005178 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e042      	b.n	80051fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800517c:	2b00      	cmp	r3, #0
 800517e:	da0f      	bge.n	80051a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	3338      	adds	r3, #56	; 0x38
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	3304      	adds	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	705a      	strb	r2, [r3, #1]
 800519e:	e00f      	b.n	80051c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	3304      	adds	r3, #4
 80051b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_PCD_EP_ClrStall+0x86>
 80051dc:	2302      	movs	r3, #2
 80051de:	e00e      	b.n	80051fe <HAL_PCD_EP_ClrStall+0xa4>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68f9      	ldr	r1, [r7, #12]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f003 fce2 	bl	8008bb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005216:	2b00      	cmp	r3, #0
 8005218:	da0c      	bge.n	8005234 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	3338      	adds	r3, #56	; 0x38
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	3304      	adds	r3, #4
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e00c      	b.n	800524e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	3304      	adds	r3, #4
 800524c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	4618      	mov	r0, r3
 8005256:	f003 fb01 	bl	800885c <USB_EPStopXfer>
 800525a:	4603      	mov	r3, r0
 800525c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800525e:	7afb      	ldrb	r3, [r7, #11]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	3338      	adds	r3, #56	; 0x38
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	3304      	adds	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	429a      	cmp	r2, r3
 800529a:	d901      	bls.n	80052a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e06c      	b.n	800537a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d902      	bls.n	80052bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3303      	adds	r3, #3
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052c4:	e02b      	b.n	800531e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d902      	bls.n	80052e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3303      	adds	r3, #3
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6919      	ldr	r1, [r3, #16]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4603      	mov	r3, r0
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f003 fb55 	bl	80089b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	b29b      	uxth	r3, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	429a      	cmp	r2, r3
 8005332:	d809      	bhi.n	8005348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800533c:	429a      	cmp	r2, r3
 800533e:	d203      	bcs.n	8005348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1be      	bne.n	80052c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	429a      	cmp	r2, r3
 8005352:	d811      	bhi.n	8005378 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	2201      	movs	r2, #1
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	43db      	mvns	r3, r3
 800536e:	6939      	ldr	r1, [r7, #16]
 8005370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005374:	4013      	ands	r3, r2
 8005376:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	333c      	adds	r3, #60	; 0x3c
 800539c:	3304      	adds	r3, #4
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d17b      	bne.n	80054b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4a61      	ldr	r2, [pc, #388]	; (800554c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	f240 80b9 	bls.w	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80b3 	beq.w	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	461a      	mov	r2, r3
 80053e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ec:	6093      	str	r3, [r2, #8]
 80053ee:	e0a7      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	2320      	movs	r3, #32
 800540a:	6093      	str	r3, [r2, #8]
 800540c:	e098      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	f040 8093 	bne.w	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4a4b      	ldr	r2, [pc, #300]	; (800554c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d90f      	bls.n	8005442 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	461a      	mov	r2, r3
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	6093      	str	r3, [r2, #8]
 8005440:	e07e      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	3304      	adds	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	0159      	lsls	r1, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	440b      	add	r3, r1
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d114      	bne.n	80054a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800548c:	461a      	mov	r2, r3
 800548e:	2101      	movs	r1, #1
 8005490:	f003 fd24 	bl	8008edc <USB_EP0_OutStart>
 8005494:	e006      	b.n	80054a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	441a      	add	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f008 fed2 	bl	800e254 <HAL_PCD_DataOutStageCallback>
 80054b0:	e046      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4a26      	ldr	r2, [pc, #152]	; (8005550 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d124      	bne.n	8005504 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	461a      	mov	r2, r3
 80054d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d6:	6093      	str	r3, [r2, #8]
 80054d8:	e032      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	461a      	mov	r2, r3
 80054f2:	2320      	movs	r3, #32
 80054f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f008 fea9 	bl	800e254 <HAL_PCD_DataOutStageCallback>
 8005502:	e01d      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d114      	bne.n	8005534 <PCD_EP_OutXfrComplete_int+0x1b0>
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800552c:	461a      	mov	r2, r3
 800552e:	2100      	movs	r1, #0
 8005530:	f003 fcd4 	bl	8008edc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f008 fe8a 	bl	800e254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	4f54300a 	.word	0x4f54300a
 8005550:	4f54310a 	.word	0x4f54310a

08005554 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	333c      	adds	r3, #60	; 0x3c
 800556c:	3304      	adds	r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a15      	ldr	r2, [pc, #84]	; (80055dc <PCD_EP_OutSetupPacket_int+0x88>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d90e      	bls.n	80055a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f008 fe41 	bl	800e230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <PCD_EP_OutSetupPacket_int+0x88>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d90c      	bls.n	80055d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d108      	bne.n	80055d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055c8:	461a      	mov	r2, r3
 80055ca:	2101      	movs	r1, #1
 80055cc:	f003 fc86 	bl	8008edc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	4f54300a 	.word	0x4f54300a

080055e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
 80055ec:	4613      	mov	r3, r2
 80055ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055fe:	883b      	ldrh	r3, [r7, #0]
 8005600:	0419      	lsls	r1, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	430a      	orrs	r2, r1
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
 800560c:	e028      	b.n	8005660 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800561c:	2300      	movs	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e00d      	b.n	800563e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	3340      	adds	r3, #64	; 0x40
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4413      	add	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	3301      	adds	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	3b01      	subs	r3, #1
 8005644:	429a      	cmp	r2, r3
 8005646:	d3ec      	bcc.n	8005622 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005648:	883b      	ldrh	r3, [r7, #0]
 800564a:	0418      	lsls	r0, r3, #16
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	3b01      	subs	r3, #1
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	4302      	orrs	r2, r0
 8005658:	3340      	adds	r3, #64	; 0x40
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e267      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d075      	beq.n	80057b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056c6:	4b88      	ldr	r3, [pc, #544]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d00c      	beq.n	80056ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b85      	ldr	r3, [pc, #532]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d112      	bne.n	8005704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056de:	4b82      	ldr	r3, [pc, #520]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ea:	d10b      	bne.n	8005704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	4b7e      	ldr	r3, [pc, #504]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05b      	beq.n	80057b0 <HAL_RCC_OscConfig+0x108>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d157      	bne.n	80057b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e242      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d106      	bne.n	800571c <HAL_RCC_OscConfig+0x74>
 800570e:	4b76      	ldr	r3, [pc, #472]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a75      	ldr	r2, [pc, #468]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e01d      	b.n	8005758 <HAL_RCC_OscConfig+0xb0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x98>
 8005726:	4b70      	ldr	r3, [pc, #448]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a6f      	ldr	r2, [pc, #444]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800572c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b6d      	ldr	r3, [pc, #436]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6c      	ldr	r2, [pc, #432]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e00b      	b.n	8005758 <HAL_RCC_OscConfig+0xb0>
 8005740:	4b69      	ldr	r3, [pc, #420]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a68      	ldr	r2, [pc, #416]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d013      	beq.n	8005788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fd ff88 	bl	8003674 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005768:	f7fd ff84 	bl	8003674 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	; 0x64
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e207      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b5b      	ldr	r3, [pc, #364]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0xc0>
 8005786:	e014      	b.n	80057b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fd ff74 	bl	8003674 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005790:	f7fd ff70 	bl	8003674 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	; 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e1f3      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a2:	4b51      	ldr	r3, [pc, #324]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0xe8>
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d063      	beq.n	8005886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ca:	4b47      	ldr	r3, [pc, #284]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d11c      	bne.n	8005810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b44      	ldr	r3, [pc, #272]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d116      	bne.n	8005810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e2:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_RCC_OscConfig+0x152>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e1c7      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4937      	ldr	r1, [pc, #220]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580e:	e03a      	b.n	8005886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005818:	4b34      	ldr	r3, [pc, #208]	; (80058ec <HAL_RCC_OscConfig+0x244>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7fd ff29 	bl	8003674 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005826:	f7fd ff25 	bl	8003674 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e1a8      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4925      	ldr	r1, [pc, #148]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]
 8005858:	e015      	b.n	8005886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800585a:	4b24      	ldr	r3, [pc, #144]	; (80058ec <HAL_RCC_OscConfig+0x244>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fd ff08 	bl	8003674 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005868:	f7fd ff04 	bl	8003674 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e187      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d036      	beq.n	8005900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <HAL_RCC_OscConfig+0x248>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7fd fee8 	bl	8003674 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a8:	f7fd fee4 	bl	8003674 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e167      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ba:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80058bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0x200>
 80058c6:	e01b      	b.n	8005900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_OscConfig+0x248>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ce:	f7fd fed1 	bl	8003674 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d4:	e00e      	b.n	80058f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d6:	f7fd fecd 	bl	8003674 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d907      	bls.n	80058f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e150      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
 80058e8:	40023800 	.word	0x40023800
 80058ec:	42470000 	.word	0x42470000
 80058f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f4:	4b88      	ldr	r3, [pc, #544]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80058f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ea      	bne.n	80058d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8097 	beq.w	8005a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005912:	4b81      	ldr	r3, [pc, #516]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10f      	bne.n	800593e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	4b7d      	ldr	r3, [pc, #500]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	4a7c      	ldr	r2, [pc, #496]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	6413      	str	r3, [r2, #64]	; 0x40
 800592e:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593e:	4b77      	ldr	r3, [pc, #476]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d118      	bne.n	800597c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800594a:	4b74      	ldr	r3, [pc, #464]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a73      	ldr	r2, [pc, #460]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005956:	f7fd fe8d 	bl	8003674 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595e:	f7fd fe89 	bl	8003674 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e10c      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d106      	bne.n	8005992 <HAL_RCC_OscConfig+0x2ea>
 8005984:	4b64      	ldr	r3, [pc, #400]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	4a63      	ldr	r2, [pc, #396]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6713      	str	r3, [r2, #112]	; 0x70
 8005990:	e01c      	b.n	80059cc <HAL_RCC_OscConfig+0x324>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b05      	cmp	r3, #5
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x30c>
 800599a:	4b5f      	ldr	r3, [pc, #380]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a5e      	ldr	r2, [pc, #376]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059a0:	f043 0304 	orr.w	r3, r3, #4
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70
 80059a6:	4b5c      	ldr	r3, [pc, #368]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a5b      	ldr	r2, [pc, #364]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0x324>
 80059b4:	4b58      	ldr	r3, [pc, #352]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a57      	ldr	r2, [pc, #348]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
 80059c0:	4b55      	ldr	r3, [pc, #340]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	4a54      	ldr	r2, [pc, #336]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059c6:	f023 0304 	bic.w	r3, r3, #4
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d4:	f7fd fe4e 	bl	8003674 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059da:	e00a      	b.n	80059f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059dc:	f7fd fe4a 	bl	8003674 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0cb      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	4b49      	ldr	r3, [pc, #292]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ee      	beq.n	80059dc <HAL_RCC_OscConfig+0x334>
 80059fe:	e014      	b.n	8005a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a00:	f7fd fe38 	bl	8003674 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a08:	f7fd fe34 	bl	8003674 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e0b5      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1e:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ee      	bne.n	8005a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a30:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	4a38      	ldr	r2, [pc, #224]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80a1 	beq.w	8005b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d05c      	beq.n	8005b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d141      	bne.n	8005ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <HAL_RCC_OscConfig+0x478>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fd fe08 	bl	8003674 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fd fe04 	bl	8003674 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e087      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	019b      	lsls	r3, r3, #6
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	061b      	lsls	r3, r3, #24
 8005aaa:	491b      	ldr	r1, [pc, #108]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <HAL_RCC_OscConfig+0x478>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab6:	f7fd fddd 	bl	8003674 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005abe:	f7fd fdd9 	bl	8003674 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e05c      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x416>
 8005adc:	e054      	b.n	8005b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ade:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <HAL_RCC_OscConfig+0x478>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fd fdc6 	bl	8003674 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aec:	f7fd fdc2 	bl	8003674 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e045      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x444>
 8005b0a:	e03d      	b.n	8005b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e038      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	40007000 	.word	0x40007000
 8005b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_RCC_OscConfig+0x4ec>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d028      	beq.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d121      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d11a      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d107      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800

08005b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0cc      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bac:	4b68      	ldr	r3, [pc, #416]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d90c      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b65      	ldr	r3, [pc, #404]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc2:	4b63      	ldr	r3, [pc, #396]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0b8      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bec:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a58      	ldr	r2, [pc, #352]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c04:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a52      	ldr	r2, [pc, #328]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c10:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	494d      	ldr	r1, [pc, #308]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d044      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d107      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d119      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e07f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d107      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c56:	4b3f      	ldr	r3, [pc, #252]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e06f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e067      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c76:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f023 0203 	bic.w	r2, r3, #3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4934      	ldr	r1, [pc, #208]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c88:	f7fd fcf4 	bl	8003674 <HAL_GetTick>
 8005c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c90:	f7fd fcf0 	bl	8003674 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e04f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 020c 	and.w	r2, r3, #12
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1eb      	bne.n	8005c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d20c      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e032      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4916      	ldr	r1, [pc, #88]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	490e      	ldr	r1, [pc, #56]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d1e:	f000 f821 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005d22:	4602      	mov	r2, r0
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	490a      	ldr	r1, [pc, #40]	; (8005d58 <HAL_RCC_ClockConfig+0x1c0>)
 8005d30:	5ccb      	ldrb	r3, [r1, r3]
 8005d32:	fa22 f303 	lsr.w	r3, r2, r3
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fc54 	bl	80035ec <HAL_InitTick>

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40023c00 	.word	0x40023c00
 8005d54:	40023800 	.word	0x40023800
 8005d58:	08011cf8 	.word	0x08011cf8
 8005d5c:	20000034 	.word	0x20000034
 8005d60:	20000038 	.word	0x20000038

08005d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d68:	b090      	sub	sp, #64	; 0x40
 8005d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d70:	2300      	movs	r3, #0
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	2300      	movs	r3, #0
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d7c:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d00d      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x40>
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	f200 80a1 	bhi.w	8005ed0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x34>
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d003      	beq.n	8005d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d96:	e09b      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d98:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005d9c:	e09b      	b.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d9e:	4b53      	ldr	r3, [pc, #332]	; (8005eec <HAL_RCC_GetSysClockFreq+0x188>)
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005da2:	e098      	b.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da4:	4b4f      	ldr	r3, [pc, #316]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dae:	4b4d      	ldr	r3, [pc, #308]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d028      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dba:	4b4a      	ldr	r3, [pc, #296]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	099b      	lsrs	r3, r3, #6
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4b47      	ldr	r3, [pc, #284]	; (8005eec <HAL_RCC_GetSysClockFreq+0x188>)
 8005dd0:	fb03 f201 	mul.w	r2, r3, r1
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	fb00 f303 	mul.w	r3, r0, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	4a43      	ldr	r2, [pc, #268]	; (8005eec <HAL_RCC_GetSysClockFreq+0x188>)
 8005dde:	fba0 1202 	umull	r1, r2, r0, r2
 8005de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de4:	460a      	mov	r2, r1
 8005de6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dea:	4413      	add	r3, r2
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	2200      	movs	r2, #0
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	61fa      	str	r2, [r7, #28]
 8005df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005dfe:	f7fa ff2b 	bl	8000c58 <__aeabi_uldivmod>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4613      	mov	r3, r2
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0a:	e053      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e0c:	4b35      	ldr	r3, [pc, #212]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	2200      	movs	r2, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	617a      	str	r2, [r7, #20]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e1e:	f04f 0b00 	mov.w	fp, #0
 8005e22:	4652      	mov	r2, sl
 8005e24:	465b      	mov	r3, fp
 8005e26:	f04f 0000 	mov.w	r0, #0
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	0159      	lsls	r1, r3, #5
 8005e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e34:	0150      	lsls	r0, r2, #5
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	ebb2 080a 	subs.w	r8, r2, sl
 8005e3e:	eb63 090b 	sbc.w	r9, r3, fp
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e56:	ebb2 0408 	subs.w	r4, r2, r8
 8005e5a:	eb63 0509 	sbc.w	r5, r3, r9
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	00eb      	lsls	r3, r5, #3
 8005e68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6c:	00e2      	lsls	r2, r4, #3
 8005e6e:	4614      	mov	r4, r2
 8005e70:	461d      	mov	r5, r3
 8005e72:	eb14 030a 	adds.w	r3, r4, sl
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	eb45 030b 	adc.w	r3, r5, fp
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	028b      	lsls	r3, r1, #10
 8005e8e:	4621      	mov	r1, r4
 8005e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e94:	4621      	mov	r1, r4
 8005e96:	028a      	lsls	r2, r1, #10
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	60fa      	str	r2, [r7, #12]
 8005ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ea8:	f7fa fed6 	bl	8000c58 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ece:	e002      	b.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3740      	adds	r7, #64	; 0x40
 8005edc:	46bd      	mov	sp, r7
 8005ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	00f42400 	.word	0x00f42400
 8005eec:	00b71b00 	.word	0x00b71b00

08005ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000034 	.word	0x20000034

08005f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e07b      	b.n	8006012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d108      	bne.n	8005f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f2a:	d009      	beq.n	8005f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	61da      	str	r2, [r3, #28]
 8005f32:	e005      	b.n	8005f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fd f8c8 	bl	80030f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc4:	ea42 0103 	orr.w	r1, r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	f003 0104 	and.w	r1, r3, #4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	f003 0210 	and.w	r2, r3, #16
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b088      	sub	sp, #32
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_SPI_Transmit+0x22>
 8006038:	2302      	movs	r3, #2
 800603a:	e126      	b.n	800628a <HAL_SPI_Transmit+0x270>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006044:	f7fd fb16 	bl	8003674 <HAL_GetTick>
 8006048:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	d002      	beq.n	8006060 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800605a:	2302      	movs	r3, #2
 800605c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800605e:	e10b      	b.n	8006278 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_SPI_Transmit+0x52>
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006070:	e102      	b.n	8006278 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2203      	movs	r2, #3
 8006076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	88fa      	ldrh	r2, [r7, #6]
 800608a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b8:	d10f      	bne.n	80060da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d007      	beq.n	80060f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006100:	d14b      	bne.n	800619a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_SPI_Transmit+0xf6>
 800610a:	8afb      	ldrh	r3, [r7, #22]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d13e      	bne.n	800618e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006134:	e02b      	b.n	800618e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b02      	cmp	r3, #2
 8006142:	d112      	bne.n	800616a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	881a      	ldrh	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	1c9a      	adds	r2, r3, #2
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	86da      	strh	r2, [r3, #54]	; 0x36
 8006168:	e011      	b.n	800618e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800616a:	f7fd fa83 	bl	8003674 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d803      	bhi.n	8006182 <HAL_SPI_Transmit+0x168>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d102      	bne.n	8006188 <HAL_SPI_Transmit+0x16e>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800618c:	e074      	b.n	8006278 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1ce      	bne.n	8006136 <HAL_SPI_Transmit+0x11c>
 8006198:	e04c      	b.n	8006234 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_Transmit+0x18e>
 80061a2:	8afb      	ldrh	r3, [r7, #22]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d140      	bne.n	800622a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061ce:	e02c      	b.n	800622a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d113      	bne.n	8006206 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	86da      	strh	r2, [r3, #54]	; 0x36
 8006204:	e011      	b.n	800622a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006206:	f7fd fa35 	bl	8003674 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d803      	bhi.n	800621e <HAL_SPI_Transmit+0x204>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d102      	bne.n	8006224 <HAL_SPI_Transmit+0x20a>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006228:	e026      	b.n	8006278 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1cd      	bne.n	80061d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fbd9 	bl	80069f0 <SPI_EndRxTxTransaction>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e000      	b.n	8006278 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006276:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006288:	7ffb      	ldrb	r3, [r7, #31]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b088      	sub	sp, #32
 8006296:	af02      	add	r7, sp, #8
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ae:	d112      	bne.n	80062d6 <HAL_SPI_Receive+0x44>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10e      	bne.n	80062d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2204      	movs	r2, #4
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062c0:	88fa      	ldrh	r2, [r7, #6]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f8f1 	bl	80064b4 <HAL_SPI_TransmitReceive>
 80062d2:	4603      	mov	r3, r0
 80062d4:	e0ea      	b.n	80064ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_SPI_Receive+0x52>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0e3      	b.n	80064ac <HAL_SPI_Receive+0x21a>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ec:	f7fd f9c2 	bl	8003674 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d002      	beq.n	8006304 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062fe:	2302      	movs	r3, #2
 8006300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006302:	e0ca      	b.n	800649a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_SPI_Receive+0x7e>
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006314:	e0c1      	b.n	800649a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2204      	movs	r2, #4
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	88fa      	ldrh	r2, [r7, #6]
 800632e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d10f      	bne.n	800637e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800637c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d007      	beq.n	800639c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d162      	bne.n	800646a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063a4:	e02e      	b.n	8006404 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d115      	bne.n	80063e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f103 020c 	add.w	r2, r3, #12
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	7812      	ldrb	r2, [r2, #0]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063de:	e011      	b.n	8006404 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e0:	f7fd f948 	bl	8003674 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d803      	bhi.n	80063f8 <HAL_SPI_Receive+0x166>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Receive+0x16c>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006402:	e04a      	b.n	800649a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1cb      	bne.n	80063a6 <HAL_SPI_Receive+0x114>
 800640e:	e031      	b.n	8006474 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b01      	cmp	r3, #1
 800641c:	d113      	bne.n	8006446 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	b292      	uxth	r2, r2
 800642a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006444:	e011      	b.n	800646a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006446:	f7fd f915 	bl	8003674 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d803      	bhi.n	800645e <HAL_SPI_Receive+0x1cc>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d102      	bne.n	8006464 <HAL_SPI_Receive+0x1d2>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006468:	e017      	b.n	800649a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1cd      	bne.n	8006410 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fa53 	bl	8006924 <SPI_EndRxTransaction>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
 8006496:	e000      	b.n	800649a <HAL_SPI_Receive+0x208>
  }

error :
 8006498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08c      	sub	sp, #48	; 0x30
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064c2:	2301      	movs	r3, #1
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_SPI_TransmitReceive+0x26>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e18a      	b.n	80067f0 <HAL_SPI_TransmitReceive+0x33c>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e2:	f7fd f8c7 	bl	8003674 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064f8:	887b      	ldrh	r3, [r7, #2]
 80064fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006500:	2b01      	cmp	r3, #1
 8006502:	d00f      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x70>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650a:	d107      	bne.n	800651c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <HAL_SPI_TransmitReceive+0x68>
 8006514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006518:	2b04      	cmp	r3, #4
 800651a:	d003      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800651c:	2302      	movs	r3, #2
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006522:	e15b      	b.n	80067dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x82>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x82>
 8006530:	887b      	ldrh	r3, [r7, #2]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800653c:	e14e      	b.n	80067dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b04      	cmp	r3, #4
 8006548:	d003      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2205      	movs	r2, #5
 800654e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	887a      	ldrh	r2, [r7, #2]
 8006568:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	887a      	ldrh	r2, [r7, #2]
 8006574:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	887a      	ldrh	r2, [r7, #2]
 800657a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d007      	beq.n	80065a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ae:	d178      	bne.n	80066a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_SPI_TransmitReceive+0x10a>
 80065b8:	8b7b      	ldrh	r3, [r7, #26]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d166      	bne.n	800668c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	881a      	ldrh	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065e2:	e053      	b.n	800668c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d11b      	bne.n	800662a <HAL_SPI_TransmitReceive+0x176>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <HAL_SPI_TransmitReceive+0x176>
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d113      	bne.n	800662a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	881a      	ldrh	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	1c9a      	adds	r2, r3, #2
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	d119      	bne.n	800666c <HAL_SPI_TransmitReceive+0x1b8>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d014      	beq.n	800666c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	b292      	uxth	r2, r2
 800664e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	1c9a      	adds	r2, r3, #2
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006668:	2301      	movs	r3, #1
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800666c:	f7fd f802 	bl	8003674 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006678:	429a      	cmp	r2, r3
 800667a:	d807      	bhi.n	800668c <HAL_SPI_TransmitReceive+0x1d8>
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d003      	beq.n	800668c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800668a:	e0a7      	b.n	80067dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1a6      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x130>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1a1      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x130>
 80066a0:	e07c      	b.n	800679c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x1fc>
 80066aa:	8b7b      	ldrh	r3, [r7, #26]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d16b      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d6:	e057      	b.n	8006788 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d11c      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x26c>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d017      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x26c>
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d114      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d119      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x2ae>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d014      	beq.n	8006762 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800675e:	2301      	movs	r3, #1
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006762:	f7fc ff87 	bl	8003674 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800676e:	429a      	cmp	r2, r3
 8006770:	d803      	bhi.n	800677a <HAL_SPI_TransmitReceive+0x2c6>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d102      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x2cc>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006786:	e029      	b.n	80067dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1a2      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x224>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d19d      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f925 	bl	80069f0 <SPI_EndRxTxTransaction>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067b8:	e010      	b.n	80067dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	e000      	b.n	80067dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3730      	adds	r7, #48	; 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006806:	b2db      	uxtb	r3, r3
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006824:	f7fc ff26 	bl	8003674 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4413      	add	r3, r2
 8006832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006834:	f7fc ff1e 	bl	8003674 <HAL_GetTick>
 8006838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800683a:	4b39      	ldr	r3, [pc, #228]	; (8006920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	015b      	lsls	r3, r3, #5
 8006840:	0d1b      	lsrs	r3, r3, #20
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	fb02 f303 	mul.w	r3, r2, r3
 8006848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800684a:	e054      	b.n	80068f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d050      	beq.n	80068f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006854:	f7fc ff0e 	bl	8003674 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	429a      	cmp	r2, r3
 8006862:	d902      	bls.n	800686a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d13d      	bne.n	80068e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006882:	d111      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688c:	d004      	beq.n	8006898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006896:	d107      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b0:	d10f      	bne.n	80068d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e017      	b.n	8006916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4013      	ands	r3, r2
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	429a      	cmp	r2, r3
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	429a      	cmp	r2, r3
 8006912:	d19b      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000034 	.word	0x20000034

08006924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006938:	d111      	bne.n	800695e <SPI_EndRxTransaction+0x3a>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006942:	d004      	beq.n	800694e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694c:	d107      	bne.n	800695e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006966:	d12a      	bne.n	80069be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d012      	beq.n	8006998 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	2180      	movs	r1, #128	; 0x80
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff ff49 	bl	8006814 <SPI_WaitFlagStateUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02d      	beq.n	80069e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e026      	b.n	80069e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	2101      	movs	r1, #1
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff ff36 	bl	8006814 <SPI_WaitFlagStateUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01a      	beq.n	80069e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	f043 0220 	orr.w	r2, r3, #32
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e013      	b.n	80069e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2101      	movs	r1, #1
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff ff23 	bl	8006814 <SPI_WaitFlagStateUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e000      	b.n	80069e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <SPI_EndRxTxTransaction+0x7c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1b      	ldr	r2, [pc, #108]	; (8006a70 <SPI_EndRxTxTransaction+0x80>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	0d5b      	lsrs	r3, r3, #21
 8006a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a0c:	fb02 f303 	mul.w	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1a:	d112      	bne.n	8006a42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	2180      	movs	r1, #128	; 0x80
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fef4 	bl	8006814 <SPI_WaitFlagStateUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e00f      	b.n	8006a62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d0f2      	beq.n	8006a42 <SPI_EndRxTxTransaction+0x52>
 8006a5c:	e000      	b.n	8006a60 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a5e:	bf00      	nop
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000034 	.word	0x20000034
 8006a70:	165e9f81 	.word	0x165e9f81

08006a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e041      	b.n	8006b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fc fbde 	bl	800325c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f000 fb1c 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d001      	beq.n	8006b2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e03c      	b.n	8006ba6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1e      	ldr	r2, [pc, #120]	; (8006bb4 <HAL_TIM_Base_Start+0xa0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_TIM_Base_Start+0x5c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b46:	d013      	beq.n	8006b70 <HAL_TIM_Base_Start+0x5c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1a      	ldr	r2, [pc, #104]	; (8006bb8 <HAL_TIM_Base_Start+0xa4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_Base_Start+0x5c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <HAL_TIM_Base_Start+0xa8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_TIM_Base_Start+0x5c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <HAL_TIM_Base_Start+0xac>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_Base_Start+0x5c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <HAL_TIM_Base_Start+0xb0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d111      	bne.n	8006b94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b06      	cmp	r3, #6
 8006b80:	d010      	beq.n	8006ba4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b92:	e007      	b.n	8006ba4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40014000 	.word	0x40014000

08006bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e041      	b.n	8006c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f839 	bl	8006c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f000 fa72 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_TIM_PWM_Start+0x24>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	bf14      	ite	ne
 8006c98:	2301      	movne	r3, #1
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e022      	b.n	8006ce6 <HAL_TIM_PWM_Start+0x6a>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d109      	bne.n	8006cba <HAL_TIM_PWM_Start+0x3e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e015      	b.n	8006ce6 <HAL_TIM_PWM_Start+0x6a>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d109      	bne.n	8006cd4 <HAL_TIM_PWM_Start+0x58>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e008      	b.n	8006ce6 <HAL_TIM_PWM_Start+0x6a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e068      	b.n	8006dc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0x82>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfc:	e013      	b.n	8006d26 <HAL_TIM_PWM_Start+0xaa>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0x92>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d0c:	e00b      	b.n	8006d26 <HAL_TIM_PWM_Start+0xaa>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Start+0xa2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	e003      	b.n	8006d26 <HAL_TIM_PWM_Start+0xaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fc84 	bl	800763c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a23      	ldr	r2, [pc, #140]	; (8006dc8 <HAL_TIM_PWM_Start+0x14c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d107      	bne.n	8006d4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1d      	ldr	r2, [pc, #116]	; (8006dc8 <HAL_TIM_PWM_Start+0x14c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x10e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d013      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x10e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <HAL_TIM_PWM_Start+0x150>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x10e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a17      	ldr	r2, [pc, #92]	; (8006dd0 <HAL_TIM_PWM_Start+0x154>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x10e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <HAL_TIM_PWM_Start+0x158>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x10e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a14      	ldr	r2, [pc, #80]	; (8006dd8 <HAL_TIM_PWM_Start+0x15c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d111      	bne.n	8006dae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b06      	cmp	r3, #6
 8006d9a:	d010      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dac:	e007      	b.n	8006dbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40014000 	.word	0x40014000

08006ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e0ae      	b.n	8006f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	f200 809f 	bhi.w	8006f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006f49 	.word	0x08006f49
 8006e18:	08006f49 	.word	0x08006f49
 8006e1c:	08006f49 	.word	0x08006f49
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006f49 	.word	0x08006f49
 8006e28:	08006f49 	.word	0x08006f49
 8006e2c:	08006f49 	.word	0x08006f49
 8006e30:	08006ec7 	.word	0x08006ec7
 8006e34:	08006f49 	.word	0x08006f49
 8006e38:	08006f49 	.word	0x08006f49
 8006e3c:	08006f49 	.word	0x08006f49
 8006e40:	08006f07 	.word	0x08006f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f9d0 	bl	80071f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6999      	ldr	r1, [r3, #24]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	619a      	str	r2, [r3, #24]
      break;
 8006e82:	e064      	b.n	8006f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fa16 	bl	80072bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6999      	ldr	r1, [r3, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	619a      	str	r2, [r3, #24]
      break;
 8006ec4:	e043      	b.n	8006f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fa61 	bl	8007394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0208 	orr.w	r2, r2, #8
 8006ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0204 	bic.w	r2, r2, #4
 8006ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69d9      	ldr	r1, [r3, #28]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	61da      	str	r2, [r3, #28]
      break;
 8006f04:	e023      	b.n	8006f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 faab 	bl	8007468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	021a      	lsls	r2, r3, #8
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	61da      	str	r2, [r3, #28]
      break;
 8006f46:	e002      	b.n	8006f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_ConfigClockSource+0x1c>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e0b4      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x186>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb4:	d03e      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0xd4>
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fba:	f200 8087 	bhi.w	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	f000 8086 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x172>
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	d87f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fcc:	2b70      	cmp	r3, #112	; 0x70
 8006fce:	d01a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0xa6>
 8006fd0:	2b70      	cmp	r3, #112	; 0x70
 8006fd2:	d87b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fd4:	2b60      	cmp	r3, #96	; 0x60
 8006fd6:	d050      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x11a>
 8006fd8:	2b60      	cmp	r3, #96	; 0x60
 8006fda:	d877      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d03c      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xfa>
 8006fe0:	2b50      	cmp	r3, #80	; 0x50
 8006fe2:	d873      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d058      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x13a>
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d86f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d064      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8006ff0:	2b30      	cmp	r3, #48	; 0x30
 8006ff2:	d86b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d060      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d867      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05c      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8007000:	2b10      	cmp	r3, #16
 8007002:	d05a      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8007004:	e062      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f000 faf1 	bl	80075fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	609a      	str	r2, [r3, #8]
      break;
 8007032:	e04f      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6899      	ldr	r1, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f000 fada 	bl	80075fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007056:	609a      	str	r2, [r3, #8]
      break;
 8007058:	e03c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	461a      	mov	r2, r3
 8007068:	f000 fa4e 	bl	8007508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2150      	movs	r1, #80	; 0x50
 8007072:	4618      	mov	r0, r3
 8007074:	f000 faa7 	bl	80075c6 <TIM_ITRx_SetConfig>
      break;
 8007078:	e02c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	f000 fa6d 	bl	8007566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2160      	movs	r1, #96	; 0x60
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fa97 	bl	80075c6 <TIM_ITRx_SetConfig>
      break;
 8007098:	e01c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 fa2e 	bl	8007508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2140      	movs	r1, #64	; 0x40
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fa87 	bl	80075c6 <TIM_ITRx_SetConfig>
      break;
 80070b8:	e00c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f000 fa7e 	bl	80075c6 <TIM_ITRx_SetConfig>
      break;
 80070ca:	e003      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
      break;
 80070d0:	e000      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a34      	ldr	r2, [pc, #208]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710e:	d00b      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a31      	ldr	r2, [pc, #196]	; (80071d8 <TIM_Base_SetConfig+0xe8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a30      	ldr	r2, [pc, #192]	; (80071dc <TIM_Base_SetConfig+0xec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <TIM_Base_SetConfig+0xf0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d108      	bne.n	800713a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01b      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007148:	d017      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <TIM_Base_SetConfig+0xe8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <TIM_Base_SetConfig+0xec>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00f      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <TIM_Base_SetConfig+0xf0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00b      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <TIM_Base_SetConfig+0xf4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <TIM_Base_SetConfig+0xf8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <TIM_Base_SetConfig+0xfc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d103      	bne.n	80071c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	615a      	str	r2, [r3, #20]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0302 	bic.w	r3, r3, #2
 8007238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <TIM_OC1_SetConfig+0xc8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d10c      	bne.n	8007266 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0308 	bic.w	r3, r3, #8
 8007252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 0304 	bic.w	r3, r3, #4
 8007264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <TIM_OC1_SetConfig+0xc8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d111      	bne.n	8007292 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800727c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	621a      	str	r2, [r3, #32]
}
 80072ac:	bf00      	nop
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	40010000 	.word	0x40010000

080072bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f023 0210 	bic.w	r2, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0320 	bic.w	r3, r3, #32
 8007306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <TIM_OC2_SetConfig+0xd4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d10d      	bne.n	8007338 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a15      	ldr	r2, [pc, #84]	; (8007390 <TIM_OC2_SetConfig+0xd4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d113      	bne.n	8007368 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800734e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40010000 	.word	0x40010000

08007394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <TIM_OC3_SetConfig+0xd0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d10d      	bne.n	800740e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800740c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a14      	ldr	r2, [pc, #80]	; (8007464 <TIM_OC3_SetConfig+0xd0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d113      	bne.n	800743e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800741c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	621a      	str	r2, [r3, #32]
}
 8007458:	bf00      	nop
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	40010000 	.word	0x40010000

08007468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a10      	ldr	r2, [pc, #64]	; (8007504 <TIM_OC4_SetConfig+0x9c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d109      	bne.n	80074dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	019b      	lsls	r3, r3, #6
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40010000 	.word	0x40010000

08007508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f023 030a 	bic.w	r3, r3, #10
 8007544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007566:	b480      	push	{r7}
 8007568:	b087      	sub	sp, #28
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0210 	bic.w	r2, r3, #16
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	031b      	lsls	r3, r3, #12
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	011b      	lsls	r3, r3, #4
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	f043 0307 	orr.w	r3, r3, #7
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	609a      	str	r2, [r3, #8]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	021a      	lsls	r2, r3, #8
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	431a      	orrs	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4313      	orrs	r3, r2
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	609a      	str	r2, [r3, #8]
}
 8007630:	bf00      	nop
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	2201      	movs	r2, #1
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a1a      	ldr	r2, [r3, #32]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	43db      	mvns	r3, r3
 800765e:	401a      	ands	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	fa01 f303 	lsl.w	r3, r1, r3
 8007674:	431a      	orrs	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800769c:	2302      	movs	r3, #2
 800769e:	e050      	b.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d018      	beq.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ec:	d013      	beq.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00e      	beq.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a16      	ldr	r2, [pc, #88]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d009      	beq.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a15      	ldr	r2, [pc, #84]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d004      	beq.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a13      	ldr	r2, [pc, #76]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d10c      	bne.n	8007730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800771c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4313      	orrs	r3, r2
 8007726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40010000 	.word	0x40010000
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800
 800775c:	40000c00 	.word	0x40000c00
 8007760:	40014000 	.word	0x40014000

08007764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007764:	b084      	sub	sp, #16
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	f107 001c 	add.w	r0, r7, #28
 8007772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	d122      	bne.n	80077c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d105      	bne.n	80077b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 fbee 	bl	8008f98 <USB_CoreReset>
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
 80077c0:	e01a      	b.n	80077f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fbe2 	bl	8008f98 <USB_CoreReset>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	639a      	str	r2, [r3, #56]	; 0x38
 80077ea:	e005      	b.n	80077f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d10b      	bne.n	8007816 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f043 0206 	orr.w	r2, r3, #6
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f043 0220 	orr.w	r2, r3, #32
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007822:	b004      	add	sp, #16
 8007824:	4770      	bx	lr
	...

08007828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d165      	bne.n	8007908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4a41      	ldr	r2, [pc, #260]	; (8007944 <USB_SetTurnaroundTime+0x11c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d906      	bls.n	8007852 <USB_SetTurnaroundTime+0x2a>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4a40      	ldr	r2, [pc, #256]	; (8007948 <USB_SetTurnaroundTime+0x120>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d202      	bcs.n	8007852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800784c:	230f      	movs	r3, #15
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e062      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4a3c      	ldr	r2, [pc, #240]	; (8007948 <USB_SetTurnaroundTime+0x120>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d306      	bcc.n	8007868 <USB_SetTurnaroundTime+0x40>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4a3b      	ldr	r2, [pc, #236]	; (800794c <USB_SetTurnaroundTime+0x124>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d202      	bcs.n	8007868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007862:	230e      	movs	r3, #14
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	e057      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4a38      	ldr	r2, [pc, #224]	; (800794c <USB_SetTurnaroundTime+0x124>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d306      	bcc.n	800787e <USB_SetTurnaroundTime+0x56>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4a37      	ldr	r2, [pc, #220]	; (8007950 <USB_SetTurnaroundTime+0x128>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d202      	bcs.n	800787e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007878:	230d      	movs	r3, #13
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e04c      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	4a33      	ldr	r2, [pc, #204]	; (8007950 <USB_SetTurnaroundTime+0x128>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d306      	bcc.n	8007894 <USB_SetTurnaroundTime+0x6c>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4a32      	ldr	r2, [pc, #200]	; (8007954 <USB_SetTurnaroundTime+0x12c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d802      	bhi.n	8007894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800788e:	230c      	movs	r3, #12
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	e041      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <USB_SetTurnaroundTime+0x12c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d906      	bls.n	80078aa <USB_SetTurnaroundTime+0x82>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4a2e      	ldr	r2, [pc, #184]	; (8007958 <USB_SetTurnaroundTime+0x130>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d802      	bhi.n	80078aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078a4:	230b      	movs	r3, #11
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	e036      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4a2a      	ldr	r2, [pc, #168]	; (8007958 <USB_SetTurnaroundTime+0x130>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d906      	bls.n	80078c0 <USB_SetTurnaroundTime+0x98>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4a29      	ldr	r2, [pc, #164]	; (800795c <USB_SetTurnaroundTime+0x134>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d802      	bhi.n	80078c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80078ba:	230a      	movs	r3, #10
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e02b      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4a26      	ldr	r2, [pc, #152]	; (800795c <USB_SetTurnaroundTime+0x134>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d906      	bls.n	80078d6 <USB_SetTurnaroundTime+0xae>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4a25      	ldr	r2, [pc, #148]	; (8007960 <USB_SetTurnaroundTime+0x138>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d202      	bcs.n	80078d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078d0:	2309      	movs	r3, #9
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	e020      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a21      	ldr	r2, [pc, #132]	; (8007960 <USB_SetTurnaroundTime+0x138>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d306      	bcc.n	80078ec <USB_SetTurnaroundTime+0xc4>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <USB_SetTurnaroundTime+0x13c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d802      	bhi.n	80078ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078e6:	2308      	movs	r3, #8
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e015      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <USB_SetTurnaroundTime+0x13c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d906      	bls.n	8007902 <USB_SetTurnaroundTime+0xda>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4a1c      	ldr	r2, [pc, #112]	; (8007968 <USB_SetTurnaroundTime+0x140>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d202      	bcs.n	8007902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078fc:	2307      	movs	r3, #7
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	e00a      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007902:	2306      	movs	r3, #6
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e007      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800790e:	2309      	movs	r3, #9
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e001      	b.n	8007918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007914:	2309      	movs	r3, #9
 8007916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	029b      	lsls	r3, r3, #10
 800792c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007930:	431a      	orrs	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	00d8acbf 	.word	0x00d8acbf
 8007948:	00e4e1c0 	.word	0x00e4e1c0
 800794c:	00f42400 	.word	0x00f42400
 8007950:	01067380 	.word	0x01067380
 8007954:	011a499f 	.word	0x011a499f
 8007958:	01312cff 	.word	0x01312cff
 800795c:	014ca43f 	.word	0x014ca43f
 8007960:	016e3600 	.word	0x016e3600
 8007964:	01a6ab1f 	.word	0x01a6ab1f
 8007968:	01e84800 	.word	0x01e84800

0800796c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f043 0201 	orr.w	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f023 0201 	bic.w	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d115      	bne.n	80079fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079de:	2001      	movs	r0, #1
 80079e0:	f7fb fe54 	bl	800368c <HAL_Delay>
      ms++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fa45 	bl	8008e7a <USB_GetMode>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d01e      	beq.n	8007a34 <USB_SetCurrentMode+0x84>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b31      	cmp	r3, #49	; 0x31
 80079fa:	d9f0      	bls.n	80079de <USB_SetCurrentMode+0x2e>
 80079fc:	e01a      	b.n	8007a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d115      	bne.n	8007a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a10:	2001      	movs	r0, #1
 8007a12:	f7fb fe3b 	bl	800368c <HAL_Delay>
      ms++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fa2c 	bl	8008e7a <USB_GetMode>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <USB_SetCurrentMode+0x84>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b31      	cmp	r3, #49	; 0x31
 8007a2c:	d9f0      	bls.n	8007a10 <USB_SetCurrentMode+0x60>
 8007a2e:	e001      	b.n	8007a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e005      	b.n	8007a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b32      	cmp	r3, #50	; 0x32
 8007a38:	d101      	bne.n	8007a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a48:	b084      	sub	sp, #16
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a62:	2300      	movs	r3, #0
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	e009      	b.n	8007a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3340      	adds	r3, #64	; 0x40
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	2200      	movs	r2, #0
 8007a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b0e      	cmp	r3, #14
 8007a80:	d9f2      	bls.n	8007a68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11c      	bne.n	8007ac2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a96:	f043 0302 	orr.w	r3, r3, #2
 8007a9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
 8007ac0:	e00b      	b.n	8007ada <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aec:	4619      	mov	r1, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af4:	461a      	mov	r2, r3
 8007af6:	680b      	ldr	r3, [r1, #0]
 8007af8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10c      	bne.n	8007b1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b06:	2100      	movs	r1, #0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f965 	bl	8007dd8 <USB_SetDevSpeed>
 8007b0e:	e008      	b.n	8007b22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b10:	2101      	movs	r1, #1
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f960 	bl	8007dd8 <USB_SetDevSpeed>
 8007b18:	e003      	b.n	8007b22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f95b 	bl	8007dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b22:	2110      	movs	r1, #16
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f8f3 	bl	8007d10 <USB_FlushTxFifo>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f91f 	bl	8007d78 <USB_FlushRxFifo>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b56:	461a      	mov	r2, r3
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	461a      	mov	r2, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	e043      	b.n	8007bf6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b84:	d118      	bne.n	8007bb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e013      	b.n	8007bca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	e008      	b.n	8007bca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	2300      	movs	r3, #0
 8007bda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	461a      	mov	r2, r3
 8007bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d3b7      	bcc.n	8007b6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bfe:	2300      	movs	r3, #0
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	e043      	b.n	8007c8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c1a:	d118      	bne.n	8007c4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	e013      	b.n	8007c60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	461a      	mov	r2, r3
 8007c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e008      	b.n	8007c60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d3b7      	bcc.n	8007c04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007cb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d105      	bne.n	8007cc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f043 0210 	orr.w	r2, r3, #16
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699a      	ldr	r2, [r3, #24]
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <USB_DevInit+0x2c4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f043 0208 	orr.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d107      	bne.n	8007cfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cf4:	f043 0304 	orr.w	r3, r3, #4
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr
 8007d0c:	803c3800 	.word	0x803c3800

08007d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <USB_FlushTxFifo+0x64>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d901      	bls.n	8007d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e01b      	b.n	8007d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	daf2      	bge.n	8007d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	019b      	lsls	r3, r3, #6
 8007d40:	f043 0220 	orr.w	r2, r3, #32
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4a08      	ldr	r2, [pc, #32]	; (8007d74 <USB_FlushTxFifo+0x64>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d901      	bls.n	8007d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e006      	b.n	8007d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d0f0      	beq.n	8007d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	00030d40 	.word	0x00030d40

08007d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <USB_FlushRxFifo+0x5c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e018      	b.n	8007dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	daf2      	bge.n	8007d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2210      	movs	r2, #16
 8007da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <USB_FlushRxFifo+0x5c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d901      	bls.n	8007dba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e006      	b.n	8007dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0310 	and.w	r3, r3, #16
 8007dc2:	2b10      	cmp	r3, #16
 8007dc4:	d0f0      	beq.n	8007da8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	00030d40 	.word	0x00030d40

08007dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 0306 	and.w	r3, r3, #6
 8007e22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]
 8007e2e:	e00a      	b.n	8007e46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d002      	beq.n	8007e3c <USB_GetDevSpeed+0x32>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b06      	cmp	r3, #6
 8007e3a:	d102      	bne.n	8007e42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	75fb      	strb	r3, [r7, #23]
 8007e40:	e001      	b.n	8007e46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e42:	230f      	movs	r3, #15
 8007e44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d13a      	bne.n	8007ee6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	2101      	movs	r1, #1
 8007e82:	fa01 f303 	lsl.w	r3, r1, r3
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	68f9      	ldr	r1, [r7, #12]
 8007e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d155      	bne.n	8007f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	059b      	lsls	r3, r3, #22
 8007eca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	e036      	b.n	8007f54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eec:	69da      	ldr	r2, [r3, #28]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d11a      	bne.n	8007f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	791b      	ldrb	r3, [r3, #4]
 8007f38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d161      	bne.n	8008044 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f96:	d11f      	bne.n	8007fd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	2101      	movs	r1, #1
 8007fea:	fa01 f303 	lsl.w	r3, r1, r3
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	2101      	movs	r1, #1
 800800e:	fa01 f303 	lsl.w	r3, r1, r3
 8008012:	b29b      	uxth	r3, r3
 8008014:	43db      	mvns	r3, r3
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800801c:	4013      	ands	r3, r2
 800801e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	0159      	lsls	r1, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	440b      	add	r3, r1
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	4619      	mov	r1, r3
 800803c:	4b35      	ldr	r3, [pc, #212]	; (8008114 <USB_DeactivateEndpoint+0x1b0>)
 800803e:	4013      	ands	r3, r2
 8008040:	600b      	str	r3, [r1, #0]
 8008042:	e060      	b.n	8008106 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800805a:	d11f      	bne.n	800809c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800807a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800809a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	2101      	movs	r1, #1
 80080ae:	fa01 f303 	lsl.w	r3, r1, r3
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	43db      	mvns	r3, r3
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080bc:	4013      	ands	r3, r2
 80080be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 030f 	and.w	r3, r3, #15
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f303 	lsl.w	r3, r1, r3
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	43db      	mvns	r3, r3
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080e0:	4013      	ands	r3, r2
 80080e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	0159      	lsls	r1, r3, #5
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	440b      	add	r3, r1
 80080fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fe:	4619      	mov	r1, r3
 8008100:	4b05      	ldr	r3, [pc, #20]	; (8008118 <USB_DeactivateEndpoint+0x1b4>)
 8008102:	4013      	ands	r3, r2
 8008104:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	ec337800 	.word	0xec337800
 8008118:	eff37800 	.word	0xeff37800

0800811c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b01      	cmp	r3, #1
 800813a:	f040 815c 	bne.w	80083f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d132      	bne.n	80081ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a4:	0cdb      	lsrs	r3, r3, #19
 80081a6:	04db      	lsls	r3, r3, #19
 80081a8:	6113      	str	r3, [r2, #16]
 80081aa:	e074      	b.n	8008296 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c6:	0cdb      	lsrs	r3, r3, #19
 80081c8:	04db      	lsls	r3, r3, #19
 80081ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	6999      	ldr	r1, [r3, #24]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	440b      	add	r3, r1
 8008208:	1e59      	subs	r1, r3, #1
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008212:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008214:	4b9d      	ldr	r3, [pc, #628]	; (800848c <USB_EPStartXfer+0x370>)
 8008216:	400b      	ands	r3, r1
 8008218:	69b9      	ldr	r1, [r7, #24]
 800821a:	0148      	lsls	r0, r1, #5
 800821c:	69f9      	ldr	r1, [r7, #28]
 800821e:	4401      	add	r1, r0
 8008220:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008224:	4313      	orrs	r3, r2
 8008226:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800823e:	69b9      	ldr	r1, [r7, #24]
 8008240:	0148      	lsls	r0, r1, #5
 8008242:	69f9      	ldr	r1, [r7, #28]
 8008244:	4401      	add	r1, r0
 8008246:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800824a:	4313      	orrs	r3, r2
 800824c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	791b      	ldrb	r3, [r3, #4]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d11f      	bne.n	8008296 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008270:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008274:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008294:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d14b      	bne.n	8008334 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b0:	461a      	mov	r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	791b      	ldrb	r3, [r3, #4]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d128      	bne.n	8008312 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d110      	bne.n	80082f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	e00f      	b.n	8008312 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008310:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	0151      	lsls	r1, r2, #5
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	440a      	add	r2, r1
 8008328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	e133      	b.n	800859c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008352:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	791b      	ldrb	r3, [r3, #4]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d015      	beq.n	8008388 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 811b 	beq.w	800859c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	2101      	movs	r1, #1
 8008378:	fa01 f303 	lsl.w	r3, r1, r3
 800837c:	69f9      	ldr	r1, [r7, #28]
 800837e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008382:	4313      	orrs	r3, r2
 8008384:	634b      	str	r3, [r1, #52]	; 0x34
 8008386:	e109      	b.n	800859c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008394:	2b00      	cmp	r3, #0
 8008396:	d110      	bne.n	80083ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	e00f      	b.n	80083da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6919      	ldr	r1, [r3, #16]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	781a      	ldrb	r2, [r3, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	b298      	uxth	r0, r3
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	4603      	mov	r3, r0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fade 	bl	80089b0 <USB_WritePacket>
 80083f4:	e0d2      	b.n	800859c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008410:	0cdb      	lsrs	r3, r3, #19
 8008412:	04db      	lsls	r3, r3, #19
 8008414:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	440a      	add	r2, r1
 800842c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008430:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008434:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008438:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d126      	bne.n	8008490 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008458:	69b9      	ldr	r1, [r7, #24]
 800845a:	0148      	lsls	r0, r1, #5
 800845c:	69f9      	ldr	r1, [r7, #28]
 800845e:	4401      	add	r1, r0
 8008460:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008464:	4313      	orrs	r3, r2
 8008466:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008486:	6113      	str	r3, [r2, #16]
 8008488:	e03a      	b.n	8008500 <USB_EPStartXfer+0x3e4>
 800848a:	bf00      	nop
 800848c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	4413      	add	r3, r2
 800849a:	1e5a      	subs	r2, r3, #1
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	8afa      	ldrh	r2, [r7, #22]
 80084ac:	fb03 f202 	mul.w	r2, r3, r2
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	8afb      	ldrh	r3, [r7, #22]
 80084c4:	04d9      	lsls	r1, r3, #19
 80084c6:	4b38      	ldr	r3, [pc, #224]	; (80085a8 <USB_EPStartXfer+0x48c>)
 80084c8:	400b      	ands	r3, r1
 80084ca:	69b9      	ldr	r1, [r7, #24]
 80084cc:	0148      	lsls	r0, r1, #5
 80084ce:	69f9      	ldr	r1, [r7, #28]
 80084d0:	4401      	add	r1, r0
 80084d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084d6:	4313      	orrs	r3, r2
 80084d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084f0:	69b9      	ldr	r1, [r7, #24]
 80084f2:	0148      	lsls	r0, r1, #5
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	4401      	add	r1, r0
 80084f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084fc:	4313      	orrs	r3, r2
 80084fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10d      	bne.n	8008522 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6919      	ldr	r1, [r3, #16]
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851e:	460a      	mov	r2, r1
 8008520:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d128      	bne.n	800857c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d110      	bne.n	800855c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	440a      	add	r2, r1
 8008550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e00f      	b.n	800857c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	440a      	add	r2, r1
 8008572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800859a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	1ff80000 	.word	0x1ff80000

080085ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4613      	mov	r3, r2
 80085b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	f040 80ce 	bne.w	800876a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d132      	bne.n	800863c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008634:	0cdb      	lsrs	r3, r3, #19
 8008636:	04db      	lsls	r3, r3, #19
 8008638:	6113      	str	r3, [r2, #16]
 800863a:	e04e      	b.n	80086da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	0151      	lsls	r1, r2, #5
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	440a      	add	r2, r1
 8008652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008656:	0cdb      	lsrs	r3, r3, #19
 8008658:	04db      	lsls	r3, r3, #19
 800865a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	0151      	lsls	r1, r2, #5
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	440a      	add	r2, r1
 8008672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008676:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800867a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800867e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	699a      	ldr	r2, [r3, #24]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c0:	691a      	ldr	r2, [r3, #16]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086ca:	6939      	ldr	r1, [r7, #16]
 80086cc:	0148      	lsls	r0, r1, #5
 80086ce:	6979      	ldr	r1, [r7, #20]
 80086d0:	4401      	add	r1, r0
 80086d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086d6:	4313      	orrs	r3, r2
 80086d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d11e      	bne.n	800871e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d009      	beq.n	80086fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	461a      	mov	r2, r3
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	e097      	b.n	800884e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	0151      	lsls	r1, r2, #5
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	440a      	add	r2, r1
 8008734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800873c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8083 	beq.w	800884e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	2101      	movs	r1, #1
 800875a:	fa01 f303 	lsl.w	r3, r1, r3
 800875e:	6979      	ldr	r1, [r7, #20]
 8008760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008764:	4313      	orrs	r3, r2
 8008766:	634b      	str	r3, [r1, #52]	; 0x34
 8008768:	e071      	b.n	800884e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008784:	0cdb      	lsrs	r3, r3, #19
 8008786:	04db      	lsls	r3, r3, #19
 8008788:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087fc:	6939      	ldr	r1, [r7, #16]
 80087fe:	0148      	lsls	r0, r1, #5
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	4401      	add	r1, r0
 8008804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008808:	4313      	orrs	r3, r2
 800880a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10d      	bne.n	800882e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6919      	ldr	r1, [r3, #16]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882a:	460a      	mov	r2, r1
 800882c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008848:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800884c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	785b      	ldrb	r3, [r3, #1]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d14a      	bne.n	8008910 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800888e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008892:	f040 8086 	bne.w	80089a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	7812      	ldrb	r2, [r2, #0]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	7812      	ldrb	r2, [r2, #0]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d902      	bls.n	80088f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]
          break;
 80088f2:	e056      	b.n	80089a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800890c:	d0e7      	beq.n	80088de <USB_EPStopXfer+0x82>
 800890e:	e048      	b.n	80089a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008928:	d13b      	bne.n	80089a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800894c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	7812      	ldrb	r2, [r2, #0]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008970:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f242 7210 	movw	r2, #10000	; 0x2710
 800897e:	4293      	cmp	r3, r2
 8008980:	d902      	bls.n	8008988 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	75fb      	strb	r3, [r7, #23]
          break;
 8008986:	e00c      	b.n	80089a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800899c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089a0:	d0e7      	beq.n	8008972 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4611      	mov	r1, r2
 80089bc:	461a      	mov	r2, r3
 80089be:	460b      	mov	r3, r1
 80089c0:	71fb      	strb	r3, [r7, #7]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d123      	bne.n	8008a1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089d6:	88bb      	ldrh	r3, [r7, #4]
 80089d8:	3303      	adds	r3, #3
 80089da:	089b      	lsrs	r3, r3, #2
 80089dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089de:	2300      	movs	r3, #0
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e018      	b.n	8008a16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	031a      	lsls	r2, r3, #12
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f0:	461a      	mov	r2, r3
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	3301      	adds	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	3301      	adds	r3, #1
 8008a02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	3301      	adds	r3, #1
 8008a08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	3301      	adds	r3, #1
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d3e2      	bcc.n	80089e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3724      	adds	r7, #36	; 0x24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b08b      	sub	sp, #44	; 0x2c
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	089b      	lsrs	r3, r3, #2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a52:	2300      	movs	r3, #0
 8008a54:	623b      	str	r3, [r7, #32]
 8008a56:	e014      	b.n	8008a82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	3301      	adds	r3, #1
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	3301      	adds	r3, #1
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	3301      	adds	r3, #1
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	623b      	str	r3, [r7, #32]
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d3e6      	bcc.n	8008a58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a8a:	8bfb      	ldrh	r3, [r7, #30]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01e      	beq.n	8008ace <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f107 0310 	add.w	r3, r7, #16
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	701a      	strb	r2, [r3, #0]
      i++;
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	623b      	str	r3, [r7, #32]
      pDest++;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	3301      	adds	r3, #1
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008ac2:	8bfb      	ldrh	r3, [r7, #30]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ac8:	8bfb      	ldrh	r3, [r7, #30]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ea      	bne.n	8008aa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	372c      	adds	r7, #44	; 0x2c
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	785b      	ldrb	r3, [r3, #1]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d12c      	bne.n	8008b52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db12      	blt.n	8008b30 <USB_EPSetStall+0x54>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00f      	beq.n	8008b30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e02b      	b.n	8008baa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db12      	blt.n	8008b8a <USB_EPSetStall+0xae>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00f      	beq.n	8008b8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d128      	bne.n	8008c26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	0151      	lsls	r1, r2, #5
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	440a      	add	r2, r1
 8008bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	791b      	ldrb	r3, [r3, #4]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d003      	beq.n	8008c04 <USB_EPClearStall+0x4c>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	791b      	ldrb	r3, [r3, #4]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d138      	bne.n	8008c76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	e027      	b.n	8008c76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	0151      	lsls	r1, r2, #5
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	791b      	ldrb	r3, [r3, #4]
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d003      	beq.n	8008c56 <USB_EPClearStall+0x9e>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	791b      	ldrb	r3, [r3, #4]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d10f      	bne.n	8008c76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ca6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cea:	f023 0303 	bic.w	r3, r3, #3
 8008cee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfe:	f023 0302 	bic.w	r3, r3, #2
 8008d02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d2c:	f023 0303 	bic.w	r3, r3, #3
 8008d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d40:	f043 0302 	orr.w	r3, r3, #2
 8008d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b085      	sub	sp, #20
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0c1b      	lsrs	r3, r3, #16
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	b29b      	uxth	r3, r3
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e10:	68bb      	ldr	r3, [r7, #8]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4e:	01db      	lsls	r3, r3, #7
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f003 0301 	and.w	r3, r3, #1
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008eb4:	f023 0307 	bic.w	r3, r3, #7
 8008eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	333c      	adds	r3, #60	; 0x3c
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4a26      	ldr	r2, [pc, #152]	; (8008f94 <USB_EP0_OutStart+0xb8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d90a      	bls.n	8008f16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f10:	d101      	bne.n	8008f16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e037      	b.n	8008f86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f44:	f043 0318 	orr.w	r3, r3, #24
 8008f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d10f      	bne.n	8008f84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	4f54300a 	.word	0x4f54300a

08008f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4a13      	ldr	r2, [pc, #76]	; (8008ffc <USB_CoreReset+0x64>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d901      	bls.n	8008fb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e01b      	b.n	8008fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	daf2      	bge.n	8008fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f043 0201 	orr.w	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <USB_CoreReset+0x64>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d901      	bls.n	8008fe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e006      	b.n	8008fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d0f0      	beq.n	8008fce <USB_CoreReset+0x36>

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	00030d40 	.word	0x00030d40

08009000 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800900c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009010:	f005 fb80 	bl	800e714 <USBD_static_malloc>
 8009014:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	32b0      	adds	r2, #176	; 0xb0
 8009026:	2100      	movs	r1, #0
 8009028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800902c:	2302      	movs	r3, #2
 800902e:	e0d4      	b.n	80091da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009030:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009034:	2100      	movs	r1, #0
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f005 fe77 	bl	800ed2a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32b0      	adds	r2, #176	; 0xb0
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32b0      	adds	r2, #176	; 0xb0
 8009056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	7c1b      	ldrb	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d138      	bne.n	80090da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009068:	4b5e      	ldr	r3, [pc, #376]	; (80091e4 <USBD_CDC_Init+0x1e4>)
 800906a:	7819      	ldrb	r1, [r3, #0]
 800906c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009070:	2202      	movs	r2, #2
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f005 fa2b 	bl	800e4ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009078:	4b5a      	ldr	r3, [pc, #360]	; (80091e4 <USBD_CDC_Init+0x1e4>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 020f 	and.w	r2, r3, #15
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	440b      	add	r3, r1
 800908c:	3324      	adds	r3, #36	; 0x24
 800908e:	2201      	movs	r2, #1
 8009090:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009092:	4b55      	ldr	r3, [pc, #340]	; (80091e8 <USBD_CDC_Init+0x1e8>)
 8009094:	7819      	ldrb	r1, [r3, #0]
 8009096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800909a:	2202      	movs	r2, #2
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f005 fa16 	bl	800e4ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80090a2:	4b51      	ldr	r3, [pc, #324]	; (80091e8 <USBD_CDC_Init+0x1e8>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 020f 	and.w	r2, r3, #15
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090ba:	2201      	movs	r2, #1
 80090bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090be:	4b4b      	ldr	r3, [pc, #300]	; (80091ec <USBD_CDC_Init+0x1ec>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	f003 020f 	and.w	r2, r3, #15
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	3326      	adds	r3, #38	; 0x26
 80090d4:	2210      	movs	r2, #16
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	e035      	b.n	8009146 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80090da:	4b42      	ldr	r3, [pc, #264]	; (80091e4 <USBD_CDC_Init+0x1e4>)
 80090dc:	7819      	ldrb	r1, [r3, #0]
 80090de:	2340      	movs	r3, #64	; 0x40
 80090e0:	2202      	movs	r2, #2
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f005 f9f3 	bl	800e4ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80090e8:	4b3e      	ldr	r3, [pc, #248]	; (80091e4 <USBD_CDC_Init+0x1e4>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	f003 020f 	and.w	r2, r3, #15
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	3324      	adds	r3, #36	; 0x24
 80090fe:	2201      	movs	r2, #1
 8009100:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009102:	4b39      	ldr	r3, [pc, #228]	; (80091e8 <USBD_CDC_Init+0x1e8>)
 8009104:	7819      	ldrb	r1, [r3, #0]
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	2202      	movs	r2, #2
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f005 f9df 	bl	800e4ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009110:	4b35      	ldr	r3, [pc, #212]	; (80091e8 <USBD_CDC_Init+0x1e8>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	f003 020f 	and.w	r2, r3, #15
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	4613      	mov	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	440b      	add	r3, r1
 8009124:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009128:	2201      	movs	r2, #1
 800912a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800912c:	4b2f      	ldr	r3, [pc, #188]	; (80091ec <USBD_CDC_Init+0x1ec>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 020f 	and.w	r2, r3, #15
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	440b      	add	r3, r1
 8009140:	3326      	adds	r3, #38	; 0x26
 8009142:	2210      	movs	r2, #16
 8009144:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009146:	4b29      	ldr	r3, [pc, #164]	; (80091ec <USBD_CDC_Init+0x1ec>)
 8009148:	7819      	ldrb	r1, [r3, #0]
 800914a:	2308      	movs	r3, #8
 800914c:	2203      	movs	r2, #3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f005 f9bd 	bl	800e4ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009154:	4b25      	ldr	r3, [pc, #148]	; (80091ec <USBD_CDC_Init+0x1ec>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	3324      	adds	r3, #36	; 0x24
 800916a:	2201      	movs	r2, #1
 800916c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	33b0      	adds	r3, #176	; 0xb0
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80091a4:	2302      	movs	r3, #2
 80091a6:	e018      	b.n	80091da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	7c1b      	ldrb	r3, [r3, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091b0:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <USBD_CDC_Init+0x1e8>)
 80091b2:	7819      	ldrb	r1, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f005 fa74 	bl	800e6ac <USBD_LL_PrepareReceive>
 80091c4:	e008      	b.n	80091d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091c6:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <USBD_CDC_Init+0x1e8>)
 80091c8:	7819      	ldrb	r1, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d0:	2340      	movs	r3, #64	; 0x40
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f005 fa6a 	bl	800e6ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	200000c7 	.word	0x200000c7
 80091e8:	200000c8 	.word	0x200000c8
 80091ec:	200000c9 	.word	0x200000c9

080091f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80091fc:	4b3a      	ldr	r3, [pc, #232]	; (80092e8 <USBD_CDC_DeInit+0xf8>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f005 f989 	bl	800e51a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009208:	4b37      	ldr	r3, [pc, #220]	; (80092e8 <USBD_CDC_DeInit+0xf8>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f003 020f 	and.w	r2, r3, #15
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	3324      	adds	r3, #36	; 0x24
 800921e:	2200      	movs	r2, #0
 8009220:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009222:	4b32      	ldr	r3, [pc, #200]	; (80092ec <USBD_CDC_DeInit+0xfc>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f005 f976 	bl	800e51a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800922e:	4b2f      	ldr	r3, [pc, #188]	; (80092ec <USBD_CDC_DeInit+0xfc>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	f003 020f 	and.w	r2, r3, #15
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009246:	2200      	movs	r2, #0
 8009248:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800924a:	4b29      	ldr	r3, [pc, #164]	; (80092f0 <USBD_CDC_DeInit+0x100>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f005 f962 	bl	800e51a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009256:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <USBD_CDC_DeInit+0x100>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	f003 020f 	and.w	r2, r3, #15
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	440b      	add	r3, r1
 800926a:	3324      	adds	r3, #36	; 0x24
 800926c:	2200      	movs	r2, #0
 800926e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009270:	4b1f      	ldr	r3, [pc, #124]	; (80092f0 <USBD_CDC_DeInit+0x100>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	f003 020f 	and.w	r2, r3, #15
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	3326      	adds	r3, #38	; 0x26
 8009286:	2200      	movs	r2, #0
 8009288:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32b0      	adds	r2, #176	; 0xb0
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01f      	beq.n	80092dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	33b0      	adds	r3, #176	; 0xb0
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	32b0      	adds	r2, #176	; 0xb0
 80092ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092be:	4618      	mov	r0, r3
 80092c0:	f005 fa36 	bl	800e730 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	32b0      	adds	r2, #176	; 0xb0
 80092ce:	2100      	movs	r1, #0
 80092d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	200000c7 	.word	0x200000c7
 80092ec:	200000c8 	.word	0x200000c8
 80092f0:	200000c9 	.word	0x200000c9

080092f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	32b0      	adds	r2, #176	; 0xb0
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	e0bf      	b.n	80094a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800932c:	2b00      	cmp	r3, #0
 800932e:	d050      	beq.n	80093d2 <USBD_CDC_Setup+0xde>
 8009330:	2b20      	cmp	r3, #32
 8009332:	f040 80af 	bne.w	8009494 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	88db      	ldrh	r3, [r3, #6]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d03a      	beq.n	80093b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b25b      	sxtb	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	da1b      	bge.n	8009380 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	33b0      	adds	r3, #176	; 0xb0
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800935e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	88d2      	ldrh	r2, [r2, #6]
 8009364:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	88db      	ldrh	r3, [r3, #6]
 800936a:	2b07      	cmp	r3, #7
 800936c:	bf28      	it	cs
 800936e:	2307      	movcs	r3, #7
 8009370:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	89fa      	ldrh	r2, [r7, #14]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fd89 	bl	800ae90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800937e:	e090      	b.n	80094a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	785a      	ldrb	r2, [r3, #1]
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	88db      	ldrh	r3, [r3, #6]
 800938e:	2b3f      	cmp	r3, #63	; 0x3f
 8009390:	d803      	bhi.n	800939a <USBD_CDC_Setup+0xa6>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	88db      	ldrh	r3, [r3, #6]
 8009396:	b2da      	uxtb	r2, r3
 8009398:	e000      	b.n	800939c <USBD_CDC_Setup+0xa8>
 800939a:	2240      	movs	r2, #64	; 0x40
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80093a2:	6939      	ldr	r1, [r7, #16]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80093aa:	461a      	mov	r2, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fd9b 	bl	800aee8 <USBD_CtlPrepareRx>
      break;
 80093b2:	e076      	b.n	80094a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	33b0      	adds	r3, #176	; 0xb0
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	7850      	ldrb	r0, [r2, #1]
 80093ca:	2200      	movs	r2, #0
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	4798      	blx	r3
      break;
 80093d0:	e067      	b.n	80094a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b0b      	cmp	r3, #11
 80093d8:	d851      	bhi.n	800947e <USBD_CDC_Setup+0x18a>
 80093da:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBD_CDC_Setup+0xec>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	08009411 	.word	0x08009411
 80093e4:	0800948d 	.word	0x0800948d
 80093e8:	0800947f 	.word	0x0800947f
 80093ec:	0800947f 	.word	0x0800947f
 80093f0:	0800947f 	.word	0x0800947f
 80093f4:	0800947f 	.word	0x0800947f
 80093f8:	0800947f 	.word	0x0800947f
 80093fc:	0800947f 	.word	0x0800947f
 8009400:	0800947f 	.word	0x0800947f
 8009404:	0800947f 	.word	0x0800947f
 8009408:	0800943b 	.word	0x0800943b
 800940c:	08009465 	.word	0x08009465
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d107      	bne.n	800942c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800941c:	f107 030a 	add.w	r3, r7, #10
 8009420:	2202      	movs	r2, #2
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 fd33 	bl	800ae90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800942a:	e032      	b.n	8009492 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fcbd 	bl	800adae <USBD_CtlError>
            ret = USBD_FAIL;
 8009434:	2303      	movs	r3, #3
 8009436:	75fb      	strb	r3, [r7, #23]
          break;
 8009438:	e02b      	b.n	8009492 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b03      	cmp	r3, #3
 8009444:	d107      	bne.n	8009456 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009446:	f107 030d 	add.w	r3, r7, #13
 800944a:	2201      	movs	r2, #1
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 fd1e 	bl	800ae90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009454:	e01d      	b.n	8009492 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 fca8 	bl	800adae <USBD_CtlError>
            ret = USBD_FAIL;
 800945e:	2303      	movs	r3, #3
 8009460:	75fb      	strb	r3, [r7, #23]
          break;
 8009462:	e016      	b.n	8009492 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b03      	cmp	r3, #3
 800946e:	d00f      	beq.n	8009490 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fc9b 	bl	800adae <USBD_CtlError>
            ret = USBD_FAIL;
 8009478:	2303      	movs	r3, #3
 800947a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800947c:	e008      	b.n	8009490 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fc94 	bl	800adae <USBD_CtlError>
          ret = USBD_FAIL;
 8009486:	2303      	movs	r3, #3
 8009488:	75fb      	strb	r3, [r7, #23]
          break;
 800948a:	e002      	b.n	8009492 <USBD_CDC_Setup+0x19e>
          break;
 800948c:	bf00      	nop
 800948e:	e008      	b.n	80094a2 <USBD_CDC_Setup+0x1ae>
          break;
 8009490:	bf00      	nop
      }
      break;
 8009492:	e006      	b.n	80094a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fc89 	bl	800adae <USBD_CtlError>
      ret = USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	32b0      	adds	r2, #176	; 0xb0
 80094ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e065      	b.n	80095a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	32b0      	adds	r2, #176	; 0xb0
 80094e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	3318      	adds	r3, #24
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d02f      	beq.n	8009560 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	f003 020f 	and.w	r2, r3, #15
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	3318      	adds	r3, #24
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	f003 010f 	and.w	r1, r3, #15
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	460b      	mov	r3, r1
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	440b      	add	r3, r1
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4403      	add	r3, r0
 8009528:	3348      	adds	r3, #72	; 0x48
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009536:	2b00      	cmp	r3, #0
 8009538:	d112      	bne.n	8009560 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	f003 020f 	and.w	r2, r3, #15
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	3318      	adds	r3, #24
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009552:	78f9      	ldrb	r1, [r7, #3]
 8009554:	2300      	movs	r3, #0
 8009556:	2200      	movs	r2, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f005 f886 	bl	800e66a <USBD_LL_Transmit>
 800955e:	e01f      	b.n	80095a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	33b0      	adds	r3, #176	; 0xb0
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d010      	beq.n	80095a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	33b0      	adds	r3, #176	; 0xb0
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	32b0      	adds	r2, #176	; 0xb0
 80095c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	32b0      	adds	r2, #176	; 0xb0
 80095d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80095d8:	2303      	movs	r3, #3
 80095da:	e01a      	b.n	8009612 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f005 f884 	bl	800e6ee <USBD_LL_GetRxDataSize>
 80095e6:	4602      	mov	r2, r0
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	33b0      	adds	r3, #176	; 0xb0
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800960c:	4611      	mov	r1, r2
 800960e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32b0      	adds	r2, #176	; 0xb0
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009638:	2303      	movs	r3, #3
 800963a:	e025      	b.n	8009688 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	33b0      	adds	r3, #176	; 0xb0
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01a      	beq.n	8009686 <USBD_CDC_EP0_RxReady+0x6c>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009656:	2bff      	cmp	r3, #255	; 0xff
 8009658:	d015      	beq.n	8009686 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	33b0      	adds	r3, #176	; 0xb0
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009672:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800967a:	b292      	uxth	r2, r2
 800967c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	22ff      	movs	r2, #255	; 0xff
 8009682:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009698:	2182      	movs	r1, #130	; 0x82
 800969a:	4818      	ldr	r0, [pc, #96]	; (80096fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800969c:	f000 fd4f 	bl	800a13e <USBD_GetEpDesc>
 80096a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096a2:	2101      	movs	r1, #1
 80096a4:	4815      	ldr	r0, [pc, #84]	; (80096fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096a6:	f000 fd4a 	bl	800a13e <USBD_GetEpDesc>
 80096aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096ac:	2181      	movs	r1, #129	; 0x81
 80096ae:	4813      	ldr	r0, [pc, #76]	; (80096fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096b0:	f000 fd45 	bl	800a13e <USBD_GetEpDesc>
 80096b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2210      	movs	r2, #16
 80096c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d0:	711a      	strb	r2, [r3, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d006      	beq.n	80096ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096e4:	711a      	strb	r2, [r3, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2243      	movs	r2, #67	; 0x43
 80096ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096f0:	4b02      	ldr	r3, [pc, #8]	; (80096fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000084 	.word	0x20000084

08009700 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009708:	2182      	movs	r1, #130	; 0x82
 800970a:	4818      	ldr	r0, [pc, #96]	; (800976c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800970c:	f000 fd17 	bl	800a13e <USBD_GetEpDesc>
 8009710:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009712:	2101      	movs	r1, #1
 8009714:	4815      	ldr	r0, [pc, #84]	; (800976c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009716:	f000 fd12 	bl	800a13e <USBD_GetEpDesc>
 800971a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800971c:	2181      	movs	r1, #129	; 0x81
 800971e:	4813      	ldr	r0, [pc, #76]	; (800976c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009720:	f000 fd0d 	bl	800a13e <USBD_GetEpDesc>
 8009724:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2210      	movs	r2, #16
 8009730:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d006      	beq.n	8009746 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2200      	movs	r2, #0
 800973c:	711a      	strb	r2, [r3, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f042 0202 	orr.w	r2, r2, #2
 8009744:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d006      	beq.n	800975a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	711a      	strb	r2, [r3, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f042 0202 	orr.w	r2, r2, #2
 8009758:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2243      	movs	r2, #67	; 0x43
 800975e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009760:	4b02      	ldr	r3, [pc, #8]	; (800976c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000084 	.word	0x20000084

08009770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009778:	2182      	movs	r1, #130	; 0x82
 800977a:	4818      	ldr	r0, [pc, #96]	; (80097dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800977c:	f000 fcdf 	bl	800a13e <USBD_GetEpDesc>
 8009780:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009782:	2101      	movs	r1, #1
 8009784:	4815      	ldr	r0, [pc, #84]	; (80097dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009786:	f000 fcda 	bl	800a13e <USBD_GetEpDesc>
 800978a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800978c:	2181      	movs	r1, #129	; 0x81
 800978e:	4813      	ldr	r0, [pc, #76]	; (80097dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009790:	f000 fcd5 	bl	800a13e <USBD_GetEpDesc>
 8009794:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2210      	movs	r2, #16
 80097a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097b0:	711a      	strb	r2, [r3, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d006      	beq.n	80097ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c4:	711a      	strb	r2, [r3, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2243      	movs	r2, #67	; 0x43
 80097ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000084 	.word	0x20000084

080097e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	220a      	movs	r2, #10
 80097ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80097ee:	4b03      	ldr	r3, [pc, #12]	; (80097fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000040 	.word	0x20000040

08009800 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	e009      	b.n	8009828 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	33b0      	adds	r3, #176	; 0xb0
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	32b0      	adds	r2, #176	; 0xb0
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009856:	2303      	movs	r3, #3
 8009858:	e008      	b.n	800986c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	32b0      	adds	r2, #176	; 0xb0
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	e004      	b.n	80098a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
	...

080098b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	32b0      	adds	r2, #176	; 0xb0
 80098c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80098cc:	2301      	movs	r3, #1
 80098ce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32b0      	adds	r2, #176	; 0xb0
 80098da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e025      	b.n	8009932 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11f      	bne.n	8009930 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80098f8:	4b10      	ldr	r3, [pc, #64]	; (800993c <USBD_CDC_TransmitPacket+0x88>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 020f 	and.w	r2, r3, #15
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4403      	add	r3, r0
 8009912:	3318      	adds	r3, #24
 8009914:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <USBD_CDC_TransmitPacket+0x88>)
 8009918:	7819      	ldrb	r1, [r3, #0]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f004 fe9f 	bl	800e66a <USBD_LL_Transmit>

    ret = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	200000c7 	.word	0x200000c7

08009940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	32b0      	adds	r2, #176	; 0xb0
 8009952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009956:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	32b0      	adds	r2, #176	; 0xb0
 8009962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	e018      	b.n	80099a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	7c1b      	ldrb	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <USBD_CDC_ReceivePacket+0x68>)
 8009978:	7819      	ldrb	r1, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f004 fe91 	bl	800e6ac <USBD_LL_PrepareReceive>
 800998a:	e008      	b.n	800999e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <USBD_CDC_ReceivePacket+0x68>)
 800998e:	7819      	ldrb	r1, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009996:	2340      	movs	r3, #64	; 0x40
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f004 fe87 	bl	800e6ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200000c8 	.word	0x200000c8

080099ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e01f      	b.n	8009a04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	79fa      	ldrb	r2, [r7, #7]
 80099f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f004 fd01 	bl	800e400 <USBD_LL_Init>
 80099fe:	4603      	mov	r3, r0
 8009a00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e025      	b.n	8009a70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	32ae      	adds	r2, #174	; 0xae
 8009a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00f      	beq.n	8009a60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	32ae      	adds	r2, #174	; 0xae
 8009a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	f107 020e 	add.w	r2, r7, #14
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	4602      	mov	r2, r0
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f004 fd09 	bl	800e498 <USBD_LL_Start>
 8009a86:	4603      	mov	r3, r0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	78fa      	ldrb	r2, [r7, #3]
 8009af8:	4611      	mov	r1, r2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 f908 	bl	800ad3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b46:	f003 031f 	and.w	r3, r3, #31
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d01a      	beq.n	8009b84 <USBD_LL_SetupStage+0x72>
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d822      	bhi.n	8009b98 <USBD_LL_SetupStage+0x86>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <USBD_LL_SetupStage+0x4a>
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d00a      	beq.n	8009b70 <USBD_LL_SetupStage+0x5e>
 8009b5a:	e01d      	b.n	8009b98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fb5f 	bl	800a228 <USBD_StdDevReq>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b6e:	e020      	b.n	8009bb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fbc7 	bl	800a30c <USBD_StdItfReq>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]
      break;
 8009b82:	e016      	b.n	8009bb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc29 	bl	800a3e4 <USBD_StdEPReq>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
      break;
 8009b96:	e00c      	b.n	8009bb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f004 fcd6 	bl	800e558 <USBD_LL_StallEP>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb0:	bf00      	nop
  }

  return ret;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d16e      	bne.n	8009cb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009bda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	f040 8098 	bne.w	8009d18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d913      	bls.n	8009c1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	1ad2      	subs	r2, r2, r3
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	bf28      	it	cs
 8009c0e:	4613      	movcs	r3, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f001 f984 	bl	800af22 <USBD_CtlContinueRx>
 8009c1a:	e07d      	b.n	8009d18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d014      	beq.n	8009c54 <USBD_LL_DataOutStage+0x98>
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d81d      	bhi.n	8009c6a <USBD_LL_DataOutStage+0xae>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <USBD_LL_DataOutStage+0x7c>
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d003      	beq.n	8009c3e <USBD_LL_DataOutStage+0x82>
 8009c36:	e018      	b.n	8009c6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	75bb      	strb	r3, [r7, #22]
            break;
 8009c3c:	e018      	b.n	8009c70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	4619      	mov	r1, r3
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fa5e 	bl	800a10a <USBD_CoreFindIF>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75bb      	strb	r3, [r7, #22]
            break;
 8009c52:	e00d      	b.n	8009c70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 fa60 	bl	800a124 <USBD_CoreFindEP>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75bb      	strb	r3, [r7, #22]
            break;
 8009c68:	e002      	b.n	8009c70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75bb      	strb	r3, [r7, #22]
            break;
 8009c6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009c70:	7dbb      	ldrb	r3, [r7, #22]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d119      	bne.n	8009caa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d113      	bne.n	8009caa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009c82:	7dba      	ldrb	r2, [r7, #22]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	32ae      	adds	r2, #174	; 0xae
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009c92:	7dba      	ldrb	r2, [r7, #22]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009c9a:	7dba      	ldrb	r2, [r7, #22]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	32ae      	adds	r2, #174	; 0xae
 8009ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f001 f94a 	bl	800af44 <USBD_CtlSendStatus>
 8009cb0:	e032      	b.n	8009d18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009cb2:	7afb      	ldrb	r3, [r7, #11]
 8009cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 fa31 	bl	800a124 <USBD_CoreFindEP>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cc6:	7dbb      	ldrb	r3, [r7, #22]
 8009cc8:	2bff      	cmp	r3, #255	; 0xff
 8009cca:	d025      	beq.n	8009d18 <USBD_LL_DataOutStage+0x15c>
 8009ccc:	7dbb      	ldrb	r3, [r7, #22]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d122      	bne.n	8009d18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d117      	bne.n	8009d0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009cde:	7dba      	ldrb	r2, [r7, #22]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	32ae      	adds	r2, #174	; 0xae
 8009ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00f      	beq.n	8009d0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009cee:	7dba      	ldrb	r2, [r7, #22]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009cf6:	7dba      	ldrb	r2, [r7, #22]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	32ae      	adds	r2, #174	; 0xae
 8009cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	7afa      	ldrb	r2, [r7, #11]
 8009d04:	4611      	mov	r1, r2
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	e000      	b.n	8009d1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d16f      	bne.n	8009e16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3314      	adds	r3, #20
 8009d3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d15a      	bne.n	8009dfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d914      	bls.n	8009d7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	689a      	ldr	r2, [r3, #8]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	461a      	mov	r2, r3
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f001 f8ac 	bl	800aec6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f004 fc99 	bl	800e6ac <USBD_LL_PrepareReceive>
 8009d7a:	e03f      	b.n	8009dfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d11c      	bne.n	8009dc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d316      	bcc.n	8009dc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d20f      	bcs.n	8009dc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009da2:	2200      	movs	r2, #0
 8009da4:	2100      	movs	r1, #0
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f001 f88d 	bl	800aec6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009db4:	2300      	movs	r3, #0
 8009db6:	2200      	movs	r2, #0
 8009db8:	2100      	movs	r1, #0
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f004 fc76 	bl	800e6ac <USBD_LL_PrepareReceive>
 8009dc0:	e01c      	b.n	8009dfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d10f      	bne.n	8009dee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dee:	2180      	movs	r1, #128	; 0x80
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f004 fbb1 	bl	800e558 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f001 f8b7 	bl	800af6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d03a      	beq.n	8009e7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff fe42 	bl	8009a90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e14:	e032      	b.n	8009e7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	4619      	mov	r1, r3
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f97f 	bl	800a124 <USBD_CoreFindEP>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	2bff      	cmp	r3, #255	; 0xff
 8009e2e:	d025      	beq.n	8009e7c <USBD_LL_DataInStage+0x15a>
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d122      	bne.n	8009e7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d11c      	bne.n	8009e7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009e42:	7dfa      	ldrb	r2, [r7, #23]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	32ae      	adds	r2, #174	; 0xae
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d014      	beq.n	8009e7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009e52:	7dfa      	ldrb	r2, [r7, #23]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009e5a:	7dfa      	ldrb	r2, [r7, #23]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	32ae      	adds	r2, #174	; 0xae
 8009e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	7afa      	ldrb	r2, [r7, #11]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	4798      	blx	r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009e72:	7dbb      	ldrb	r3, [r7, #22]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009e78:	7dbb      	ldrb	r3, [r7, #22]
 8009e7a:	e000      	b.n	8009e7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d014      	beq.n	8009eec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00e      	beq.n	8009eec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	6852      	ldr	r2, [r2, #4]
 8009eda:	b2d2      	uxtb	r2, r2
 8009edc:	4611      	mov	r1, r2
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009eec:	2340      	movs	r3, #64	; 0x40
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f004 faeb 	bl	800e4ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2240      	movs	r2, #64	; 0x40
 8009f04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f08:	2340      	movs	r3, #64	; 0x40
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2180      	movs	r1, #128	; 0x80
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f004 fadd 	bl	800e4ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2240      	movs	r2, #64	; 0x40
 8009f1e:	621a      	str	r2, [r3, #32]

  return ret;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	460b      	mov	r3, r1
 8009f34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	78fa      	ldrb	r2, [r7, #3]
 8009f3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2204      	movs	r2, #4
 8009f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d106      	bne.n	8009f98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d110      	bne.n	8009fdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	32ae      	adds	r2, #174	; 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	e01c      	b.n	800a042 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b03      	cmp	r3, #3
 800a012:	d115      	bne.n	800a040 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	32ae      	adds	r2, #174	; 0xae
 800a01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32ae      	adds	r2, #174	; 0xae
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	4611      	mov	r1, r2
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	460b      	mov	r3, r1
 800a054:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	32ae      	adds	r2, #174	; 0xae
 800a060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	e01c      	b.n	800a0a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b03      	cmp	r3, #3
 800a076:	d115      	bne.n	800a0a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	32ae      	adds	r2, #174	; 0xae
 800a082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	32ae      	adds	r2, #174	; 0xae
 800a096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	4611      	mov	r1, r2
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00e      	beq.n	800a100 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6852      	ldr	r2, [r2, #4]
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	4798      	blx	r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a116:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a130:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b086      	sub	sp, #24
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	885b      	ldrh	r3, [r3, #2]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	b29b      	uxth	r3, r3
 800a162:	429a      	cmp	r2, r3
 800a164:	d920      	bls.n	800a1a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a16e:	e013      	b.n	800a198 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a170:	f107 030a 	add.w	r3, r7, #10
 800a174:	4619      	mov	r1, r3
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	f000 f81b 	bl	800a1b2 <USBD_GetNextDesc>
 800a17c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	2b05      	cmp	r3, #5
 800a184:	d108      	bne.n	800a198 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	789b      	ldrb	r3, [r3, #2]
 800a18e:	78fa      	ldrb	r2, [r7, #3]
 800a190:	429a      	cmp	r2, r3
 800a192:	d008      	beq.n	800a1a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	885b      	ldrh	r3, [r3, #2]
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	897b      	ldrh	r3, [r7, #10]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d8e5      	bhi.n	800a170 <USBD_GetEpDesc+0x32>
 800a1a4:	e000      	b.n	800a1a8 <USBD_GetEpDesc+0x6a>
          break;
 800a1a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a1a8:	693b      	ldr	r3, [r7, #16]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b085      	sub	sp, #20
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	881a      	ldrh	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4413      	add	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4413      	add	r3, r2
 800a1dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1de:	68fb      	ldr	r3, [r7, #12]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	3301      	adds	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a20a:	8a3b      	ldrh	r3, [r7, #16]
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	b21a      	sxth	r2, r3
 800a210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a214:	4313      	orrs	r3, r2
 800a216:	b21b      	sxth	r3, r3
 800a218:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a21a:	89fb      	ldrh	r3, [r7, #14]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	371c      	adds	r7, #28
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a23e:	2b40      	cmp	r3, #64	; 0x40
 800a240:	d005      	beq.n	800a24e <USBD_StdDevReq+0x26>
 800a242:	2b40      	cmp	r3, #64	; 0x40
 800a244:	d857      	bhi.n	800a2f6 <USBD_StdDevReq+0xce>
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00f      	beq.n	800a26a <USBD_StdDevReq+0x42>
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	d153      	bne.n	800a2f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	32ae      	adds	r2, #174	; 0xae
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4798      	blx	r3
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]
      break;
 800a268:	e04a      	b.n	800a300 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	2b09      	cmp	r3, #9
 800a270:	d83b      	bhi.n	800a2ea <USBD_StdDevReq+0xc2>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <USBD_StdDevReq+0x50>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a2e1 	.word	0x0800a2e1
 800a280:	0800a2eb 	.word	0x0800a2eb
 800a284:	0800a2d7 	.word	0x0800a2d7
 800a288:	0800a2eb 	.word	0x0800a2eb
 800a28c:	0800a2ab 	.word	0x0800a2ab
 800a290:	0800a2a1 	.word	0x0800a2a1
 800a294:	0800a2eb 	.word	0x0800a2eb
 800a298:	0800a2c3 	.word	0x0800a2c3
 800a29c:	0800a2b5 	.word	0x0800a2b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa3c 	bl	800a720 <USBD_GetDescriptor>
          break;
 800a2a8:	e024      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fba1 	bl	800a9f4 <USBD_SetAddress>
          break;
 800a2b2:	e01f      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fbe0 	bl	800aa7c <USBD_SetConfig>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
          break;
 800a2c0:	e018      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc83 	bl	800abd0 <USBD_GetConfig>
          break;
 800a2ca:	e013      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fcb4 	bl	800ac3c <USBD_GetStatus>
          break;
 800a2d4:	e00e      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fce3 	bl	800aca4 <USBD_SetFeature>
          break;
 800a2de:	e009      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fd07 	bl	800acf6 <USBD_ClrFeature>
          break;
 800a2e8:	e004      	b.n	800a2f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fd5e 	bl	800adae <USBD_CtlError>
          break;
 800a2f2:	bf00      	nop
      }
      break;
 800a2f4:	e004      	b.n	800a300 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fd58 	bl	800adae <USBD_CtlError>
      break;
 800a2fe:	bf00      	nop
  }

  return ret;
 800a300:	7bfb      	ldrb	r3, [r7, #15]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop

0800a30c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a322:	2b40      	cmp	r3, #64	; 0x40
 800a324:	d005      	beq.n	800a332 <USBD_StdItfReq+0x26>
 800a326:	2b40      	cmp	r3, #64	; 0x40
 800a328:	d852      	bhi.n	800a3d0 <USBD_StdItfReq+0xc4>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <USBD_StdItfReq+0x26>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d14e      	bne.n	800a3d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d840      	bhi.n	800a3c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	889b      	ldrh	r3, [r3, #4]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b01      	cmp	r3, #1
 800a348:	d836      	bhi.n	800a3b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	889b      	ldrh	r3, [r3, #4]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff fed9 	bl	800a10a <USBD_CoreFindIF>
 800a358:	4603      	mov	r3, r0
 800a35a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	2bff      	cmp	r3, #255	; 0xff
 800a360:	d01d      	beq.n	800a39e <USBD_StdItfReq+0x92>
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11a      	bne.n	800a39e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a368:	7bba      	ldrb	r2, [r7, #14]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	32ae      	adds	r2, #174	; 0xae
 800a36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00f      	beq.n	800a398 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a378:	7bba      	ldrb	r2, [r7, #14]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a380:	7bba      	ldrb	r2, [r7, #14]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	32ae      	adds	r2, #174	; 0xae
 800a386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a396:	e004      	b.n	800a3a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a398:	2303      	movs	r3, #3
 800a39a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a39c:	e001      	b.n	800a3a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	88db      	ldrh	r3, [r3, #6]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d110      	bne.n	800a3cc <USBD_StdItfReq+0xc0>
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10d      	bne.n	800a3cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fdc7 	bl	800af44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a3b6:	e009      	b.n	800a3cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fcf7 	bl	800adae <USBD_CtlError>
          break;
 800a3c0:	e004      	b.n	800a3cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fcf2 	bl	800adae <USBD_CtlError>
          break;
 800a3ca:	e000      	b.n	800a3ce <USBD_StdItfReq+0xc2>
          break;
 800a3cc:	bf00      	nop
      }
      break;
 800a3ce:	e004      	b.n	800a3da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fceb 	bl	800adae <USBD_CtlError>
      break;
 800a3d8:	bf00      	nop
  }

  return ret;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	889b      	ldrh	r3, [r3, #4]
 800a3f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a400:	2b40      	cmp	r3, #64	; 0x40
 800a402:	d007      	beq.n	800a414 <USBD_StdEPReq+0x30>
 800a404:	2b40      	cmp	r3, #64	; 0x40
 800a406:	f200 817f 	bhi.w	800a708 <USBD_StdEPReq+0x324>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d02a      	beq.n	800a464 <USBD_StdEPReq+0x80>
 800a40e:	2b20      	cmp	r3, #32
 800a410:	f040 817a 	bne.w	800a708 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff fe83 	bl	800a124 <USBD_CoreFindEP>
 800a41e:	4603      	mov	r3, r0
 800a420:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a422:	7b7b      	ldrb	r3, [r7, #13]
 800a424:	2bff      	cmp	r3, #255	; 0xff
 800a426:	f000 8174 	beq.w	800a712 <USBD_StdEPReq+0x32e>
 800a42a:	7b7b      	ldrb	r3, [r7, #13]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f040 8170 	bne.w	800a712 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a432:	7b7a      	ldrb	r2, [r7, #13]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a43a:	7b7a      	ldrb	r2, [r7, #13]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	32ae      	adds	r2, #174	; 0xae
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 8163 	beq.w	800a712 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a44c:	7b7a      	ldrb	r2, [r7, #13]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32ae      	adds	r2, #174	; 0xae
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a462:	e156      	b.n	800a712 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d008      	beq.n	800a47e <USBD_StdEPReq+0x9a>
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	f300 8145 	bgt.w	800a6fc <USBD_StdEPReq+0x318>
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 809b 	beq.w	800a5ae <USBD_StdEPReq+0x1ca>
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d03c      	beq.n	800a4f6 <USBD_StdEPReq+0x112>
 800a47c:	e13e      	b.n	800a6fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b02      	cmp	r3, #2
 800a488:	d002      	beq.n	800a490 <USBD_StdEPReq+0xac>
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d016      	beq.n	800a4bc <USBD_StdEPReq+0xd8>
 800a48e:	e02c      	b.n	800a4ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00d      	beq.n	800a4b2 <USBD_StdEPReq+0xce>
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	2b80      	cmp	r3, #128	; 0x80
 800a49a:	d00a      	beq.n	800a4b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a49c:	7bbb      	ldrb	r3, [r7, #14]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f004 f859 	bl	800e558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4a6:	2180      	movs	r1, #128	; 0x80
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f004 f855 	bl	800e558 <USBD_LL_StallEP>
 800a4ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4b0:	e020      	b.n	800a4f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fc7a 	bl	800adae <USBD_CtlError>
              break;
 800a4ba:	e01b      	b.n	800a4f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	885b      	ldrh	r3, [r3, #2]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10e      	bne.n	800a4e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00b      	beq.n	800a4e2 <USBD_StdEPReq+0xfe>
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	2b80      	cmp	r3, #128	; 0x80
 800a4ce:	d008      	beq.n	800a4e2 <USBD_StdEPReq+0xfe>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	88db      	ldrh	r3, [r3, #6]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f004 f83b 	bl	800e558 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fd2e 	bl	800af44 <USBD_CtlSendStatus>

              break;
 800a4e8:	e004      	b.n	800a4f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fc5e 	bl	800adae <USBD_CtlError>
              break;
 800a4f2:	bf00      	nop
          }
          break;
 800a4f4:	e107      	b.n	800a706 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d002      	beq.n	800a508 <USBD_StdEPReq+0x124>
 800a502:	2b03      	cmp	r3, #3
 800a504:	d016      	beq.n	800a534 <USBD_StdEPReq+0x150>
 800a506:	e04b      	b.n	800a5a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00d      	beq.n	800a52a <USBD_StdEPReq+0x146>
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b80      	cmp	r3, #128	; 0x80
 800a512:	d00a      	beq.n	800a52a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f004 f81d 	bl	800e558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a51e:	2180      	movs	r1, #128	; 0x80
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f004 f819 	bl	800e558 <USBD_LL_StallEP>
 800a526:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a528:	e040      	b.n	800a5ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fc3e 	bl	800adae <USBD_CtlError>
              break;
 800a532:	e03b      	b.n	800a5ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	885b      	ldrh	r3, [r3, #2]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d136      	bne.n	800a5aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a542:	2b00      	cmp	r3, #0
 800a544:	d004      	beq.n	800a550 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a546:	7bbb      	ldrb	r3, [r7, #14]
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f004 f823 	bl	800e596 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fcf7 	bl	800af44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a556:	7bbb      	ldrb	r3, [r7, #14]
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff fde2 	bl	800a124 <USBD_CoreFindEP>
 800a560:	4603      	mov	r3, r0
 800a562:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a564:	7b7b      	ldrb	r3, [r7, #13]
 800a566:	2bff      	cmp	r3, #255	; 0xff
 800a568:	d01f      	beq.n	800a5aa <USBD_StdEPReq+0x1c6>
 800a56a:	7b7b      	ldrb	r3, [r7, #13]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d11c      	bne.n	800a5aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a570:	7b7a      	ldrb	r2, [r7, #13]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a578:	7b7a      	ldrb	r2, [r7, #13]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	32ae      	adds	r2, #174	; 0xae
 800a57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d010      	beq.n	800a5aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a588:	7b7a      	ldrb	r2, [r7, #13]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	32ae      	adds	r2, #174	; 0xae
 800a58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	4798      	blx	r3
 800a59a:	4603      	mov	r3, r0
 800a59c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a59e:	e004      	b.n	800a5aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fc03 	bl	800adae <USBD_CtlError>
              break;
 800a5a8:	e000      	b.n	800a5ac <USBD_StdEPReq+0x1c8>
              break;
 800a5aa:	bf00      	nop
          }
          break;
 800a5ac:	e0ab      	b.n	800a706 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d002      	beq.n	800a5c0 <USBD_StdEPReq+0x1dc>
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d032      	beq.n	800a624 <USBD_StdEPReq+0x240>
 800a5be:	e097      	b.n	800a6f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d007      	beq.n	800a5d6 <USBD_StdEPReq+0x1f2>
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	2b80      	cmp	r3, #128	; 0x80
 800a5ca:	d004      	beq.n	800a5d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fbed 	bl	800adae <USBD_CtlError>
                break;
 800a5d4:	e091      	b.n	800a6fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da0b      	bge.n	800a5f6 <USBD_StdEPReq+0x212>
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	3310      	adds	r3, #16
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	e00b      	b.n	800a60e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5f6:	7bbb      	ldrb	r3, [r7, #14]
 800a5f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	4413      	add	r3, r2
 800a60c:	3304      	adds	r3, #4
 800a60e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2202      	movs	r2, #2
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fc37 	bl	800ae90 <USBD_CtlSendData>
              break;
 800a622:	e06a      	b.n	800a6fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da11      	bge.n	800a650 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	f003 020f 	and.w	r2, r3, #15
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	440b      	add	r3, r1
 800a63e:	3324      	adds	r3, #36	; 0x24
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d117      	bne.n	800a676 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fbb0 	bl	800adae <USBD_CtlError>
                  break;
 800a64e:	e054      	b.n	800a6fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	f003 020f 	and.w	r2, r3, #15
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	440b      	add	r3, r1
 800a662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fb9d 	bl	800adae <USBD_CtlError>
                  break;
 800a674:	e041      	b.n	800a6fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	da0b      	bge.n	800a696 <USBD_StdEPReq+0x2b2>
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	3310      	adds	r3, #16
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	4413      	add	r3, r2
 800a692:	3304      	adds	r3, #4
 800a694:	e00b      	b.n	800a6ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a69c:	4613      	mov	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <USBD_StdEPReq+0x2d8>
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b80      	cmp	r3, #128	; 0x80
 800a6ba:	d103      	bne.n	800a6c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	e00e      	b.n	800a6e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f003 ff83 	bl	800e5d4 <USBD_LL_IsStallEP>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fbd1 	bl	800ae90 <USBD_CtlSendData>
              break;
 800a6ee:	e004      	b.n	800a6fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb5b 	bl	800adae <USBD_CtlError>
              break;
 800a6f8:	bf00      	nop
          }
          break;
 800a6fa:	e004      	b.n	800a706 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fb55 	bl	800adae <USBD_CtlError>
          break;
 800a704:	bf00      	nop
      }
      break;
 800a706:	e005      	b.n	800a714 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fb4f 	bl	800adae <USBD_CtlError>
      break;
 800a710:	e000      	b.n	800a714 <USBD_StdEPReq+0x330>
      break;
 800a712:	bf00      	nop
  }

  return ret;
 800a714:	7bfb      	ldrb	r3, [r7, #15]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	885b      	ldrh	r3, [r3, #2]
 800a73a:	0a1b      	lsrs	r3, r3, #8
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	3b01      	subs	r3, #1
 800a740:	2b06      	cmp	r3, #6
 800a742:	f200 8128 	bhi.w	800a996 <USBD_GetDescriptor+0x276>
 800a746:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <USBD_GetDescriptor+0x2c>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a769 	.word	0x0800a769
 800a750:	0800a781 	.word	0x0800a781
 800a754:	0800a7c1 	.word	0x0800a7c1
 800a758:	0800a997 	.word	0x0800a997
 800a75c:	0800a997 	.word	0x0800a997
 800a760:	0800a937 	.word	0x0800a937
 800a764:	0800a963 	.word	0x0800a963
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	f107 0108 	add.w	r1, r7, #8
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	60f8      	str	r0, [r7, #12]
      break;
 800a77e:	e112      	b.n	800a9a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	7c1b      	ldrb	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10d      	bne.n	800a7a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a790:	f107 0208 	add.w	r2, r7, #8
 800a794:	4610      	mov	r0, r2
 800a796:	4798      	blx	r3
 800a798:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3301      	adds	r3, #1
 800a79e:	2202      	movs	r2, #2
 800a7a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7a2:	e100      	b.n	800a9a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	f107 0208 	add.w	r2, r7, #8
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	701a      	strb	r2, [r3, #0]
      break;
 800a7be:	e0f2      	b.n	800a9a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	885b      	ldrh	r3, [r3, #2]
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b05      	cmp	r3, #5
 800a7c8:	f200 80ac 	bhi.w	800a924 <USBD_GetDescriptor+0x204>
 800a7cc:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <USBD_GetDescriptor+0xb4>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800a7ed 	.word	0x0800a7ed
 800a7d8:	0800a821 	.word	0x0800a821
 800a7dc:	0800a855 	.word	0x0800a855
 800a7e0:	0800a889 	.word	0x0800a889
 800a7e4:	0800a8bd 	.word	0x0800a8bd
 800a7e8:	0800a8f1 	.word	0x0800a8f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00b      	beq.n	800a810 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	7c12      	ldrb	r2, [r2, #16]
 800a804:	f107 0108 	add.w	r1, r7, #8
 800a808:	4610      	mov	r0, r2
 800a80a:	4798      	blx	r3
 800a80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a80e:	e091      	b.n	800a934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 facb 	bl	800adae <USBD_CtlError>
            err++;
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	3301      	adds	r3, #1
 800a81c:	72fb      	strb	r3, [r7, #11]
          break;
 800a81e:	e089      	b.n	800a934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00b      	beq.n	800a844 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7c12      	ldrb	r2, [r2, #16]
 800a838:	f107 0108 	add.w	r1, r7, #8
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
 800a840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a842:	e077      	b.n	800a934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fab1 	bl	800adae <USBD_CtlError>
            err++;
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	3301      	adds	r3, #1
 800a850:	72fb      	strb	r3, [r7, #11]
          break;
 800a852:	e06f      	b.n	800a934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00b      	beq.n	800a878 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	7c12      	ldrb	r2, [r2, #16]
 800a86c:	f107 0108 	add.w	r1, r7, #8
 800a870:	4610      	mov	r0, r2
 800a872:	4798      	blx	r3
 800a874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a876:	e05d      	b.n	800a934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa97 	bl	800adae <USBD_CtlError>
            err++;
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	3301      	adds	r3, #1
 800a884:	72fb      	strb	r3, [r7, #11]
          break;
 800a886:	e055      	b.n	800a934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	7c12      	ldrb	r2, [r2, #16]
 800a8a0:	f107 0108 	add.w	r1, r7, #8
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4798      	blx	r3
 800a8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8aa:	e043      	b.n	800a934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa7d 	bl	800adae <USBD_CtlError>
            err++;
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ba:	e03b      	b.n	800a934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00b      	beq.n	800a8e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	7c12      	ldrb	r2, [r2, #16]
 800a8d4:	f107 0108 	add.w	r1, r7, #8
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4798      	blx	r3
 800a8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8de:	e029      	b.n	800a934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa63 	bl	800adae <USBD_CtlError>
            err++;
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ee:	e021      	b.n	800a934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00b      	beq.n	800a914 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	7c12      	ldrb	r2, [r2, #16]
 800a908:	f107 0108 	add.w	r1, r7, #8
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a912:	e00f      	b.n	800a934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fa49 	bl	800adae <USBD_CtlError>
            err++;
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	3301      	adds	r3, #1
 800a920:	72fb      	strb	r3, [r7, #11]
          break;
 800a922:	e007      	b.n	800a934 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa41 	bl	800adae <USBD_CtlError>
          err++;
 800a92c:	7afb      	ldrb	r3, [r7, #11]
 800a92e:	3301      	adds	r3, #1
 800a930:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a932:	bf00      	nop
      }
      break;
 800a934:	e037      	b.n	800a9a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	7c1b      	ldrb	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d109      	bne.n	800a952 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	f107 0208 	add.w	r2, r7, #8
 800a94a:	4610      	mov	r0, r2
 800a94c:	4798      	blx	r3
 800a94e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a950:	e029      	b.n	800a9a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fa2a 	bl	800adae <USBD_CtlError>
        err++;
 800a95a:	7afb      	ldrb	r3, [r7, #11]
 800a95c:	3301      	adds	r3, #1
 800a95e:	72fb      	strb	r3, [r7, #11]
      break;
 800a960:	e021      	b.n	800a9a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7c1b      	ldrb	r3, [r3, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10d      	bne.n	800a986 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a972:	f107 0208 	add.w	r2, r7, #8
 800a976:	4610      	mov	r0, r2
 800a978:	4798      	blx	r3
 800a97a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3301      	adds	r3, #1
 800a980:	2207      	movs	r2, #7
 800a982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a984:	e00f      	b.n	800a9a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa10 	bl	800adae <USBD_CtlError>
        err++;
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	3301      	adds	r3, #1
 800a992:	72fb      	strb	r3, [r7, #11]
      break;
 800a994:	e007      	b.n	800a9a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fa08 	bl	800adae <USBD_CtlError>
      err++;
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a9a4:	bf00      	nop
  }

  if (err != 0U)
 800a9a6:	7afb      	ldrb	r3, [r7, #11]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d11e      	bne.n	800a9ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	88db      	ldrh	r3, [r3, #6]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d016      	beq.n	800a9e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a9b4:	893b      	ldrh	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00e      	beq.n	800a9d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	88da      	ldrh	r2, [r3, #6]
 800a9be:	893b      	ldrh	r3, [r7, #8]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bf28      	it	cs
 800a9c4:	4613      	movcs	r3, r2
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9ca:	893b      	ldrh	r3, [r7, #8]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fa5d 	bl	800ae90 <USBD_CtlSendData>
 800a9d6:	e009      	b.n	800a9ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f9e7 	bl	800adae <USBD_CtlError>
 800a9e0:	e004      	b.n	800a9ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 faae 	bl	800af44 <USBD_CtlSendStatus>
 800a9e8:	e000      	b.n	800a9ec <USBD_GetDescriptor+0x2cc>
    return;
 800a9ea:	bf00      	nop
  }
}
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop

0800a9f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	889b      	ldrh	r3, [r3, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d131      	bne.n	800aa6a <USBD_SetAddress+0x76>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	88db      	ldrh	r3, [r3, #6]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d12d      	bne.n	800aa6a <USBD_SetAddress+0x76>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	885b      	ldrh	r3, [r3, #2]
 800aa12:	2b7f      	cmp	r3, #127	; 0x7f
 800aa14:	d829      	bhi.n	800aa6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	885b      	ldrh	r3, [r3, #2]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d104      	bne.n	800aa38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f9bc 	bl	800adae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa36:	e01d      	b.n	800aa74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	7bfa      	ldrb	r2, [r7, #15]
 800aa3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f003 fdf1 	bl	800e62c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fa7a 	bl	800af44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5e:	e009      	b.n	800aa74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa68:	e004      	b.n	800aa74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f99e 	bl	800adae <USBD_CtlError>
  }
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	885b      	ldrh	r3, [r3, #2]
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	4b4e      	ldr	r3, [pc, #312]	; (800abcc <USBD_SetConfig+0x150>)
 800aa92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa94:	4b4d      	ldr	r3, [pc, #308]	; (800abcc <USBD_SetConfig+0x150>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d905      	bls.n	800aaa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f985 	bl	800adae <USBD_CtlError>
    return USBD_FAIL;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e08c      	b.n	800abc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d002      	beq.n	800aaba <USBD_SetConfig+0x3e>
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d029      	beq.n	800ab0c <USBD_SetConfig+0x90>
 800aab8:	e075      	b.n	800aba6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aaba:	4b44      	ldr	r3, [pc, #272]	; (800abcc <USBD_SetConfig+0x150>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d020      	beq.n	800ab04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aac2:	4b42      	ldr	r3, [pc, #264]	; (800abcc <USBD_SetConfig+0x150>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aacc:	4b3f      	ldr	r3, [pc, #252]	; (800abcc <USBD_SetConfig+0x150>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7fe ffe7 	bl	8009aa6 <USBD_SetClassConfig>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d008      	beq.n	800aaf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f962 	bl	800adae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2202      	movs	r2, #2
 800aaee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aaf2:	e065      	b.n	800abc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa25 	bl	800af44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2203      	movs	r2, #3
 800aafe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab02:	e05d      	b.n	800abc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fa1d 	bl	800af44 <USBD_CtlSendStatus>
      break;
 800ab0a:	e059      	b.n	800abc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab0c:	4b2f      	ldr	r3, [pc, #188]	; (800abcc <USBD_SetConfig+0x150>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d112      	bne.n	800ab3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab1c:	4b2b      	ldr	r3, [pc, #172]	; (800abcc <USBD_SetConfig+0x150>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab26:	4b29      	ldr	r3, [pc, #164]	; (800abcc <USBD_SetConfig+0x150>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7fe ffd6 	bl	8009ade <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa06 	bl	800af44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab38:	e042      	b.n	800abc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab3a:	4b24      	ldr	r3, [pc, #144]	; (800abcc <USBD_SetConfig+0x150>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d02a      	beq.n	800ab9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7fe ffc4 	bl	8009ade <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab56:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <USBD_SetConfig+0x150>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <USBD_SetConfig+0x150>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fe ff9d 	bl	8009aa6 <USBD_SetClassConfig>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f918 	bl	800adae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	4619      	mov	r1, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7fe ffa9 	bl	8009ade <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab94:	e014      	b.n	800abc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f9d4 	bl	800af44 <USBD_CtlSendStatus>
      break;
 800ab9c:	e010      	b.n	800abc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f9d0 	bl	800af44 <USBD_CtlSendStatus>
      break;
 800aba4:	e00c      	b.n	800abc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f900 	bl	800adae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abae:	4b07      	ldr	r3, [pc, #28]	; (800abcc <USBD_SetConfig+0x150>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7fe ff92 	bl	8009ade <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abba:	2303      	movs	r3, #3
 800abbc:	73fb      	strb	r3, [r7, #15]
      break;
 800abbe:	bf00      	nop
  }

  return ret;
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	200005b8 	.word	0x200005b8

0800abd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d004      	beq.n	800abec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8e2 	bl	800adae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abea:	e023      	b.n	800ac34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	dc02      	bgt.n	800abfe <USBD_GetConfig+0x2e>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc03      	bgt.n	800ac04 <USBD_GetConfig+0x34>
 800abfc:	e015      	b.n	800ac2a <USBD_GetConfig+0x5a>
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d00b      	beq.n	800ac1a <USBD_GetConfig+0x4a>
 800ac02:	e012      	b.n	800ac2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f93c 	bl	800ae90 <USBD_CtlSendData>
        break;
 800ac18:	e00c      	b.n	800ac34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f934 	bl	800ae90 <USBD_CtlSendData>
        break;
 800ac28:	e004      	b.n	800ac34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f8be 	bl	800adae <USBD_CtlError>
        break;
 800ac32:	bf00      	nop
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d81e      	bhi.n	800ac92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	88db      	ldrh	r3, [r3, #6]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d004      	beq.n	800ac66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f8a5 	bl	800adae <USBD_CtlError>
        break;
 800ac64:	e01a      	b.n	800ac9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f043 0202 	orr.w	r2, r3, #2
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	330c      	adds	r3, #12
 800ac86:	2202      	movs	r2, #2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f900 	bl	800ae90 <USBD_CtlSendData>
      break;
 800ac90:	e004      	b.n	800ac9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f88a 	bl	800adae <USBD_CtlError>
      break;
 800ac9a:	bf00      	nop
  }
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d107      	bne.n	800acc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f940 	bl	800af44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acc4:	e013      	b.n	800acee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d10b      	bne.n	800ace6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	889b      	ldrh	r3, [r3, #4]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f930 	bl	800af44 <USBD_CtlSendStatus>
}
 800ace4:	e003      	b.n	800acee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f860 	bl	800adae <USBD_CtlError>
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b082      	sub	sp, #8
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d80b      	bhi.n	800ad26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	885b      	ldrh	r3, [r3, #2]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d10c      	bne.n	800ad30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f910 	bl	800af44 <USBD_CtlSendStatus>
      }
      break;
 800ad24:	e004      	b.n	800ad30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f840 	bl	800adae <USBD_CtlError>
      break;
 800ad2e:	e000      	b.n	800ad32 <USBD_ClrFeature+0x3c>
      break;
 800ad30:	bf00      	nop
  }
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3301      	adds	r3, #1
 800ad54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3301      	adds	r3, #1
 800ad62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f7ff fa41 	bl	800a1ec <SWAPBYTE>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3301      	adds	r3, #1
 800ad76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7ff fa34 	bl	800a1ec <SWAPBYTE>
 800ad84:	4603      	mov	r3, r0
 800ad86:	461a      	mov	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7ff fa27 	bl	800a1ec <SWAPBYTE>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	461a      	mov	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	80da      	strh	r2, [r3, #6]
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800adb8:	2180      	movs	r1, #128	; 0x80
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f003 fbcc 	bl	800e558 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adc0:	2100      	movs	r1, #0
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f003 fbc8 	bl	800e558 <USBD_LL_StallEP>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d036      	beq.n	800ae54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800adea:	6938      	ldr	r0, [r7, #16]
 800adec:	f000 f836 	bl	800ae5c <USBD_GetLen>
 800adf0:	4603      	mov	r3, r0
 800adf2:	3301      	adds	r3, #1
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	4413      	add	r3, r2
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	7812      	ldrb	r2, [r2, #0]
 800ae08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	4413      	add	r3, r2
 800ae16:	2203      	movs	r2, #3
 800ae18:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae20:	e013      	b.n	800ae4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	4413      	add	r3, r2
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	7812      	ldrb	r2, [r2, #0]
 800ae2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	3301      	adds	r3, #1
 800ae32:	613b      	str	r3, [r7, #16]
    idx++;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	3301      	adds	r3, #1
 800ae38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	4413      	add	r3, r2
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
 800ae46:	3301      	adds	r3, #1
 800ae48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e7      	bne.n	800ae22 <USBD_GetString+0x52>
 800ae52:	e000      	b.n	800ae56 <USBD_GetString+0x86>
    return;
 800ae54:	bf00      	nop
  }
}
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae6c:	e005      	b.n	800ae7a <USBD_GetLen+0x1e>
  {
    len++;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	3301      	adds	r3, #1
 800ae72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f5      	bne.n	800ae6e <USBD_GetLen+0x12>
  }

  return len;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f003 fbd7 	bl	800e66a <USBD_LL_Transmit>

  return USBD_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	2100      	movs	r1, #0
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f003 fbc6 	bl	800e66a <USBD_LL_Transmit>

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2203      	movs	r2, #3
 800aef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	2100      	movs	r1, #0
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f003 fbca 	bl	800e6ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	60f8      	str	r0, [r7, #12]
 800af2a:	60b9      	str	r1, [r7, #8]
 800af2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	2100      	movs	r1, #0
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f003 fbb9 	bl	800e6ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2204      	movs	r2, #4
 800af50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af54:	2300      	movs	r3, #0
 800af56:	2200      	movs	r2, #0
 800af58:	2100      	movs	r1, #0
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f003 fb85 	bl	800e66a <USBD_LL_Transmit>

  return USBD_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2205      	movs	r2, #5
 800af76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af7a:	2300      	movs	r3, #0
 800af7c:	2200      	movs	r2, #0
 800af7e:	2100      	movs	r1, #0
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f003 fb93 	bl	800e6ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <__NVIC_SetPriority>:
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	6039      	str	r1, [r7, #0]
 800af9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	db0a      	blt.n	800afba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	490c      	ldr	r1, [pc, #48]	; (800afdc <__NVIC_SetPriority+0x4c>)
 800afaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afae:	0112      	lsls	r2, r2, #4
 800afb0:	b2d2      	uxtb	r2, r2
 800afb2:	440b      	add	r3, r1
 800afb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800afb8:	e00a      	b.n	800afd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	4908      	ldr	r1, [pc, #32]	; (800afe0 <__NVIC_SetPriority+0x50>)
 800afc0:	79fb      	ldrb	r3, [r7, #7]
 800afc2:	f003 030f 	and.w	r3, r3, #15
 800afc6:	3b04      	subs	r3, #4
 800afc8:	0112      	lsls	r2, r2, #4
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	440b      	add	r3, r1
 800afce:	761a      	strb	r2, [r3, #24]
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	e000e100 	.word	0xe000e100
 800afe0:	e000ed00 	.word	0xe000ed00

0800afe4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800afe8:	2100      	movs	r1, #0
 800afea:	f06f 0004 	mvn.w	r0, #4
 800afee:	f7ff ffcf 	bl	800af90 <__NVIC_SetPriority>
#endif
}
 800aff2:	bf00      	nop
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800affe:	f3ef 8305 	mrs	r3, IPSR
 800b002:	603b      	str	r3, [r7, #0]
  return(result);
 800b004:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b00a:	f06f 0305 	mvn.w	r3, #5
 800b00e:	607b      	str	r3, [r7, #4]
 800b010:	e00c      	b.n	800b02c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b012:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <osKernelInitialize+0x44>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d105      	bne.n	800b026 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b01a:	4b08      	ldr	r3, [pc, #32]	; (800b03c <osKernelInitialize+0x44>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b020:	2300      	movs	r3, #0
 800b022:	607b      	str	r3, [r7, #4]
 800b024:	e002      	b.n	800b02c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b026:	f04f 33ff 	mov.w	r3, #4294967295
 800b02a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b02c:	687b      	ldr	r3, [r7, #4]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	200005bc 	.word	0x200005bc

0800b040 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b046:	f3ef 8305 	mrs	r3, IPSR
 800b04a:	603b      	str	r3, [r7, #0]
  return(result);
 800b04c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b052:	f06f 0305 	mvn.w	r3, #5
 800b056:	607b      	str	r3, [r7, #4]
 800b058:	e010      	b.n	800b07c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b05a:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <osKernelStart+0x48>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d109      	bne.n	800b076 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b062:	f7ff ffbf 	bl	800afe4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b066:	4b08      	ldr	r3, [pc, #32]	; (800b088 <osKernelStart+0x48>)
 800b068:	2202      	movs	r2, #2
 800b06a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b06c:	f001 f87c 	bl	800c168 <vTaskStartScheduler>
      stat = osOK;
 800b070:	2300      	movs	r3, #0
 800b072:	607b      	str	r3, [r7, #4]
 800b074:	e002      	b.n	800b07c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b076:	f04f 33ff 	mov.w	r3, #4294967295
 800b07a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b07c:	687b      	ldr	r3, [r7, #4]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200005bc 	.word	0x200005bc

0800b08c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08e      	sub	sp, #56	; 0x38
 800b090:	af04      	add	r7, sp, #16
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b098:	2300      	movs	r3, #0
 800b09a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b09c:	f3ef 8305 	mrs	r3, IPSR
 800b0a0:	617b      	str	r3, [r7, #20]
  return(result);
 800b0a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d17e      	bne.n	800b1a6 <osThreadNew+0x11a>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d07b      	beq.n	800b1a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b0ae:	2380      	movs	r3, #128	; 0x80
 800b0b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b0b2:	2318      	movs	r3, #24
 800b0b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b0be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d045      	beq.n	800b152 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <osThreadNew+0x48>
        name = attr->name;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d008      	beq.n	800b0fa <osThreadNew+0x6e>
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	2b38      	cmp	r3, #56	; 0x38
 800b0ec:	d805      	bhi.n	800b0fa <osThreadNew+0x6e>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d001      	beq.n	800b0fe <osThreadNew+0x72>
        return (NULL);
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e054      	b.n	800b1a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	089b      	lsrs	r3, r3, #2
 800b10c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00e      	beq.n	800b134 <osThreadNew+0xa8>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	2bbb      	cmp	r3, #187	; 0xbb
 800b11c:	d90a      	bls.n	800b134 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b122:	2b00      	cmp	r3, #0
 800b124:	d006      	beq.n	800b134 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <osThreadNew+0xa8>
        mem = 1;
 800b12e:	2301      	movs	r3, #1
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	e010      	b.n	800b156 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10c      	bne.n	800b156 <osThreadNew+0xca>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d108      	bne.n	800b156 <osThreadNew+0xca>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d104      	bne.n	800b156 <osThreadNew+0xca>
          mem = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61bb      	str	r3, [r7, #24]
 800b150:	e001      	b.n	800b156 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d110      	bne.n	800b17e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b164:	9202      	str	r2, [sp, #8]
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	6a3a      	ldr	r2, [r7, #32]
 800b170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 fe0c 	bl	800bd90 <xTaskCreateStatic>
 800b178:	4603      	mov	r3, r0
 800b17a:	613b      	str	r3, [r7, #16]
 800b17c:	e013      	b.n	800b1a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d110      	bne.n	800b1a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	b29a      	uxth	r2, r3
 800b188:	f107 0310 	add.w	r3, r7, #16
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 fe57 	bl	800be4a <xTaskCreate>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d001      	beq.n	800b1a6 <osThreadNew+0x11a>
            hTask = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1a6:	693b      	ldr	r3, [r7, #16]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3728      	adds	r7, #40	; 0x28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1b8:	f3ef 8305 	mrs	r3, IPSR
 800b1bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d003      	beq.n	800b1cc <osDelay+0x1c>
    stat = osErrorISR;
 800b1c4:	f06f 0305 	mvn.w	r3, #5
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	e007      	b.n	800b1dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d002      	beq.n	800b1dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 ff92 	bl	800c100 <vTaskDelay>
    }
  }

  return (stat);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4a07      	ldr	r2, [pc, #28]	; (800b214 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4a06      	ldr	r2, [pc, #24]	; (800b218 <vApplicationGetIdleTaskMemory+0x30>)
 800b1fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2280      	movs	r2, #128	; 0x80
 800b204:	601a      	str	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	200005c0 	.word	0x200005c0
 800b218:	2000067c 	.word	0x2000067c

0800b21c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4a07      	ldr	r2, [pc, #28]	; (800b248 <vApplicationGetTimerTaskMemory+0x2c>)
 800b22c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	4a06      	ldr	r2, [pc, #24]	; (800b24c <vApplicationGetTimerTaskMemory+0x30>)
 800b232:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b23a:	601a      	str	r2, [r3, #0]
}
 800b23c:	bf00      	nop
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	2000087c 	.word	0x2000087c
 800b24c:	20000938 	.word	0x20000938

0800b250 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f103 0208 	add.w	r2, r3, #8
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f04f 32ff 	mov.w	r2, #4294967295
 800b268:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f103 0208 	add.w	r2, r3, #8
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f103 0208 	add.w	r2, r3, #8
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b29e:	bf00      	nop
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b085      	sub	sp, #20
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b308:	d103      	bne.n	800b312 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	e00c      	b.n	800b32c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3308      	adds	r3, #8
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	e002      	b.n	800b320 <vListInsert+0x2e>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d2f6      	bcs.n	800b31a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	601a      	str	r2, [r3, #0]
}
 800b358:	bf00      	nop
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	6892      	ldr	r2, [r2, #8]
 800b37a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6852      	ldr	r2, [r2, #4]
 800b384:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d103      	bne.n	800b398 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	1e5a      	subs	r2, r3, #1
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3e2:	f002 f9bf 	bl	800d764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	68f9      	ldr	r1, [r7, #12]
 800b3f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3f2:	fb01 f303 	mul.w	r3, r1, r3
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b412:	3b01      	subs	r3, #1
 800b414:	68f9      	ldr	r1, [r7, #12]
 800b416:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b418:	fb01 f303 	mul.w	r3, r1, r3
 800b41c:	441a      	add	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	22ff      	movs	r2, #255	; 0xff
 800b426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	22ff      	movs	r2, #255	; 0xff
 800b42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d114      	bne.n	800b462 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01a      	beq.n	800b476 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3310      	adds	r3, #16
 800b444:	4618      	mov	r0, r3
 800b446:	f001 f929 	bl	800c69c <xTaskRemoveFromEventList>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d012      	beq.n	800b476 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b450:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <xQueueGenericReset+0xcc>)
 800b452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	e009      	b.n	800b476 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3310      	adds	r3, #16
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff fef2 	bl	800b250 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3324      	adds	r3, #36	; 0x24
 800b470:	4618      	mov	r0, r3
 800b472:	f7ff feed 	bl	800b250 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b476:	f002 f9a5 	bl	800d7c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b47a:	2301      	movs	r3, #1
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	e000ed04 	.word	0xe000ed04

0800b488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08e      	sub	sp, #56	; 0x38
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <xQueueGenericCreateStatic+0x52>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <xQueueGenericCreateStatic+0x56>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <xQueueGenericCreateStatic+0x58>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10a      	bne.n	800b4fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	623b      	str	r3, [r7, #32]
}
 800b4f6:	bf00      	nop
 800b4f8:	e7fe      	b.n	800b4f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <xQueueGenericCreateStatic+0x7e>
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <xQueueGenericCreateStatic+0x82>
 800b506:	2301      	movs	r3, #1
 800b508:	e000      	b.n	800b50c <xQueueGenericCreateStatic+0x84>
 800b50a:	2300      	movs	r3, #0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	61fb      	str	r3, [r7, #28]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b526:	2350      	movs	r3, #80	; 0x50
 800b528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b50      	cmp	r3, #80	; 0x50
 800b52e:	d00a      	beq.n	800b546 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	61bb      	str	r3, [r7, #24]
}
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b546:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00d      	beq.n	800b56e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b554:	2201      	movs	r2, #1
 800b556:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b55a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	4613      	mov	r3, r2
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f805 	bl	800b578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b570:	4618      	mov	r0, r3
 800b572:	3730      	adds	r7, #48	; 0x30
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d103      	bne.n	800b594 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	e002      	b.n	800b59a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	69b8      	ldr	r0, [r7, #24]
 800b5aa:	f7ff ff05 	bl	800b3b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	78fa      	ldrb	r2, [r7, #3]
 800b5b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5b6:	bf00      	nop
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
	...

0800b5c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08e      	sub	sp, #56	; 0x38
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xQueueGenericSend+0x32>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <xQueueGenericSend+0x40>
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <xQueueGenericSend+0x44>
 800b600:	2301      	movs	r3, #1
 800b602:	e000      	b.n	800b606 <xQueueGenericSend+0x46>
 800b604:	2300      	movs	r3, #0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <xQueueGenericSend+0x60>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d103      	bne.n	800b62e <xQueueGenericSend+0x6e>
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d101      	bne.n	800b632 <xQueueGenericSend+0x72>
 800b62e:	2301      	movs	r3, #1
 800b630:	e000      	b.n	800b634 <xQueueGenericSend+0x74>
 800b632:	2300      	movs	r3, #0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <xQueueGenericSend+0x8e>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	623b      	str	r3, [r7, #32]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b64e:	f001 f9e7 	bl	800ca20 <xTaskGetSchedulerState>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d102      	bne.n	800b65e <xQueueGenericSend+0x9e>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <xQueueGenericSend+0xa2>
 800b65e:	2301      	movs	r3, #1
 800b660:	e000      	b.n	800b664 <xQueueGenericSend+0xa4>
 800b662:	2300      	movs	r3, #0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <xQueueGenericSend+0xbe>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	61fb      	str	r3, [r7, #28]
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b67e:	f002 f871 	bl	800d764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d302      	bcc.n	800b694 <xQueueGenericSend+0xd4>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b02      	cmp	r3, #2
 800b692:	d129      	bne.n	800b6e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	68b9      	ldr	r1, [r7, #8]
 800b698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b69a:	f000 fa0b 	bl	800bab4 <prvCopyDataToQueue>
 800b69e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d010      	beq.n	800b6ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	3324      	adds	r3, #36	; 0x24
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fff5 	bl	800c69c <xTaskRemoveFromEventList>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d013      	beq.n	800b6e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6b8:	4b3f      	ldr	r3, [pc, #252]	; (800b7b8 <xQueueGenericSend+0x1f8>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	e00a      	b.n	800b6e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d007      	beq.n	800b6e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6d0:	4b39      	ldr	r3, [pc, #228]	; (800b7b8 <xQueueGenericSend+0x1f8>)
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6e0:	f002 f870 	bl	800d7c4 <vPortExitCritical>
				return pdPASS;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e063      	b.n	800b7b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d103      	bne.n	800b6f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6ee:	f002 f869 	bl	800d7c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e05c      	b.n	800b7b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6fc:	f107 0314 	add.w	r3, r7, #20
 800b700:	4618      	mov	r0, r3
 800b702:	f001 f82f 	bl	800c764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b706:	2301      	movs	r3, #1
 800b708:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b70a:	f002 f85b 	bl	800d7c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b70e:	f000 fd9b 	bl	800c248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b712:	f002 f827 	bl	800d764 <vPortEnterCritical>
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b71c:	b25b      	sxtb	r3, r3
 800b71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b722:	d103      	bne.n	800b72c <xQueueGenericSend+0x16c>
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b732:	b25b      	sxtb	r3, r3
 800b734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b738:	d103      	bne.n	800b742 <xQueueGenericSend+0x182>
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b742:	f002 f83f 	bl	800d7c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b746:	1d3a      	adds	r2, r7, #4
 800b748:	f107 0314 	add.w	r3, r7, #20
 800b74c:	4611      	mov	r1, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f001 f81e 	bl	800c790 <xTaskCheckForTimeOut>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d124      	bne.n	800b7a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b75a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b75c:	f000 faa2 	bl	800bca4 <prvIsQueueFull>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d018      	beq.n	800b798 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	3310      	adds	r3, #16
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 ff44 	bl	800c5fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b776:	f000 fa2d 	bl	800bbd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b77a:	f000 fd73 	bl	800c264 <xTaskResumeAll>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	f47f af7c 	bne.w	800b67e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b786:	4b0c      	ldr	r3, [pc, #48]	; (800b7b8 <xQueueGenericSend+0x1f8>)
 800b788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	e772      	b.n	800b67e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b79a:	f000 fa1b 	bl	800bbd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b79e:	f000 fd61 	bl	800c264 <xTaskResumeAll>
 800b7a2:	e76c      	b.n	800b67e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7a6:	f000 fa15 	bl	800bbd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7aa:	f000 fd5b 	bl	800c264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3738      	adds	r7, #56	; 0x38
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b090      	sub	sp, #64	; 0x40
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7e6:	bf00      	nop
 800b7e8:	e7fe      	b.n	800b7e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d103      	bne.n	800b7f8 <xQueueGenericSendFromISR+0x3c>
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <xQueueGenericSendFromISR+0x40>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <xQueueGenericSendFromISR+0x42>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d103      	bne.n	800b826 <xQueueGenericSendFromISR+0x6a>
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b822:	2b01      	cmp	r3, #1
 800b824:	d101      	bne.n	800b82a <xQueueGenericSendFromISR+0x6e>
 800b826:	2301      	movs	r3, #1
 800b828:	e000      	b.n	800b82c <xQueueGenericSendFromISR+0x70>
 800b82a:	2300      	movs	r3, #0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10a      	bne.n	800b846 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	623b      	str	r3, [r7, #32]
}
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b846:	f002 f86f 	bl	800d928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b84a:	f3ef 8211 	mrs	r2, BASEPRI
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	61fa      	str	r2, [r7, #28]
 800b860:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b862:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b864:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86e:	429a      	cmp	r2, r3
 800b870:	d302      	bcc.n	800b878 <xQueueGenericSendFromISR+0xbc>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b02      	cmp	r3, #2
 800b876:	d12f      	bne.n	800b8d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b88e:	f000 f911 	bl	800bab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b892:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89a:	d112      	bne.n	800b8c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d016      	beq.n	800b8d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	3324      	adds	r3, #36	; 0x24
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 fef7 	bl	800c69c <xTaskRemoveFromEventList>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00e      	beq.n	800b8d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00b      	beq.n	800b8d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	e007      	b.n	800b8d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	b25a      	sxtb	r2, r3
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b8d6:	e001      	b.n	800b8dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3740      	adds	r7, #64	; 0x40
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08c      	sub	sp, #48	; 0x30
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <xQueueReceive+0x30>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	623b      	str	r3, [r7, #32]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d103      	bne.n	800b932 <xQueueReceive+0x3e>
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <xQueueReceive+0x42>
 800b932:	2301      	movs	r3, #1
 800b934:	e000      	b.n	800b938 <xQueueReceive+0x44>
 800b936:	2300      	movs	r3, #0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <xQueueReceive+0x5e>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	61fb      	str	r3, [r7, #28]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b952:	f001 f865 	bl	800ca20 <xTaskGetSchedulerState>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <xQueueReceive+0x6e>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <xQueueReceive+0x72>
 800b962:	2301      	movs	r3, #1
 800b964:	e000      	b.n	800b968 <xQueueReceive+0x74>
 800b966:	2300      	movs	r3, #0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <xQueueReceive+0x8e>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	61bb      	str	r3, [r7, #24]
}
 800b97e:	bf00      	nop
 800b980:	e7fe      	b.n	800b980 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b982:	f001 feef 	bl	800d764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d01f      	beq.n	800b9d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b996:	f000 f8f7 	bl	800bb88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	1e5a      	subs	r2, r3, #1
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00f      	beq.n	800b9ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ac:	3310      	adds	r3, #16
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fe74 	bl	800c69c <xTaskRemoveFromEventList>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d007      	beq.n	800b9ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9ba:	4b3d      	ldr	r3, [pc, #244]	; (800bab0 <xQueueReceive+0x1bc>)
 800b9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9ca:	f001 fefb 	bl	800d7c4 <vPortExitCritical>
				return pdPASS;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e069      	b.n	800baa6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d103      	bne.n	800b9e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9d8:	f001 fef4 	bl	800d7c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e062      	b.n	800baa6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9e6:	f107 0310 	add.w	r3, r7, #16
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 feba 	bl	800c764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9f4:	f001 fee6 	bl	800d7c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9f8:	f000 fc26 	bl	800c248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9fc:	f001 feb2 	bl	800d764 <vPortEnterCritical>
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba06:	b25b      	sxtb	r3, r3
 800ba08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0c:	d103      	bne.n	800ba16 <xQueueReceive+0x122>
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba1c:	b25b      	sxtb	r3, r3
 800ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba22:	d103      	bne.n	800ba2c <xQueueReceive+0x138>
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba2c:	f001 feca 	bl	800d7c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba30:	1d3a      	adds	r2, r7, #4
 800ba32:	f107 0310 	add.w	r3, r7, #16
 800ba36:	4611      	mov	r1, r2
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 fea9 	bl	800c790 <xTaskCheckForTimeOut>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d123      	bne.n	800ba8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba46:	f000 f917 	bl	800bc78 <prvIsQueueEmpty>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d017      	beq.n	800ba80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	3324      	adds	r3, #36	; 0x24
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	4611      	mov	r1, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 fdcf 	bl	800c5fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba60:	f000 f8b8 	bl	800bbd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba64:	f000 fbfe 	bl	800c264 <xTaskResumeAll>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d189      	bne.n	800b982 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba6e:	4b10      	ldr	r3, [pc, #64]	; (800bab0 <xQueueReceive+0x1bc>)
 800ba70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	e780      	b.n	800b982 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba82:	f000 f8a7 	bl	800bbd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba86:	f000 fbed 	bl	800c264 <xTaskResumeAll>
 800ba8a:	e77a      	b.n	800b982 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba8e:	f000 f8a1 	bl	800bbd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba92:	f000 fbe7 	bl	800c264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba98:	f000 f8ee 	bl	800bc78 <prvIsQueueEmpty>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f43f af6f 	beq.w	800b982 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800baa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3730      	adds	r7, #48	; 0x30
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	e000ed04 	.word	0xe000ed04

0800bab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10d      	bne.n	800baee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d14d      	bne.n	800bb76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 ffbc 	bl	800ca5c <xTaskPriorityDisinherit>
 800bae4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	609a      	str	r2, [r3, #8]
 800baec:	e043      	b.n	800bb76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d119      	bne.n	800bb28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6858      	ldr	r0, [r3, #4]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	461a      	mov	r2, r3
 800bafe:	68b9      	ldr	r1, [r7, #8]
 800bb00:	f003 f905 	bl	800ed0e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d32b      	bcc.n	800bb76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	605a      	str	r2, [r3, #4]
 800bb26:	e026      	b.n	800bb76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68d8      	ldr	r0, [r3, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	461a      	mov	r2, r3
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	f003 f8eb 	bl	800ed0e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb40:	425b      	negs	r3, r3
 800bb42:	441a      	add	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	68da      	ldr	r2, [r3, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d207      	bcs.n	800bb64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	689a      	ldr	r2, [r3, #8]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5c:	425b      	negs	r3, r3
 800bb5e:	441a      	add	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d105      	bne.n	800bb76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb7e:	697b      	ldr	r3, [r7, #20]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d018      	beq.n	800bbcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba2:	441a      	add	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68da      	ldr	r2, [r3, #12]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d303      	bcc.n	800bbbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68d9      	ldr	r1, [r3, #12]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	6838      	ldr	r0, [r7, #0]
 800bbc8:	f003 f8a1 	bl	800ed0e <memcpy>
	}
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbdc:	f001 fdc2 	bl	800d764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbe8:	e011      	b.n	800bc0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d012      	beq.n	800bc18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3324      	adds	r3, #36	; 0x24
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 fd50 	bl	800c69c <xTaskRemoveFromEventList>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d001      	beq.n	800bc06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc02:	f000 fe27 	bl	800c854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dce9      	bgt.n	800bbea <prvUnlockQueue+0x16>
 800bc16:	e000      	b.n	800bc1a <prvUnlockQueue+0x46>
					break;
 800bc18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	22ff      	movs	r2, #255	; 0xff
 800bc1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc22:	f001 fdcf 	bl	800d7c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc26:	f001 fd9d 	bl	800d764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc32:	e011      	b.n	800bc58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d012      	beq.n	800bc62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3310      	adds	r3, #16
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 fd2b 	bl	800c69c <xTaskRemoveFromEventList>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc4c:	f000 fe02 	bl	800c854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dce9      	bgt.n	800bc34 <prvUnlockQueue+0x60>
 800bc60:	e000      	b.n	800bc64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	22ff      	movs	r2, #255	; 0xff
 800bc68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc6c:	f001 fdaa 	bl	800d7c4 <vPortExitCritical>
}
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc80:	f001 fd70 	bl	800d764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	e001      	b.n	800bc96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc92:	2300      	movs	r3, #0
 800bc94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc96:	f001 fd95 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcac:	f001 fd5a 	bl	800d764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d102      	bne.n	800bcc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	e001      	b.n	800bcc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcc6:	f001 fd7d 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800bcca:	68fb      	ldr	r3, [r7, #12]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	e014      	b.n	800bd0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bce4:	4a0f      	ldr	r2, [pc, #60]	; (800bd24 <vQueueAddToRegistry+0x50>)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10b      	bne.n	800bd08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bcf0:	490c      	ldr	r1, [pc, #48]	; (800bd24 <vQueueAddToRegistry+0x50>)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcfa:	4a0a      	ldr	r2, [pc, #40]	; (800bd24 <vQueueAddToRegistry+0x50>)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	4413      	add	r3, r2
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd06:	e006      	b.n	800bd16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60fb      	str	r3, [r7, #12]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b07      	cmp	r3, #7
 800bd12:	d9e7      	bls.n	800bce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	20000d38 	.word	0x20000d38

0800bd28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd38:	f001 fd14 	bl	800d764 <vPortEnterCritical>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd42:	b25b      	sxtb	r3, r3
 800bd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd48:	d103      	bne.n	800bd52 <vQueueWaitForMessageRestricted+0x2a>
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd58:	b25b      	sxtb	r3, r3
 800bd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5e:	d103      	bne.n	800bd68 <vQueueWaitForMessageRestricted+0x40>
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd68:	f001 fd2c 	bl	800d7c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d106      	bne.n	800bd82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	3324      	adds	r3, #36	; 0x24
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 fc61 	bl	800c644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd82:	6978      	ldr	r0, [r7, #20]
 800bd84:	f7ff ff26 	bl	800bbd4 <prvUnlockQueue>
	}
 800bd88:	bf00      	nop
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08e      	sub	sp, #56	; 0x38
 800bd94:	af04      	add	r7, sp, #16
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xTaskCreateStatic+0x2a>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	623b      	str	r3, [r7, #32]
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xTaskCreateStatic+0x46>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	61fb      	str	r3, [r7, #28]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bdd6:	23bc      	movs	r3, #188	; 0xbc
 800bdd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	2bbc      	cmp	r3, #188	; 0xbc
 800bdde:	d00a      	beq.n	800bdf6 <xTaskCreateStatic+0x66>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	61bb      	str	r3, [r7, #24]
}
 800bdf2:	bf00      	nop
 800bdf4:	e7fe      	b.n	800bdf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bdf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01e      	beq.n	800be3c <xTaskCreateStatic+0xac>
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	2b00      	cmp	r3, #0
 800be02:	d01b      	beq.n	800be3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	2202      	movs	r2, #2
 800be12:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be16:	2300      	movs	r3, #0
 800be18:	9303      	str	r3, [sp, #12]
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	9302      	str	r3, [sp, #8]
 800be1e:	f107 0314 	add.w	r3, r7, #20
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	68b9      	ldr	r1, [r7, #8]
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 f850 	bl	800bed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be36:	f000 f8f3 	bl	800c020 <prvAddNewTaskToReadyList>
 800be3a:	e001      	b.n	800be40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be40:	697b      	ldr	r3, [r7, #20]
	}
 800be42:	4618      	mov	r0, r3
 800be44:	3728      	adds	r7, #40	; 0x28
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b08c      	sub	sp, #48	; 0x30
 800be4e:	af04      	add	r7, sp, #16
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	603b      	str	r3, [r7, #0]
 800be56:	4613      	mov	r3, r2
 800be58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be5a:	88fb      	ldrh	r3, [r7, #6]
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4618      	mov	r0, r3
 800be60:	f001 fda2 	bl	800d9a8 <pvPortMalloc>
 800be64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00e      	beq.n	800be8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be6c:	20bc      	movs	r0, #188	; 0xbc
 800be6e:	f001 fd9b 	bl	800d9a8 <pvPortMalloc>
 800be72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	631a      	str	r2, [r3, #48]	; 0x30
 800be80:	e005      	b.n	800be8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be82:	6978      	ldr	r0, [r7, #20]
 800be84:	f001 fe5c 	bl	800db40 <vPortFree>
 800be88:	e001      	b.n	800be8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be8a:	2300      	movs	r3, #0
 800be8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d017      	beq.n	800bec4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be9c:	88fa      	ldrh	r2, [r7, #6]
 800be9e:	2300      	movs	r3, #0
 800bea0:	9303      	str	r3, [sp, #12]
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	68b9      	ldr	r1, [r7, #8]
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f000 f80e 	bl	800bed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beb8:	69f8      	ldr	r0, [r7, #28]
 800beba:	f000 f8b1 	bl	800c020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bebe:	2301      	movs	r3, #1
 800bec0:	61bb      	str	r3, [r7, #24]
 800bec2:	e002      	b.n	800beca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bec4:	f04f 33ff 	mov.w	r3, #4294967295
 800bec8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800beca:	69bb      	ldr	r3, [r7, #24]
	}
 800becc:	4618      	mov	r0, r3
 800bece:	3720      	adds	r7, #32
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
 800bee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	461a      	mov	r2, r3
 800beec:	21a5      	movs	r1, #165	; 0xa5
 800beee:	f002 ff1c 	bl	800ed2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800befc:	3b01      	subs	r3, #1
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	f023 0307 	bic.w	r3, r3, #7
 800bf0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	f003 0307 	and.w	r3, r3, #7
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	617b      	str	r3, [r7, #20]
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d01f      	beq.n	800bf72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf32:	2300      	movs	r3, #0
 800bf34:	61fb      	str	r3, [r7, #28]
 800bf36:	e012      	b.n	800bf5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	7819      	ldrb	r1, [r3, #0]
 800bf40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	4413      	add	r3, r2
 800bf46:	3334      	adds	r3, #52	; 0x34
 800bf48:	460a      	mov	r2, r1
 800bf4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	4413      	add	r3, r2
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d006      	beq.n	800bf66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	61fb      	str	r3, [r7, #28]
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	2b0f      	cmp	r3, #15
 800bf62:	d9e9      	bls.n	800bf38 <prvInitialiseNewTask+0x64>
 800bf64:	e000      	b.n	800bf68 <prvInitialiseNewTask+0x94>
			{
				break;
 800bf66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf70:	e003      	b.n	800bf7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	2b37      	cmp	r3, #55	; 0x37
 800bf7e:	d901      	bls.n	800bf84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf80:	2337      	movs	r3, #55	; 0x37
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	2200      	movs	r2, #0
 800bf94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	3304      	adds	r3, #4
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7ff f978 	bl	800b290 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	3318      	adds	r3, #24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff f973 	bl	800b290 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	3354      	adds	r3, #84	; 0x54
 800bfd4:	2260      	movs	r2, #96	; 0x60
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f002 fea6 	bl	800ed2a <memset>
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	4a0c      	ldr	r2, [pc, #48]	; (800c014 <prvInitialiseNewTask+0x140>)
 800bfe2:	659a      	str	r2, [r3, #88]	; 0x58
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	4a0c      	ldr	r2, [pc, #48]	; (800c018 <prvInitialiseNewTask+0x144>)
 800bfe8:	65da      	str	r2, [r3, #92]	; 0x5c
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	4a0b      	ldr	r2, [pc, #44]	; (800c01c <prvInitialiseNewTask+0x148>)
 800bfee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	68f9      	ldr	r1, [r7, #12]
 800bff4:	69b8      	ldr	r0, [r7, #24]
 800bff6:	f001 fa85 	bl	800d504 <pxPortInitialiseStack>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c00a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c00c:	bf00      	nop
 800c00e:	3720      	adds	r7, #32
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	08011d28 	.word	0x08011d28
 800c018:	08011d48 	.word	0x08011d48
 800c01c:	08011d08 	.word	0x08011d08

0800c020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c028:	f001 fb9c 	bl	800d764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c02c:	4b2d      	ldr	r3, [pc, #180]	; (800c0e4 <prvAddNewTaskToReadyList+0xc4>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3301      	adds	r3, #1
 800c032:	4a2c      	ldr	r2, [pc, #176]	; (800c0e4 <prvAddNewTaskToReadyList+0xc4>)
 800c034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c036:	4b2c      	ldr	r3, [pc, #176]	; (800c0e8 <prvAddNewTaskToReadyList+0xc8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c03e:	4a2a      	ldr	r2, [pc, #168]	; (800c0e8 <prvAddNewTaskToReadyList+0xc8>)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c044:	4b27      	ldr	r3, [pc, #156]	; (800c0e4 <prvAddNewTaskToReadyList+0xc4>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d110      	bne.n	800c06e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c04c:	f000 fc26 	bl	800c89c <prvInitialiseTaskLists>
 800c050:	e00d      	b.n	800c06e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c052:	4b26      	ldr	r3, [pc, #152]	; (800c0ec <prvAddNewTaskToReadyList+0xcc>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d109      	bne.n	800c06e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c05a:	4b23      	ldr	r3, [pc, #140]	; (800c0e8 <prvAddNewTaskToReadyList+0xc8>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	429a      	cmp	r2, r3
 800c066:	d802      	bhi.n	800c06e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c068:	4a1f      	ldr	r2, [pc, #124]	; (800c0e8 <prvAddNewTaskToReadyList+0xc8>)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c06e:	4b20      	ldr	r3, [pc, #128]	; (800c0f0 <prvAddNewTaskToReadyList+0xd0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	4a1e      	ldr	r2, [pc, #120]	; (800c0f0 <prvAddNewTaskToReadyList+0xd0>)
 800c076:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c078:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <prvAddNewTaskToReadyList+0xd0>)
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c084:	4b1b      	ldr	r3, [pc, #108]	; (800c0f4 <prvAddNewTaskToReadyList+0xd4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d903      	bls.n	800c094 <prvAddNewTaskToReadyList+0x74>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c090:	4a18      	ldr	r2, [pc, #96]	; (800c0f4 <prvAddNewTaskToReadyList+0xd4>)
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4a15      	ldr	r2, [pc, #84]	; (800c0f8 <prvAddNewTaskToReadyList+0xd8>)
 800c0a2:	441a      	add	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f7ff f8fd 	bl	800b2aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0b0:	f001 fb88 	bl	800d7c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0b4:	4b0d      	ldr	r3, [pc, #52]	; (800c0ec <prvAddNewTaskToReadyList+0xcc>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00e      	beq.n	800c0da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <prvAddNewTaskToReadyList+0xc8>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d207      	bcs.n	800c0da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <prvAddNewTaskToReadyList+0xdc>)
 800c0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	2000124c 	.word	0x2000124c
 800c0e8:	20000d78 	.word	0x20000d78
 800c0ec:	20001258 	.word	0x20001258
 800c0f0:	20001268 	.word	0x20001268
 800c0f4:	20001254 	.word	0x20001254
 800c0f8:	20000d7c 	.word	0x20000d7c
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d017      	beq.n	800c142 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c112:	4b13      	ldr	r3, [pc, #76]	; (800c160 <vTaskDelay+0x60>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00a      	beq.n	800c130 <vTaskDelay+0x30>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60bb      	str	r3, [r7, #8]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c130:	f000 f88a 	bl	800c248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c134:	2100      	movs	r1, #0
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fe42 	bl	800cdc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c13c:	f000 f892 	bl	800c264 <xTaskResumeAll>
 800c140:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d107      	bne.n	800c158 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c148:	4b06      	ldr	r3, [pc, #24]	; (800c164 <vTaskDelay+0x64>)
 800c14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c158:	bf00      	nop
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20001274 	.word	0x20001274
 800c164:	e000ed04 	.word	0xe000ed04

0800c168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c176:	463a      	mov	r2, r7
 800c178:	1d39      	adds	r1, r7, #4
 800c17a:	f107 0308 	add.w	r3, r7, #8
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff f832 	bl	800b1e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	9202      	str	r2, [sp, #8]
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	2300      	movs	r3, #0
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	2300      	movs	r3, #0
 800c194:	460a      	mov	r2, r1
 800c196:	4924      	ldr	r1, [pc, #144]	; (800c228 <vTaskStartScheduler+0xc0>)
 800c198:	4824      	ldr	r0, [pc, #144]	; (800c22c <vTaskStartScheduler+0xc4>)
 800c19a:	f7ff fdf9 	bl	800bd90 <xTaskCreateStatic>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4a23      	ldr	r2, [pc, #140]	; (800c230 <vTaskStartScheduler+0xc8>)
 800c1a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1a4:	4b22      	ldr	r3, [pc, #136]	; (800c230 <vTaskStartScheduler+0xc8>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	617b      	str	r3, [r7, #20]
 800c1b0:	e001      	b.n	800c1b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d102      	bne.n	800c1c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c1bc:	f000 fe54 	bl	800ce68 <xTimerCreateTimerTask>
 800c1c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d11b      	bne.n	800c200 <vTaskStartScheduler+0x98>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	613b      	str	r3, [r7, #16]
}
 800c1da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1dc:	4b15      	ldr	r3, [pc, #84]	; (800c234 <vTaskStartScheduler+0xcc>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3354      	adds	r3, #84	; 0x54
 800c1e2:	4a15      	ldr	r2, [pc, #84]	; (800c238 <vTaskStartScheduler+0xd0>)
 800c1e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1e6:	4b15      	ldr	r3, [pc, #84]	; (800c23c <vTaskStartScheduler+0xd4>)
 800c1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1ee:	4b14      	ldr	r3, [pc, #80]	; (800c240 <vTaskStartScheduler+0xd8>)
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1f4:	4b13      	ldr	r3, [pc, #76]	; (800c244 <vTaskStartScheduler+0xdc>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1fa:	f001 fa11 	bl	800d620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1fe:	e00e      	b.n	800c21e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c206:	d10a      	bne.n	800c21e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	60fb      	str	r3, [r7, #12]
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <vTaskStartScheduler+0xb4>
}
 800c21e:	bf00      	nop
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	08011c50 	.word	0x08011c50
 800c22c:	0800c86d 	.word	0x0800c86d
 800c230:	20001270 	.word	0x20001270
 800c234:	20000d78 	.word	0x20000d78
 800c238:	20000134 	.word	0x20000134
 800c23c:	2000126c 	.word	0x2000126c
 800c240:	20001258 	.word	0x20001258
 800c244:	20001250 	.word	0x20001250

0800c248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c24c:	4b04      	ldr	r3, [pc, #16]	; (800c260 <vTaskSuspendAll+0x18>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3301      	adds	r3, #1
 800c252:	4a03      	ldr	r2, [pc, #12]	; (800c260 <vTaskSuspendAll+0x18>)
 800c254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c256:	bf00      	nop
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	20001274 	.word	0x20001274

0800c264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c26e:	2300      	movs	r3, #0
 800c270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c272:	4b42      	ldr	r3, [pc, #264]	; (800c37c <xTaskResumeAll+0x118>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10a      	bne.n	800c290 <xTaskResumeAll+0x2c>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	603b      	str	r3, [r7, #0]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c290:	f001 fa68 	bl	800d764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c294:	4b39      	ldr	r3, [pc, #228]	; (800c37c <xTaskResumeAll+0x118>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3b01      	subs	r3, #1
 800c29a:	4a38      	ldr	r2, [pc, #224]	; (800c37c <xTaskResumeAll+0x118>)
 800c29c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c29e:	4b37      	ldr	r3, [pc, #220]	; (800c37c <xTaskResumeAll+0x118>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d162      	bne.n	800c36c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2a6:	4b36      	ldr	r3, [pc, #216]	; (800c380 <xTaskResumeAll+0x11c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d05e      	beq.n	800c36c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ae:	e02f      	b.n	800c310 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2b0:	4b34      	ldr	r3, [pc, #208]	; (800c384 <xTaskResumeAll+0x120>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	3318      	adds	r3, #24
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff f851 	bl	800b364 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7ff f84c 	bl	800b364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d0:	4b2d      	ldr	r3, [pc, #180]	; (800c388 <xTaskResumeAll+0x124>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d903      	bls.n	800c2e0 <xTaskResumeAll+0x7c>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	4a2a      	ldr	r2, [pc, #168]	; (800c388 <xTaskResumeAll+0x124>)
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4a27      	ldr	r2, [pc, #156]	; (800c38c <xTaskResumeAll+0x128>)
 800c2ee:	441a      	add	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	f7fe ffd7 	bl	800b2aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c300:	4b23      	ldr	r3, [pc, #140]	; (800c390 <xTaskResumeAll+0x12c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c306:	429a      	cmp	r2, r3
 800c308:	d302      	bcc.n	800c310 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c30a:	4b22      	ldr	r3, [pc, #136]	; (800c394 <xTaskResumeAll+0x130>)
 800c30c:	2201      	movs	r2, #1
 800c30e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c310:	4b1c      	ldr	r3, [pc, #112]	; (800c384 <xTaskResumeAll+0x120>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1cb      	bne.n	800c2b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c31e:	f000 fb5f 	bl	800c9e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c322:	4b1d      	ldr	r3, [pc, #116]	; (800c398 <xTaskResumeAll+0x134>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d010      	beq.n	800c350 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c32e:	f000 f847 	bl	800c3c0 <xTaskIncrementTick>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c338:	4b16      	ldr	r3, [pc, #88]	; (800c394 <xTaskResumeAll+0x130>)
 800c33a:	2201      	movs	r2, #1
 800c33c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3b01      	subs	r3, #1
 800c342:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f1      	bne.n	800c32e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c34a:	4b13      	ldr	r3, [pc, #76]	; (800c398 <xTaskResumeAll+0x134>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c350:	4b10      	ldr	r3, [pc, #64]	; (800c394 <xTaskResumeAll+0x130>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d009      	beq.n	800c36c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c358:	2301      	movs	r3, #1
 800c35a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <xTaskResumeAll+0x138>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c36c:	f001 fa2a 	bl	800d7c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c370:	68bb      	ldr	r3, [r7, #8]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20001274 	.word	0x20001274
 800c380:	2000124c 	.word	0x2000124c
 800c384:	2000120c 	.word	0x2000120c
 800c388:	20001254 	.word	0x20001254
 800c38c:	20000d7c 	.word	0x20000d7c
 800c390:	20000d78 	.word	0x20000d78
 800c394:	20001260 	.word	0x20001260
 800c398:	2000125c 	.word	0x2000125c
 800c39c:	e000ed04 	.word	0xe000ed04

0800c3a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <xTaskGetTickCount+0x1c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3ac:	687b      	ldr	r3, [r7, #4]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20001250 	.word	0x20001250

0800c3c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ca:	4b4f      	ldr	r3, [pc, #316]	; (800c508 <xTaskIncrementTick+0x148>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f040 808f 	bne.w	800c4f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3d4:	4b4d      	ldr	r3, [pc, #308]	; (800c50c <xTaskIncrementTick+0x14c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3dc:	4a4b      	ldr	r2, [pc, #300]	; (800c50c <xTaskIncrementTick+0x14c>)
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d120      	bne.n	800c42a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3e8:	4b49      	ldr	r3, [pc, #292]	; (800c510 <xTaskIncrementTick+0x150>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00a      	beq.n	800c408 <xTaskIncrementTick+0x48>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	603b      	str	r3, [r7, #0]
}
 800c404:	bf00      	nop
 800c406:	e7fe      	b.n	800c406 <xTaskIncrementTick+0x46>
 800c408:	4b41      	ldr	r3, [pc, #260]	; (800c510 <xTaskIncrementTick+0x150>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	60fb      	str	r3, [r7, #12]
 800c40e:	4b41      	ldr	r3, [pc, #260]	; (800c514 <xTaskIncrementTick+0x154>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a3f      	ldr	r2, [pc, #252]	; (800c510 <xTaskIncrementTick+0x150>)
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	4a3f      	ldr	r2, [pc, #252]	; (800c514 <xTaskIncrementTick+0x154>)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	4b3e      	ldr	r3, [pc, #248]	; (800c518 <xTaskIncrementTick+0x158>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3301      	adds	r3, #1
 800c422:	4a3d      	ldr	r2, [pc, #244]	; (800c518 <xTaskIncrementTick+0x158>)
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	f000 fadb 	bl	800c9e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c42a:	4b3c      	ldr	r3, [pc, #240]	; (800c51c <xTaskIncrementTick+0x15c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	429a      	cmp	r2, r3
 800c432:	d349      	bcc.n	800c4c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c434:	4b36      	ldr	r3, [pc, #216]	; (800c510 <xTaskIncrementTick+0x150>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d104      	bne.n	800c448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c43e:	4b37      	ldr	r3, [pc, #220]	; (800c51c <xTaskIncrementTick+0x15c>)
 800c440:	f04f 32ff 	mov.w	r2, #4294967295
 800c444:	601a      	str	r2, [r3, #0]
					break;
 800c446:	e03f      	b.n	800c4c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c448:	4b31      	ldr	r3, [pc, #196]	; (800c510 <xTaskIncrementTick+0x150>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d203      	bcs.n	800c468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c460:	4a2e      	ldr	r2, [pc, #184]	; (800c51c <xTaskIncrementTick+0x15c>)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c466:	e02f      	b.n	800c4c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	3304      	adds	r3, #4
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe ff79 	bl	800b364 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	2b00      	cmp	r3, #0
 800c478:	d004      	beq.n	800c484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	3318      	adds	r3, #24
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe ff70 	bl	800b364 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c488:	4b25      	ldr	r3, [pc, #148]	; (800c520 <xTaskIncrementTick+0x160>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d903      	bls.n	800c498 <xTaskIncrementTick+0xd8>
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	4a22      	ldr	r2, [pc, #136]	; (800c520 <xTaskIncrementTick+0x160>)
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4a1f      	ldr	r2, [pc, #124]	; (800c524 <xTaskIncrementTick+0x164>)
 800c4a6:	441a      	add	r2, r3
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7fe fefb 	bl	800b2aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	4b1b      	ldr	r3, [pc, #108]	; (800c528 <xTaskIncrementTick+0x168>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d3b8      	bcc.n	800c434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4c6:	e7b5      	b.n	800c434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4c8:	4b17      	ldr	r3, [pc, #92]	; (800c528 <xTaskIncrementTick+0x168>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	4915      	ldr	r1, [pc, #84]	; (800c524 <xTaskIncrementTick+0x164>)
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	440b      	add	r3, r1
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d901      	bls.n	800c4e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c4e4:	4b11      	ldr	r3, [pc, #68]	; (800c52c <xTaskIncrementTick+0x16c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e004      	b.n	800c4fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	; (800c530 <xTaskIncrementTick+0x170>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	4a0d      	ldr	r2, [pc, #52]	; (800c530 <xTaskIncrementTick+0x170>)
 800c4fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20001274 	.word	0x20001274
 800c50c:	20001250 	.word	0x20001250
 800c510:	20001204 	.word	0x20001204
 800c514:	20001208 	.word	0x20001208
 800c518:	20001264 	.word	0x20001264
 800c51c:	2000126c 	.word	0x2000126c
 800c520:	20001254 	.word	0x20001254
 800c524:	20000d7c 	.word	0x20000d7c
 800c528:	20000d78 	.word	0x20000d78
 800c52c:	20001260 	.word	0x20001260
 800c530:	2000125c 	.word	0x2000125c

0800c534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c53a:	4b2a      	ldr	r3, [pc, #168]	; (800c5e4 <vTaskSwitchContext+0xb0>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c542:	4b29      	ldr	r3, [pc, #164]	; (800c5e8 <vTaskSwitchContext+0xb4>)
 800c544:	2201      	movs	r2, #1
 800c546:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c548:	e046      	b.n	800c5d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c54a:	4b27      	ldr	r3, [pc, #156]	; (800c5e8 <vTaskSwitchContext+0xb4>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c550:	4b26      	ldr	r3, [pc, #152]	; (800c5ec <vTaskSwitchContext+0xb8>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e010      	b.n	800c57a <vTaskSwitchContext+0x46>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10a      	bne.n	800c574 <vTaskSwitchContext+0x40>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	607b      	str	r3, [r7, #4]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <vTaskSwitchContext+0x3e>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	3b01      	subs	r3, #1
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	491d      	ldr	r1, [pc, #116]	; (800c5f0 <vTaskSwitchContext+0xbc>)
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	440b      	add	r3, r1
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d0e4      	beq.n	800c558 <vTaskSwitchContext+0x24>
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4a15      	ldr	r2, [pc, #84]	; (800c5f0 <vTaskSwitchContext+0xbc>)
 800c59a:	4413      	add	r3, r2
 800c59c:	60bb      	str	r3, [r7, #8]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	605a      	str	r2, [r3, #4]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d104      	bne.n	800c5be <vTaskSwitchContext+0x8a>
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	605a      	str	r2, [r3, #4]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	4a0b      	ldr	r2, [pc, #44]	; (800c5f4 <vTaskSwitchContext+0xc0>)
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	4a08      	ldr	r2, [pc, #32]	; (800c5ec <vTaskSwitchContext+0xb8>)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5ce:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <vTaskSwitchContext+0xc0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3354      	adds	r3, #84	; 0x54
 800c5d4:	4a08      	ldr	r2, [pc, #32]	; (800c5f8 <vTaskSwitchContext+0xc4>)
 800c5d6:	6013      	str	r3, [r2, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	20001274 	.word	0x20001274
 800c5e8:	20001260 	.word	0x20001260
 800c5ec:	20001254 	.word	0x20001254
 800c5f0:	20000d7c 	.word	0x20000d7c
 800c5f4:	20000d78 	.word	0x20000d78
 800c5f8:	20000134 	.word	0x20000134

0800c5fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60fb      	str	r3, [r7, #12]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c622:	4b07      	ldr	r3, [pc, #28]	; (800c640 <vTaskPlaceOnEventList+0x44>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3318      	adds	r3, #24
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7fe fe61 	bl	800b2f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c630:	2101      	movs	r1, #1
 800c632:	6838      	ldr	r0, [r7, #0]
 800c634:	f000 fbc4 	bl	800cdc0 <prvAddCurrentTaskToDelayedList>
}
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	20000d78 	.word	0x20000d78

0800c644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	617b      	str	r3, [r7, #20]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <vTaskPlaceOnEventListRestricted+0x54>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3318      	adds	r3, #24
 800c672:	4619      	mov	r1, r3
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7fe fe18 	bl	800b2aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c680:	f04f 33ff 	mov.w	r3, #4294967295
 800c684:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	68b8      	ldr	r0, [r7, #8]
 800c68a:	f000 fb99 	bl	800cdc0 <prvAddCurrentTaskToDelayedList>
	}
 800c68e:	bf00      	nop
 800c690:	3718      	adds	r7, #24
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20000d78 	.word	0x20000d78

0800c69c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	60fb      	str	r3, [r7, #12]
}
 800c6c4:	bf00      	nop
 800c6c6:	e7fe      	b.n	800c6c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	3318      	adds	r3, #24
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe fe49 	bl	800b364 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6d2:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <xTaskRemoveFromEventList+0xb0>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d11d      	bne.n	800c716 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe fe40 	bl	800b364 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e8:	4b19      	ldr	r3, [pc, #100]	; (800c750 <xTaskRemoveFromEventList+0xb4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d903      	bls.n	800c6f8 <xTaskRemoveFromEventList+0x5c>
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f4:	4a16      	ldr	r2, [pc, #88]	; (800c750 <xTaskRemoveFromEventList+0xb4>)
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4a13      	ldr	r2, [pc, #76]	; (800c754 <xTaskRemoveFromEventList+0xb8>)
 800c706:	441a      	add	r2, r3
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	3304      	adds	r3, #4
 800c70c:	4619      	mov	r1, r3
 800c70e:	4610      	mov	r0, r2
 800c710:	f7fe fdcb 	bl	800b2aa <vListInsertEnd>
 800c714:	e005      	b.n	800c722 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	3318      	adds	r3, #24
 800c71a:	4619      	mov	r1, r3
 800c71c:	480e      	ldr	r0, [pc, #56]	; (800c758 <xTaskRemoveFromEventList+0xbc>)
 800c71e:	f7fe fdc4 	bl	800b2aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c726:	4b0d      	ldr	r3, [pc, #52]	; (800c75c <xTaskRemoveFromEventList+0xc0>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d905      	bls.n	800c73c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c730:	2301      	movs	r3, #1
 800c732:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c734:	4b0a      	ldr	r3, [pc, #40]	; (800c760 <xTaskRemoveFromEventList+0xc4>)
 800c736:	2201      	movs	r2, #1
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	e001      	b.n	800c740 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c740:	697b      	ldr	r3, [r7, #20]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001274 	.word	0x20001274
 800c750:	20001254 	.word	0x20001254
 800c754:	20000d7c 	.word	0x20000d7c
 800c758:	2000120c 	.word	0x2000120c
 800c75c:	20000d78 	.word	0x20000d78
 800c760:	20001260 	.word	0x20001260

0800c764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c76c:	4b06      	ldr	r3, [pc, #24]	; (800c788 <vTaskInternalSetTimeOutState+0x24>)
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c774:	4b05      	ldr	r3, [pc, #20]	; (800c78c <vTaskInternalSetTimeOutState+0x28>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	605a      	str	r2, [r3, #4]
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	20001264 	.word	0x20001264
 800c78c:	20001250 	.word	0x20001250

0800c790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	613b      	str	r3, [r7, #16]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	60fb      	str	r3, [r7, #12]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c7d2:	f000 ffc7 	bl	800d764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7d6:	4b1d      	ldr	r3, [pc, #116]	; (800c84c <xTaskCheckForTimeOut+0xbc>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	69ba      	ldr	r2, [r7, #24]
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ee:	d102      	bne.n	800c7f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	61fb      	str	r3, [r7, #28]
 800c7f4:	e023      	b.n	800c83e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	4b15      	ldr	r3, [pc, #84]	; (800c850 <xTaskCheckForTimeOut+0xc0>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d007      	beq.n	800c812 <xTaskCheckForTimeOut+0x82>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	69ba      	ldr	r2, [r7, #24]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d302      	bcc.n	800c812 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c80c:	2301      	movs	r3, #1
 800c80e:	61fb      	str	r3, [r7, #28]
 800c810:	e015      	b.n	800c83e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d20b      	bcs.n	800c834 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	1ad2      	subs	r2, r2, r3
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff9b 	bl	800c764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c82e:	2300      	movs	r3, #0
 800c830:	61fb      	str	r3, [r7, #28]
 800c832:	e004      	b.n	800c83e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	2200      	movs	r2, #0
 800c838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c83a:	2301      	movs	r3, #1
 800c83c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c83e:	f000 ffc1 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800c842:	69fb      	ldr	r3, [r7, #28]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3720      	adds	r7, #32
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20001250 	.word	0x20001250
 800c850:	20001264 	.word	0x20001264

0800c854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c858:	4b03      	ldr	r3, [pc, #12]	; (800c868 <vTaskMissedYield+0x14>)
 800c85a:	2201      	movs	r2, #1
 800c85c:	601a      	str	r2, [r3, #0]
}
 800c85e:	bf00      	nop
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	20001260 	.word	0x20001260

0800c86c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c874:	f000 f852 	bl	800c91c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c878:	4b06      	ldr	r3, [pc, #24]	; (800c894 <prvIdleTask+0x28>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d9f9      	bls.n	800c874 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c880:	4b05      	ldr	r3, [pc, #20]	; (800c898 <prvIdleTask+0x2c>)
 800c882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c890:	e7f0      	b.n	800c874 <prvIdleTask+0x8>
 800c892:	bf00      	nop
 800c894:	20000d7c 	.word	0x20000d7c
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	e00c      	b.n	800c8c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4a12      	ldr	r2, [pc, #72]	; (800c8fc <prvInitialiseTaskLists+0x60>)
 800c8b4:	4413      	add	r3, r2
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe fcca 	bl	800b250 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	607b      	str	r3, [r7, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b37      	cmp	r3, #55	; 0x37
 800c8c6:	d9ef      	bls.n	800c8a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8c8:	480d      	ldr	r0, [pc, #52]	; (800c900 <prvInitialiseTaskLists+0x64>)
 800c8ca:	f7fe fcc1 	bl	800b250 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8ce:	480d      	ldr	r0, [pc, #52]	; (800c904 <prvInitialiseTaskLists+0x68>)
 800c8d0:	f7fe fcbe 	bl	800b250 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8d4:	480c      	ldr	r0, [pc, #48]	; (800c908 <prvInitialiseTaskLists+0x6c>)
 800c8d6:	f7fe fcbb 	bl	800b250 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8da:	480c      	ldr	r0, [pc, #48]	; (800c90c <prvInitialiseTaskLists+0x70>)
 800c8dc:	f7fe fcb8 	bl	800b250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8e0:	480b      	ldr	r0, [pc, #44]	; (800c910 <prvInitialiseTaskLists+0x74>)
 800c8e2:	f7fe fcb5 	bl	800b250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8e6:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <prvInitialiseTaskLists+0x78>)
 800c8e8:	4a05      	ldr	r2, [pc, #20]	; (800c900 <prvInitialiseTaskLists+0x64>)
 800c8ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	; (800c918 <prvInitialiseTaskLists+0x7c>)
 800c8ee:	4a05      	ldr	r2, [pc, #20]	; (800c904 <prvInitialiseTaskLists+0x68>)
 800c8f0:	601a      	str	r2, [r3, #0]
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000d7c 	.word	0x20000d7c
 800c900:	200011dc 	.word	0x200011dc
 800c904:	200011f0 	.word	0x200011f0
 800c908:	2000120c 	.word	0x2000120c
 800c90c:	20001220 	.word	0x20001220
 800c910:	20001238 	.word	0x20001238
 800c914:	20001204 	.word	0x20001204
 800c918:	20001208 	.word	0x20001208

0800c91c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c922:	e019      	b.n	800c958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c924:	f000 ff1e 	bl	800d764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c928:	4b10      	ldr	r3, [pc, #64]	; (800c96c <prvCheckTasksWaitingTermination+0x50>)
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3304      	adds	r3, #4
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fd15 	bl	800b364 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c93a:	4b0d      	ldr	r3, [pc, #52]	; (800c970 <prvCheckTasksWaitingTermination+0x54>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3b01      	subs	r3, #1
 800c940:	4a0b      	ldr	r2, [pc, #44]	; (800c970 <prvCheckTasksWaitingTermination+0x54>)
 800c942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c944:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <prvCheckTasksWaitingTermination+0x58>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3b01      	subs	r3, #1
 800c94a:	4a0a      	ldr	r2, [pc, #40]	; (800c974 <prvCheckTasksWaitingTermination+0x58>)
 800c94c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c94e:	f000 ff39 	bl	800d7c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f810 	bl	800c978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c958:	4b06      	ldr	r3, [pc, #24]	; (800c974 <prvCheckTasksWaitingTermination+0x58>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1e1      	bne.n	800c924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	20001220 	.word	0x20001220
 800c970:	2000124c 	.word	0x2000124c
 800c974:	20001234 	.word	0x20001234

0800c978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3354      	adds	r3, #84	; 0x54
 800c984:	4618      	mov	r0, r3
 800c986:	f002 ff5b 	bl	800f840 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c990:	2b00      	cmp	r3, #0
 800c992:	d108      	bne.n	800c9a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c998:	4618      	mov	r0, r3
 800c99a:	f001 f8d1 	bl	800db40 <vPortFree>
				vPortFree( pxTCB );
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f001 f8ce 	bl	800db40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9a4:	e018      	b.n	800c9d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d103      	bne.n	800c9b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f001 f8c5 	bl	800db40 <vPortFree>
	}
 800c9b6:	e00f      	b.n	800c9d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d00a      	beq.n	800c9d8 <prvDeleteTCB+0x60>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60fb      	str	r3, [r7, #12]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <prvDeleteTCB+0x5e>
	}
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <prvResetNextTaskUnblockTime+0x38>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d104      	bne.n	800c9fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <prvResetNextTaskUnblockTime+0x3c>)
 800c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9f8:	e008      	b.n	800ca0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9fa:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <prvResetNextTaskUnblockTime+0x38>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	4a04      	ldr	r2, [pc, #16]	; (800ca1c <prvResetNextTaskUnblockTime+0x3c>)
 800ca0a:	6013      	str	r3, [r2, #0]
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	20001204 	.word	0x20001204
 800ca1c:	2000126c 	.word	0x2000126c

0800ca20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca26:	4b0b      	ldr	r3, [pc, #44]	; (800ca54 <xTaskGetSchedulerState+0x34>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	e008      	b.n	800ca46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca34:	4b08      	ldr	r3, [pc, #32]	; (800ca58 <xTaskGetSchedulerState+0x38>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	607b      	str	r3, [r7, #4]
 800ca40:	e001      	b.n	800ca46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca42:	2300      	movs	r3, #0
 800ca44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca46:	687b      	ldr	r3, [r7, #4]
	}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	20001258 	.word	0x20001258
 800ca58:	20001274 	.word	0x20001274

0800ca5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d056      	beq.n	800cb20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca72:	4b2e      	ldr	r3, [pc, #184]	; (800cb2c <xTaskPriorityDisinherit+0xd0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	693a      	ldr	r2, [r7, #16]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d00a      	beq.n	800ca92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	60fb      	str	r3, [r7, #12]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10a      	bne.n	800cab0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	60bb      	str	r3, [r7, #8]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cab4:	1e5a      	subs	r2, r3, #1
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d02c      	beq.n	800cb20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d128      	bne.n	800cb20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	3304      	adds	r3, #4
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe fc46 	bl	800b364 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf0:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <xTaskPriorityDisinherit+0xd4>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d903      	bls.n	800cb00 <xTaskPriorityDisinherit+0xa4>
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafc:	4a0c      	ldr	r2, [pc, #48]	; (800cb30 <xTaskPriorityDisinherit+0xd4>)
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb04:	4613      	mov	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	4a09      	ldr	r2, [pc, #36]	; (800cb34 <xTaskPriorityDisinherit+0xd8>)
 800cb0e:	441a      	add	r2, r3
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4619      	mov	r1, r3
 800cb16:	4610      	mov	r0, r2
 800cb18:	f7fe fbc7 	bl	800b2aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb20:	697b      	ldr	r3, [r7, #20]
	}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20000d78 	.word	0x20000d78
 800cb30:	20001254 	.word	0x20001254
 800cb34:	20000d7c 	.word	0x20000d7c

0800cb38 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cb46:	f000 fe0d 	bl	800d764 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cb4a:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d01c      	beq.n	800cb92 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cb58:	4b25      	ldr	r3, [pc, #148]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	43d2      	mvns	r2, r2
 800cb64:	400a      	ands	r2, r1
 800cb66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cb6a:	4b21      	ldr	r3, [pc, #132]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00b      	beq.n	800cb92 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	6838      	ldr	r0, [r7, #0]
 800cb7e:	f000 f91f 	bl	800cdc0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cb82:	4b1c      	ldr	r3, [pc, #112]	; (800cbf4 <xTaskNotifyWait+0xbc>)
 800cb84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cb92:	f000 fe17 	bl	800d7c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cb96:	f000 fde5 	bl	800d764 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d005      	beq.n	800cbac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cba0:	4b13      	ldr	r3, [pc, #76]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cbac:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d002      	beq.n	800cbc0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	e00a      	b.n	800cbd6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	43d2      	mvns	r2, r2
 800cbcc:	400a      	ands	r2, r1
 800cbce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbd6:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <xTaskNotifyWait+0xb8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800cbe0:	f000 fdf0 	bl	800d7c4 <vPortExitCritical>

		return xReturn;
 800cbe4:	697b      	ldr	r3, [r7, #20]
	}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000d78 	.word	0x20000d78
 800cbf4:	e000ed04 	.word	0xe000ed04

0800cbf8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08e      	sub	sp, #56	; 0x38
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10a      	bne.n	800cc28 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc28:	f000 fe7e 	bl	800d928 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cc30:	f3ef 8211 	mrs	r2, BASEPRI
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	623a      	str	r2, [r7, #32]
 800cc46:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cc48:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d004      	beq.n	800cc5c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800cc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	2202      	movs	r2, #2
 800cc6a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800cc6e:	79fb      	ldrb	r3, [r7, #7]
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d82f      	bhi.n	800ccd4 <xTaskGenericNotifyFromISR+0xdc>
 800cc74:	a201      	add	r2, pc, #4	; (adr r2, 800cc7c <xTaskGenericNotifyFromISR+0x84>)
 800cc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7a:	bf00      	nop
 800cc7c:	0800ccf7 	.word	0x0800ccf7
 800cc80:	0800cc91 	.word	0x0800cc91
 800cc84:	0800cca3 	.word	0x0800cca3
 800cc88:	0800ccb3 	.word	0x0800ccb3
 800cc8c:	0800ccbd 	.word	0x0800ccbd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc92:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800cca0:	e02c      	b.n	800ccfc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ccb0:	e024      	b.n	800ccfc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ccba:	e01f      	b.n	800ccfc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ccbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d004      	beq.n	800ccce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cccc:	e016      	b.n	800ccfc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ccd2:	e013      	b.n	800ccfc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d00c      	beq.n	800ccfa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	61bb      	str	r3, [r7, #24]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ccf6:	bf00      	nop
 800ccf8:	e000      	b.n	800ccfc <xTaskGenericNotifyFromISR+0x104>
					break;
 800ccfa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ccfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d146      	bne.n	800cd92 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00a      	beq.n	800cd22 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	617b      	str	r3, [r7, #20]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd22:	4b21      	ldr	r3, [pc, #132]	; (800cda8 <xTaskGenericNotifyFromISR+0x1b0>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d11d      	bne.n	800cd66 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fb18 	bl	800b364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd38:	4b1c      	ldr	r3, [pc, #112]	; (800cdac <xTaskGenericNotifyFromISR+0x1b4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d903      	bls.n	800cd48 <xTaskGenericNotifyFromISR+0x150>
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd44:	4a19      	ldr	r2, [pc, #100]	; (800cdac <xTaskGenericNotifyFromISR+0x1b4>)
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4a16      	ldr	r2, [pc, #88]	; (800cdb0 <xTaskGenericNotifyFromISR+0x1b8>)
 800cd56:	441a      	add	r2, r3
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f7fe faa3 	bl	800b2aa <vListInsertEnd>
 800cd64:	e005      	b.n	800cd72 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	3318      	adds	r3, #24
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	4811      	ldr	r0, [pc, #68]	; (800cdb4 <xTaskGenericNotifyFromISR+0x1bc>)
 800cd6e:	f7fe fa9c 	bl	800b2aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <xTaskGenericNotifyFromISR+0x1c0>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d908      	bls.n	800cd92 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cd80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cd86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd88:	2201      	movs	r2, #1
 800cd8a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cd8c:	4b0b      	ldr	r3, [pc, #44]	; (800cdbc <xTaskGenericNotifyFromISR+0x1c4>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd94:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f383 8811 	msr	BASEPRI, r3
}
 800cd9c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3738      	adds	r7, #56	; 0x38
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20001274 	.word	0x20001274
 800cdac:	20001254 	.word	0x20001254
 800cdb0:	20000d7c 	.word	0x20000d7c
 800cdb4:	2000120c 	.word	0x2000120c
 800cdb8:	20000d78 	.word	0x20000d78
 800cdbc:	20001260 	.word	0x20001260

0800cdc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdca:	4b21      	ldr	r3, [pc, #132]	; (800ce50 <prvAddCurrentTaskToDelayedList+0x90>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdd0:	4b20      	ldr	r3, [pc, #128]	; (800ce54 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3304      	adds	r3, #4
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fe fac4 	bl	800b364 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde2:	d10a      	bne.n	800cdfa <prvAddCurrentTaskToDelayedList+0x3a>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d007      	beq.n	800cdfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdea:	4b1a      	ldr	r3, [pc, #104]	; (800ce54 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4819      	ldr	r0, [pc, #100]	; (800ce58 <prvAddCurrentTaskToDelayedList+0x98>)
 800cdf4:	f7fe fa59 	bl	800b2aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cdf8:	e026      	b.n	800ce48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4413      	add	r3, r2
 800ce00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce02:	4b14      	ldr	r3, [pc, #80]	; (800ce54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d209      	bcs.n	800ce26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce12:	4b12      	ldr	r3, [pc, #72]	; (800ce5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	4b0f      	ldr	r3, [pc, #60]	; (800ce54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7fe fa67 	bl	800b2f2 <vListInsert>
}
 800ce24:	e010      	b.n	800ce48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce26:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7fe fa5d 	bl	800b2f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d202      	bcs.n	800ce48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce42:	4a08      	ldr	r2, [pc, #32]	; (800ce64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	6013      	str	r3, [r2, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20001250 	.word	0x20001250
 800ce54:	20000d78 	.word	0x20000d78
 800ce58:	20001238 	.word	0x20001238
 800ce5c:	20001208 	.word	0x20001208
 800ce60:	20001204 	.word	0x20001204
 800ce64:	2000126c 	.word	0x2000126c

0800ce68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08a      	sub	sp, #40	; 0x28
 800ce6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce72:	f000 fb07 	bl	800d484 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce76:	4b1c      	ldr	r3, [pc, #112]	; (800cee8 <xTimerCreateTimerTask+0x80>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d021      	beq.n	800cec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce86:	1d3a      	adds	r2, r7, #4
 800ce88:	f107 0108 	add.w	r1, r7, #8
 800ce8c:	f107 030c 	add.w	r3, r7, #12
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe f9c3 	bl	800b21c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	9202      	str	r2, [sp, #8]
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	2302      	movs	r3, #2
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	2300      	movs	r3, #0
 800cea6:	460a      	mov	r2, r1
 800cea8:	4910      	ldr	r1, [pc, #64]	; (800ceec <xTimerCreateTimerTask+0x84>)
 800ceaa:	4811      	ldr	r0, [pc, #68]	; (800cef0 <xTimerCreateTimerTask+0x88>)
 800ceac:	f7fe ff70 	bl	800bd90 <xTaskCreateStatic>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	4a10      	ldr	r2, [pc, #64]	; (800cef4 <xTimerCreateTimerTask+0x8c>)
 800ceb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <xTimerCreateTimerTask+0x8c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cebe:	2301      	movs	r3, #1
 800cec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	613b      	str	r3, [r7, #16]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cede:	697b      	ldr	r3, [r7, #20]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	200012a8 	.word	0x200012a8
 800ceec:	08011c58 	.word	0x08011c58
 800cef0:	0800d02d 	.word	0x0800d02d
 800cef4:	200012ac 	.word	0x200012ac

0800cef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08a      	sub	sp, #40	; 0x28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	623b      	str	r3, [r7, #32]
}
 800cf22:	bf00      	nop
 800cf24:	e7fe      	b.n	800cf24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf26:	4b1a      	ldr	r3, [pc, #104]	; (800cf90 <xTimerGenericCommand+0x98>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d02a      	beq.n	800cf84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b05      	cmp	r3, #5
 800cf3e:	dc18      	bgt.n	800cf72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf40:	f7ff fd6e 	bl	800ca20 <xTaskGetSchedulerState>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d109      	bne.n	800cf5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf4a:	4b11      	ldr	r3, [pc, #68]	; (800cf90 <xTimerGenericCommand+0x98>)
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	f107 0110 	add.w	r1, r7, #16
 800cf52:	2300      	movs	r3, #0
 800cf54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf56:	f7fe fb33 	bl	800b5c0 <xQueueGenericSend>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf5c:	e012      	b.n	800cf84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf5e:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <xTimerGenericCommand+0x98>)
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f107 0110 	add.w	r1, r7, #16
 800cf66:	2300      	movs	r3, #0
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f7fe fb29 	bl	800b5c0 <xQueueGenericSend>
 800cf6e:	6278      	str	r0, [r7, #36]	; 0x24
 800cf70:	e008      	b.n	800cf84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf72:	4b07      	ldr	r3, [pc, #28]	; (800cf90 <xTimerGenericCommand+0x98>)
 800cf74:	6818      	ldr	r0, [r3, #0]
 800cf76:	f107 0110 	add.w	r1, r7, #16
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	f7fe fc1d 	bl	800b7bc <xQueueGenericSendFromISR>
 800cf82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3728      	adds	r7, #40	; 0x28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	200012a8 	.word	0x200012a8

0800cf94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf9e:	4b22      	ldr	r3, [pc, #136]	; (800d028 <prvProcessExpiredTimer+0x94>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fe f9d9 	bl	800b364 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfb8:	f003 0304 	and.w	r3, r3, #4
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d022      	beq.n	800d006 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	699a      	ldr	r2, [r3, #24]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	18d1      	adds	r1, r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	6978      	ldr	r0, [r7, #20]
 800cfce:	f000 f8d1 	bl	800d174 <prvInsertTimerInActiveList>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d01f      	beq.n	800d018 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6978      	ldr	r0, [r7, #20]
 800cfe4:	f7ff ff88 	bl	800cef8 <xTimerGenericCommand>
 800cfe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d113      	bne.n	800d018 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	60fb      	str	r3, [r7, #12]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d00c:	f023 0301 	bic.w	r3, r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	6a1b      	ldr	r3, [r3, #32]
 800d01c:	6978      	ldr	r0, [r7, #20]
 800d01e:	4798      	blx	r3
}
 800d020:	bf00      	nop
 800d022:	3718      	adds	r7, #24
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	200012a0 	.word	0x200012a0

0800d02c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d034:	f107 0308 	add.w	r3, r7, #8
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 f857 	bl	800d0ec <prvGetNextExpireTime>
 800d03e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	4619      	mov	r1, r3
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f803 	bl	800d050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d04a:	f000 f8d5 	bl	800d1f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d04e:	e7f1      	b.n	800d034 <prvTimerTask+0x8>

0800d050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d05a:	f7ff f8f5 	bl	800c248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d05e:	f107 0308 	add.w	r3, r7, #8
 800d062:	4618      	mov	r0, r3
 800d064:	f000 f866 	bl	800d134 <prvSampleTimeNow>
 800d068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d130      	bne.n	800d0d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10a      	bne.n	800d08c <prvProcessTimerOrBlockTask+0x3c>
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d806      	bhi.n	800d08c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d07e:	f7ff f8f1 	bl	800c264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d082:	68f9      	ldr	r1, [r7, #12]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ff85 	bl	800cf94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d08a:	e024      	b.n	800d0d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d008      	beq.n	800d0a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d092:	4b13      	ldr	r3, [pc, #76]	; (800d0e0 <prvProcessTimerOrBlockTask+0x90>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <prvProcessTimerOrBlockTask+0x50>
 800d09c:	2301      	movs	r3, #1
 800d09e:	e000      	b.n	800d0a2 <prvProcessTimerOrBlockTask+0x52>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <prvProcessTimerOrBlockTask+0x94>)
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f7fe fe39 	bl	800bd28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0b6:	f7ff f8d5 	bl	800c264 <xTaskResumeAll>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0c0:	4b09      	ldr	r3, [pc, #36]	; (800d0e8 <prvProcessTimerOrBlockTask+0x98>)
 800d0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	f3bf 8f6f 	isb	sy
}
 800d0d0:	e001      	b.n	800d0d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0d2:	f7ff f8c7 	bl	800c264 <xTaskResumeAll>
}
 800d0d6:	bf00      	nop
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	200012a4 	.word	0x200012a4
 800d0e4:	200012a8 	.word	0x200012a8
 800d0e8:	e000ed04 	.word	0xe000ed04

0800d0ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d0f4:	4b0e      	ldr	r3, [pc, #56]	; (800d130 <prvGetNextExpireTime+0x44>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <prvGetNextExpireTime+0x16>
 800d0fe:	2201      	movs	r2, #1
 800d100:	e000      	b.n	800d104 <prvGetNextExpireTime+0x18>
 800d102:	2200      	movs	r2, #0
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d105      	bne.n	800d11c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <prvGetNextExpireTime+0x44>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	60fb      	str	r3, [r7, #12]
 800d11a:	e001      	b.n	800d120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d120:	68fb      	ldr	r3, [r7, #12]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	200012a0 	.word	0x200012a0

0800d134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d13c:	f7ff f930 	bl	800c3a0 <xTaskGetTickCount>
 800d140:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d142:	4b0b      	ldr	r3, [pc, #44]	; (800d170 <prvSampleTimeNow+0x3c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d205      	bcs.n	800d158 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d14c:	f000 f936 	bl	800d3bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	e002      	b.n	800d15e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d15e:	4a04      	ldr	r2, [pc, #16]	; (800d170 <prvSampleTimeNow+0x3c>)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d164:	68fb      	ldr	r3, [r7, #12]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	200012b0 	.word	0x200012b0

0800d174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d182:	2300      	movs	r3, #0
 800d184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	429a      	cmp	r2, r3
 800d198:	d812      	bhi.n	800d1c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	699b      	ldr	r3, [r3, #24]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d302      	bcc.n	800d1ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	617b      	str	r3, [r7, #20]
 800d1ac:	e01b      	b.n	800d1e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1ae:	4b10      	ldr	r3, [pc, #64]	; (800d1f0 <prvInsertTimerInActiveList+0x7c>)
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	f7fe f89a 	bl	800b2f2 <vListInsert>
 800d1be:	e012      	b.n	800d1e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d206      	bcs.n	800d1d6 <prvInsertTimerInActiveList+0x62>
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d302      	bcc.n	800d1d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	617b      	str	r3, [r7, #20]
 800d1d4:	e007      	b.n	800d1e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1d6:	4b07      	ldr	r3, [pc, #28]	; (800d1f4 <prvInsertTimerInActiveList+0x80>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	4619      	mov	r1, r3
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	f7fe f886 	bl	800b2f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d1e6:	697b      	ldr	r3, [r7, #20]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	200012a4 	.word	0x200012a4
 800d1f4:	200012a0 	.word	0x200012a0

0800d1f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08e      	sub	sp, #56	; 0x38
 800d1fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1fe:	e0ca      	b.n	800d396 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	da18      	bge.n	800d238 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d206:	1d3b      	adds	r3, r7, #4
 800d208:	3304      	adds	r3, #4
 800d20a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10a      	bne.n	800d228 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	61fb      	str	r3, [r7, #28]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d22e:	6850      	ldr	r0, [r2, #4]
 800d230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d232:	6892      	ldr	r2, [r2, #8]
 800d234:	4611      	mov	r1, r2
 800d236:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f2c0 80aa 	blt.w	800d394 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	3304      	adds	r3, #4
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe f887 	bl	800b364 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d256:	463b      	mov	r3, r7
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff ff6b 	bl	800d134 <prvSampleTimeNow>
 800d25e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b09      	cmp	r3, #9
 800d264:	f200 8097 	bhi.w	800d396 <prvProcessReceivedCommands+0x19e>
 800d268:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <prvProcessReceivedCommands+0x78>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d299 	.word	0x0800d299
 800d274:	0800d299 	.word	0x0800d299
 800d278:	0800d299 	.word	0x0800d299
 800d27c:	0800d30d 	.word	0x0800d30d
 800d280:	0800d321 	.word	0x0800d321
 800d284:	0800d36b 	.word	0x0800d36b
 800d288:	0800d299 	.word	0x0800d299
 800d28c:	0800d299 	.word	0x0800d299
 800d290:	0800d30d 	.word	0x0800d30d
 800d294:	0800d321 	.word	0x0800d321
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d29e:	f043 0301 	orr.w	r3, r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	18d1      	adds	r1, r2, r3
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b8:	f7ff ff5c 	bl	800d174 <prvInsertTimerInActiveList>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d069      	beq.n	800d396 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c4:	6a1b      	ldr	r3, [r3, #32]
 800d2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2d0:	f003 0304 	and.w	r3, r3, #4
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d05e      	beq.n	800d396 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	441a      	add	r2, r3
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ea:	f7ff fe05 	bl	800cef8 <xTimerGenericCommand>
 800d2ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d14f      	bne.n	800d396 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	61bb      	str	r3, [r7, #24]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d312:	f023 0301 	bic.w	r3, r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d31e:	e03a      	b.n	800d396 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d326:	f043 0301 	orr.w	r3, r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	617b      	str	r3, [r7, #20]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	699a      	ldr	r2, [r3, #24]
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35c:	18d1      	adds	r1, r2, r3
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d364:	f7ff ff06 	bl	800d174 <prvInsertTimerInActiveList>
					break;
 800d368:	e015      	b.n	800d396 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d370:	f003 0302 	and.w	r3, r3, #2
 800d374:	2b00      	cmp	r3, #0
 800d376:	d103      	bne.n	800d380 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d37a:	f000 fbe1 	bl	800db40 <vPortFree>
 800d37e:	e00a      	b.n	800d396 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d386:	f023 0301 	bic.w	r3, r3, #1
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d392:	e000      	b.n	800d396 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d394:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d396:	4b08      	ldr	r3, [pc, #32]	; (800d3b8 <prvProcessReceivedCommands+0x1c0>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	1d39      	adds	r1, r7, #4
 800d39c:	2200      	movs	r2, #0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe faa8 	bl	800b8f4 <xQueueReceive>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f47f af2a 	bne.w	800d200 <prvProcessReceivedCommands+0x8>
	}
}
 800d3ac:	bf00      	nop
 800d3ae:	bf00      	nop
 800d3b0:	3730      	adds	r7, #48	; 0x30
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	200012a8 	.word	0x200012a8

0800d3bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3c2:	e048      	b.n	800d456 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3c4:	4b2d      	ldr	r3, [pc, #180]	; (800d47c <prvSwitchTimerLists+0xc0>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ce:	4b2b      	ldr	r3, [pc, #172]	; (800d47c <prvSwitchTimerLists+0xc0>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fd ffc1 	bl	800b364 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d02e      	beq.n	800d456 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	4413      	add	r3, r2
 800d400:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	429a      	cmp	r2, r3
 800d408:	d90e      	bls.n	800d428 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d416:	4b19      	ldr	r3, [pc, #100]	; (800d47c <prvSwitchTimerLists+0xc0>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3304      	adds	r3, #4
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fd ff66 	bl	800b2f2 <vListInsert>
 800d426:	e016      	b.n	800d456 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d428:	2300      	movs	r3, #0
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	2300      	movs	r3, #0
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	2100      	movs	r1, #0
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff fd60 	bl	800cef8 <xTimerGenericCommand>
 800d438:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10a      	bne.n	800d456 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	603b      	str	r3, [r7, #0]
}
 800d452:	bf00      	nop
 800d454:	e7fe      	b.n	800d454 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d456:	4b09      	ldr	r3, [pc, #36]	; (800d47c <prvSwitchTimerLists+0xc0>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1b1      	bne.n	800d3c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d460:	4b06      	ldr	r3, [pc, #24]	; (800d47c <prvSwitchTimerLists+0xc0>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d466:	4b06      	ldr	r3, [pc, #24]	; (800d480 <prvSwitchTimerLists+0xc4>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a04      	ldr	r2, [pc, #16]	; (800d47c <prvSwitchTimerLists+0xc0>)
 800d46c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d46e:	4a04      	ldr	r2, [pc, #16]	; (800d480 <prvSwitchTimerLists+0xc4>)
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	6013      	str	r3, [r2, #0]
}
 800d474:	bf00      	nop
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	200012a0 	.word	0x200012a0
 800d480:	200012a4 	.word	0x200012a4

0800d484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d48a:	f000 f96b 	bl	800d764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d48e:	4b15      	ldr	r3, [pc, #84]	; (800d4e4 <prvCheckForValidListAndQueue+0x60>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d120      	bne.n	800d4d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d496:	4814      	ldr	r0, [pc, #80]	; (800d4e8 <prvCheckForValidListAndQueue+0x64>)
 800d498:	f7fd feda 	bl	800b250 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d49c:	4813      	ldr	r0, [pc, #76]	; (800d4ec <prvCheckForValidListAndQueue+0x68>)
 800d49e:	f7fd fed7 	bl	800b250 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4a2:	4b13      	ldr	r3, [pc, #76]	; (800d4f0 <prvCheckForValidListAndQueue+0x6c>)
 800d4a4:	4a10      	ldr	r2, [pc, #64]	; (800d4e8 <prvCheckForValidListAndQueue+0x64>)
 800d4a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4a8:	4b12      	ldr	r3, [pc, #72]	; (800d4f4 <prvCheckForValidListAndQueue+0x70>)
 800d4aa:	4a10      	ldr	r2, [pc, #64]	; (800d4ec <prvCheckForValidListAndQueue+0x68>)
 800d4ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <prvCheckForValidListAndQueue+0x74>)
 800d4b4:	4a11      	ldr	r2, [pc, #68]	; (800d4fc <prvCheckForValidListAndQueue+0x78>)
 800d4b6:	2110      	movs	r1, #16
 800d4b8:	200a      	movs	r0, #10
 800d4ba:	f7fd ffe5 	bl	800b488 <xQueueGenericCreateStatic>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	4a08      	ldr	r2, [pc, #32]	; (800d4e4 <prvCheckForValidListAndQueue+0x60>)
 800d4c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4c4:	4b07      	ldr	r3, [pc, #28]	; (800d4e4 <prvCheckForValidListAndQueue+0x60>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d005      	beq.n	800d4d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4cc:	4b05      	ldr	r3, [pc, #20]	; (800d4e4 <prvCheckForValidListAndQueue+0x60>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	490b      	ldr	r1, [pc, #44]	; (800d500 <prvCheckForValidListAndQueue+0x7c>)
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fbfe 	bl	800bcd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4d8:	f000 f974 	bl	800d7c4 <vPortExitCritical>
}
 800d4dc:	bf00      	nop
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	200012a8 	.word	0x200012a8
 800d4e8:	20001278 	.word	0x20001278
 800d4ec:	2000128c 	.word	0x2000128c
 800d4f0:	200012a0 	.word	0x200012a0
 800d4f4:	200012a4 	.word	0x200012a4
 800d4f8:	20001354 	.word	0x20001354
 800d4fc:	200012b4 	.word	0x200012b4
 800d500:	08011c60 	.word	0x08011c60

0800d504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3b04      	subs	r3, #4
 800d514:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d51c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3b04      	subs	r3, #4
 800d522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f023 0201 	bic.w	r2, r3, #1
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3b04      	subs	r3, #4
 800d532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d534:	4a0c      	ldr	r2, [pc, #48]	; (800d568 <pxPortInitialiseStack+0x64>)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3b14      	subs	r3, #20
 800d53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3b04      	subs	r3, #4
 800d54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f06f 0202 	mvn.w	r2, #2
 800d552:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	3b20      	subs	r3, #32
 800d558:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d55a:	68fb      	ldr	r3, [r7, #12]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	0800d56d 	.word	0x0800d56d

0800d56c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d576:	4b12      	ldr	r3, [pc, #72]	; (800d5c0 <prvTaskExitError+0x54>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57e:	d00a      	beq.n	800d596 <prvTaskExitError+0x2a>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	60fb      	str	r3, [r7, #12]
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <prvTaskExitError+0x28>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	60bb      	str	r3, [r7, #8]
}
 800d5a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5aa:	bf00      	nop
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0fc      	beq.n	800d5ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5b2:	bf00      	nop
 800d5b4:	bf00      	nop
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	200000cc 	.word	0x200000cc
	...

0800d5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <pxCurrentTCBConst2>)
 800d5d2:	6819      	ldr	r1, [r3, #0]
 800d5d4:	6808      	ldr	r0, [r1, #0]
 800d5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5da:	f380 8809 	msr	PSP, r0
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f04f 0000 	mov.w	r0, #0
 800d5e6:	f380 8811 	msr	BASEPRI, r0
 800d5ea:	4770      	bx	lr
 800d5ec:	f3af 8000 	nop.w

0800d5f0 <pxCurrentTCBConst2>:
 800d5f0:	20000d78 	.word	0x20000d78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop

0800d5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5f8:	4808      	ldr	r0, [pc, #32]	; (800d61c <prvPortStartFirstTask+0x24>)
 800d5fa:	6800      	ldr	r0, [r0, #0]
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	f380 8808 	msr	MSP, r0
 800d602:	f04f 0000 	mov.w	r0, #0
 800d606:	f380 8814 	msr	CONTROL, r0
 800d60a:	b662      	cpsie	i
 800d60c:	b661      	cpsie	f
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	df00      	svc	0
 800d618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d61a:	bf00      	nop
 800d61c:	e000ed08 	.word	0xe000ed08

0800d620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d626:	4b46      	ldr	r3, [pc, #280]	; (800d740 <xPortStartScheduler+0x120>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a46      	ldr	r2, [pc, #280]	; (800d744 <xPortStartScheduler+0x124>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d10a      	bne.n	800d646 <xPortStartScheduler+0x26>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d646:	4b3e      	ldr	r3, [pc, #248]	; (800d740 <xPortStartScheduler+0x120>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a3f      	ldr	r2, [pc, #252]	; (800d748 <xPortStartScheduler+0x128>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d10a      	bne.n	800d666 <xPortStartScheduler+0x46>
	__asm volatile
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	60fb      	str	r3, [r7, #12]
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d666:	4b39      	ldr	r3, [pc, #228]	; (800d74c <xPortStartScheduler+0x12c>)
 800d668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	22ff      	movs	r2, #255	; 0xff
 800d676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	4b31      	ldr	r3, [pc, #196]	; (800d750 <xPortStartScheduler+0x130>)
 800d68c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d68e:	4b31      	ldr	r3, [pc, #196]	; (800d754 <xPortStartScheduler+0x134>)
 800d690:	2207      	movs	r2, #7
 800d692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d694:	e009      	b.n	800d6aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d696:	4b2f      	ldr	r3, [pc, #188]	; (800d754 <xPortStartScheduler+0x134>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	4a2d      	ldr	r2, [pc, #180]	; (800d754 <xPortStartScheduler+0x134>)
 800d69e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6a0:	78fb      	ldrb	r3, [r7, #3]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b2:	2b80      	cmp	r3, #128	; 0x80
 800d6b4:	d0ef      	beq.n	800d696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6b6:	4b27      	ldr	r3, [pc, #156]	; (800d754 <xPortStartScheduler+0x134>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f1c3 0307 	rsb	r3, r3, #7
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d00a      	beq.n	800d6d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	60bb      	str	r3, [r7, #8]
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6d8:	4b1e      	ldr	r3, [pc, #120]	; (800d754 <xPortStartScheduler+0x134>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	4a1d      	ldr	r2, [pc, #116]	; (800d754 <xPortStartScheduler+0x134>)
 800d6e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6e2:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <xPortStartScheduler+0x134>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6ea:	4a1a      	ldr	r2, [pc, #104]	; (800d754 <xPortStartScheduler+0x134>)
 800d6ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <xPortStartScheduler+0x138>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a17      	ldr	r2, [pc, #92]	; (800d758 <xPortStartScheduler+0x138>)
 800d6fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d702:	4b15      	ldr	r3, [pc, #84]	; (800d758 <xPortStartScheduler+0x138>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a14      	ldr	r2, [pc, #80]	; (800d758 <xPortStartScheduler+0x138>)
 800d708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d70c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d70e:	f000 f8dd 	bl	800d8cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d712:	4b12      	ldr	r3, [pc, #72]	; (800d75c <xPortStartScheduler+0x13c>)
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d718:	f000 f8fc 	bl	800d914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d71c:	4b10      	ldr	r3, [pc, #64]	; (800d760 <xPortStartScheduler+0x140>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a0f      	ldr	r2, [pc, #60]	; (800d760 <xPortStartScheduler+0x140>)
 800d722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d728:	f7ff ff66 	bl	800d5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d72c:	f7fe ff02 	bl	800c534 <vTaskSwitchContext>
	prvTaskExitError();
 800d730:	f7ff ff1c 	bl	800d56c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	e000ed00 	.word	0xe000ed00
 800d744:	410fc271 	.word	0x410fc271
 800d748:	410fc270 	.word	0x410fc270
 800d74c:	e000e400 	.word	0xe000e400
 800d750:	200013a4 	.word	0x200013a4
 800d754:	200013a8 	.word	0x200013a8
 800d758:	e000ed20 	.word	0xe000ed20
 800d75c:	200000cc 	.word	0x200000cc
 800d760:	e000ef34 	.word	0xe000ef34

0800d764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	607b      	str	r3, [r7, #4]
}
 800d77c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <vPortEnterCritical+0x58>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3301      	adds	r3, #1
 800d784:	4a0d      	ldr	r2, [pc, #52]	; (800d7bc <vPortEnterCritical+0x58>)
 800d786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d788:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <vPortEnterCritical+0x58>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d10f      	bne.n	800d7b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d790:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <vPortEnterCritical+0x5c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	603b      	str	r3, [r7, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <vPortEnterCritical+0x4a>
	}
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	200000cc 	.word	0x200000cc
 800d7c0:	e000ed04 	.word	0xe000ed04

0800d7c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7ca:	4b12      	ldr	r3, [pc, #72]	; (800d814 <vPortExitCritical+0x50>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d10a      	bne.n	800d7e8 <vPortExitCritical+0x24>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	607b      	str	r3, [r7, #4]
}
 800d7e4:	bf00      	nop
 800d7e6:	e7fe      	b.n	800d7e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7e8:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <vPortExitCritical+0x50>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4a09      	ldr	r2, [pc, #36]	; (800d814 <vPortExitCritical+0x50>)
 800d7f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7f2:	4b08      	ldr	r3, [pc, #32]	; (800d814 <vPortExitCritical+0x50>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d105      	bne.n	800d806 <vPortExitCritical+0x42>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	f383 8811 	msr	BASEPRI, r3
}
 800d804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d806:	bf00      	nop
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	200000cc 	.word	0x200000cc
	...

0800d820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d820:	f3ef 8009 	mrs	r0, PSP
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	4b15      	ldr	r3, [pc, #84]	; (800d880 <pxCurrentTCBConst>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	f01e 0f10 	tst.w	lr, #16
 800d830:	bf08      	it	eq
 800d832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83a:	6010      	str	r0, [r2, #0]
 800d83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d840:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d844:	f380 8811 	msr	BASEPRI, r0
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f7fe fe70 	bl	800c534 <vTaskSwitchContext>
 800d854:	f04f 0000 	mov.w	r0, #0
 800d858:	f380 8811 	msr	BASEPRI, r0
 800d85c:	bc09      	pop	{r0, r3}
 800d85e:	6819      	ldr	r1, [r3, #0]
 800d860:	6808      	ldr	r0, [r1, #0]
 800d862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d866:	f01e 0f10 	tst.w	lr, #16
 800d86a:	bf08      	it	eq
 800d86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d870:	f380 8809 	msr	PSP, r0
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	f3af 8000 	nop.w

0800d880 <pxCurrentTCBConst>:
 800d880:	20000d78 	.word	0x20000d78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop

0800d888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	607b      	str	r3, [r7, #4]
}
 800d8a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8a2:	f7fe fd8d 	bl	800c3c0 <xTaskIncrementTick>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d003      	beq.n	800d8b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8ac:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <xPortSysTickHandler+0x40>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f383 8811 	msr	BASEPRI, r3
}
 800d8be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8d0:	4b0b      	ldr	r3, [pc, #44]	; (800d900 <vPortSetupTimerInterrupt+0x34>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <vPortSetupTimerInterrupt+0x38>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <vPortSetupTimerInterrupt+0x3c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a0a      	ldr	r2, [pc, #40]	; (800d90c <vPortSetupTimerInterrupt+0x40>)
 800d8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e6:	099b      	lsrs	r3, r3, #6
 800d8e8:	4a09      	ldr	r2, [pc, #36]	; (800d910 <vPortSetupTimerInterrupt+0x44>)
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8ee:	4b04      	ldr	r3, [pc, #16]	; (800d900 <vPortSetupTimerInterrupt+0x34>)
 800d8f0:	2207      	movs	r2, #7
 800d8f2:	601a      	str	r2, [r3, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	e000e010 	.word	0xe000e010
 800d904:	e000e018 	.word	0xe000e018
 800d908:	20000034 	.word	0x20000034
 800d90c:	10624dd3 	.word	0x10624dd3
 800d910:	e000e014 	.word	0xe000e014

0800d914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d924 <vPortEnableVFP+0x10>
 800d918:	6801      	ldr	r1, [r0, #0]
 800d91a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d91e:	6001      	str	r1, [r0, #0]
 800d920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d922:	bf00      	nop
 800d924:	e000ed88 	.word	0xe000ed88

0800d928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d92e:	f3ef 8305 	mrs	r3, IPSR
 800d932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b0f      	cmp	r3, #15
 800d938:	d914      	bls.n	800d964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <vPortValidateInterruptPriority+0x70>)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	4413      	add	r3, r2
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d944:	4b15      	ldr	r3, [pc, #84]	; (800d99c <vPortValidateInterruptPriority+0x74>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	7afa      	ldrb	r2, [r7, #11]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d20a      	bcs.n	800d964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	607b      	str	r3, [r7, #4]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <vPortValidateInterruptPriority+0x78>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d96c:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <vPortValidateInterruptPriority+0x7c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d90a      	bls.n	800d98a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	603b      	str	r3, [r7, #0]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <vPortValidateInterruptPriority+0x60>
	}
 800d98a:	bf00      	nop
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	e000e3f0 	.word	0xe000e3f0
 800d99c:	200013a4 	.word	0x200013a4
 800d9a0:	e000ed0c 	.word	0xe000ed0c
 800d9a4:	200013a8 	.word	0x200013a8

0800d9a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	; 0x28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9b4:	f7fe fc48 	bl	800c248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9b8:	4b5b      	ldr	r3, [pc, #364]	; (800db28 <pvPortMalloc+0x180>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9c0:	f000 f920 	bl	800dc04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9c4:	4b59      	ldr	r3, [pc, #356]	; (800db2c <pvPortMalloc+0x184>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f040 8093 	bne.w	800daf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01d      	beq.n	800da14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9d8:	2208      	movs	r2, #8
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4413      	add	r3, r2
 800d9de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d014      	beq.n	800da14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f023 0307 	bic.w	r3, r3, #7
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00a      	beq.n	800da14 <pvPortMalloc+0x6c>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	617b      	str	r3, [r7, #20]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d06e      	beq.n	800daf8 <pvPortMalloc+0x150>
 800da1a:	4b45      	ldr	r3, [pc, #276]	; (800db30 <pvPortMalloc+0x188>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d869      	bhi.n	800daf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da24:	4b43      	ldr	r3, [pc, #268]	; (800db34 <pvPortMalloc+0x18c>)
 800da26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da28:	4b42      	ldr	r3, [pc, #264]	; (800db34 <pvPortMalloc+0x18c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da2e:	e004      	b.n	800da3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d903      	bls.n	800da4c <pvPortMalloc+0xa4>
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1f1      	bne.n	800da30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da4c:	4b36      	ldr	r3, [pc, #216]	; (800db28 <pvPortMalloc+0x180>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da52:	429a      	cmp	r2, r3
 800da54:	d050      	beq.n	800daf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2208      	movs	r2, #8
 800da5c:	4413      	add	r3, r2
 800da5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	1ad2      	subs	r2, r2, r3
 800da70:	2308      	movs	r3, #8
 800da72:	005b      	lsls	r3, r3, #1
 800da74:	429a      	cmp	r2, r3
 800da76:	d91f      	bls.n	800dab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4413      	add	r3, r2
 800da7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00a      	beq.n	800daa0 <pvPortMalloc+0xf8>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	613b      	str	r3, [r7, #16]
}
 800da9c:	bf00      	nop
 800da9e:	e7fe      	b.n	800da9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	1ad2      	subs	r2, r2, r3
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dab2:	69b8      	ldr	r0, [r7, #24]
 800dab4:	f000 f908 	bl	800dcc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dab8:	4b1d      	ldr	r3, [pc, #116]	; (800db30 <pvPortMalloc+0x188>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	4a1b      	ldr	r2, [pc, #108]	; (800db30 <pvPortMalloc+0x188>)
 800dac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dac6:	4b1a      	ldr	r3, [pc, #104]	; (800db30 <pvPortMalloc+0x188>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <pvPortMalloc+0x190>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d203      	bcs.n	800dada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <pvPortMalloc+0x188>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a18      	ldr	r2, [pc, #96]	; (800db38 <pvPortMalloc+0x190>)
 800dad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	685a      	ldr	r2, [r3, #4]
 800dade:	4b13      	ldr	r3, [pc, #76]	; (800db2c <pvPortMalloc+0x184>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	431a      	orrs	r2, r3
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800daee:	4b13      	ldr	r3, [pc, #76]	; (800db3c <pvPortMalloc+0x194>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3301      	adds	r3, #1
 800daf4:	4a11      	ldr	r2, [pc, #68]	; (800db3c <pvPortMalloc+0x194>)
 800daf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800daf8:	f7fe fbb4 	bl	800c264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	f003 0307 	and.w	r3, r3, #7
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <pvPortMalloc+0x174>
	__asm volatile
 800db06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	60fb      	str	r3, [r7, #12]
}
 800db18:	bf00      	nop
 800db1a:	e7fe      	b.n	800db1a <pvPortMalloc+0x172>
	return pvReturn;
 800db1c:	69fb      	ldr	r3, [r7, #28]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3728      	adds	r7, #40	; 0x28
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20004fb4 	.word	0x20004fb4
 800db2c:	20004fc8 	.word	0x20004fc8
 800db30:	20004fb8 	.word	0x20004fb8
 800db34:	20004fac 	.word	0x20004fac
 800db38:	20004fbc 	.word	0x20004fbc
 800db3c:	20004fc0 	.word	0x20004fc0

0800db40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d04d      	beq.n	800dbee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db52:	2308      	movs	r3, #8
 800db54:	425b      	negs	r3, r3
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4413      	add	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <vPortFree+0xb8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4013      	ands	r3, r2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <vPortFree+0x44>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	60fb      	str	r3, [r7, #12]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00a      	beq.n	800dba2 <vPortFree+0x62>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	60bb      	str	r3, [r7, #8]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	4b14      	ldr	r3, [pc, #80]	; (800dbf8 <vPortFree+0xb8>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d01e      	beq.n	800dbee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11a      	bne.n	800dbee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4b0e      	ldr	r3, [pc, #56]	; (800dbf8 <vPortFree+0xb8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	401a      	ands	r2, r3
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbc8:	f7fe fb3e 	bl	800c248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <vPortFree+0xbc>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	4a09      	ldr	r2, [pc, #36]	; (800dbfc <vPortFree+0xbc>)
 800dbd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbda:	6938      	ldr	r0, [r7, #16]
 800dbdc:	f000 f874 	bl	800dcc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbe0:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <vPortFree+0xc0>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a06      	ldr	r2, [pc, #24]	; (800dc00 <vPortFree+0xc0>)
 800dbe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbea:	f7fe fb3b 	bl	800c264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbee:	bf00      	nop
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20004fc8 	.word	0x20004fc8
 800dbfc:	20004fb8 	.word	0x20004fb8
 800dc00:	20004fc4 	.word	0x20004fc4

0800dc04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc10:	4b27      	ldr	r3, [pc, #156]	; (800dcb0 <prvHeapInit+0xac>)
 800dc12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00c      	beq.n	800dc38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3307      	adds	r3, #7
 800dc22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f023 0307 	bic.w	r3, r3, #7
 800dc2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	4a1f      	ldr	r2, [pc, #124]	; (800dcb0 <prvHeapInit+0xac>)
 800dc34:	4413      	add	r3, r2
 800dc36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc3c:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <prvHeapInit+0xb0>)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc42:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <prvHeapInit+0xb0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc50:	2208      	movs	r2, #8
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f023 0307 	bic.w	r3, r3, #7
 800dc5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	4a15      	ldr	r2, [pc, #84]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc66:	4b14      	ldr	r3, [pc, #80]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc6e:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc84:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	4a0a      	ldr	r2, [pc, #40]	; (800dcbc <prvHeapInit+0xb8>)
 800dc92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	4a09      	ldr	r2, [pc, #36]	; (800dcc0 <prvHeapInit+0xbc>)
 800dc9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc9c:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <prvHeapInit+0xc0>)
 800dc9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dca2:	601a      	str	r2, [r3, #0]
}
 800dca4:	bf00      	nop
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	200013ac 	.word	0x200013ac
 800dcb4:	20004fac 	.word	0x20004fac
 800dcb8:	20004fb4 	.word	0x20004fb4
 800dcbc:	20004fbc 	.word	0x20004fbc
 800dcc0:	20004fb8 	.word	0x20004fb8
 800dcc4:	20004fc8 	.word	0x20004fc8

0800dcc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcd0:	4b28      	ldr	r3, [pc, #160]	; (800dd74 <prvInsertBlockIntoFreeList+0xac>)
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e002      	b.n	800dcdc <prvInsertBlockIntoFreeList+0x14>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d8f7      	bhi.n	800dcd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d108      	bne.n	800dd0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	441a      	add	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	441a      	add	r2, r3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d118      	bne.n	800dd50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b15      	ldr	r3, [pc, #84]	; (800dd78 <prvInsertBlockIntoFreeList+0xb0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d00d      	beq.n	800dd46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	441a      	add	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
 800dd44:	e008      	b.n	800dd58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <prvInsertBlockIntoFreeList+0xb0>)
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	e003      	b.n	800dd58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d002      	beq.n	800dd66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20004fac 	.word	0x20004fac
 800dd78:	20004fb4 	.word	0x20004fb4

0800dd7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dd80:	2200      	movs	r2, #0
 800dd82:	4912      	ldr	r1, [pc, #72]	; (800ddcc <MX_USB_DEVICE_Init+0x50>)
 800dd84:	4812      	ldr	r0, [pc, #72]	; (800ddd0 <MX_USB_DEVICE_Init+0x54>)
 800dd86:	f7fb fe11 	bl	80099ac <USBD_Init>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dd90:	f7f4 ff84 	bl	8002c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dd94:	490f      	ldr	r1, [pc, #60]	; (800ddd4 <MX_USB_DEVICE_Init+0x58>)
 800dd96:	480e      	ldr	r0, [pc, #56]	; (800ddd0 <MX_USB_DEVICE_Init+0x54>)
 800dd98:	f7fb fe38 	bl	8009a0c <USBD_RegisterClass>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dda2:	f7f4 ff7b 	bl	8002c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dda6:	490c      	ldr	r1, [pc, #48]	; (800ddd8 <MX_USB_DEVICE_Init+0x5c>)
 800dda8:	4809      	ldr	r0, [pc, #36]	; (800ddd0 <MX_USB_DEVICE_Init+0x54>)
 800ddaa:	f7fb fd29 	bl	8009800 <USBD_CDC_RegisterInterface>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ddb4:	f7f4 ff72 	bl	8002c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ddb8:	4805      	ldr	r0, [pc, #20]	; (800ddd0 <MX_USB_DEVICE_Init+0x54>)
 800ddba:	f7fb fe5d 	bl	8009a78 <USBD_Start>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ddc4:	f7f4 ff6a 	bl	8002c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddc8:	bf00      	nop
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	200000e4 	.word	0x200000e4
 800ddd0:	20004fcc 	.word	0x20004fcc
 800ddd4:	2000004c 	.word	0x2000004c
 800ddd8:	200000d0 	.word	0x200000d0

0800dddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dde0:	2200      	movs	r2, #0
 800dde2:	4905      	ldr	r1, [pc, #20]	; (800ddf8 <CDC_Init_FS+0x1c>)
 800dde4:	4805      	ldr	r0, [pc, #20]	; (800ddfc <CDC_Init_FS+0x20>)
 800dde6:	f7fb fd25 	bl	8009834 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ddea:	4905      	ldr	r1, [pc, #20]	; (800de00 <CDC_Init_FS+0x24>)
 800ddec:	4803      	ldr	r0, [pc, #12]	; (800ddfc <CDC_Init_FS+0x20>)
 800ddee:	f7fb fd43 	bl	8009878 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ddf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	20005aa8 	.word	0x20005aa8
 800ddfc:	20004fcc 	.word	0x20004fcc
 800de00:	200052a8 	.word	0x200052a8

0800de04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de04:	b480      	push	{r7}
 800de06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	6039      	str	r1, [r7, #0]
 800de1e:	71fb      	strb	r3, [r7, #7]
 800de20:	4613      	mov	r3, r2
 800de22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de24:	79fb      	ldrb	r3, [r7, #7]
 800de26:	2b23      	cmp	r3, #35	; 0x23
 800de28:	d84a      	bhi.n	800dec0 <CDC_Control_FS+0xac>
 800de2a:	a201      	add	r2, pc, #4	; (adr r2, 800de30 <CDC_Control_FS+0x1c>)
 800de2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de30:	0800dec1 	.word	0x0800dec1
 800de34:	0800dec1 	.word	0x0800dec1
 800de38:	0800dec1 	.word	0x0800dec1
 800de3c:	0800dec1 	.word	0x0800dec1
 800de40:	0800dec1 	.word	0x0800dec1
 800de44:	0800dec1 	.word	0x0800dec1
 800de48:	0800dec1 	.word	0x0800dec1
 800de4c:	0800dec1 	.word	0x0800dec1
 800de50:	0800dec1 	.word	0x0800dec1
 800de54:	0800dec1 	.word	0x0800dec1
 800de58:	0800dec1 	.word	0x0800dec1
 800de5c:	0800dec1 	.word	0x0800dec1
 800de60:	0800dec1 	.word	0x0800dec1
 800de64:	0800dec1 	.word	0x0800dec1
 800de68:	0800dec1 	.word	0x0800dec1
 800de6c:	0800dec1 	.word	0x0800dec1
 800de70:	0800dec1 	.word	0x0800dec1
 800de74:	0800dec1 	.word	0x0800dec1
 800de78:	0800dec1 	.word	0x0800dec1
 800de7c:	0800dec1 	.word	0x0800dec1
 800de80:	0800dec1 	.word	0x0800dec1
 800de84:	0800dec1 	.word	0x0800dec1
 800de88:	0800dec1 	.word	0x0800dec1
 800de8c:	0800dec1 	.word	0x0800dec1
 800de90:	0800dec1 	.word	0x0800dec1
 800de94:	0800dec1 	.word	0x0800dec1
 800de98:	0800dec1 	.word	0x0800dec1
 800de9c:	0800dec1 	.word	0x0800dec1
 800dea0:	0800dec1 	.word	0x0800dec1
 800dea4:	0800dec1 	.word	0x0800dec1
 800dea8:	0800dec1 	.word	0x0800dec1
 800deac:	0800dec1 	.word	0x0800dec1
 800deb0:	0800dec1 	.word	0x0800dec1
 800deb4:	0800dec1 	.word	0x0800dec1
 800deb8:	0800dec1 	.word	0x0800dec1
 800debc:	0800dec1 	.word	0x0800dec1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dec0:	bf00      	nop
  }

  return (USBD_OK);
 800dec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	4805      	ldr	r0, [pc, #20]	; (800def4 <CDC_Receive_FS+0x24>)
 800dede:	f7fb fccb 	bl	8009878 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dee2:	4804      	ldr	r0, [pc, #16]	; (800def4 <CDC_Receive_FS+0x24>)
 800dee4:	f7fb fd2c 	bl	8009940 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dee8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800deea:	4618      	mov	r0, r3
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	20004fcc 	.word	0x20004fcc

0800def8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800df08:	4b0d      	ldr	r3, [pc, #52]	; (800df40 <CDC_Transmit_FS+0x48>)
 800df0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800df1a:	2301      	movs	r3, #1
 800df1c:	e00b      	b.n	800df36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800df1e:	887b      	ldrh	r3, [r7, #2]
 800df20:	461a      	mov	r2, r3
 800df22:	6879      	ldr	r1, [r7, #4]
 800df24:	4806      	ldr	r0, [pc, #24]	; (800df40 <CDC_Transmit_FS+0x48>)
 800df26:	f7fb fc85 	bl	8009834 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800df2a:	4805      	ldr	r0, [pc, #20]	; (800df40 <CDC_Transmit_FS+0x48>)
 800df2c:	f7fb fcc2 	bl	80098b4 <USBD_CDC_TransmitPacket>
 800df30:	4603      	mov	r3, r0
 800df32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800df34:	7bfb      	ldrb	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20004fcc 	.word	0x20004fcc

0800df44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df44:	b480      	push	{r7}
 800df46:	b087      	sub	sp, #28
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
	...

0800df68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4603      	mov	r3, r0
 800df70:	6039      	str	r1, [r7, #0]
 800df72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	2212      	movs	r2, #18
 800df78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df7a:	4b03      	ldr	r3, [pc, #12]	; (800df88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr
 800df88:	20000100 	.word	0x20000100

0800df8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	6039      	str	r1, [r7, #0]
 800df96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	2204      	movs	r2, #4
 800df9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df9e:	4b03      	ldr	r3, [pc, #12]	; (800dfac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	20000114 	.word	0x20000114

0800dfb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	6039      	str	r1, [r7, #0]
 800dfba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfbc:	79fb      	ldrb	r3, [r7, #7]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	4907      	ldr	r1, [pc, #28]	; (800dfe4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfc6:	4808      	ldr	r0, [pc, #32]	; (800dfe8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfc8:	f7fc ff02 	bl	800add0 <USBD_GetString>
 800dfcc:	e004      	b.n	800dfd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	4904      	ldr	r1, [pc, #16]	; (800dfe4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfd2:	4805      	ldr	r0, [pc, #20]	; (800dfe8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfd4:	f7fc fefc 	bl	800add0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfd8:	4b02      	ldr	r3, [pc, #8]	; (800dfe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	200062a8 	.word	0x200062a8
 800dfe8:	08011c68 	.word	0x08011c68

0800dfec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	4904      	ldr	r1, [pc, #16]	; (800e00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dffc:	4804      	ldr	r0, [pc, #16]	; (800e010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dffe:	f7fc fee7 	bl	800add0 <USBD_GetString>
  return USBD_StrDesc;
 800e002:	4b02      	ldr	r3, [pc, #8]	; (800e00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e004:	4618      	mov	r0, r3
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	200062a8 	.word	0x200062a8
 800e010:	08011c80 	.word	0x08011c80

0800e014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4603      	mov	r3, r0
 800e01c:	6039      	str	r1, [r7, #0]
 800e01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	221a      	movs	r2, #26
 800e024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e026:	f000 f843 	bl	800e0b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e02a:	4b02      	ldr	r3, [pc, #8]	; (800e034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	20000118 	.word	0x20000118

0800e038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	6039      	str	r1, [r7, #0]
 800e042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e044:	79fb      	ldrb	r3, [r7, #7]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d105      	bne.n	800e056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	4907      	ldr	r1, [pc, #28]	; (800e06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e04e:	4808      	ldr	r0, [pc, #32]	; (800e070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e050:	f7fc febe 	bl	800add0 <USBD_GetString>
 800e054:	e004      	b.n	800e060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	4904      	ldr	r1, [pc, #16]	; (800e06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e05a:	4805      	ldr	r0, [pc, #20]	; (800e070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e05c:	f7fc feb8 	bl	800add0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e060:	4b02      	ldr	r3, [pc, #8]	; (800e06c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	200062a8 	.word	0x200062a8
 800e070:	08011c94 	.word	0x08011c94

0800e074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	6039      	str	r1, [r7, #0]
 800e07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d105      	bne.n	800e092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	4907      	ldr	r1, [pc, #28]	; (800e0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e08a:	4808      	ldr	r0, [pc, #32]	; (800e0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e08c:	f7fc fea0 	bl	800add0 <USBD_GetString>
 800e090:	e004      	b.n	800e09c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	4904      	ldr	r1, [pc, #16]	; (800e0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e096:	4805      	ldr	r0, [pc, #20]	; (800e0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e098:	f7fc fe9a 	bl	800add0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e09c:	4b02      	ldr	r3, [pc, #8]	; (800e0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200062a8 	.word	0x200062a8
 800e0ac:	08011ca0 	.word	0x08011ca0

0800e0b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0b6:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <Get_SerialNum+0x44>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0bc:	4b0e      	ldr	r3, [pc, #56]	; (800e0f8 <Get_SerialNum+0x48>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0c2:	4b0e      	ldr	r3, [pc, #56]	; (800e0fc <Get_SerialNum+0x4c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d009      	beq.n	800e0ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0d6:	2208      	movs	r2, #8
 800e0d8:	4909      	ldr	r1, [pc, #36]	; (800e100 <Get_SerialNum+0x50>)
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 f814 	bl	800e108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0e0:	2204      	movs	r2, #4
 800e0e2:	4908      	ldr	r1, [pc, #32]	; (800e104 <Get_SerialNum+0x54>)
 800e0e4:	68b8      	ldr	r0, [r7, #8]
 800e0e6:	f000 f80f 	bl	800e108 <IntToUnicode>
  }
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	1fff7a10 	.word	0x1fff7a10
 800e0f8:	1fff7a14 	.word	0x1fff7a14
 800e0fc:	1fff7a18 	.word	0x1fff7a18
 800e100:	2000011a 	.word	0x2000011a
 800e104:	2000012a 	.word	0x2000012a

0800e108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	4613      	mov	r3, r2
 800e114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e11a:	2300      	movs	r3, #0
 800e11c:	75fb      	strb	r3, [r7, #23]
 800e11e:	e027      	b.n	800e170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	0f1b      	lsrs	r3, r3, #28
 800e124:	2b09      	cmp	r3, #9
 800e126:	d80b      	bhi.n	800e140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	0f1b      	lsrs	r3, r3, #28
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	4619      	mov	r1, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	440b      	add	r3, r1
 800e138:	3230      	adds	r2, #48	; 0x30
 800e13a:	b2d2      	uxtb	r2, r2
 800e13c:	701a      	strb	r2, [r3, #0]
 800e13e:	e00a      	b.n	800e156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	0f1b      	lsrs	r3, r3, #28
 800e144:	b2da      	uxtb	r2, r3
 800e146:	7dfb      	ldrb	r3, [r7, #23]
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	4619      	mov	r1, r3
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	440b      	add	r3, r1
 800e150:	3237      	adds	r2, #55	; 0x37
 800e152:	b2d2      	uxtb	r2, r2
 800e154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	011b      	lsls	r3, r3, #4
 800e15a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e15c:	7dfb      	ldrb	r3, [r7, #23]
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	3301      	adds	r3, #1
 800e162:	68ba      	ldr	r2, [r7, #8]
 800e164:	4413      	add	r3, r2
 800e166:	2200      	movs	r2, #0
 800e168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
 800e16c:	3301      	adds	r3, #1
 800e16e:	75fb      	strb	r3, [r7, #23]
 800e170:	7dfa      	ldrb	r2, [r7, #23]
 800e172:	79fb      	ldrb	r3, [r7, #7]
 800e174:	429a      	cmp	r2, r3
 800e176:	d3d3      	bcc.n	800e120 <IntToUnicode+0x18>
  }
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	371c      	adds	r7, #28
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr
	...

0800e188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08a      	sub	sp, #40	; 0x28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e190:	f107 0314 	add.w	r3, r7, #20
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
 800e198:	605a      	str	r2, [r3, #4]
 800e19a:	609a      	str	r2, [r3, #8]
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e1a8:	d13a      	bne.n	800e220 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	613b      	str	r3, [r7, #16]
 800e1ae:	4b1e      	ldr	r3, [pc, #120]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b2:	4a1d      	ldr	r2, [pc, #116]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1b4:	f043 0301 	orr.w	r3, r3, #1
 800e1b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e1ba:	4b1b      	ldr	r3, [pc, #108]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	613b      	str	r3, [r7, #16]
 800e1c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e1c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e1ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1d4:	2303      	movs	r3, #3
 800e1d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e1d8:	230a      	movs	r3, #10
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1dc:	f107 0314 	add.w	r3, r7, #20
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	4812      	ldr	r0, [pc, #72]	; (800e22c <HAL_PCD_MspInit+0xa4>)
 800e1e4:	f7f5 fe2c 	bl	8003e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e1e8:	4b0f      	ldr	r3, [pc, #60]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ec:	4a0e      	ldr	r2, [pc, #56]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f2:	6353      	str	r3, [r2, #52]	; 0x34
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	4b0b      	ldr	r3, [pc, #44]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1fc:	4a0a      	ldr	r2, [pc, #40]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e1fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e202:	6453      	str	r3, [r2, #68]	; 0x44
 800e204:	4b08      	ldr	r3, [pc, #32]	; (800e228 <HAL_PCD_MspInit+0xa0>)
 800e206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e210:	2200      	movs	r2, #0
 800e212:	2105      	movs	r1, #5
 800e214:	2043      	movs	r0, #67	; 0x43
 800e216:	f7f5 fdce 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e21a:	2043      	movs	r0, #67	; 0x43
 800e21c:	f7f5 fde7 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e220:	bf00      	nop
 800e222:	3728      	adds	r7, #40	; 0x28
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	40023800 	.word	0x40023800
 800e22c:	40020000 	.word	0x40020000

0800e230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e244:	4619      	mov	r1, r3
 800e246:	4610      	mov	r0, r2
 800e248:	f7fb fc63 	bl	8009b12 <USBD_LL_SetupStage>
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e266:	78fa      	ldrb	r2, [r7, #3]
 800e268:	6879      	ldr	r1, [r7, #4]
 800e26a:	4613      	mov	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	4413      	add	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	440b      	add	r3, r1
 800e274:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	4619      	mov	r1, r3
 800e27e:	f7fb fc9d 	bl	8009bbc <USBD_LL_DataOutStage>
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b082      	sub	sp, #8
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	460b      	mov	r3, r1
 800e294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e29c:	78fa      	ldrb	r2, [r7, #3]
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	00db      	lsls	r3, r3, #3
 800e2a4:	4413      	add	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	440b      	add	r3, r1
 800e2aa:	334c      	adds	r3, #76	; 0x4c
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	f7fb fd36 	bl	8009d22 <USBD_LL_DataInStage>
}
 800e2b6:	bf00      	nop
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fb fe6a 	bl	8009fa6 <USBD_LL_SOF>
}
 800e2d2:	bf00      	nop
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b084      	sub	sp, #16
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d001      	beq.n	800e2f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e2ee:	f7f4 fcd5 	bl	8002c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e2f8:	7bfa      	ldrb	r2, [r7, #15]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fb fe14 	bl	8009f2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fb fdbc 	bl	8009e86 <USBD_LL_Reset>
}
 800e30e:	bf00      	nop
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e326:	4618      	mov	r0, r3
 800e328:	f7fb fe0f 	bl	8009f4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	6812      	ldr	r2, [r2, #0]
 800e33a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e33e:	f043 0301 	orr.w	r3, r3, #1
 800e342:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a1b      	ldr	r3, [r3, #32]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d005      	beq.n	800e358 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e34c:	4b04      	ldr	r3, [pc, #16]	; (800e360 <HAL_PCD_SuspendCallback+0x48>)
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	4a03      	ldr	r2, [pc, #12]	; (800e360 <HAL_PCD_SuspendCallback+0x48>)
 800e352:	f043 0306 	orr.w	r3, r3, #6
 800e356:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e358:	bf00      	nop
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	e000ed00 	.word	0xe000ed00

0800e364 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e372:	4618      	mov	r0, r3
 800e374:	f7fb fdff 	bl	8009f76 <USBD_LL_Resume>
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	4611      	mov	r1, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f7fb fe57 	bl	800a04a <USBD_LL_IsoOUTIncomplete>
}
 800e39c:	bf00      	nop
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3b6:	78fa      	ldrb	r2, [r7, #3]
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fb fe13 	bl	8009fe6 <USBD_LL_IsoINIncomplete>
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fb fe69 	bl	800a0ae <USBD_LL_DevConnected>
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fb fe66 	bl	800a0c4 <USBD_LL_DevDisconnected>
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d13c      	bne.n	800e48a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e410:	4a20      	ldr	r2, [pc, #128]	; (800e494 <USBD_LL_Init+0x94>)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4a1e      	ldr	r2, [pc, #120]	; (800e494 <USBD_LL_Init+0x94>)
 800e41c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e420:	4b1c      	ldr	r3, [pc, #112]	; (800e494 <USBD_LL_Init+0x94>)
 800e422:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e426:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e428:	4b1a      	ldr	r3, [pc, #104]	; (800e494 <USBD_LL_Init+0x94>)
 800e42a:	2204      	movs	r2, #4
 800e42c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e42e:	4b19      	ldr	r3, [pc, #100]	; (800e494 <USBD_LL_Init+0x94>)
 800e430:	2202      	movs	r2, #2
 800e432:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e434:	4b17      	ldr	r3, [pc, #92]	; (800e494 <USBD_LL_Init+0x94>)
 800e436:	2200      	movs	r2, #0
 800e438:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e43a:	4b16      	ldr	r3, [pc, #88]	; (800e494 <USBD_LL_Init+0x94>)
 800e43c:	2202      	movs	r2, #2
 800e43e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e440:	4b14      	ldr	r3, [pc, #80]	; (800e494 <USBD_LL_Init+0x94>)
 800e442:	2200      	movs	r2, #0
 800e444:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e446:	4b13      	ldr	r3, [pc, #76]	; (800e494 <USBD_LL_Init+0x94>)
 800e448:	2200      	movs	r2, #0
 800e44a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e44c:	4b11      	ldr	r3, [pc, #68]	; (800e494 <USBD_LL_Init+0x94>)
 800e44e:	2200      	movs	r2, #0
 800e450:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e452:	4b10      	ldr	r3, [pc, #64]	; (800e494 <USBD_LL_Init+0x94>)
 800e454:	2200      	movs	r2, #0
 800e456:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e458:	4b0e      	ldr	r3, [pc, #56]	; (800e494 <USBD_LL_Init+0x94>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e45e:	480d      	ldr	r0, [pc, #52]	; (800e494 <USBD_LL_Init+0x94>)
 800e460:	f7f5 fea4 	bl	80041ac <HAL_PCD_Init>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e46a:	f7f4 fc17 	bl	8002c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e46e:	2180      	movs	r1, #128	; 0x80
 800e470:	4808      	ldr	r0, [pc, #32]	; (800e494 <USBD_LL_Init+0x94>)
 800e472:	f7f7 f8fc 	bl	800566e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e476:	2240      	movs	r2, #64	; 0x40
 800e478:	2100      	movs	r1, #0
 800e47a:	4806      	ldr	r0, [pc, #24]	; (800e494 <USBD_LL_Init+0x94>)
 800e47c:	f7f7 f8b0 	bl	80055e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e480:	2280      	movs	r2, #128	; 0x80
 800e482:	2101      	movs	r1, #1
 800e484:	4803      	ldr	r0, [pc, #12]	; (800e494 <USBD_LL_Init+0x94>)
 800e486:	f7f7 f8ab 	bl	80055e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	200064a8 	.word	0x200064a8

0800e498 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7f5 ff99 	bl	80043e6 <HAL_PCD_Start>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 f942 	bl	800e744 <USBD_Get_USB_Status>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	4608      	mov	r0, r1
 800e4d8:	4611      	mov	r1, r2
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4603      	mov	r3, r0
 800e4de:	70fb      	strb	r3, [r7, #3]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	70bb      	strb	r3, [r7, #2]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e4f6:	78bb      	ldrb	r3, [r7, #2]
 800e4f8:	883a      	ldrh	r2, [r7, #0]
 800e4fa:	78f9      	ldrb	r1, [r7, #3]
 800e4fc:	f7f6 fc6a 	bl	8004dd4 <HAL_PCD_EP_Open>
 800e500:	4603      	mov	r3, r0
 800e502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e504:	7bfb      	ldrb	r3, [r7, #15]
 800e506:	4618      	mov	r0, r3
 800e508:	f000 f91c 	bl	800e744 <USBD_Get_USB_Status>
 800e50c:	4603      	mov	r3, r0
 800e50e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e510:	7bbb      	ldrb	r3, [r7, #14]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b084      	sub	sp, #16
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	460b      	mov	r3, r1
 800e524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e526:	2300      	movs	r3, #0
 800e528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e534:	78fa      	ldrb	r2, [r7, #3]
 800e536:	4611      	mov	r1, r2
 800e538:	4618      	mov	r0, r3
 800e53a:	f7f6 fcb3 	bl	8004ea4 <HAL_PCD_EP_Close>
 800e53e:	4603      	mov	r3, r0
 800e540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e542:	7bfb      	ldrb	r3, [r7, #15]
 800e544:	4618      	mov	r0, r3
 800e546:	f000 f8fd 	bl	800e744 <USBD_Get_USB_Status>
 800e54a:	4603      	mov	r3, r0
 800e54c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e54e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e564:	2300      	movs	r3, #0
 800e566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e568:	2300      	movs	r3, #0
 800e56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e572:	78fa      	ldrb	r2, [r7, #3]
 800e574:	4611      	mov	r1, r2
 800e576:	4618      	mov	r0, r3
 800e578:	f7f6 fd8b 	bl	8005092 <HAL_PCD_EP_SetStall>
 800e57c:	4603      	mov	r3, r0
 800e57e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e580:	7bfb      	ldrb	r3, [r7, #15]
 800e582:	4618      	mov	r0, r3
 800e584:	f000 f8de 	bl	800e744 <USBD_Get_USB_Status>
 800e588:	4603      	mov	r3, r0
 800e58a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b084      	sub	sp, #16
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5b0:	78fa      	ldrb	r2, [r7, #3]
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7f6 fdd0 	bl	800515a <HAL_PCD_EP_ClrStall>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 f8bf 	bl	800e744 <USBD_Get_USB_Status>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	460b      	mov	r3, r1
 800e5de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e5e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	da0b      	bge.n	800e608 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5f6:	68f9      	ldr	r1, [r7, #12]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	4413      	add	r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	440b      	add	r3, r1
 800e602:	333e      	adds	r3, #62	; 0x3e
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	e00b      	b.n	800e620 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e608:	78fb      	ldrb	r3, [r7, #3]
 800e60a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e60e:	68f9      	ldr	r1, [r7, #12]
 800e610:	4613      	mov	r3, r2
 800e612:	00db      	lsls	r3, r3, #3
 800e614:	4413      	add	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	440b      	add	r3, r1
 800e61a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e61e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e63c:	2300      	movs	r3, #0
 800e63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e646:	78fa      	ldrb	r2, [r7, #3]
 800e648:	4611      	mov	r1, r2
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7f6 fb9d 	bl	8004d8a <HAL_PCD_SetAddress>
 800e650:	4603      	mov	r3, r0
 800e652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e654:	7bfb      	ldrb	r3, [r7, #15]
 800e656:	4618      	mov	r0, r3
 800e658:	f000 f874 	bl	800e744 <USBD_Get_USB_Status>
 800e65c:	4603      	mov	r3, r0
 800e65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e660:	7bbb      	ldrb	r3, [r7, #14]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b086      	sub	sp, #24
 800e66e:	af00      	add	r7, sp, #0
 800e670:	60f8      	str	r0, [r7, #12]
 800e672:	607a      	str	r2, [r7, #4]
 800e674:	603b      	str	r3, [r7, #0]
 800e676:	460b      	mov	r3, r1
 800e678:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e67a:	2300      	movs	r3, #0
 800e67c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e67e:	2300      	movs	r3, #0
 800e680:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e688:	7af9      	ldrb	r1, [r7, #11]
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	f7f6 fcb6 	bl	8004ffe <HAL_PCD_EP_Transmit>
 800e692:	4603      	mov	r3, r0
 800e694:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e696:	7dfb      	ldrb	r3, [r7, #23]
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 f853 	bl	800e744 <USBD_Get_USB_Status>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3718      	adds	r7, #24
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	607a      	str	r2, [r7, #4]
 800e6b6:	603b      	str	r3, [r7, #0]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6ca:	7af9      	ldrb	r1, [r7, #11]
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	f7f6 fc32 	bl	8004f38 <HAL_PCD_EP_Receive>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6d8:	7dfb      	ldrb	r3, [r7, #23]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f000 f832 	bl	800e744 <USBD_Get_USB_Status>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e700:	78fa      	ldrb	r2, [r7, #3]
 800e702:	4611      	mov	r1, r2
 800e704:	4618      	mov	r0, r3
 800e706:	f7f6 fc62 	bl	8004fce <HAL_PCD_EP_GetRxCount>
 800e70a:	4603      	mov	r3, r0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e71c:	4b03      	ldr	r3, [pc, #12]	; (800e72c <USBD_static_malloc+0x18>)
}
 800e71e:	4618      	mov	r0, r3
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	200069b4 	.word	0x200069b4

0800e730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]

}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	2b03      	cmp	r3, #3
 800e756:	d817      	bhi.n	800e788 <USBD_Get_USB_Status+0x44>
 800e758:	a201      	add	r2, pc, #4	; (adr r2, 800e760 <USBD_Get_USB_Status+0x1c>)
 800e75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75e:	bf00      	nop
 800e760:	0800e771 	.word	0x0800e771
 800e764:	0800e777 	.word	0x0800e777
 800e768:	0800e77d 	.word	0x0800e77d
 800e76c:	0800e783 	.word	0x0800e783
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]
    break;
 800e774:	e00b      	b.n	800e78e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	73fb      	strb	r3, [r7, #15]
    break;
 800e77a:	e008      	b.n	800e78e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e77c:	2301      	movs	r3, #1
 800e77e:	73fb      	strb	r3, [r7, #15]
    break;
 800e780:	e005      	b.n	800e78e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e782:	2303      	movs	r3, #3
 800e784:	73fb      	strb	r3, [r7, #15]
    break;
 800e786:	e002      	b.n	800e78e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e788:	2303      	movs	r3, #3
 800e78a:	73fb      	strb	r3, [r7, #15]
    break;
 800e78c:	bf00      	nop
  }
  return usb_status;
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3714      	adds	r7, #20
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <arm_mat_sub_f32>:
 800e79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e79e:	e891 0090 	ldmia.w	r1, {r4, r7}
 800e7a2:	6803      	ldr	r3, [r0, #0]
 800e7a4:	6846      	ldr	r6, [r0, #4]
 800e7a6:	6855      	ldr	r5, [r2, #4]
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	d14f      	bne.n	800e84c <arm_mat_sub_f32+0xb0>
 800e7ac:	6812      	ldr	r2, [r2, #0]
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d14c      	bne.n	800e84c <arm_mat_sub_f32+0xb0>
 800e7b2:	8842      	ldrh	r2, [r0, #2]
 800e7b4:	8803      	ldrh	r3, [r0, #0]
 800e7b6:	fb03 f002 	mul.w	r0, r3, r2
 800e7ba:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 800e7be:	d033      	beq.n	800e828 <arm_mat_sub_f32+0x8c>
 800e7c0:	f106 0110 	add.w	r1, r6, #16
 800e7c4:	f107 0210 	add.w	r2, r7, #16
 800e7c8:	f105 0310 	add.w	r3, r5, #16
 800e7cc:	4674      	mov	r4, lr
 800e7ce:	ed51 6a03 	vldr	s13, [r1, #-12]
 800e7d2:	ed12 5a03 	vldr	s10, [r2, #-12]
 800e7d6:	ed51 7a04 	vldr	s15, [r1, #-16]
 800e7da:	ed52 5a04 	vldr	s11, [r2, #-16]
 800e7de:	ed11 7a02 	vldr	s14, [r1, #-8]
 800e7e2:	ed12 6a02 	vldr	s12, [r2, #-8]
 800e7e6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e7ea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e7ee:	ed43 6a03 	vstr	s13, [r3, #-12]
 800e7f2:	ed43 7a04 	vstr	s15, [r3, #-16]
 800e7f6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e7fa:	ed52 6a01 	vldr	s13, [r2, #-4]
 800e7fe:	ee37 7a46 	vsub.f32	s14, s14, s12
 800e802:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e806:	3c01      	subs	r4, #1
 800e808:	ed03 7a02 	vstr	s14, [r3, #-8]
 800e80c:	ed43 7a01 	vstr	s15, [r3, #-4]
 800e810:	f101 0110 	add.w	r1, r1, #16
 800e814:	f102 0210 	add.w	r2, r2, #16
 800e818:	f103 0310 	add.w	r3, r3, #16
 800e81c:	d1d7      	bne.n	800e7ce <arm_mat_sub_f32+0x32>
 800e81e:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800e822:	441e      	add	r6, r3
 800e824:	441f      	add	r7, r3
 800e826:	441d      	add	r5, r3
 800e828:	f010 0303 	ands.w	r3, r0, #3
 800e82c:	bf18      	it	ne
 800e82e:	462a      	movne	r2, r5
 800e830:	d009      	beq.n	800e846 <arm_mat_sub_f32+0xaa>
 800e832:	ecf6 7a01 	vldmia	r6!, {s15}
 800e836:	ecb7 7a01 	vldmia	r7!, {s14}
 800e83a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e83e:	3b01      	subs	r3, #1
 800e840:	ece2 7a01 	vstmia	r2!, {s15}
 800e844:	d1f5      	bne.n	800e832 <arm_mat_sub_f32+0x96>
 800e846:	2000      	movs	r0, #0
 800e848:	b240      	sxtb	r0, r0
 800e84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e84c:	20fd      	movs	r0, #253	; 0xfd
 800e84e:	b240      	sxtb	r0, r0
 800e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e852:	bf00      	nop

0800e854 <arm_mat_mult_f32>:
 800e854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e858:	8843      	ldrh	r3, [r0, #2]
 800e85a:	880d      	ldrh	r5, [r1, #0]
 800e85c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e860:	6854      	ldr	r4, [r2, #4]
 800e862:	8800      	ldrh	r0, [r0, #0]
 800e864:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800e868:	b087      	sub	sp, #28
 800e86a:	429d      	cmp	r5, r3
 800e86c:	9003      	str	r0, [sp, #12]
 800e86e:	9404      	str	r4, [sp, #16]
 800e870:	f040 808d 	bne.w	800e98e <arm_mat_mult_f32+0x13a>
 800e874:	8813      	ldrh	r3, [r2, #0]
 800e876:	4283      	cmp	r3, r0
 800e878:	f040 8089 	bne.w	800e98e <arm_mat_mult_f32+0x13a>
 800e87c:	8853      	ldrh	r3, [r2, #2]
 800e87e:	4543      	cmp	r3, r8
 800e880:	f040 8085 	bne.w	800e98e <arm_mat_mult_f32+0x13a>
 800e884:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 800e888:	f005 0303 	and.w	r3, r5, #3
 800e88c:	461a      	mov	r2, r3
 800e88e:	9301      	str	r3, [sp, #4]
 800e890:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e894:	b29b      	uxth	r3, r3
 800e896:	3301      	adds	r3, #1
 800e898:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800e89c:	fb0b fb03 	mul.w	fp, fp, r3
 800e8a0:	3a01      	subs	r2, #1
 800e8a2:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 800e8a6:	00ab      	lsls	r3, r5, #2
 800e8a8:	b292      	uxth	r2, r2
 800e8aa:	9305      	str	r3, [sp, #20]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	3201      	adds	r2, #1
 800e8b0:	9302      	str	r3, [sp, #8]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	684c      	ldr	r4, [r1, #4]
 800e8b6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e8ba:	4651      	mov	r1, sl
 800e8bc:	ea4f 0088 	mov.w	r0, r8, lsl #2
 800e8c0:	46da      	mov	sl, fp
 800e8c2:	469b      	mov	fp, r3
 800e8c4:	9b04      	ldr	r3, [sp, #16]
 800e8c6:	9a02      	ldr	r2, [sp, #8]
 800e8c8:	2600      	movs	r6, #0
 800e8ca:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800e8ce:	f10c 0510 	add.w	r5, ip, #16
 800e8d2:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e998 <arm_mat_mult_f32+0x144>
 800e8d6:	2900      	cmp	r1, #0
 800e8d8:	d057      	beq.n	800e98a <arm_mat_mult_f32+0x136>
 800e8da:	f10e 0210 	add.w	r2, lr, #16
 800e8de:	4623      	mov	r3, r4
 800e8e0:	ed52 5a04 	vldr	s11, [r2, #-16]
 800e8e4:	edd3 6a00 	vldr	s13, [r3]
 800e8e8:	ed12 7a03 	vldr	s14, [r2, #-12]
 800e8ec:	ed12 5a02 	vldr	s10, [r2, #-8]
 800e8f0:	ed12 6a01 	vldr	s12, [r2, #-4]
 800e8f4:	4403      	add	r3, r0
 800e8f6:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800e8fa:	edd3 6a00 	vldr	s13, [r3]
 800e8fe:	4403      	add	r3, r0
 800e900:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e904:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800e908:	edd3 6a00 	vldr	s13, [r3]
 800e90c:	4403      	add	r3, r0
 800e90e:	ee77 5a27 	vadd.f32	s11, s14, s15
 800e912:	ee65 7a26 	vmul.f32	s15, s10, s13
 800e916:	edd3 6a00 	vldr	s13, [r3]
 800e91a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 800e91e:	3210      	adds	r2, #16
 800e920:	ee66 7a26 	vmul.f32	s15, s12, s13
 800e924:	42aa      	cmp	r2, r5
 800e926:	4403      	add	r3, r0
 800e928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e92c:	d1d8      	bne.n	800e8e0 <arm_mat_mult_f32+0x8c>
 800e92e:	4454      	add	r4, sl
 800e930:	4663      	mov	r3, ip
 800e932:	9a01      	ldr	r2, [sp, #4]
 800e934:	b162      	cbz	r2, 800e950 <arm_mat_mult_f32+0xfc>
 800e936:	eb03 0209 	add.w	r2, r3, r9
 800e93a:	ecf3 6a01 	vldmia	r3!, {s13}
 800e93e:	ed94 7a00 	vldr	s14, [r4]
 800e942:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e946:	4293      	cmp	r3, r2
 800e948:	4404      	add	r4, r0
 800e94a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e94e:	d1f4      	bne.n	800e93a <arm_mat_mult_f32+0xe6>
 800e950:	ece7 7a01 	vstmia	r7!, {s15}
 800e954:	3601      	adds	r6, #1
 800e956:	b2b6      	uxth	r6, r6
 800e958:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e95c:	4546      	cmp	r6, r8
 800e95e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 800e962:	d1b6      	bne.n	800e8d2 <arm_mat_mult_f32+0x7e>
 800e964:	9a03      	ldr	r2, [sp, #12]
 800e966:	9c02      	ldr	r4, [sp, #8]
 800e968:	9d05      	ldr	r5, [sp, #20]
 800e96a:	3a01      	subs	r2, #1
 800e96c:	4434      	add	r4, r6
 800e96e:	b2a4      	uxth	r4, r4
 800e970:	b292      	uxth	r2, r2
 800e972:	9402      	str	r4, [sp, #8]
 800e974:	9203      	str	r2, [sp, #12]
 800e976:	44ae      	add	lr, r5
 800e978:	44ac      	add	ip, r5
 800e97a:	461c      	mov	r4, r3
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	d1a1      	bne.n	800e8c4 <arm_mat_mult_f32+0x70>
 800e980:	4610      	mov	r0, r2
 800e982:	b240      	sxtb	r0, r0
 800e984:	b007      	add	sp, #28
 800e986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98a:	4673      	mov	r3, lr
 800e98c:	e7d1      	b.n	800e932 <arm_mat_mult_f32+0xde>
 800e98e:	20fd      	movs	r0, #253	; 0xfd
 800e990:	b240      	sxtb	r0, r0
 800e992:	b007      	add	sp, #28
 800e994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e998:	00000000 	.word	0x00000000

0800e99c <arm_mat_init_f32>:
 800e99c:	8001      	strh	r1, [r0, #0]
 800e99e:	8042      	strh	r2, [r0, #2]
 800e9a0:	6043      	str	r3, [r0, #4]
 800e9a2:	4770      	bx	lr

0800e9a4 <arm_mat_add_f32>:
 800e9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a6:	e891 0090 	ldmia.w	r1, {r4, r7}
 800e9aa:	6803      	ldr	r3, [r0, #0]
 800e9ac:	6846      	ldr	r6, [r0, #4]
 800e9ae:	6855      	ldr	r5, [r2, #4]
 800e9b0:	42a3      	cmp	r3, r4
 800e9b2:	d14f      	bne.n	800ea54 <arm_mat_add_f32+0xb0>
 800e9b4:	6812      	ldr	r2, [r2, #0]
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d14c      	bne.n	800ea54 <arm_mat_add_f32+0xb0>
 800e9ba:	8842      	ldrh	r2, [r0, #2]
 800e9bc:	8803      	ldrh	r3, [r0, #0]
 800e9be:	fb03 f002 	mul.w	r0, r3, r2
 800e9c2:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 800e9c6:	d033      	beq.n	800ea30 <arm_mat_add_f32+0x8c>
 800e9c8:	f106 0110 	add.w	r1, r6, #16
 800e9cc:	f107 0210 	add.w	r2, r7, #16
 800e9d0:	f105 0310 	add.w	r3, r5, #16
 800e9d4:	4674      	mov	r4, lr
 800e9d6:	ed51 6a03 	vldr	s13, [r1, #-12]
 800e9da:	ed12 5a03 	vldr	s10, [r2, #-12]
 800e9de:	ed51 7a04 	vldr	s15, [r1, #-16]
 800e9e2:	ed52 5a04 	vldr	s11, [r2, #-16]
 800e9e6:	ed11 7a02 	vldr	s14, [r1, #-8]
 800e9ea:	ed12 6a02 	vldr	s12, [r2, #-8]
 800e9ee:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e9f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e9f6:	ed43 6a03 	vstr	s13, [r3, #-12]
 800e9fa:	ed43 7a04 	vstr	s15, [r3, #-16]
 800e9fe:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ea02:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ea06:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ea0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea0e:	3c01      	subs	r4, #1
 800ea10:	ed03 7a02 	vstr	s14, [r3, #-8]
 800ea14:	ed43 7a01 	vstr	s15, [r3, #-4]
 800ea18:	f101 0110 	add.w	r1, r1, #16
 800ea1c:	f102 0210 	add.w	r2, r2, #16
 800ea20:	f103 0310 	add.w	r3, r3, #16
 800ea24:	d1d7      	bne.n	800e9d6 <arm_mat_add_f32+0x32>
 800ea26:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800ea2a:	441e      	add	r6, r3
 800ea2c:	441f      	add	r7, r3
 800ea2e:	441d      	add	r5, r3
 800ea30:	f010 0303 	ands.w	r3, r0, #3
 800ea34:	bf18      	it	ne
 800ea36:	462a      	movne	r2, r5
 800ea38:	d009      	beq.n	800ea4e <arm_mat_add_f32+0xaa>
 800ea3a:	ecf6 7a01 	vldmia	r6!, {s15}
 800ea3e:	ecb7 7a01 	vldmia	r7!, {s14}
 800ea42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea46:	3b01      	subs	r3, #1
 800ea48:	ece2 7a01 	vstmia	r2!, {s15}
 800ea4c:	d1f5      	bne.n	800ea3a <arm_mat_add_f32+0x96>
 800ea4e:	2000      	movs	r0, #0
 800ea50:	b240      	sxtb	r0, r0
 800ea52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea54:	20fd      	movs	r0, #253	; 0xfd
 800ea56:	b240      	sxtb	r0, r0
 800ea58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea5a:	bf00      	nop

0800ea5c <arm_scale_f32>:
 800ea5c:	b470      	push	{r4, r5, r6}
 800ea5e:	0896      	lsrs	r6, r2, #2
 800ea60:	d025      	beq.n	800eaae <arm_scale_f32+0x52>
 800ea62:	f100 0410 	add.w	r4, r0, #16
 800ea66:	f101 0310 	add.w	r3, r1, #16
 800ea6a:	4635      	mov	r5, r6
 800ea6c:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ea70:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ea74:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ea78:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ea7c:	ee26 6a00 	vmul.f32	s12, s12, s0
 800ea80:	ee66 6a80 	vmul.f32	s13, s13, s0
 800ea84:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ea88:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ea8c:	3d01      	subs	r5, #1
 800ea8e:	ed03 6a04 	vstr	s12, [r3, #-16]
 800ea92:	ed43 6a03 	vstr	s13, [r3, #-12]
 800ea96:	ed03 7a02 	vstr	s14, [r3, #-8]
 800ea9a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800ea9e:	f104 0410 	add.w	r4, r4, #16
 800eaa2:	f103 0310 	add.w	r3, r3, #16
 800eaa6:	d1e1      	bne.n	800ea6c <arm_scale_f32+0x10>
 800eaa8:	0136      	lsls	r6, r6, #4
 800eaaa:	4430      	add	r0, r6
 800eaac:	4431      	add	r1, r6
 800eaae:	f012 0203 	ands.w	r2, r2, #3
 800eab2:	d007      	beq.n	800eac4 <arm_scale_f32+0x68>
 800eab4:	ecf0 7a01 	vldmia	r0!, {s15}
 800eab8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800eabc:	3a01      	subs	r2, #1
 800eabe:	ece1 7a01 	vstmia	r1!, {s15}
 800eac2:	d1f7      	bne.n	800eab4 <arm_scale_f32+0x58>
 800eac4:	bc70      	pop	{r4, r5, r6}
 800eac6:	4770      	bx	lr

0800eac8 <__errno>:
 800eac8:	4b01      	ldr	r3, [pc, #4]	; (800ead0 <__errno+0x8>)
 800eaca:	6818      	ldr	r0, [r3, #0]
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	20000134 	.word	0x20000134

0800ead4 <std>:
 800ead4:	2300      	movs	r3, #0
 800ead6:	b510      	push	{r4, lr}
 800ead8:	4604      	mov	r4, r0
 800eada:	e9c0 3300 	strd	r3, r3, [r0]
 800eade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eae2:	6083      	str	r3, [r0, #8]
 800eae4:	8181      	strh	r1, [r0, #12]
 800eae6:	6643      	str	r3, [r0, #100]	; 0x64
 800eae8:	81c2      	strh	r2, [r0, #14]
 800eaea:	6183      	str	r3, [r0, #24]
 800eaec:	4619      	mov	r1, r3
 800eaee:	2208      	movs	r2, #8
 800eaf0:	305c      	adds	r0, #92	; 0x5c
 800eaf2:	f000 f91a 	bl	800ed2a <memset>
 800eaf6:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <std+0x38>)
 800eaf8:	6263      	str	r3, [r4, #36]	; 0x24
 800eafa:	4b05      	ldr	r3, [pc, #20]	; (800eb10 <std+0x3c>)
 800eafc:	62a3      	str	r3, [r4, #40]	; 0x28
 800eafe:	4b05      	ldr	r3, [pc, #20]	; (800eb14 <std+0x40>)
 800eb00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <std+0x44>)
 800eb04:	6224      	str	r4, [r4, #32]
 800eb06:	6323      	str	r3, [r4, #48]	; 0x30
 800eb08:	bd10      	pop	{r4, pc}
 800eb0a:	bf00      	nop
 800eb0c:	0800f959 	.word	0x0800f959
 800eb10:	0800f97b 	.word	0x0800f97b
 800eb14:	0800f9b3 	.word	0x0800f9b3
 800eb18:	0800f9d7 	.word	0x0800f9d7

0800eb1c <_cleanup_r>:
 800eb1c:	4901      	ldr	r1, [pc, #4]	; (800eb24 <_cleanup_r+0x8>)
 800eb1e:	f000 b8af 	b.w	800ec80 <_fwalk_reent>
 800eb22:	bf00      	nop
 800eb24:	080109a9 	.word	0x080109a9

0800eb28 <__sfmoreglue>:
 800eb28:	b570      	push	{r4, r5, r6, lr}
 800eb2a:	2268      	movs	r2, #104	; 0x68
 800eb2c:	1e4d      	subs	r5, r1, #1
 800eb2e:	4355      	muls	r5, r2
 800eb30:	460e      	mov	r6, r1
 800eb32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb36:	f000 f921 	bl	800ed7c <_malloc_r>
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	b140      	cbz	r0, 800eb50 <__sfmoreglue+0x28>
 800eb3e:	2100      	movs	r1, #0
 800eb40:	e9c0 1600 	strd	r1, r6, [r0]
 800eb44:	300c      	adds	r0, #12
 800eb46:	60a0      	str	r0, [r4, #8]
 800eb48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb4c:	f000 f8ed 	bl	800ed2a <memset>
 800eb50:	4620      	mov	r0, r4
 800eb52:	bd70      	pop	{r4, r5, r6, pc}

0800eb54 <__sfp_lock_acquire>:
 800eb54:	4801      	ldr	r0, [pc, #4]	; (800eb5c <__sfp_lock_acquire+0x8>)
 800eb56:	f000 b8d8 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 800eb5a:	bf00      	nop
 800eb5c:	20006bd5 	.word	0x20006bd5

0800eb60 <__sfp_lock_release>:
 800eb60:	4801      	ldr	r0, [pc, #4]	; (800eb68 <__sfp_lock_release+0x8>)
 800eb62:	f000 b8d3 	b.w	800ed0c <__retarget_lock_release_recursive>
 800eb66:	bf00      	nop
 800eb68:	20006bd5 	.word	0x20006bd5

0800eb6c <__sinit_lock_acquire>:
 800eb6c:	4801      	ldr	r0, [pc, #4]	; (800eb74 <__sinit_lock_acquire+0x8>)
 800eb6e:	f000 b8cc 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 800eb72:	bf00      	nop
 800eb74:	20006bd6 	.word	0x20006bd6

0800eb78 <__sinit_lock_release>:
 800eb78:	4801      	ldr	r0, [pc, #4]	; (800eb80 <__sinit_lock_release+0x8>)
 800eb7a:	f000 b8c7 	b.w	800ed0c <__retarget_lock_release_recursive>
 800eb7e:	bf00      	nop
 800eb80:	20006bd6 	.word	0x20006bd6

0800eb84 <__sinit>:
 800eb84:	b510      	push	{r4, lr}
 800eb86:	4604      	mov	r4, r0
 800eb88:	f7ff fff0 	bl	800eb6c <__sinit_lock_acquire>
 800eb8c:	69a3      	ldr	r3, [r4, #24]
 800eb8e:	b11b      	cbz	r3, 800eb98 <__sinit+0x14>
 800eb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb94:	f7ff bff0 	b.w	800eb78 <__sinit_lock_release>
 800eb98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb9c:	6523      	str	r3, [r4, #80]	; 0x50
 800eb9e:	4b13      	ldr	r3, [pc, #76]	; (800ebec <__sinit+0x68>)
 800eba0:	4a13      	ldr	r2, [pc, #76]	; (800ebf0 <__sinit+0x6c>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	62a2      	str	r2, [r4, #40]	; 0x28
 800eba6:	42a3      	cmp	r3, r4
 800eba8:	bf04      	itt	eq
 800ebaa:	2301      	moveq	r3, #1
 800ebac:	61a3      	streq	r3, [r4, #24]
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f000 f820 	bl	800ebf4 <__sfp>
 800ebb4:	6060      	str	r0, [r4, #4]
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f000 f81c 	bl	800ebf4 <__sfp>
 800ebbc:	60a0      	str	r0, [r4, #8]
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 f818 	bl	800ebf4 <__sfp>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	60e0      	str	r0, [r4, #12]
 800ebc8:	2104      	movs	r1, #4
 800ebca:	6860      	ldr	r0, [r4, #4]
 800ebcc:	f7ff ff82 	bl	800ead4 <std>
 800ebd0:	68a0      	ldr	r0, [r4, #8]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	2109      	movs	r1, #9
 800ebd6:	f7ff ff7d 	bl	800ead4 <std>
 800ebda:	68e0      	ldr	r0, [r4, #12]
 800ebdc:	2202      	movs	r2, #2
 800ebde:	2112      	movs	r1, #18
 800ebe0:	f7ff ff78 	bl	800ead4 <std>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	61a3      	str	r3, [r4, #24]
 800ebe8:	e7d2      	b.n	800eb90 <__sinit+0xc>
 800ebea:	bf00      	nop
 800ebec:	08011d68 	.word	0x08011d68
 800ebf0:	0800eb1d 	.word	0x0800eb1d

0800ebf4 <__sfp>:
 800ebf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebf6:	4607      	mov	r7, r0
 800ebf8:	f7ff ffac 	bl	800eb54 <__sfp_lock_acquire>
 800ebfc:	4b1e      	ldr	r3, [pc, #120]	; (800ec78 <__sfp+0x84>)
 800ebfe:	681e      	ldr	r6, [r3, #0]
 800ec00:	69b3      	ldr	r3, [r6, #24]
 800ec02:	b913      	cbnz	r3, 800ec0a <__sfp+0x16>
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff ffbd 	bl	800eb84 <__sinit>
 800ec0a:	3648      	adds	r6, #72	; 0x48
 800ec0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec10:	3b01      	subs	r3, #1
 800ec12:	d503      	bpl.n	800ec1c <__sfp+0x28>
 800ec14:	6833      	ldr	r3, [r6, #0]
 800ec16:	b30b      	cbz	r3, 800ec5c <__sfp+0x68>
 800ec18:	6836      	ldr	r6, [r6, #0]
 800ec1a:	e7f7      	b.n	800ec0c <__sfp+0x18>
 800ec1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec20:	b9d5      	cbnz	r5, 800ec58 <__sfp+0x64>
 800ec22:	4b16      	ldr	r3, [pc, #88]	; (800ec7c <__sfp+0x88>)
 800ec24:	60e3      	str	r3, [r4, #12]
 800ec26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec2a:	6665      	str	r5, [r4, #100]	; 0x64
 800ec2c:	f000 f86c 	bl	800ed08 <__retarget_lock_init_recursive>
 800ec30:	f7ff ff96 	bl	800eb60 <__sfp_lock_release>
 800ec34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec3c:	6025      	str	r5, [r4, #0]
 800ec3e:	61a5      	str	r5, [r4, #24]
 800ec40:	2208      	movs	r2, #8
 800ec42:	4629      	mov	r1, r5
 800ec44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec48:	f000 f86f 	bl	800ed2a <memset>
 800ec4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec54:	4620      	mov	r0, r4
 800ec56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec58:	3468      	adds	r4, #104	; 0x68
 800ec5a:	e7d9      	b.n	800ec10 <__sfp+0x1c>
 800ec5c:	2104      	movs	r1, #4
 800ec5e:	4638      	mov	r0, r7
 800ec60:	f7ff ff62 	bl	800eb28 <__sfmoreglue>
 800ec64:	4604      	mov	r4, r0
 800ec66:	6030      	str	r0, [r6, #0]
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d1d5      	bne.n	800ec18 <__sfp+0x24>
 800ec6c:	f7ff ff78 	bl	800eb60 <__sfp_lock_release>
 800ec70:	230c      	movs	r3, #12
 800ec72:	603b      	str	r3, [r7, #0]
 800ec74:	e7ee      	b.n	800ec54 <__sfp+0x60>
 800ec76:	bf00      	nop
 800ec78:	08011d68 	.word	0x08011d68
 800ec7c:	ffff0001 	.word	0xffff0001

0800ec80 <_fwalk_reent>:
 800ec80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec84:	4606      	mov	r6, r0
 800ec86:	4688      	mov	r8, r1
 800ec88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec8c:	2700      	movs	r7, #0
 800ec8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec92:	f1b9 0901 	subs.w	r9, r9, #1
 800ec96:	d505      	bpl.n	800eca4 <_fwalk_reent+0x24>
 800ec98:	6824      	ldr	r4, [r4, #0]
 800ec9a:	2c00      	cmp	r4, #0
 800ec9c:	d1f7      	bne.n	800ec8e <_fwalk_reent+0xe>
 800ec9e:	4638      	mov	r0, r7
 800eca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eca4:	89ab      	ldrh	r3, [r5, #12]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d907      	bls.n	800ecba <_fwalk_reent+0x3a>
 800ecaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	d003      	beq.n	800ecba <_fwalk_reent+0x3a>
 800ecb2:	4629      	mov	r1, r5
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	47c0      	blx	r8
 800ecb8:	4307      	orrs	r7, r0
 800ecba:	3568      	adds	r5, #104	; 0x68
 800ecbc:	e7e9      	b.n	800ec92 <_fwalk_reent+0x12>
	...

0800ecc0 <__libc_init_array>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	4d0d      	ldr	r5, [pc, #52]	; (800ecf8 <__libc_init_array+0x38>)
 800ecc4:	4c0d      	ldr	r4, [pc, #52]	; (800ecfc <__libc_init_array+0x3c>)
 800ecc6:	1b64      	subs	r4, r4, r5
 800ecc8:	10a4      	asrs	r4, r4, #2
 800ecca:	2600      	movs	r6, #0
 800eccc:	42a6      	cmp	r6, r4
 800ecce:	d109      	bne.n	800ece4 <__libc_init_array+0x24>
 800ecd0:	4d0b      	ldr	r5, [pc, #44]	; (800ed00 <__libc_init_array+0x40>)
 800ecd2:	4c0c      	ldr	r4, [pc, #48]	; (800ed04 <__libc_init_array+0x44>)
 800ecd4:	f002 feee 	bl	8011ab4 <_init>
 800ecd8:	1b64      	subs	r4, r4, r5
 800ecda:	10a4      	asrs	r4, r4, #2
 800ecdc:	2600      	movs	r6, #0
 800ecde:	42a6      	cmp	r6, r4
 800ece0:	d105      	bne.n	800ecee <__libc_init_array+0x2e>
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ece8:	4798      	blx	r3
 800ecea:	3601      	adds	r6, #1
 800ecec:	e7ee      	b.n	800eccc <__libc_init_array+0xc>
 800ecee:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf2:	4798      	blx	r3
 800ecf4:	3601      	adds	r6, #1
 800ecf6:	e7f2      	b.n	800ecde <__libc_init_array+0x1e>
 800ecf8:	080120ec 	.word	0x080120ec
 800ecfc:	080120ec 	.word	0x080120ec
 800ed00:	080120ec 	.word	0x080120ec
 800ed04:	080120f0 	.word	0x080120f0

0800ed08 <__retarget_lock_init_recursive>:
 800ed08:	4770      	bx	lr

0800ed0a <__retarget_lock_acquire_recursive>:
 800ed0a:	4770      	bx	lr

0800ed0c <__retarget_lock_release_recursive>:
 800ed0c:	4770      	bx	lr

0800ed0e <memcpy>:
 800ed0e:	440a      	add	r2, r1
 800ed10:	4291      	cmp	r1, r2
 800ed12:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed16:	d100      	bne.n	800ed1a <memcpy+0xc>
 800ed18:	4770      	bx	lr
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed24:	4291      	cmp	r1, r2
 800ed26:	d1f9      	bne.n	800ed1c <memcpy+0xe>
 800ed28:	bd10      	pop	{r4, pc}

0800ed2a <memset>:
 800ed2a:	4402      	add	r2, r0
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d100      	bne.n	800ed34 <memset+0xa>
 800ed32:	4770      	bx	lr
 800ed34:	f803 1b01 	strb.w	r1, [r3], #1
 800ed38:	e7f9      	b.n	800ed2e <memset+0x4>
	...

0800ed3c <sbrk_aligned>:
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	4e0e      	ldr	r6, [pc, #56]	; (800ed78 <sbrk_aligned+0x3c>)
 800ed40:	460c      	mov	r4, r1
 800ed42:	6831      	ldr	r1, [r6, #0]
 800ed44:	4605      	mov	r5, r0
 800ed46:	b911      	cbnz	r1, 800ed4e <sbrk_aligned+0x12>
 800ed48:	f000 fdd6 	bl	800f8f8 <_sbrk_r>
 800ed4c:	6030      	str	r0, [r6, #0]
 800ed4e:	4621      	mov	r1, r4
 800ed50:	4628      	mov	r0, r5
 800ed52:	f000 fdd1 	bl	800f8f8 <_sbrk_r>
 800ed56:	1c43      	adds	r3, r0, #1
 800ed58:	d00a      	beq.n	800ed70 <sbrk_aligned+0x34>
 800ed5a:	1cc4      	adds	r4, r0, #3
 800ed5c:	f024 0403 	bic.w	r4, r4, #3
 800ed60:	42a0      	cmp	r0, r4
 800ed62:	d007      	beq.n	800ed74 <sbrk_aligned+0x38>
 800ed64:	1a21      	subs	r1, r4, r0
 800ed66:	4628      	mov	r0, r5
 800ed68:	f000 fdc6 	bl	800f8f8 <_sbrk_r>
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	d101      	bne.n	800ed74 <sbrk_aligned+0x38>
 800ed70:	f04f 34ff 	mov.w	r4, #4294967295
 800ed74:	4620      	mov	r0, r4
 800ed76:	bd70      	pop	{r4, r5, r6, pc}
 800ed78:	20006bdc 	.word	0x20006bdc

0800ed7c <_malloc_r>:
 800ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed80:	1ccd      	adds	r5, r1, #3
 800ed82:	f025 0503 	bic.w	r5, r5, #3
 800ed86:	3508      	adds	r5, #8
 800ed88:	2d0c      	cmp	r5, #12
 800ed8a:	bf38      	it	cc
 800ed8c:	250c      	movcc	r5, #12
 800ed8e:	2d00      	cmp	r5, #0
 800ed90:	4607      	mov	r7, r0
 800ed92:	db01      	blt.n	800ed98 <_malloc_r+0x1c>
 800ed94:	42a9      	cmp	r1, r5
 800ed96:	d905      	bls.n	800eda4 <_malloc_r+0x28>
 800ed98:	230c      	movs	r3, #12
 800ed9a:	603b      	str	r3, [r7, #0]
 800ed9c:	2600      	movs	r6, #0
 800ed9e:	4630      	mov	r0, r6
 800eda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda4:	4e2e      	ldr	r6, [pc, #184]	; (800ee60 <_malloc_r+0xe4>)
 800eda6:	f001 febf 	bl	8010b28 <__malloc_lock>
 800edaa:	6833      	ldr	r3, [r6, #0]
 800edac:	461c      	mov	r4, r3
 800edae:	bb34      	cbnz	r4, 800edfe <_malloc_r+0x82>
 800edb0:	4629      	mov	r1, r5
 800edb2:	4638      	mov	r0, r7
 800edb4:	f7ff ffc2 	bl	800ed3c <sbrk_aligned>
 800edb8:	1c43      	adds	r3, r0, #1
 800edba:	4604      	mov	r4, r0
 800edbc:	d14d      	bne.n	800ee5a <_malloc_r+0xde>
 800edbe:	6834      	ldr	r4, [r6, #0]
 800edc0:	4626      	mov	r6, r4
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	d140      	bne.n	800ee48 <_malloc_r+0xcc>
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	4631      	mov	r1, r6
 800edca:	4638      	mov	r0, r7
 800edcc:	eb04 0803 	add.w	r8, r4, r3
 800edd0:	f000 fd92 	bl	800f8f8 <_sbrk_r>
 800edd4:	4580      	cmp	r8, r0
 800edd6:	d13a      	bne.n	800ee4e <_malloc_r+0xd2>
 800edd8:	6821      	ldr	r1, [r4, #0]
 800edda:	3503      	adds	r5, #3
 800eddc:	1a6d      	subs	r5, r5, r1
 800edde:	f025 0503 	bic.w	r5, r5, #3
 800ede2:	3508      	adds	r5, #8
 800ede4:	2d0c      	cmp	r5, #12
 800ede6:	bf38      	it	cc
 800ede8:	250c      	movcc	r5, #12
 800edea:	4629      	mov	r1, r5
 800edec:	4638      	mov	r0, r7
 800edee:	f7ff ffa5 	bl	800ed3c <sbrk_aligned>
 800edf2:	3001      	adds	r0, #1
 800edf4:	d02b      	beq.n	800ee4e <_malloc_r+0xd2>
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	442b      	add	r3, r5
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	e00e      	b.n	800ee1c <_malloc_r+0xa0>
 800edfe:	6822      	ldr	r2, [r4, #0]
 800ee00:	1b52      	subs	r2, r2, r5
 800ee02:	d41e      	bmi.n	800ee42 <_malloc_r+0xc6>
 800ee04:	2a0b      	cmp	r2, #11
 800ee06:	d916      	bls.n	800ee36 <_malloc_r+0xba>
 800ee08:	1961      	adds	r1, r4, r5
 800ee0a:	42a3      	cmp	r3, r4
 800ee0c:	6025      	str	r5, [r4, #0]
 800ee0e:	bf18      	it	ne
 800ee10:	6059      	strne	r1, [r3, #4]
 800ee12:	6863      	ldr	r3, [r4, #4]
 800ee14:	bf08      	it	eq
 800ee16:	6031      	streq	r1, [r6, #0]
 800ee18:	5162      	str	r2, [r4, r5]
 800ee1a:	604b      	str	r3, [r1, #4]
 800ee1c:	4638      	mov	r0, r7
 800ee1e:	f104 060b 	add.w	r6, r4, #11
 800ee22:	f001 fe87 	bl	8010b34 <__malloc_unlock>
 800ee26:	f026 0607 	bic.w	r6, r6, #7
 800ee2a:	1d23      	adds	r3, r4, #4
 800ee2c:	1af2      	subs	r2, r6, r3
 800ee2e:	d0b6      	beq.n	800ed9e <_malloc_r+0x22>
 800ee30:	1b9b      	subs	r3, r3, r6
 800ee32:	50a3      	str	r3, [r4, r2]
 800ee34:	e7b3      	b.n	800ed9e <_malloc_r+0x22>
 800ee36:	6862      	ldr	r2, [r4, #4]
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	bf0c      	ite	eq
 800ee3c:	6032      	streq	r2, [r6, #0]
 800ee3e:	605a      	strne	r2, [r3, #4]
 800ee40:	e7ec      	b.n	800ee1c <_malloc_r+0xa0>
 800ee42:	4623      	mov	r3, r4
 800ee44:	6864      	ldr	r4, [r4, #4]
 800ee46:	e7b2      	b.n	800edae <_malloc_r+0x32>
 800ee48:	4634      	mov	r4, r6
 800ee4a:	6876      	ldr	r6, [r6, #4]
 800ee4c:	e7b9      	b.n	800edc2 <_malloc_r+0x46>
 800ee4e:	230c      	movs	r3, #12
 800ee50:	603b      	str	r3, [r7, #0]
 800ee52:	4638      	mov	r0, r7
 800ee54:	f001 fe6e 	bl	8010b34 <__malloc_unlock>
 800ee58:	e7a1      	b.n	800ed9e <_malloc_r+0x22>
 800ee5a:	6025      	str	r5, [r4, #0]
 800ee5c:	e7de      	b.n	800ee1c <_malloc_r+0xa0>
 800ee5e:	bf00      	nop
 800ee60:	20006bd8 	.word	0x20006bd8

0800ee64 <__cvt>:
 800ee64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee68:	ec55 4b10 	vmov	r4, r5, d0
 800ee6c:	2d00      	cmp	r5, #0
 800ee6e:	460e      	mov	r6, r1
 800ee70:	4619      	mov	r1, r3
 800ee72:	462b      	mov	r3, r5
 800ee74:	bfbb      	ittet	lt
 800ee76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ee7a:	461d      	movlt	r5, r3
 800ee7c:	2300      	movge	r3, #0
 800ee7e:	232d      	movlt	r3, #45	; 0x2d
 800ee80:	700b      	strb	r3, [r1, #0]
 800ee82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ee88:	4691      	mov	r9, r2
 800ee8a:	f023 0820 	bic.w	r8, r3, #32
 800ee8e:	bfbc      	itt	lt
 800ee90:	4622      	movlt	r2, r4
 800ee92:	4614      	movlt	r4, r2
 800ee94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee98:	d005      	beq.n	800eea6 <__cvt+0x42>
 800ee9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ee9e:	d100      	bne.n	800eea2 <__cvt+0x3e>
 800eea0:	3601      	adds	r6, #1
 800eea2:	2102      	movs	r1, #2
 800eea4:	e000      	b.n	800eea8 <__cvt+0x44>
 800eea6:	2103      	movs	r1, #3
 800eea8:	ab03      	add	r3, sp, #12
 800eeaa:	9301      	str	r3, [sp, #4]
 800eeac:	ab02      	add	r3, sp, #8
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	ec45 4b10 	vmov	d0, r4, r5
 800eeb4:	4653      	mov	r3, sl
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	f000 ff02 	bl	800fcc0 <_dtoa_r>
 800eebc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eec0:	4607      	mov	r7, r0
 800eec2:	d102      	bne.n	800eeca <__cvt+0x66>
 800eec4:	f019 0f01 	tst.w	r9, #1
 800eec8:	d022      	beq.n	800ef10 <__cvt+0xac>
 800eeca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eece:	eb07 0906 	add.w	r9, r7, r6
 800eed2:	d110      	bne.n	800eef6 <__cvt+0x92>
 800eed4:	783b      	ldrb	r3, [r7, #0]
 800eed6:	2b30      	cmp	r3, #48	; 0x30
 800eed8:	d10a      	bne.n	800eef0 <__cvt+0x8c>
 800eeda:	2200      	movs	r2, #0
 800eedc:	2300      	movs	r3, #0
 800eede:	4620      	mov	r0, r4
 800eee0:	4629      	mov	r1, r5
 800eee2:	f7f1 fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800eee6:	b918      	cbnz	r0, 800eef0 <__cvt+0x8c>
 800eee8:	f1c6 0601 	rsb	r6, r6, #1
 800eeec:	f8ca 6000 	str.w	r6, [sl]
 800eef0:	f8da 3000 	ldr.w	r3, [sl]
 800eef4:	4499      	add	r9, r3
 800eef6:	2200      	movs	r2, #0
 800eef8:	2300      	movs	r3, #0
 800eefa:	4620      	mov	r0, r4
 800eefc:	4629      	mov	r1, r5
 800eefe:	f7f1 fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef02:	b108      	cbz	r0, 800ef08 <__cvt+0xa4>
 800ef04:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef08:	2230      	movs	r2, #48	; 0x30
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	454b      	cmp	r3, r9
 800ef0e:	d307      	bcc.n	800ef20 <__cvt+0xbc>
 800ef10:	9b03      	ldr	r3, [sp, #12]
 800ef12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef14:	1bdb      	subs	r3, r3, r7
 800ef16:	4638      	mov	r0, r7
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	b004      	add	sp, #16
 800ef1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef20:	1c59      	adds	r1, r3, #1
 800ef22:	9103      	str	r1, [sp, #12]
 800ef24:	701a      	strb	r2, [r3, #0]
 800ef26:	e7f0      	b.n	800ef0a <__cvt+0xa6>

0800ef28 <__exponent>:
 800ef28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2900      	cmp	r1, #0
 800ef2e:	bfb8      	it	lt
 800ef30:	4249      	neglt	r1, r1
 800ef32:	f803 2b02 	strb.w	r2, [r3], #2
 800ef36:	bfb4      	ite	lt
 800ef38:	222d      	movlt	r2, #45	; 0x2d
 800ef3a:	222b      	movge	r2, #43	; 0x2b
 800ef3c:	2909      	cmp	r1, #9
 800ef3e:	7042      	strb	r2, [r0, #1]
 800ef40:	dd2a      	ble.n	800ef98 <__exponent+0x70>
 800ef42:	f10d 0407 	add.w	r4, sp, #7
 800ef46:	46a4      	mov	ip, r4
 800ef48:	270a      	movs	r7, #10
 800ef4a:	46a6      	mov	lr, r4
 800ef4c:	460a      	mov	r2, r1
 800ef4e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef52:	fb07 1516 	mls	r5, r7, r6, r1
 800ef56:	3530      	adds	r5, #48	; 0x30
 800ef58:	2a63      	cmp	r2, #99	; 0x63
 800ef5a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef62:	4631      	mov	r1, r6
 800ef64:	dcf1      	bgt.n	800ef4a <__exponent+0x22>
 800ef66:	3130      	adds	r1, #48	; 0x30
 800ef68:	f1ae 0502 	sub.w	r5, lr, #2
 800ef6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef70:	1c44      	adds	r4, r0, #1
 800ef72:	4629      	mov	r1, r5
 800ef74:	4561      	cmp	r1, ip
 800ef76:	d30a      	bcc.n	800ef8e <__exponent+0x66>
 800ef78:	f10d 0209 	add.w	r2, sp, #9
 800ef7c:	eba2 020e 	sub.w	r2, r2, lr
 800ef80:	4565      	cmp	r5, ip
 800ef82:	bf88      	it	hi
 800ef84:	2200      	movhi	r2, #0
 800ef86:	4413      	add	r3, r2
 800ef88:	1a18      	subs	r0, r3, r0
 800ef8a:	b003      	add	sp, #12
 800ef8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef92:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef96:	e7ed      	b.n	800ef74 <__exponent+0x4c>
 800ef98:	2330      	movs	r3, #48	; 0x30
 800ef9a:	3130      	adds	r1, #48	; 0x30
 800ef9c:	7083      	strb	r3, [r0, #2]
 800ef9e:	70c1      	strb	r1, [r0, #3]
 800efa0:	1d03      	adds	r3, r0, #4
 800efa2:	e7f1      	b.n	800ef88 <__exponent+0x60>

0800efa4 <_printf_float>:
 800efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa8:	ed2d 8b02 	vpush	{d8}
 800efac:	b08d      	sub	sp, #52	; 0x34
 800efae:	460c      	mov	r4, r1
 800efb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800efb4:	4616      	mov	r6, r2
 800efb6:	461f      	mov	r7, r3
 800efb8:	4605      	mov	r5, r0
 800efba:	f001 fd31 	bl	8010a20 <_localeconv_r>
 800efbe:	f8d0 a000 	ldr.w	sl, [r0]
 800efc2:	4650      	mov	r0, sl
 800efc4:	f7f1 f90c 	bl	80001e0 <strlen>
 800efc8:	2300      	movs	r3, #0
 800efca:	930a      	str	r3, [sp, #40]	; 0x28
 800efcc:	6823      	ldr	r3, [r4, #0]
 800efce:	9305      	str	r3, [sp, #20]
 800efd0:	f8d8 3000 	ldr.w	r3, [r8]
 800efd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800efd8:	3307      	adds	r3, #7
 800efda:	f023 0307 	bic.w	r3, r3, #7
 800efde:	f103 0208 	add.w	r2, r3, #8
 800efe2:	f8c8 2000 	str.w	r2, [r8]
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800efee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eff2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eff6:	9307      	str	r3, [sp, #28]
 800eff8:	f8cd 8018 	str.w	r8, [sp, #24]
 800effc:	ee08 0a10 	vmov	s16, r0
 800f000:	4b9f      	ldr	r3, [pc, #636]	; (800f280 <_printf_float+0x2dc>)
 800f002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f006:	f04f 32ff 	mov.w	r2, #4294967295
 800f00a:	f7f1 fd97 	bl	8000b3c <__aeabi_dcmpun>
 800f00e:	bb88      	cbnz	r0, 800f074 <_printf_float+0xd0>
 800f010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f014:	4b9a      	ldr	r3, [pc, #616]	; (800f280 <_printf_float+0x2dc>)
 800f016:	f04f 32ff 	mov.w	r2, #4294967295
 800f01a:	f7f1 fd71 	bl	8000b00 <__aeabi_dcmple>
 800f01e:	bb48      	cbnz	r0, 800f074 <_printf_float+0xd0>
 800f020:	2200      	movs	r2, #0
 800f022:	2300      	movs	r3, #0
 800f024:	4640      	mov	r0, r8
 800f026:	4649      	mov	r1, r9
 800f028:	f7f1 fd60 	bl	8000aec <__aeabi_dcmplt>
 800f02c:	b110      	cbz	r0, 800f034 <_printf_float+0x90>
 800f02e:	232d      	movs	r3, #45	; 0x2d
 800f030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f034:	4b93      	ldr	r3, [pc, #588]	; (800f284 <_printf_float+0x2e0>)
 800f036:	4894      	ldr	r0, [pc, #592]	; (800f288 <_printf_float+0x2e4>)
 800f038:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f03c:	bf94      	ite	ls
 800f03e:	4698      	movls	r8, r3
 800f040:	4680      	movhi	r8, r0
 800f042:	2303      	movs	r3, #3
 800f044:	6123      	str	r3, [r4, #16]
 800f046:	9b05      	ldr	r3, [sp, #20]
 800f048:	f023 0204 	bic.w	r2, r3, #4
 800f04c:	6022      	str	r2, [r4, #0]
 800f04e:	f04f 0900 	mov.w	r9, #0
 800f052:	9700      	str	r7, [sp, #0]
 800f054:	4633      	mov	r3, r6
 800f056:	aa0b      	add	r2, sp, #44	; 0x2c
 800f058:	4621      	mov	r1, r4
 800f05a:	4628      	mov	r0, r5
 800f05c:	f000 f9d8 	bl	800f410 <_printf_common>
 800f060:	3001      	adds	r0, #1
 800f062:	f040 8090 	bne.w	800f186 <_printf_float+0x1e2>
 800f066:	f04f 30ff 	mov.w	r0, #4294967295
 800f06a:	b00d      	add	sp, #52	; 0x34
 800f06c:	ecbd 8b02 	vpop	{d8}
 800f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f074:	4642      	mov	r2, r8
 800f076:	464b      	mov	r3, r9
 800f078:	4640      	mov	r0, r8
 800f07a:	4649      	mov	r1, r9
 800f07c:	f7f1 fd5e 	bl	8000b3c <__aeabi_dcmpun>
 800f080:	b140      	cbz	r0, 800f094 <_printf_float+0xf0>
 800f082:	464b      	mov	r3, r9
 800f084:	2b00      	cmp	r3, #0
 800f086:	bfbc      	itt	lt
 800f088:	232d      	movlt	r3, #45	; 0x2d
 800f08a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f08e:	487f      	ldr	r0, [pc, #508]	; (800f28c <_printf_float+0x2e8>)
 800f090:	4b7f      	ldr	r3, [pc, #508]	; (800f290 <_printf_float+0x2ec>)
 800f092:	e7d1      	b.n	800f038 <_printf_float+0x94>
 800f094:	6863      	ldr	r3, [r4, #4]
 800f096:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f09a:	9206      	str	r2, [sp, #24]
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	d13f      	bne.n	800f120 <_printf_float+0x17c>
 800f0a0:	2306      	movs	r3, #6
 800f0a2:	6063      	str	r3, [r4, #4]
 800f0a4:	9b05      	ldr	r3, [sp, #20]
 800f0a6:	6861      	ldr	r1, [r4, #4]
 800f0a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	ab0a      	add	r3, sp, #40	; 0x28
 800f0b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f0b6:	ab09      	add	r3, sp, #36	; 0x24
 800f0b8:	ec49 8b10 	vmov	d0, r8, r9
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	6022      	str	r2, [r4, #0]
 800f0c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	f7ff fecd 	bl	800ee64 <__cvt>
 800f0ca:	9b06      	ldr	r3, [sp, #24]
 800f0cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0ce:	2b47      	cmp	r3, #71	; 0x47
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	d108      	bne.n	800f0e6 <_printf_float+0x142>
 800f0d4:	1cc8      	adds	r0, r1, #3
 800f0d6:	db02      	blt.n	800f0de <_printf_float+0x13a>
 800f0d8:	6863      	ldr	r3, [r4, #4]
 800f0da:	4299      	cmp	r1, r3
 800f0dc:	dd41      	ble.n	800f162 <_printf_float+0x1be>
 800f0de:	f1ab 0b02 	sub.w	fp, fp, #2
 800f0e2:	fa5f fb8b 	uxtb.w	fp, fp
 800f0e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0ea:	d820      	bhi.n	800f12e <_printf_float+0x18a>
 800f0ec:	3901      	subs	r1, #1
 800f0ee:	465a      	mov	r2, fp
 800f0f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f0f4:	9109      	str	r1, [sp, #36]	; 0x24
 800f0f6:	f7ff ff17 	bl	800ef28 <__exponent>
 800f0fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0fc:	1813      	adds	r3, r2, r0
 800f0fe:	2a01      	cmp	r2, #1
 800f100:	4681      	mov	r9, r0
 800f102:	6123      	str	r3, [r4, #16]
 800f104:	dc02      	bgt.n	800f10c <_printf_float+0x168>
 800f106:	6822      	ldr	r2, [r4, #0]
 800f108:	07d2      	lsls	r2, r2, #31
 800f10a:	d501      	bpl.n	800f110 <_printf_float+0x16c>
 800f10c:	3301      	adds	r3, #1
 800f10e:	6123      	str	r3, [r4, #16]
 800f110:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f114:	2b00      	cmp	r3, #0
 800f116:	d09c      	beq.n	800f052 <_printf_float+0xae>
 800f118:	232d      	movs	r3, #45	; 0x2d
 800f11a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f11e:	e798      	b.n	800f052 <_printf_float+0xae>
 800f120:	9a06      	ldr	r2, [sp, #24]
 800f122:	2a47      	cmp	r2, #71	; 0x47
 800f124:	d1be      	bne.n	800f0a4 <_printf_float+0x100>
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1bc      	bne.n	800f0a4 <_printf_float+0x100>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e7b9      	b.n	800f0a2 <_printf_float+0xfe>
 800f12e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f132:	d118      	bne.n	800f166 <_printf_float+0x1c2>
 800f134:	2900      	cmp	r1, #0
 800f136:	6863      	ldr	r3, [r4, #4]
 800f138:	dd0b      	ble.n	800f152 <_printf_float+0x1ae>
 800f13a:	6121      	str	r1, [r4, #16]
 800f13c:	b913      	cbnz	r3, 800f144 <_printf_float+0x1a0>
 800f13e:	6822      	ldr	r2, [r4, #0]
 800f140:	07d0      	lsls	r0, r2, #31
 800f142:	d502      	bpl.n	800f14a <_printf_float+0x1a6>
 800f144:	3301      	adds	r3, #1
 800f146:	440b      	add	r3, r1
 800f148:	6123      	str	r3, [r4, #16]
 800f14a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f14c:	f04f 0900 	mov.w	r9, #0
 800f150:	e7de      	b.n	800f110 <_printf_float+0x16c>
 800f152:	b913      	cbnz	r3, 800f15a <_printf_float+0x1b6>
 800f154:	6822      	ldr	r2, [r4, #0]
 800f156:	07d2      	lsls	r2, r2, #31
 800f158:	d501      	bpl.n	800f15e <_printf_float+0x1ba>
 800f15a:	3302      	adds	r3, #2
 800f15c:	e7f4      	b.n	800f148 <_printf_float+0x1a4>
 800f15e:	2301      	movs	r3, #1
 800f160:	e7f2      	b.n	800f148 <_printf_float+0x1a4>
 800f162:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f168:	4299      	cmp	r1, r3
 800f16a:	db05      	blt.n	800f178 <_printf_float+0x1d4>
 800f16c:	6823      	ldr	r3, [r4, #0]
 800f16e:	6121      	str	r1, [r4, #16]
 800f170:	07d8      	lsls	r0, r3, #31
 800f172:	d5ea      	bpl.n	800f14a <_printf_float+0x1a6>
 800f174:	1c4b      	adds	r3, r1, #1
 800f176:	e7e7      	b.n	800f148 <_printf_float+0x1a4>
 800f178:	2900      	cmp	r1, #0
 800f17a:	bfd4      	ite	le
 800f17c:	f1c1 0202 	rsble	r2, r1, #2
 800f180:	2201      	movgt	r2, #1
 800f182:	4413      	add	r3, r2
 800f184:	e7e0      	b.n	800f148 <_printf_float+0x1a4>
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	055a      	lsls	r2, r3, #21
 800f18a:	d407      	bmi.n	800f19c <_printf_float+0x1f8>
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	4642      	mov	r2, r8
 800f190:	4631      	mov	r1, r6
 800f192:	4628      	mov	r0, r5
 800f194:	47b8      	blx	r7
 800f196:	3001      	adds	r0, #1
 800f198:	d12c      	bne.n	800f1f4 <_printf_float+0x250>
 800f19a:	e764      	b.n	800f066 <_printf_float+0xc2>
 800f19c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f1a0:	f240 80e0 	bls.w	800f364 <_printf_float+0x3c0>
 800f1a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	f7f1 fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d034      	beq.n	800f21e <_printf_float+0x27a>
 800f1b4:	4a37      	ldr	r2, [pc, #220]	; (800f294 <_printf_float+0x2f0>)
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	47b8      	blx	r7
 800f1be:	3001      	adds	r0, #1
 800f1c0:	f43f af51 	beq.w	800f066 <_printf_float+0xc2>
 800f1c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	db02      	blt.n	800f1d2 <_printf_float+0x22e>
 800f1cc:	6823      	ldr	r3, [r4, #0]
 800f1ce:	07d8      	lsls	r0, r3, #31
 800f1d0:	d510      	bpl.n	800f1f4 <_printf_float+0x250>
 800f1d2:	ee18 3a10 	vmov	r3, s16
 800f1d6:	4652      	mov	r2, sl
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4628      	mov	r0, r5
 800f1dc:	47b8      	blx	r7
 800f1de:	3001      	adds	r0, #1
 800f1e0:	f43f af41 	beq.w	800f066 <_printf_float+0xc2>
 800f1e4:	f04f 0800 	mov.w	r8, #0
 800f1e8:	f104 091a 	add.w	r9, r4, #26
 800f1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ee:	3b01      	subs	r3, #1
 800f1f0:	4543      	cmp	r3, r8
 800f1f2:	dc09      	bgt.n	800f208 <_printf_float+0x264>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	079b      	lsls	r3, r3, #30
 800f1f8:	f100 8105 	bmi.w	800f406 <_printf_float+0x462>
 800f1fc:	68e0      	ldr	r0, [r4, #12]
 800f1fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f200:	4298      	cmp	r0, r3
 800f202:	bfb8      	it	lt
 800f204:	4618      	movlt	r0, r3
 800f206:	e730      	b.n	800f06a <_printf_float+0xc6>
 800f208:	2301      	movs	r3, #1
 800f20a:	464a      	mov	r2, r9
 800f20c:	4631      	mov	r1, r6
 800f20e:	4628      	mov	r0, r5
 800f210:	47b8      	blx	r7
 800f212:	3001      	adds	r0, #1
 800f214:	f43f af27 	beq.w	800f066 <_printf_float+0xc2>
 800f218:	f108 0801 	add.w	r8, r8, #1
 800f21c:	e7e6      	b.n	800f1ec <_printf_float+0x248>
 800f21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f220:	2b00      	cmp	r3, #0
 800f222:	dc39      	bgt.n	800f298 <_printf_float+0x2f4>
 800f224:	4a1b      	ldr	r2, [pc, #108]	; (800f294 <_printf_float+0x2f0>)
 800f226:	2301      	movs	r3, #1
 800f228:	4631      	mov	r1, r6
 800f22a:	4628      	mov	r0, r5
 800f22c:	47b8      	blx	r7
 800f22e:	3001      	adds	r0, #1
 800f230:	f43f af19 	beq.w	800f066 <_printf_float+0xc2>
 800f234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f238:	4313      	orrs	r3, r2
 800f23a:	d102      	bne.n	800f242 <_printf_float+0x29e>
 800f23c:	6823      	ldr	r3, [r4, #0]
 800f23e:	07d9      	lsls	r1, r3, #31
 800f240:	d5d8      	bpl.n	800f1f4 <_printf_float+0x250>
 800f242:	ee18 3a10 	vmov	r3, s16
 800f246:	4652      	mov	r2, sl
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	47b8      	blx	r7
 800f24e:	3001      	adds	r0, #1
 800f250:	f43f af09 	beq.w	800f066 <_printf_float+0xc2>
 800f254:	f04f 0900 	mov.w	r9, #0
 800f258:	f104 0a1a 	add.w	sl, r4, #26
 800f25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25e:	425b      	negs	r3, r3
 800f260:	454b      	cmp	r3, r9
 800f262:	dc01      	bgt.n	800f268 <_printf_float+0x2c4>
 800f264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f266:	e792      	b.n	800f18e <_printf_float+0x1ea>
 800f268:	2301      	movs	r3, #1
 800f26a:	4652      	mov	r2, sl
 800f26c:	4631      	mov	r1, r6
 800f26e:	4628      	mov	r0, r5
 800f270:	47b8      	blx	r7
 800f272:	3001      	adds	r0, #1
 800f274:	f43f aef7 	beq.w	800f066 <_printf_float+0xc2>
 800f278:	f109 0901 	add.w	r9, r9, #1
 800f27c:	e7ee      	b.n	800f25c <_printf_float+0x2b8>
 800f27e:	bf00      	nop
 800f280:	7fefffff 	.word	0x7fefffff
 800f284:	08011d6c 	.word	0x08011d6c
 800f288:	08011d70 	.word	0x08011d70
 800f28c:	08011d78 	.word	0x08011d78
 800f290:	08011d74 	.word	0x08011d74
 800f294:	08011d7c 	.word	0x08011d7c
 800f298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f29a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f29c:	429a      	cmp	r2, r3
 800f29e:	bfa8      	it	ge
 800f2a0:	461a      	movge	r2, r3
 800f2a2:	2a00      	cmp	r2, #0
 800f2a4:	4691      	mov	r9, r2
 800f2a6:	dc37      	bgt.n	800f318 <_printf_float+0x374>
 800f2a8:	f04f 0b00 	mov.w	fp, #0
 800f2ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2b0:	f104 021a 	add.w	r2, r4, #26
 800f2b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2b6:	9305      	str	r3, [sp, #20]
 800f2b8:	eba3 0309 	sub.w	r3, r3, r9
 800f2bc:	455b      	cmp	r3, fp
 800f2be:	dc33      	bgt.n	800f328 <_printf_float+0x384>
 800f2c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	db3b      	blt.n	800f340 <_printf_float+0x39c>
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	07da      	lsls	r2, r3, #31
 800f2cc:	d438      	bmi.n	800f340 <_printf_float+0x39c>
 800f2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d0:	9a05      	ldr	r2, [sp, #20]
 800f2d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2d4:	1a9a      	subs	r2, r3, r2
 800f2d6:	eba3 0901 	sub.w	r9, r3, r1
 800f2da:	4591      	cmp	r9, r2
 800f2dc:	bfa8      	it	ge
 800f2de:	4691      	movge	r9, r2
 800f2e0:	f1b9 0f00 	cmp.w	r9, #0
 800f2e4:	dc35      	bgt.n	800f352 <_printf_float+0x3ae>
 800f2e6:	f04f 0800 	mov.w	r8, #0
 800f2ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2ee:	f104 0a1a 	add.w	sl, r4, #26
 800f2f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	eba3 0309 	sub.w	r3, r3, r9
 800f2fc:	4543      	cmp	r3, r8
 800f2fe:	f77f af79 	ble.w	800f1f4 <_printf_float+0x250>
 800f302:	2301      	movs	r3, #1
 800f304:	4652      	mov	r2, sl
 800f306:	4631      	mov	r1, r6
 800f308:	4628      	mov	r0, r5
 800f30a:	47b8      	blx	r7
 800f30c:	3001      	adds	r0, #1
 800f30e:	f43f aeaa 	beq.w	800f066 <_printf_float+0xc2>
 800f312:	f108 0801 	add.w	r8, r8, #1
 800f316:	e7ec      	b.n	800f2f2 <_printf_float+0x34e>
 800f318:	4613      	mov	r3, r2
 800f31a:	4631      	mov	r1, r6
 800f31c:	4642      	mov	r2, r8
 800f31e:	4628      	mov	r0, r5
 800f320:	47b8      	blx	r7
 800f322:	3001      	adds	r0, #1
 800f324:	d1c0      	bne.n	800f2a8 <_printf_float+0x304>
 800f326:	e69e      	b.n	800f066 <_printf_float+0xc2>
 800f328:	2301      	movs	r3, #1
 800f32a:	4631      	mov	r1, r6
 800f32c:	4628      	mov	r0, r5
 800f32e:	9205      	str	r2, [sp, #20]
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f ae97 	beq.w	800f066 <_printf_float+0xc2>
 800f338:	9a05      	ldr	r2, [sp, #20]
 800f33a:	f10b 0b01 	add.w	fp, fp, #1
 800f33e:	e7b9      	b.n	800f2b4 <_printf_float+0x310>
 800f340:	ee18 3a10 	vmov	r3, s16
 800f344:	4652      	mov	r2, sl
 800f346:	4631      	mov	r1, r6
 800f348:	4628      	mov	r0, r5
 800f34a:	47b8      	blx	r7
 800f34c:	3001      	adds	r0, #1
 800f34e:	d1be      	bne.n	800f2ce <_printf_float+0x32a>
 800f350:	e689      	b.n	800f066 <_printf_float+0xc2>
 800f352:	9a05      	ldr	r2, [sp, #20]
 800f354:	464b      	mov	r3, r9
 800f356:	4442      	add	r2, r8
 800f358:	4631      	mov	r1, r6
 800f35a:	4628      	mov	r0, r5
 800f35c:	47b8      	blx	r7
 800f35e:	3001      	adds	r0, #1
 800f360:	d1c1      	bne.n	800f2e6 <_printf_float+0x342>
 800f362:	e680      	b.n	800f066 <_printf_float+0xc2>
 800f364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f366:	2a01      	cmp	r2, #1
 800f368:	dc01      	bgt.n	800f36e <_printf_float+0x3ca>
 800f36a:	07db      	lsls	r3, r3, #31
 800f36c:	d538      	bpl.n	800f3e0 <_printf_float+0x43c>
 800f36e:	2301      	movs	r3, #1
 800f370:	4642      	mov	r2, r8
 800f372:	4631      	mov	r1, r6
 800f374:	4628      	mov	r0, r5
 800f376:	47b8      	blx	r7
 800f378:	3001      	adds	r0, #1
 800f37a:	f43f ae74 	beq.w	800f066 <_printf_float+0xc2>
 800f37e:	ee18 3a10 	vmov	r3, s16
 800f382:	4652      	mov	r2, sl
 800f384:	4631      	mov	r1, r6
 800f386:	4628      	mov	r0, r5
 800f388:	47b8      	blx	r7
 800f38a:	3001      	adds	r0, #1
 800f38c:	f43f ae6b 	beq.w	800f066 <_printf_float+0xc2>
 800f390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f394:	2200      	movs	r2, #0
 800f396:	2300      	movs	r3, #0
 800f398:	f7f1 fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f39c:	b9d8      	cbnz	r0, 800f3d6 <_printf_float+0x432>
 800f39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a0:	f108 0201 	add.w	r2, r8, #1
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	47b8      	blx	r7
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	d10e      	bne.n	800f3ce <_printf_float+0x42a>
 800f3b0:	e659      	b.n	800f066 <_printf_float+0xc2>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	4652      	mov	r2, sl
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	47b8      	blx	r7
 800f3bc:	3001      	adds	r0, #1
 800f3be:	f43f ae52 	beq.w	800f066 <_printf_float+0xc2>
 800f3c2:	f108 0801 	add.w	r8, r8, #1
 800f3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	4543      	cmp	r3, r8
 800f3cc:	dcf1      	bgt.n	800f3b2 <_printf_float+0x40e>
 800f3ce:	464b      	mov	r3, r9
 800f3d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f3d4:	e6dc      	b.n	800f190 <_printf_float+0x1ec>
 800f3d6:	f04f 0800 	mov.w	r8, #0
 800f3da:	f104 0a1a 	add.w	sl, r4, #26
 800f3de:	e7f2      	b.n	800f3c6 <_printf_float+0x422>
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	4642      	mov	r2, r8
 800f3e4:	e7df      	b.n	800f3a6 <_printf_float+0x402>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	464a      	mov	r2, r9
 800f3ea:	4631      	mov	r1, r6
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	47b8      	blx	r7
 800f3f0:	3001      	adds	r0, #1
 800f3f2:	f43f ae38 	beq.w	800f066 <_printf_float+0xc2>
 800f3f6:	f108 0801 	add.w	r8, r8, #1
 800f3fa:	68e3      	ldr	r3, [r4, #12]
 800f3fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f3fe:	1a5b      	subs	r3, r3, r1
 800f400:	4543      	cmp	r3, r8
 800f402:	dcf0      	bgt.n	800f3e6 <_printf_float+0x442>
 800f404:	e6fa      	b.n	800f1fc <_printf_float+0x258>
 800f406:	f04f 0800 	mov.w	r8, #0
 800f40a:	f104 0919 	add.w	r9, r4, #25
 800f40e:	e7f4      	b.n	800f3fa <_printf_float+0x456>

0800f410 <_printf_common>:
 800f410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f414:	4616      	mov	r6, r2
 800f416:	4699      	mov	r9, r3
 800f418:	688a      	ldr	r2, [r1, #8]
 800f41a:	690b      	ldr	r3, [r1, #16]
 800f41c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f420:	4293      	cmp	r3, r2
 800f422:	bfb8      	it	lt
 800f424:	4613      	movlt	r3, r2
 800f426:	6033      	str	r3, [r6, #0]
 800f428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f42c:	4607      	mov	r7, r0
 800f42e:	460c      	mov	r4, r1
 800f430:	b10a      	cbz	r2, 800f436 <_printf_common+0x26>
 800f432:	3301      	adds	r3, #1
 800f434:	6033      	str	r3, [r6, #0]
 800f436:	6823      	ldr	r3, [r4, #0]
 800f438:	0699      	lsls	r1, r3, #26
 800f43a:	bf42      	ittt	mi
 800f43c:	6833      	ldrmi	r3, [r6, #0]
 800f43e:	3302      	addmi	r3, #2
 800f440:	6033      	strmi	r3, [r6, #0]
 800f442:	6825      	ldr	r5, [r4, #0]
 800f444:	f015 0506 	ands.w	r5, r5, #6
 800f448:	d106      	bne.n	800f458 <_printf_common+0x48>
 800f44a:	f104 0a19 	add.w	sl, r4, #25
 800f44e:	68e3      	ldr	r3, [r4, #12]
 800f450:	6832      	ldr	r2, [r6, #0]
 800f452:	1a9b      	subs	r3, r3, r2
 800f454:	42ab      	cmp	r3, r5
 800f456:	dc26      	bgt.n	800f4a6 <_printf_common+0x96>
 800f458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f45c:	1e13      	subs	r3, r2, #0
 800f45e:	6822      	ldr	r2, [r4, #0]
 800f460:	bf18      	it	ne
 800f462:	2301      	movne	r3, #1
 800f464:	0692      	lsls	r2, r2, #26
 800f466:	d42b      	bmi.n	800f4c0 <_printf_common+0xb0>
 800f468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f46c:	4649      	mov	r1, r9
 800f46e:	4638      	mov	r0, r7
 800f470:	47c0      	blx	r8
 800f472:	3001      	adds	r0, #1
 800f474:	d01e      	beq.n	800f4b4 <_printf_common+0xa4>
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	68e5      	ldr	r5, [r4, #12]
 800f47a:	6832      	ldr	r2, [r6, #0]
 800f47c:	f003 0306 	and.w	r3, r3, #6
 800f480:	2b04      	cmp	r3, #4
 800f482:	bf08      	it	eq
 800f484:	1aad      	subeq	r5, r5, r2
 800f486:	68a3      	ldr	r3, [r4, #8]
 800f488:	6922      	ldr	r2, [r4, #16]
 800f48a:	bf0c      	ite	eq
 800f48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f490:	2500      	movne	r5, #0
 800f492:	4293      	cmp	r3, r2
 800f494:	bfc4      	itt	gt
 800f496:	1a9b      	subgt	r3, r3, r2
 800f498:	18ed      	addgt	r5, r5, r3
 800f49a:	2600      	movs	r6, #0
 800f49c:	341a      	adds	r4, #26
 800f49e:	42b5      	cmp	r5, r6
 800f4a0:	d11a      	bne.n	800f4d8 <_printf_common+0xc8>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e008      	b.n	800f4b8 <_printf_common+0xa8>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	4652      	mov	r2, sl
 800f4aa:	4649      	mov	r1, r9
 800f4ac:	4638      	mov	r0, r7
 800f4ae:	47c0      	blx	r8
 800f4b0:	3001      	adds	r0, #1
 800f4b2:	d103      	bne.n	800f4bc <_printf_common+0xac>
 800f4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4bc:	3501      	adds	r5, #1
 800f4be:	e7c6      	b.n	800f44e <_printf_common+0x3e>
 800f4c0:	18e1      	adds	r1, r4, r3
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	2030      	movs	r0, #48	; 0x30
 800f4c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4ca:	4422      	add	r2, r4
 800f4cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4d4:	3302      	adds	r3, #2
 800f4d6:	e7c7      	b.n	800f468 <_printf_common+0x58>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	4622      	mov	r2, r4
 800f4dc:	4649      	mov	r1, r9
 800f4de:	4638      	mov	r0, r7
 800f4e0:	47c0      	blx	r8
 800f4e2:	3001      	adds	r0, #1
 800f4e4:	d0e6      	beq.n	800f4b4 <_printf_common+0xa4>
 800f4e6:	3601      	adds	r6, #1
 800f4e8:	e7d9      	b.n	800f49e <_printf_common+0x8e>
	...

0800f4ec <_printf_i>:
 800f4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f0:	7e0f      	ldrb	r7, [r1, #24]
 800f4f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4f4:	2f78      	cmp	r7, #120	; 0x78
 800f4f6:	4691      	mov	r9, r2
 800f4f8:	4680      	mov	r8, r0
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	469a      	mov	sl, r3
 800f4fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f502:	d807      	bhi.n	800f514 <_printf_i+0x28>
 800f504:	2f62      	cmp	r7, #98	; 0x62
 800f506:	d80a      	bhi.n	800f51e <_printf_i+0x32>
 800f508:	2f00      	cmp	r7, #0
 800f50a:	f000 80d8 	beq.w	800f6be <_printf_i+0x1d2>
 800f50e:	2f58      	cmp	r7, #88	; 0x58
 800f510:	f000 80a3 	beq.w	800f65a <_printf_i+0x16e>
 800f514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f51c:	e03a      	b.n	800f594 <_printf_i+0xa8>
 800f51e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f522:	2b15      	cmp	r3, #21
 800f524:	d8f6      	bhi.n	800f514 <_printf_i+0x28>
 800f526:	a101      	add	r1, pc, #4	; (adr r1, 800f52c <_printf_i+0x40>)
 800f528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f52c:	0800f585 	.word	0x0800f585
 800f530:	0800f599 	.word	0x0800f599
 800f534:	0800f515 	.word	0x0800f515
 800f538:	0800f515 	.word	0x0800f515
 800f53c:	0800f515 	.word	0x0800f515
 800f540:	0800f515 	.word	0x0800f515
 800f544:	0800f599 	.word	0x0800f599
 800f548:	0800f515 	.word	0x0800f515
 800f54c:	0800f515 	.word	0x0800f515
 800f550:	0800f515 	.word	0x0800f515
 800f554:	0800f515 	.word	0x0800f515
 800f558:	0800f6a5 	.word	0x0800f6a5
 800f55c:	0800f5c9 	.word	0x0800f5c9
 800f560:	0800f687 	.word	0x0800f687
 800f564:	0800f515 	.word	0x0800f515
 800f568:	0800f515 	.word	0x0800f515
 800f56c:	0800f6c7 	.word	0x0800f6c7
 800f570:	0800f515 	.word	0x0800f515
 800f574:	0800f5c9 	.word	0x0800f5c9
 800f578:	0800f515 	.word	0x0800f515
 800f57c:	0800f515 	.word	0x0800f515
 800f580:	0800f68f 	.word	0x0800f68f
 800f584:	682b      	ldr	r3, [r5, #0]
 800f586:	1d1a      	adds	r2, r3, #4
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	602a      	str	r2, [r5, #0]
 800f58c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f594:	2301      	movs	r3, #1
 800f596:	e0a3      	b.n	800f6e0 <_printf_i+0x1f4>
 800f598:	6820      	ldr	r0, [r4, #0]
 800f59a:	6829      	ldr	r1, [r5, #0]
 800f59c:	0606      	lsls	r6, r0, #24
 800f59e:	f101 0304 	add.w	r3, r1, #4
 800f5a2:	d50a      	bpl.n	800f5ba <_printf_i+0xce>
 800f5a4:	680e      	ldr	r6, [r1, #0]
 800f5a6:	602b      	str	r3, [r5, #0]
 800f5a8:	2e00      	cmp	r6, #0
 800f5aa:	da03      	bge.n	800f5b4 <_printf_i+0xc8>
 800f5ac:	232d      	movs	r3, #45	; 0x2d
 800f5ae:	4276      	negs	r6, r6
 800f5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b4:	485e      	ldr	r0, [pc, #376]	; (800f730 <_printf_i+0x244>)
 800f5b6:	230a      	movs	r3, #10
 800f5b8:	e019      	b.n	800f5ee <_printf_i+0x102>
 800f5ba:	680e      	ldr	r6, [r1, #0]
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5c2:	bf18      	it	ne
 800f5c4:	b236      	sxthne	r6, r6
 800f5c6:	e7ef      	b.n	800f5a8 <_printf_i+0xbc>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	6820      	ldr	r0, [r4, #0]
 800f5cc:	1d19      	adds	r1, r3, #4
 800f5ce:	6029      	str	r1, [r5, #0]
 800f5d0:	0601      	lsls	r1, r0, #24
 800f5d2:	d501      	bpl.n	800f5d8 <_printf_i+0xec>
 800f5d4:	681e      	ldr	r6, [r3, #0]
 800f5d6:	e002      	b.n	800f5de <_printf_i+0xf2>
 800f5d8:	0646      	lsls	r6, r0, #25
 800f5da:	d5fb      	bpl.n	800f5d4 <_printf_i+0xe8>
 800f5dc:	881e      	ldrh	r6, [r3, #0]
 800f5de:	4854      	ldr	r0, [pc, #336]	; (800f730 <_printf_i+0x244>)
 800f5e0:	2f6f      	cmp	r7, #111	; 0x6f
 800f5e2:	bf0c      	ite	eq
 800f5e4:	2308      	moveq	r3, #8
 800f5e6:	230a      	movne	r3, #10
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5ee:	6865      	ldr	r5, [r4, #4]
 800f5f0:	60a5      	str	r5, [r4, #8]
 800f5f2:	2d00      	cmp	r5, #0
 800f5f4:	bfa2      	ittt	ge
 800f5f6:	6821      	ldrge	r1, [r4, #0]
 800f5f8:	f021 0104 	bicge.w	r1, r1, #4
 800f5fc:	6021      	strge	r1, [r4, #0]
 800f5fe:	b90e      	cbnz	r6, 800f604 <_printf_i+0x118>
 800f600:	2d00      	cmp	r5, #0
 800f602:	d04d      	beq.n	800f6a0 <_printf_i+0x1b4>
 800f604:	4615      	mov	r5, r2
 800f606:	fbb6 f1f3 	udiv	r1, r6, r3
 800f60a:	fb03 6711 	mls	r7, r3, r1, r6
 800f60e:	5dc7      	ldrb	r7, [r0, r7]
 800f610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f614:	4637      	mov	r7, r6
 800f616:	42bb      	cmp	r3, r7
 800f618:	460e      	mov	r6, r1
 800f61a:	d9f4      	bls.n	800f606 <_printf_i+0x11a>
 800f61c:	2b08      	cmp	r3, #8
 800f61e:	d10b      	bne.n	800f638 <_printf_i+0x14c>
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	07de      	lsls	r6, r3, #31
 800f624:	d508      	bpl.n	800f638 <_printf_i+0x14c>
 800f626:	6923      	ldr	r3, [r4, #16]
 800f628:	6861      	ldr	r1, [r4, #4]
 800f62a:	4299      	cmp	r1, r3
 800f62c:	bfde      	ittt	le
 800f62e:	2330      	movle	r3, #48	; 0x30
 800f630:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f634:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f638:	1b52      	subs	r2, r2, r5
 800f63a:	6122      	str	r2, [r4, #16]
 800f63c:	f8cd a000 	str.w	sl, [sp]
 800f640:	464b      	mov	r3, r9
 800f642:	aa03      	add	r2, sp, #12
 800f644:	4621      	mov	r1, r4
 800f646:	4640      	mov	r0, r8
 800f648:	f7ff fee2 	bl	800f410 <_printf_common>
 800f64c:	3001      	adds	r0, #1
 800f64e:	d14c      	bne.n	800f6ea <_printf_i+0x1fe>
 800f650:	f04f 30ff 	mov.w	r0, #4294967295
 800f654:	b004      	add	sp, #16
 800f656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65a:	4835      	ldr	r0, [pc, #212]	; (800f730 <_printf_i+0x244>)
 800f65c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f660:	6829      	ldr	r1, [r5, #0]
 800f662:	6823      	ldr	r3, [r4, #0]
 800f664:	f851 6b04 	ldr.w	r6, [r1], #4
 800f668:	6029      	str	r1, [r5, #0]
 800f66a:	061d      	lsls	r5, r3, #24
 800f66c:	d514      	bpl.n	800f698 <_printf_i+0x1ac>
 800f66e:	07df      	lsls	r7, r3, #31
 800f670:	bf44      	itt	mi
 800f672:	f043 0320 	orrmi.w	r3, r3, #32
 800f676:	6023      	strmi	r3, [r4, #0]
 800f678:	b91e      	cbnz	r6, 800f682 <_printf_i+0x196>
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	f023 0320 	bic.w	r3, r3, #32
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	2310      	movs	r3, #16
 800f684:	e7b0      	b.n	800f5e8 <_printf_i+0xfc>
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	f043 0320 	orr.w	r3, r3, #32
 800f68c:	6023      	str	r3, [r4, #0]
 800f68e:	2378      	movs	r3, #120	; 0x78
 800f690:	4828      	ldr	r0, [pc, #160]	; (800f734 <_printf_i+0x248>)
 800f692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f696:	e7e3      	b.n	800f660 <_printf_i+0x174>
 800f698:	0659      	lsls	r1, r3, #25
 800f69a:	bf48      	it	mi
 800f69c:	b2b6      	uxthmi	r6, r6
 800f69e:	e7e6      	b.n	800f66e <_printf_i+0x182>
 800f6a0:	4615      	mov	r5, r2
 800f6a2:	e7bb      	b.n	800f61c <_printf_i+0x130>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	6826      	ldr	r6, [r4, #0]
 800f6a8:	6961      	ldr	r1, [r4, #20]
 800f6aa:	1d18      	adds	r0, r3, #4
 800f6ac:	6028      	str	r0, [r5, #0]
 800f6ae:	0635      	lsls	r5, r6, #24
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	d501      	bpl.n	800f6b8 <_printf_i+0x1cc>
 800f6b4:	6019      	str	r1, [r3, #0]
 800f6b6:	e002      	b.n	800f6be <_printf_i+0x1d2>
 800f6b8:	0670      	lsls	r0, r6, #25
 800f6ba:	d5fb      	bpl.n	800f6b4 <_printf_i+0x1c8>
 800f6bc:	8019      	strh	r1, [r3, #0]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	6123      	str	r3, [r4, #16]
 800f6c2:	4615      	mov	r5, r2
 800f6c4:	e7ba      	b.n	800f63c <_printf_i+0x150>
 800f6c6:	682b      	ldr	r3, [r5, #0]
 800f6c8:	1d1a      	adds	r2, r3, #4
 800f6ca:	602a      	str	r2, [r5, #0]
 800f6cc:	681d      	ldr	r5, [r3, #0]
 800f6ce:	6862      	ldr	r2, [r4, #4]
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f7f0 fd8c 	bl	80001f0 <memchr>
 800f6d8:	b108      	cbz	r0, 800f6de <_printf_i+0x1f2>
 800f6da:	1b40      	subs	r0, r0, r5
 800f6dc:	6060      	str	r0, [r4, #4]
 800f6de:	6863      	ldr	r3, [r4, #4]
 800f6e0:	6123      	str	r3, [r4, #16]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6e8:	e7a8      	b.n	800f63c <_printf_i+0x150>
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	462a      	mov	r2, r5
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	47d0      	blx	sl
 800f6f4:	3001      	adds	r0, #1
 800f6f6:	d0ab      	beq.n	800f650 <_printf_i+0x164>
 800f6f8:	6823      	ldr	r3, [r4, #0]
 800f6fa:	079b      	lsls	r3, r3, #30
 800f6fc:	d413      	bmi.n	800f726 <_printf_i+0x23a>
 800f6fe:	68e0      	ldr	r0, [r4, #12]
 800f700:	9b03      	ldr	r3, [sp, #12]
 800f702:	4298      	cmp	r0, r3
 800f704:	bfb8      	it	lt
 800f706:	4618      	movlt	r0, r3
 800f708:	e7a4      	b.n	800f654 <_printf_i+0x168>
 800f70a:	2301      	movs	r3, #1
 800f70c:	4632      	mov	r2, r6
 800f70e:	4649      	mov	r1, r9
 800f710:	4640      	mov	r0, r8
 800f712:	47d0      	blx	sl
 800f714:	3001      	adds	r0, #1
 800f716:	d09b      	beq.n	800f650 <_printf_i+0x164>
 800f718:	3501      	adds	r5, #1
 800f71a:	68e3      	ldr	r3, [r4, #12]
 800f71c:	9903      	ldr	r1, [sp, #12]
 800f71e:	1a5b      	subs	r3, r3, r1
 800f720:	42ab      	cmp	r3, r5
 800f722:	dcf2      	bgt.n	800f70a <_printf_i+0x21e>
 800f724:	e7eb      	b.n	800f6fe <_printf_i+0x212>
 800f726:	2500      	movs	r5, #0
 800f728:	f104 0619 	add.w	r6, r4, #25
 800f72c:	e7f5      	b.n	800f71a <_printf_i+0x22e>
 800f72e:	bf00      	nop
 800f730:	08011d7e 	.word	0x08011d7e
 800f734:	08011d8f 	.word	0x08011d8f

0800f738 <_puts_r>:
 800f738:	b570      	push	{r4, r5, r6, lr}
 800f73a:	460e      	mov	r6, r1
 800f73c:	4605      	mov	r5, r0
 800f73e:	b118      	cbz	r0, 800f748 <_puts_r+0x10>
 800f740:	6983      	ldr	r3, [r0, #24]
 800f742:	b90b      	cbnz	r3, 800f748 <_puts_r+0x10>
 800f744:	f7ff fa1e 	bl	800eb84 <__sinit>
 800f748:	69ab      	ldr	r3, [r5, #24]
 800f74a:	68ac      	ldr	r4, [r5, #8]
 800f74c:	b913      	cbnz	r3, 800f754 <_puts_r+0x1c>
 800f74e:	4628      	mov	r0, r5
 800f750:	f7ff fa18 	bl	800eb84 <__sinit>
 800f754:	4b2c      	ldr	r3, [pc, #176]	; (800f808 <_puts_r+0xd0>)
 800f756:	429c      	cmp	r4, r3
 800f758:	d120      	bne.n	800f79c <_puts_r+0x64>
 800f75a:	686c      	ldr	r4, [r5, #4]
 800f75c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f75e:	07db      	lsls	r3, r3, #31
 800f760:	d405      	bmi.n	800f76e <_puts_r+0x36>
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	0598      	lsls	r0, r3, #22
 800f766:	d402      	bmi.n	800f76e <_puts_r+0x36>
 800f768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f76a:	f7ff face 	bl	800ed0a <__retarget_lock_acquire_recursive>
 800f76e:	89a3      	ldrh	r3, [r4, #12]
 800f770:	0719      	lsls	r1, r3, #28
 800f772:	d51d      	bpl.n	800f7b0 <_puts_r+0x78>
 800f774:	6923      	ldr	r3, [r4, #16]
 800f776:	b1db      	cbz	r3, 800f7b0 <_puts_r+0x78>
 800f778:	3e01      	subs	r6, #1
 800f77a:	68a3      	ldr	r3, [r4, #8]
 800f77c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f780:	3b01      	subs	r3, #1
 800f782:	60a3      	str	r3, [r4, #8]
 800f784:	bb39      	cbnz	r1, 800f7d6 <_puts_r+0x9e>
 800f786:	2b00      	cmp	r3, #0
 800f788:	da38      	bge.n	800f7fc <_puts_r+0xc4>
 800f78a:	4622      	mov	r2, r4
 800f78c:	210a      	movs	r1, #10
 800f78e:	4628      	mov	r0, r5
 800f790:	f000 f926 	bl	800f9e0 <__swbuf_r>
 800f794:	3001      	adds	r0, #1
 800f796:	d011      	beq.n	800f7bc <_puts_r+0x84>
 800f798:	250a      	movs	r5, #10
 800f79a:	e011      	b.n	800f7c0 <_puts_r+0x88>
 800f79c:	4b1b      	ldr	r3, [pc, #108]	; (800f80c <_puts_r+0xd4>)
 800f79e:	429c      	cmp	r4, r3
 800f7a0:	d101      	bne.n	800f7a6 <_puts_r+0x6e>
 800f7a2:	68ac      	ldr	r4, [r5, #8]
 800f7a4:	e7da      	b.n	800f75c <_puts_r+0x24>
 800f7a6:	4b1a      	ldr	r3, [pc, #104]	; (800f810 <_puts_r+0xd8>)
 800f7a8:	429c      	cmp	r4, r3
 800f7aa:	bf08      	it	eq
 800f7ac:	68ec      	ldreq	r4, [r5, #12]
 800f7ae:	e7d5      	b.n	800f75c <_puts_r+0x24>
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f000 f978 	bl	800faa8 <__swsetup_r>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d0dd      	beq.n	800f778 <_puts_r+0x40>
 800f7bc:	f04f 35ff 	mov.w	r5, #4294967295
 800f7c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7c2:	07da      	lsls	r2, r3, #31
 800f7c4:	d405      	bmi.n	800f7d2 <_puts_r+0x9a>
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	059b      	lsls	r3, r3, #22
 800f7ca:	d402      	bmi.n	800f7d2 <_puts_r+0x9a>
 800f7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ce:	f7ff fa9d 	bl	800ed0c <__retarget_lock_release_recursive>
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	da04      	bge.n	800f7e4 <_puts_r+0xac>
 800f7da:	69a2      	ldr	r2, [r4, #24]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	dc06      	bgt.n	800f7ee <_puts_r+0xb6>
 800f7e0:	290a      	cmp	r1, #10
 800f7e2:	d004      	beq.n	800f7ee <_puts_r+0xb6>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	6022      	str	r2, [r4, #0]
 800f7ea:	7019      	strb	r1, [r3, #0]
 800f7ec:	e7c5      	b.n	800f77a <_puts_r+0x42>
 800f7ee:	4622      	mov	r2, r4
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f000 f8f5 	bl	800f9e0 <__swbuf_r>
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	d1bf      	bne.n	800f77a <_puts_r+0x42>
 800f7fa:	e7df      	b.n	800f7bc <_puts_r+0x84>
 800f7fc:	6823      	ldr	r3, [r4, #0]
 800f7fe:	250a      	movs	r5, #10
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	6022      	str	r2, [r4, #0]
 800f804:	701d      	strb	r5, [r3, #0]
 800f806:	e7db      	b.n	800f7c0 <_puts_r+0x88>
 800f808:	08011d28 	.word	0x08011d28
 800f80c:	08011d48 	.word	0x08011d48
 800f810:	08011d08 	.word	0x08011d08

0800f814 <puts>:
 800f814:	4b02      	ldr	r3, [pc, #8]	; (800f820 <puts+0xc>)
 800f816:	4601      	mov	r1, r0
 800f818:	6818      	ldr	r0, [r3, #0]
 800f81a:	f7ff bf8d 	b.w	800f738 <_puts_r>
 800f81e:	bf00      	nop
 800f820:	20000134 	.word	0x20000134

0800f824 <cleanup_glue>:
 800f824:	b538      	push	{r3, r4, r5, lr}
 800f826:	460c      	mov	r4, r1
 800f828:	6809      	ldr	r1, [r1, #0]
 800f82a:	4605      	mov	r5, r0
 800f82c:	b109      	cbz	r1, 800f832 <cleanup_glue+0xe>
 800f82e:	f7ff fff9 	bl	800f824 <cleanup_glue>
 800f832:	4621      	mov	r1, r4
 800f834:	4628      	mov	r0, r5
 800f836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f83a:	f001 bd1b 	b.w	8011274 <_free_r>
	...

0800f840 <_reclaim_reent>:
 800f840:	4b2c      	ldr	r3, [pc, #176]	; (800f8f4 <_reclaim_reent+0xb4>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4283      	cmp	r3, r0
 800f846:	b570      	push	{r4, r5, r6, lr}
 800f848:	4604      	mov	r4, r0
 800f84a:	d051      	beq.n	800f8f0 <_reclaim_reent+0xb0>
 800f84c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f84e:	b143      	cbz	r3, 800f862 <_reclaim_reent+0x22>
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d14a      	bne.n	800f8ec <_reclaim_reent+0xac>
 800f856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f858:	6819      	ldr	r1, [r3, #0]
 800f85a:	b111      	cbz	r1, 800f862 <_reclaim_reent+0x22>
 800f85c:	4620      	mov	r0, r4
 800f85e:	f001 fd09 	bl	8011274 <_free_r>
 800f862:	6961      	ldr	r1, [r4, #20]
 800f864:	b111      	cbz	r1, 800f86c <_reclaim_reent+0x2c>
 800f866:	4620      	mov	r0, r4
 800f868:	f001 fd04 	bl	8011274 <_free_r>
 800f86c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f86e:	b111      	cbz	r1, 800f876 <_reclaim_reent+0x36>
 800f870:	4620      	mov	r0, r4
 800f872:	f001 fcff 	bl	8011274 <_free_r>
 800f876:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f878:	b111      	cbz	r1, 800f880 <_reclaim_reent+0x40>
 800f87a:	4620      	mov	r0, r4
 800f87c:	f001 fcfa 	bl	8011274 <_free_r>
 800f880:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f882:	b111      	cbz	r1, 800f88a <_reclaim_reent+0x4a>
 800f884:	4620      	mov	r0, r4
 800f886:	f001 fcf5 	bl	8011274 <_free_r>
 800f88a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f88c:	b111      	cbz	r1, 800f894 <_reclaim_reent+0x54>
 800f88e:	4620      	mov	r0, r4
 800f890:	f001 fcf0 	bl	8011274 <_free_r>
 800f894:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f896:	b111      	cbz	r1, 800f89e <_reclaim_reent+0x5e>
 800f898:	4620      	mov	r0, r4
 800f89a:	f001 fceb 	bl	8011274 <_free_r>
 800f89e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f8a0:	b111      	cbz	r1, 800f8a8 <_reclaim_reent+0x68>
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f001 fce6 	bl	8011274 <_free_r>
 800f8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8aa:	b111      	cbz	r1, 800f8b2 <_reclaim_reent+0x72>
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f001 fce1 	bl	8011274 <_free_r>
 800f8b2:	69a3      	ldr	r3, [r4, #24]
 800f8b4:	b1e3      	cbz	r3, 800f8f0 <_reclaim_reent+0xb0>
 800f8b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	4798      	blx	r3
 800f8bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f8be:	b1b9      	cbz	r1, 800f8f0 <_reclaim_reent+0xb0>
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8c6:	f7ff bfad 	b.w	800f824 <cleanup_glue>
 800f8ca:	5949      	ldr	r1, [r1, r5]
 800f8cc:	b941      	cbnz	r1, 800f8e0 <_reclaim_reent+0xa0>
 800f8ce:	3504      	adds	r5, #4
 800f8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d2:	2d80      	cmp	r5, #128	; 0x80
 800f8d4:	68d9      	ldr	r1, [r3, #12]
 800f8d6:	d1f8      	bne.n	800f8ca <_reclaim_reent+0x8a>
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f001 fccb 	bl	8011274 <_free_r>
 800f8de:	e7ba      	b.n	800f856 <_reclaim_reent+0x16>
 800f8e0:	680e      	ldr	r6, [r1, #0]
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f001 fcc6 	bl	8011274 <_free_r>
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	e7ef      	b.n	800f8cc <_reclaim_reent+0x8c>
 800f8ec:	2500      	movs	r5, #0
 800f8ee:	e7ef      	b.n	800f8d0 <_reclaim_reent+0x90>
 800f8f0:	bd70      	pop	{r4, r5, r6, pc}
 800f8f2:	bf00      	nop
 800f8f4:	20000134 	.word	0x20000134

0800f8f8 <_sbrk_r>:
 800f8f8:	b538      	push	{r3, r4, r5, lr}
 800f8fa:	4d06      	ldr	r5, [pc, #24]	; (800f914 <_sbrk_r+0x1c>)
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4604      	mov	r4, r0
 800f900:	4608      	mov	r0, r1
 800f902:	602b      	str	r3, [r5, #0]
 800f904:	f7f3 fdde 	bl	80034c4 <_sbrk>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	d102      	bne.n	800f912 <_sbrk_r+0x1a>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	b103      	cbz	r3, 800f912 <_sbrk_r+0x1a>
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	20006be0 	.word	0x20006be0

0800f918 <siprintf>:
 800f918:	b40e      	push	{r1, r2, r3}
 800f91a:	b500      	push	{lr}
 800f91c:	b09c      	sub	sp, #112	; 0x70
 800f91e:	ab1d      	add	r3, sp, #116	; 0x74
 800f920:	9002      	str	r0, [sp, #8]
 800f922:	9006      	str	r0, [sp, #24]
 800f924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f928:	4809      	ldr	r0, [pc, #36]	; (800f950 <siprintf+0x38>)
 800f92a:	9107      	str	r1, [sp, #28]
 800f92c:	9104      	str	r1, [sp, #16]
 800f92e:	4909      	ldr	r1, [pc, #36]	; (800f954 <siprintf+0x3c>)
 800f930:	f853 2b04 	ldr.w	r2, [r3], #4
 800f934:	9105      	str	r1, [sp, #20]
 800f936:	6800      	ldr	r0, [r0, #0]
 800f938:	9301      	str	r3, [sp, #4]
 800f93a:	a902      	add	r1, sp, #8
 800f93c:	f001 fd42 	bl	80113c4 <_svfiprintf_r>
 800f940:	9b02      	ldr	r3, [sp, #8]
 800f942:	2200      	movs	r2, #0
 800f944:	701a      	strb	r2, [r3, #0]
 800f946:	b01c      	add	sp, #112	; 0x70
 800f948:	f85d eb04 	ldr.w	lr, [sp], #4
 800f94c:	b003      	add	sp, #12
 800f94e:	4770      	bx	lr
 800f950:	20000134 	.word	0x20000134
 800f954:	ffff0208 	.word	0xffff0208

0800f958 <__sread>:
 800f958:	b510      	push	{r4, lr}
 800f95a:	460c      	mov	r4, r1
 800f95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f960:	f001 fe30 	bl	80115c4 <_read_r>
 800f964:	2800      	cmp	r0, #0
 800f966:	bfab      	itete	ge
 800f968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f96a:	89a3      	ldrhlt	r3, [r4, #12]
 800f96c:	181b      	addge	r3, r3, r0
 800f96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f972:	bfac      	ite	ge
 800f974:	6563      	strge	r3, [r4, #84]	; 0x54
 800f976:	81a3      	strhlt	r3, [r4, #12]
 800f978:	bd10      	pop	{r4, pc}

0800f97a <__swrite>:
 800f97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97e:	461f      	mov	r7, r3
 800f980:	898b      	ldrh	r3, [r1, #12]
 800f982:	05db      	lsls	r3, r3, #23
 800f984:	4605      	mov	r5, r0
 800f986:	460c      	mov	r4, r1
 800f988:	4616      	mov	r6, r2
 800f98a:	d505      	bpl.n	800f998 <__swrite+0x1e>
 800f98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f990:	2302      	movs	r3, #2
 800f992:	2200      	movs	r2, #0
 800f994:	f001 f848 	bl	8010a28 <_lseek_r>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f99e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ae:	f000 b869 	b.w	800fa84 <_write_r>

0800f9b2 <__sseek>:
 800f9b2:	b510      	push	{r4, lr}
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ba:	f001 f835 	bl	8010a28 <_lseek_r>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	bf15      	itete	ne
 800f9c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9ce:	81a3      	strheq	r3, [r4, #12]
 800f9d0:	bf18      	it	ne
 800f9d2:	81a3      	strhne	r3, [r4, #12]
 800f9d4:	bd10      	pop	{r4, pc}

0800f9d6 <__sclose>:
 800f9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9da:	f000 b8d3 	b.w	800fb84 <_close_r>
	...

0800f9e0 <__swbuf_r>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	460e      	mov	r6, r1
 800f9e4:	4614      	mov	r4, r2
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	b118      	cbz	r0, 800f9f2 <__swbuf_r+0x12>
 800f9ea:	6983      	ldr	r3, [r0, #24]
 800f9ec:	b90b      	cbnz	r3, 800f9f2 <__swbuf_r+0x12>
 800f9ee:	f7ff f8c9 	bl	800eb84 <__sinit>
 800f9f2:	4b21      	ldr	r3, [pc, #132]	; (800fa78 <__swbuf_r+0x98>)
 800f9f4:	429c      	cmp	r4, r3
 800f9f6:	d12b      	bne.n	800fa50 <__swbuf_r+0x70>
 800f9f8:	686c      	ldr	r4, [r5, #4]
 800f9fa:	69a3      	ldr	r3, [r4, #24]
 800f9fc:	60a3      	str	r3, [r4, #8]
 800f9fe:	89a3      	ldrh	r3, [r4, #12]
 800fa00:	071a      	lsls	r2, r3, #28
 800fa02:	d52f      	bpl.n	800fa64 <__swbuf_r+0x84>
 800fa04:	6923      	ldr	r3, [r4, #16]
 800fa06:	b36b      	cbz	r3, 800fa64 <__swbuf_r+0x84>
 800fa08:	6923      	ldr	r3, [r4, #16]
 800fa0a:	6820      	ldr	r0, [r4, #0]
 800fa0c:	1ac0      	subs	r0, r0, r3
 800fa0e:	6963      	ldr	r3, [r4, #20]
 800fa10:	b2f6      	uxtb	r6, r6
 800fa12:	4283      	cmp	r3, r0
 800fa14:	4637      	mov	r7, r6
 800fa16:	dc04      	bgt.n	800fa22 <__swbuf_r+0x42>
 800fa18:	4621      	mov	r1, r4
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	f000 ffc4 	bl	80109a8 <_fflush_r>
 800fa20:	bb30      	cbnz	r0, 800fa70 <__swbuf_r+0x90>
 800fa22:	68a3      	ldr	r3, [r4, #8]
 800fa24:	3b01      	subs	r3, #1
 800fa26:	60a3      	str	r3, [r4, #8]
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	6022      	str	r2, [r4, #0]
 800fa2e:	701e      	strb	r6, [r3, #0]
 800fa30:	6963      	ldr	r3, [r4, #20]
 800fa32:	3001      	adds	r0, #1
 800fa34:	4283      	cmp	r3, r0
 800fa36:	d004      	beq.n	800fa42 <__swbuf_r+0x62>
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	07db      	lsls	r3, r3, #31
 800fa3c:	d506      	bpl.n	800fa4c <__swbuf_r+0x6c>
 800fa3e:	2e0a      	cmp	r6, #10
 800fa40:	d104      	bne.n	800fa4c <__swbuf_r+0x6c>
 800fa42:	4621      	mov	r1, r4
 800fa44:	4628      	mov	r0, r5
 800fa46:	f000 ffaf 	bl	80109a8 <_fflush_r>
 800fa4a:	b988      	cbnz	r0, 800fa70 <__swbuf_r+0x90>
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa50:	4b0a      	ldr	r3, [pc, #40]	; (800fa7c <__swbuf_r+0x9c>)
 800fa52:	429c      	cmp	r4, r3
 800fa54:	d101      	bne.n	800fa5a <__swbuf_r+0x7a>
 800fa56:	68ac      	ldr	r4, [r5, #8]
 800fa58:	e7cf      	b.n	800f9fa <__swbuf_r+0x1a>
 800fa5a:	4b09      	ldr	r3, [pc, #36]	; (800fa80 <__swbuf_r+0xa0>)
 800fa5c:	429c      	cmp	r4, r3
 800fa5e:	bf08      	it	eq
 800fa60:	68ec      	ldreq	r4, [r5, #12]
 800fa62:	e7ca      	b.n	800f9fa <__swbuf_r+0x1a>
 800fa64:	4621      	mov	r1, r4
 800fa66:	4628      	mov	r0, r5
 800fa68:	f000 f81e 	bl	800faa8 <__swsetup_r>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d0cb      	beq.n	800fa08 <__swbuf_r+0x28>
 800fa70:	f04f 37ff 	mov.w	r7, #4294967295
 800fa74:	e7ea      	b.n	800fa4c <__swbuf_r+0x6c>
 800fa76:	bf00      	nop
 800fa78:	08011d28 	.word	0x08011d28
 800fa7c:	08011d48 	.word	0x08011d48
 800fa80:	08011d08 	.word	0x08011d08

0800fa84 <_write_r>:
 800fa84:	b538      	push	{r3, r4, r5, lr}
 800fa86:	4d07      	ldr	r5, [pc, #28]	; (800faa4 <_write_r+0x20>)
 800fa88:	4604      	mov	r4, r0
 800fa8a:	4608      	mov	r0, r1
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	2200      	movs	r2, #0
 800fa90:	602a      	str	r2, [r5, #0]
 800fa92:	461a      	mov	r2, r3
 800fa94:	f7f3 fcc5 	bl	8003422 <_write>
 800fa98:	1c43      	adds	r3, r0, #1
 800fa9a:	d102      	bne.n	800faa2 <_write_r+0x1e>
 800fa9c:	682b      	ldr	r3, [r5, #0]
 800fa9e:	b103      	cbz	r3, 800faa2 <_write_r+0x1e>
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	bd38      	pop	{r3, r4, r5, pc}
 800faa4:	20006be0 	.word	0x20006be0

0800faa8 <__swsetup_r>:
 800faa8:	4b32      	ldr	r3, [pc, #200]	; (800fb74 <__swsetup_r+0xcc>)
 800faaa:	b570      	push	{r4, r5, r6, lr}
 800faac:	681d      	ldr	r5, [r3, #0]
 800faae:	4606      	mov	r6, r0
 800fab0:	460c      	mov	r4, r1
 800fab2:	b125      	cbz	r5, 800fabe <__swsetup_r+0x16>
 800fab4:	69ab      	ldr	r3, [r5, #24]
 800fab6:	b913      	cbnz	r3, 800fabe <__swsetup_r+0x16>
 800fab8:	4628      	mov	r0, r5
 800faba:	f7ff f863 	bl	800eb84 <__sinit>
 800fabe:	4b2e      	ldr	r3, [pc, #184]	; (800fb78 <__swsetup_r+0xd0>)
 800fac0:	429c      	cmp	r4, r3
 800fac2:	d10f      	bne.n	800fae4 <__swsetup_r+0x3c>
 800fac4:	686c      	ldr	r4, [r5, #4]
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800facc:	0719      	lsls	r1, r3, #28
 800face:	d42c      	bmi.n	800fb2a <__swsetup_r+0x82>
 800fad0:	06dd      	lsls	r5, r3, #27
 800fad2:	d411      	bmi.n	800faf8 <__swsetup_r+0x50>
 800fad4:	2309      	movs	r3, #9
 800fad6:	6033      	str	r3, [r6, #0]
 800fad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	f04f 30ff 	mov.w	r0, #4294967295
 800fae2:	e03e      	b.n	800fb62 <__swsetup_r+0xba>
 800fae4:	4b25      	ldr	r3, [pc, #148]	; (800fb7c <__swsetup_r+0xd4>)
 800fae6:	429c      	cmp	r4, r3
 800fae8:	d101      	bne.n	800faee <__swsetup_r+0x46>
 800faea:	68ac      	ldr	r4, [r5, #8]
 800faec:	e7eb      	b.n	800fac6 <__swsetup_r+0x1e>
 800faee:	4b24      	ldr	r3, [pc, #144]	; (800fb80 <__swsetup_r+0xd8>)
 800faf0:	429c      	cmp	r4, r3
 800faf2:	bf08      	it	eq
 800faf4:	68ec      	ldreq	r4, [r5, #12]
 800faf6:	e7e6      	b.n	800fac6 <__swsetup_r+0x1e>
 800faf8:	0758      	lsls	r0, r3, #29
 800fafa:	d512      	bpl.n	800fb22 <__swsetup_r+0x7a>
 800fafc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fafe:	b141      	cbz	r1, 800fb12 <__swsetup_r+0x6a>
 800fb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb04:	4299      	cmp	r1, r3
 800fb06:	d002      	beq.n	800fb0e <__swsetup_r+0x66>
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f001 fbb3 	bl	8011274 <_free_r>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	6363      	str	r3, [r4, #52]	; 0x34
 800fb12:	89a3      	ldrh	r3, [r4, #12]
 800fb14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb18:	81a3      	strh	r3, [r4, #12]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	6063      	str	r3, [r4, #4]
 800fb1e:	6923      	ldr	r3, [r4, #16]
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	89a3      	ldrh	r3, [r4, #12]
 800fb24:	f043 0308 	orr.w	r3, r3, #8
 800fb28:	81a3      	strh	r3, [r4, #12]
 800fb2a:	6923      	ldr	r3, [r4, #16]
 800fb2c:	b94b      	cbnz	r3, 800fb42 <__swsetup_r+0x9a>
 800fb2e:	89a3      	ldrh	r3, [r4, #12]
 800fb30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb38:	d003      	beq.n	800fb42 <__swsetup_r+0x9a>
 800fb3a:	4621      	mov	r1, r4
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f000 ffab 	bl	8010a98 <__smakebuf_r>
 800fb42:	89a0      	ldrh	r0, [r4, #12]
 800fb44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb48:	f010 0301 	ands.w	r3, r0, #1
 800fb4c:	d00a      	beq.n	800fb64 <__swsetup_r+0xbc>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60a3      	str	r3, [r4, #8]
 800fb52:	6963      	ldr	r3, [r4, #20]
 800fb54:	425b      	negs	r3, r3
 800fb56:	61a3      	str	r3, [r4, #24]
 800fb58:	6923      	ldr	r3, [r4, #16]
 800fb5a:	b943      	cbnz	r3, 800fb6e <__swsetup_r+0xc6>
 800fb5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb60:	d1ba      	bne.n	800fad8 <__swsetup_r+0x30>
 800fb62:	bd70      	pop	{r4, r5, r6, pc}
 800fb64:	0781      	lsls	r1, r0, #30
 800fb66:	bf58      	it	pl
 800fb68:	6963      	ldrpl	r3, [r4, #20]
 800fb6a:	60a3      	str	r3, [r4, #8]
 800fb6c:	e7f4      	b.n	800fb58 <__swsetup_r+0xb0>
 800fb6e:	2000      	movs	r0, #0
 800fb70:	e7f7      	b.n	800fb62 <__swsetup_r+0xba>
 800fb72:	bf00      	nop
 800fb74:	20000134 	.word	0x20000134
 800fb78:	08011d28 	.word	0x08011d28
 800fb7c:	08011d48 	.word	0x08011d48
 800fb80:	08011d08 	.word	0x08011d08

0800fb84 <_close_r>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4d06      	ldr	r5, [pc, #24]	; (800fba0 <_close_r+0x1c>)
 800fb88:	2300      	movs	r3, #0
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	602b      	str	r3, [r5, #0]
 800fb90:	f7f3 fc63 	bl	800345a <_close>
 800fb94:	1c43      	adds	r3, r0, #1
 800fb96:	d102      	bne.n	800fb9e <_close_r+0x1a>
 800fb98:	682b      	ldr	r3, [r5, #0]
 800fb9a:	b103      	cbz	r3, 800fb9e <_close_r+0x1a>
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	bd38      	pop	{r3, r4, r5, pc}
 800fba0:	20006be0 	.word	0x20006be0

0800fba4 <quorem>:
 800fba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba8:	6903      	ldr	r3, [r0, #16]
 800fbaa:	690c      	ldr	r4, [r1, #16]
 800fbac:	42a3      	cmp	r3, r4
 800fbae:	4607      	mov	r7, r0
 800fbb0:	f2c0 8081 	blt.w	800fcb6 <quorem+0x112>
 800fbb4:	3c01      	subs	r4, #1
 800fbb6:	f101 0814 	add.w	r8, r1, #20
 800fbba:	f100 0514 	add.w	r5, r0, #20
 800fbbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbc2:	9301      	str	r3, [sp, #4]
 800fbc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fbd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbd8:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbdc:	d331      	bcc.n	800fc42 <quorem+0x9e>
 800fbde:	f04f 0e00 	mov.w	lr, #0
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	46ac      	mov	ip, r5
 800fbe6:	46f2      	mov	sl, lr
 800fbe8:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbec:	b293      	uxth	r3, r2
 800fbee:	fb06 e303 	mla	r3, r6, r3, lr
 800fbf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	ebaa 0303 	sub.w	r3, sl, r3
 800fbfc:	f8dc a000 	ldr.w	sl, [ip]
 800fc00:	0c12      	lsrs	r2, r2, #16
 800fc02:	fa13 f38a 	uxtah	r3, r3, sl
 800fc06:	fb06 e202 	mla	r2, r6, r2, lr
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	9b00      	ldr	r3, [sp, #0]
 800fc0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc12:	b292      	uxth	r2, r2
 800fc14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fc18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc1c:	f8bd 3000 	ldrh.w	r3, [sp]
 800fc20:	4581      	cmp	r9, r0
 800fc22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc26:	f84c 3b04 	str.w	r3, [ip], #4
 800fc2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc2e:	d2db      	bcs.n	800fbe8 <quorem+0x44>
 800fc30:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc34:	b92b      	cbnz	r3, 800fc42 <quorem+0x9e>
 800fc36:	9b01      	ldr	r3, [sp, #4]
 800fc38:	3b04      	subs	r3, #4
 800fc3a:	429d      	cmp	r5, r3
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	d32e      	bcc.n	800fc9e <quorem+0xfa>
 800fc40:	613c      	str	r4, [r7, #16]
 800fc42:	4638      	mov	r0, r7
 800fc44:	f001 f9fe 	bl	8011044 <__mcmp>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	db24      	blt.n	800fc96 <quorem+0xf2>
 800fc4c:	3601      	adds	r6, #1
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f04f 0c00 	mov.w	ip, #0
 800fc54:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc58:	f8d0 e000 	ldr.w	lr, [r0]
 800fc5c:	b293      	uxth	r3, r2
 800fc5e:	ebac 0303 	sub.w	r3, ip, r3
 800fc62:	0c12      	lsrs	r2, r2, #16
 800fc64:	fa13 f38e 	uxtah	r3, r3, lr
 800fc68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc76:	45c1      	cmp	r9, r8
 800fc78:	f840 3b04 	str.w	r3, [r0], #4
 800fc7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc80:	d2e8      	bcs.n	800fc54 <quorem+0xb0>
 800fc82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc8a:	b922      	cbnz	r2, 800fc96 <quorem+0xf2>
 800fc8c:	3b04      	subs	r3, #4
 800fc8e:	429d      	cmp	r5, r3
 800fc90:	461a      	mov	r2, r3
 800fc92:	d30a      	bcc.n	800fcaa <quorem+0x106>
 800fc94:	613c      	str	r4, [r7, #16]
 800fc96:	4630      	mov	r0, r6
 800fc98:	b003      	add	sp, #12
 800fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9e:	6812      	ldr	r2, [r2, #0]
 800fca0:	3b04      	subs	r3, #4
 800fca2:	2a00      	cmp	r2, #0
 800fca4:	d1cc      	bne.n	800fc40 <quorem+0x9c>
 800fca6:	3c01      	subs	r4, #1
 800fca8:	e7c7      	b.n	800fc3a <quorem+0x96>
 800fcaa:	6812      	ldr	r2, [r2, #0]
 800fcac:	3b04      	subs	r3, #4
 800fcae:	2a00      	cmp	r2, #0
 800fcb0:	d1f0      	bne.n	800fc94 <quorem+0xf0>
 800fcb2:	3c01      	subs	r4, #1
 800fcb4:	e7eb      	b.n	800fc8e <quorem+0xea>
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	e7ee      	b.n	800fc98 <quorem+0xf4>
 800fcba:	0000      	movs	r0, r0
 800fcbc:	0000      	movs	r0, r0
	...

0800fcc0 <_dtoa_r>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	ed2d 8b04 	vpush	{d8-d9}
 800fcc8:	ec57 6b10 	vmov	r6, r7, d0
 800fccc:	b093      	sub	sp, #76	; 0x4c
 800fcce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fcd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fcd4:	9106      	str	r1, [sp, #24]
 800fcd6:	ee10 aa10 	vmov	sl, s0
 800fcda:	4604      	mov	r4, r0
 800fcdc:	9209      	str	r2, [sp, #36]	; 0x24
 800fcde:	930c      	str	r3, [sp, #48]	; 0x30
 800fce0:	46bb      	mov	fp, r7
 800fce2:	b975      	cbnz	r5, 800fd02 <_dtoa_r+0x42>
 800fce4:	2010      	movs	r0, #16
 800fce6:	f000 ff17 	bl	8010b18 <malloc>
 800fcea:	4602      	mov	r2, r0
 800fcec:	6260      	str	r0, [r4, #36]	; 0x24
 800fcee:	b920      	cbnz	r0, 800fcfa <_dtoa_r+0x3a>
 800fcf0:	4ba7      	ldr	r3, [pc, #668]	; (800ff90 <_dtoa_r+0x2d0>)
 800fcf2:	21ea      	movs	r1, #234	; 0xea
 800fcf4:	48a7      	ldr	r0, [pc, #668]	; (800ff94 <_dtoa_r+0x2d4>)
 800fcf6:	f001 fc77 	bl	80115e8 <__assert_func>
 800fcfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcfe:	6005      	str	r5, [r0, #0]
 800fd00:	60c5      	str	r5, [r0, #12]
 800fd02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd04:	6819      	ldr	r1, [r3, #0]
 800fd06:	b151      	cbz	r1, 800fd1e <_dtoa_r+0x5e>
 800fd08:	685a      	ldr	r2, [r3, #4]
 800fd0a:	604a      	str	r2, [r1, #4]
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	4093      	lsls	r3, r2
 800fd10:	608b      	str	r3, [r1, #8]
 800fd12:	4620      	mov	r0, r4
 800fd14:	f000 ff54 	bl	8010bc0 <_Bfree>
 800fd18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	1e3b      	subs	r3, r7, #0
 800fd20:	bfaa      	itet	ge
 800fd22:	2300      	movge	r3, #0
 800fd24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fd28:	f8c8 3000 	strge.w	r3, [r8]
 800fd2c:	4b9a      	ldr	r3, [pc, #616]	; (800ff98 <_dtoa_r+0x2d8>)
 800fd2e:	bfbc      	itt	lt
 800fd30:	2201      	movlt	r2, #1
 800fd32:	f8c8 2000 	strlt.w	r2, [r8]
 800fd36:	ea33 030b 	bics.w	r3, r3, fp
 800fd3a:	d11b      	bne.n	800fd74 <_dtoa_r+0xb4>
 800fd3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd42:	6013      	str	r3, [r2, #0]
 800fd44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd48:	4333      	orrs	r3, r6
 800fd4a:	f000 8592 	beq.w	8010872 <_dtoa_r+0xbb2>
 800fd4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd50:	b963      	cbnz	r3, 800fd6c <_dtoa_r+0xac>
 800fd52:	4b92      	ldr	r3, [pc, #584]	; (800ff9c <_dtoa_r+0x2dc>)
 800fd54:	e022      	b.n	800fd9c <_dtoa_r+0xdc>
 800fd56:	4b92      	ldr	r3, [pc, #584]	; (800ffa0 <_dtoa_r+0x2e0>)
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	9801      	ldr	r0, [sp, #4]
 800fd62:	b013      	add	sp, #76	; 0x4c
 800fd64:	ecbd 8b04 	vpop	{d8-d9}
 800fd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd6c:	4b8b      	ldr	r3, [pc, #556]	; (800ff9c <_dtoa_r+0x2dc>)
 800fd6e:	9301      	str	r3, [sp, #4]
 800fd70:	3303      	adds	r3, #3
 800fd72:	e7f3      	b.n	800fd5c <_dtoa_r+0x9c>
 800fd74:	2200      	movs	r2, #0
 800fd76:	2300      	movs	r3, #0
 800fd78:	4650      	mov	r0, sl
 800fd7a:	4659      	mov	r1, fp
 800fd7c:	f7f0 feac 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd80:	ec4b ab19 	vmov	d9, sl, fp
 800fd84:	4680      	mov	r8, r0
 800fd86:	b158      	cbz	r0, 800fda0 <_dtoa_r+0xe0>
 800fd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	6013      	str	r3, [r2, #0]
 800fd8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 856b 	beq.w	801086c <_dtoa_r+0xbac>
 800fd96:	4883      	ldr	r0, [pc, #524]	; (800ffa4 <_dtoa_r+0x2e4>)
 800fd98:	6018      	str	r0, [r3, #0]
 800fd9a:	1e43      	subs	r3, r0, #1
 800fd9c:	9301      	str	r3, [sp, #4]
 800fd9e:	e7df      	b.n	800fd60 <_dtoa_r+0xa0>
 800fda0:	ec4b ab10 	vmov	d0, sl, fp
 800fda4:	aa10      	add	r2, sp, #64	; 0x40
 800fda6:	a911      	add	r1, sp, #68	; 0x44
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f001 f9f1 	bl	8011190 <__d2b>
 800fdae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fdb2:	ee08 0a10 	vmov	s16, r0
 800fdb6:	2d00      	cmp	r5, #0
 800fdb8:	f000 8084 	beq.w	800fec4 <_dtoa_r+0x204>
 800fdbc:	ee19 3a90 	vmov	r3, s19
 800fdc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fdc8:	4656      	mov	r6, sl
 800fdca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fdce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fdd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fdd6:	4b74      	ldr	r3, [pc, #464]	; (800ffa8 <_dtoa_r+0x2e8>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	4630      	mov	r0, r6
 800fddc:	4639      	mov	r1, r7
 800fdde:	f7f0 fa5b 	bl	8000298 <__aeabi_dsub>
 800fde2:	a365      	add	r3, pc, #404	; (adr r3, 800ff78 <_dtoa_r+0x2b8>)
 800fde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde8:	f7f0 fc0e 	bl	8000608 <__aeabi_dmul>
 800fdec:	a364      	add	r3, pc, #400	; (adr r3, 800ff80 <_dtoa_r+0x2c0>)
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	f7f0 fa53 	bl	800029c <__adddf3>
 800fdf6:	4606      	mov	r6, r0
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	460f      	mov	r7, r1
 800fdfc:	f7f0 fb9a 	bl	8000534 <__aeabi_i2d>
 800fe00:	a361      	add	r3, pc, #388	; (adr r3, 800ff88 <_dtoa_r+0x2c8>)
 800fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe06:	f7f0 fbff 	bl	8000608 <__aeabi_dmul>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	4630      	mov	r0, r6
 800fe10:	4639      	mov	r1, r7
 800fe12:	f7f0 fa43 	bl	800029c <__adddf3>
 800fe16:	4606      	mov	r6, r0
 800fe18:	460f      	mov	r7, r1
 800fe1a:	f7f0 fea5 	bl	8000b68 <__aeabi_d2iz>
 800fe1e:	2200      	movs	r2, #0
 800fe20:	9000      	str	r0, [sp, #0]
 800fe22:	2300      	movs	r3, #0
 800fe24:	4630      	mov	r0, r6
 800fe26:	4639      	mov	r1, r7
 800fe28:	f7f0 fe60 	bl	8000aec <__aeabi_dcmplt>
 800fe2c:	b150      	cbz	r0, 800fe44 <_dtoa_r+0x184>
 800fe2e:	9800      	ldr	r0, [sp, #0]
 800fe30:	f7f0 fb80 	bl	8000534 <__aeabi_i2d>
 800fe34:	4632      	mov	r2, r6
 800fe36:	463b      	mov	r3, r7
 800fe38:	f7f0 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe3c:	b910      	cbnz	r0, 800fe44 <_dtoa_r+0x184>
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	9b00      	ldr	r3, [sp, #0]
 800fe46:	2b16      	cmp	r3, #22
 800fe48:	d85a      	bhi.n	800ff00 <_dtoa_r+0x240>
 800fe4a:	9a00      	ldr	r2, [sp, #0]
 800fe4c:	4b57      	ldr	r3, [pc, #348]	; (800ffac <_dtoa_r+0x2ec>)
 800fe4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe56:	ec51 0b19 	vmov	r0, r1, d9
 800fe5a:	f7f0 fe47 	bl	8000aec <__aeabi_dcmplt>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d050      	beq.n	800ff04 <_dtoa_r+0x244>
 800fe62:	9b00      	ldr	r3, [sp, #0]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	2300      	movs	r3, #0
 800fe6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe6e:	1b5d      	subs	r5, r3, r5
 800fe70:	1e6b      	subs	r3, r5, #1
 800fe72:	9305      	str	r3, [sp, #20]
 800fe74:	bf45      	ittet	mi
 800fe76:	f1c5 0301 	rsbmi	r3, r5, #1
 800fe7a:	9304      	strmi	r3, [sp, #16]
 800fe7c:	2300      	movpl	r3, #0
 800fe7e:	2300      	movmi	r3, #0
 800fe80:	bf4c      	ite	mi
 800fe82:	9305      	strmi	r3, [sp, #20]
 800fe84:	9304      	strpl	r3, [sp, #16]
 800fe86:	9b00      	ldr	r3, [sp, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	db3d      	blt.n	800ff08 <_dtoa_r+0x248>
 800fe8c:	9b05      	ldr	r3, [sp, #20]
 800fe8e:	9a00      	ldr	r2, [sp, #0]
 800fe90:	920a      	str	r2, [sp, #40]	; 0x28
 800fe92:	4413      	add	r3, r2
 800fe94:	9305      	str	r3, [sp, #20]
 800fe96:	2300      	movs	r3, #0
 800fe98:	9307      	str	r3, [sp, #28]
 800fe9a:	9b06      	ldr	r3, [sp, #24]
 800fe9c:	2b09      	cmp	r3, #9
 800fe9e:	f200 8089 	bhi.w	800ffb4 <_dtoa_r+0x2f4>
 800fea2:	2b05      	cmp	r3, #5
 800fea4:	bfc4      	itt	gt
 800fea6:	3b04      	subgt	r3, #4
 800fea8:	9306      	strgt	r3, [sp, #24]
 800feaa:	9b06      	ldr	r3, [sp, #24]
 800feac:	f1a3 0302 	sub.w	r3, r3, #2
 800feb0:	bfcc      	ite	gt
 800feb2:	2500      	movgt	r5, #0
 800feb4:	2501      	movle	r5, #1
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	f200 8087 	bhi.w	800ffca <_dtoa_r+0x30a>
 800febc:	e8df f003 	tbb	[pc, r3]
 800fec0:	59383a2d 	.word	0x59383a2d
 800fec4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fec8:	441d      	add	r5, r3
 800feca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fece:	2b20      	cmp	r3, #32
 800fed0:	bfc1      	itttt	gt
 800fed2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fed6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800feda:	fa0b f303 	lslgt.w	r3, fp, r3
 800fede:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fee2:	bfda      	itte	le
 800fee4:	f1c3 0320 	rsble	r3, r3, #32
 800fee8:	fa06 f003 	lslle.w	r0, r6, r3
 800feec:	4318      	orrgt	r0, r3
 800feee:	f7f0 fb11 	bl	8000514 <__aeabi_ui2d>
 800fef2:	2301      	movs	r3, #1
 800fef4:	4606      	mov	r6, r0
 800fef6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fefa:	3d01      	subs	r5, #1
 800fefc:	930e      	str	r3, [sp, #56]	; 0x38
 800fefe:	e76a      	b.n	800fdd6 <_dtoa_r+0x116>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e7b2      	b.n	800fe6a <_dtoa_r+0x1aa>
 800ff04:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff06:	e7b1      	b.n	800fe6c <_dtoa_r+0x1ac>
 800ff08:	9b04      	ldr	r3, [sp, #16]
 800ff0a:	9a00      	ldr	r2, [sp, #0]
 800ff0c:	1a9b      	subs	r3, r3, r2
 800ff0e:	9304      	str	r3, [sp, #16]
 800ff10:	4253      	negs	r3, r2
 800ff12:	9307      	str	r3, [sp, #28]
 800ff14:	2300      	movs	r3, #0
 800ff16:	930a      	str	r3, [sp, #40]	; 0x28
 800ff18:	e7bf      	b.n	800fe9a <_dtoa_r+0x1da>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	9308      	str	r3, [sp, #32]
 800ff1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	dc55      	bgt.n	800ffd0 <_dtoa_r+0x310>
 800ff24:	2301      	movs	r3, #1
 800ff26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ff2e:	e00c      	b.n	800ff4a <_dtoa_r+0x28a>
 800ff30:	2301      	movs	r3, #1
 800ff32:	e7f3      	b.n	800ff1c <_dtoa_r+0x25c>
 800ff34:	2300      	movs	r3, #0
 800ff36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff38:	9308      	str	r3, [sp, #32]
 800ff3a:	9b00      	ldr	r3, [sp, #0]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	9302      	str	r3, [sp, #8]
 800ff40:	3301      	adds	r3, #1
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	9303      	str	r3, [sp, #12]
 800ff46:	bfb8      	it	lt
 800ff48:	2301      	movlt	r3, #1
 800ff4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	6042      	str	r2, [r0, #4]
 800ff50:	2204      	movs	r2, #4
 800ff52:	f102 0614 	add.w	r6, r2, #20
 800ff56:	429e      	cmp	r6, r3
 800ff58:	6841      	ldr	r1, [r0, #4]
 800ff5a:	d93d      	bls.n	800ffd8 <_dtoa_r+0x318>
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f000 fdef 	bl	8010b40 <_Balloc>
 800ff62:	9001      	str	r0, [sp, #4]
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d13b      	bne.n	800ffe0 <_dtoa_r+0x320>
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <_dtoa_r+0x2f0>)
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff70:	e6c0      	b.n	800fcf4 <_dtoa_r+0x34>
 800ff72:	2301      	movs	r3, #1
 800ff74:	e7df      	b.n	800ff36 <_dtoa_r+0x276>
 800ff76:	bf00      	nop
 800ff78:	636f4361 	.word	0x636f4361
 800ff7c:	3fd287a7 	.word	0x3fd287a7
 800ff80:	8b60c8b3 	.word	0x8b60c8b3
 800ff84:	3fc68a28 	.word	0x3fc68a28
 800ff88:	509f79fb 	.word	0x509f79fb
 800ff8c:	3fd34413 	.word	0x3fd34413
 800ff90:	08011dad 	.word	0x08011dad
 800ff94:	08011dc4 	.word	0x08011dc4
 800ff98:	7ff00000 	.word	0x7ff00000
 800ff9c:	08011da9 	.word	0x08011da9
 800ffa0:	08011da0 	.word	0x08011da0
 800ffa4:	08011d7d 	.word	0x08011d7d
 800ffa8:	3ff80000 	.word	0x3ff80000
 800ffac:	08011eb8 	.word	0x08011eb8
 800ffb0:	08011e1f 	.word	0x08011e1f
 800ffb4:	2501      	movs	r5, #1
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	9306      	str	r3, [sp, #24]
 800ffba:	9508      	str	r5, [sp, #32]
 800ffbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	2312      	movs	r3, #18
 800ffc8:	e7b0      	b.n	800ff2c <_dtoa_r+0x26c>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	9308      	str	r3, [sp, #32]
 800ffce:	e7f5      	b.n	800ffbc <_dtoa_r+0x2fc>
 800ffd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ffd6:	e7b8      	b.n	800ff4a <_dtoa_r+0x28a>
 800ffd8:	3101      	adds	r1, #1
 800ffda:	6041      	str	r1, [r0, #4]
 800ffdc:	0052      	lsls	r2, r2, #1
 800ffde:	e7b8      	b.n	800ff52 <_dtoa_r+0x292>
 800ffe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffe2:	9a01      	ldr	r2, [sp, #4]
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	9b03      	ldr	r3, [sp, #12]
 800ffe8:	2b0e      	cmp	r3, #14
 800ffea:	f200 809d 	bhi.w	8010128 <_dtoa_r+0x468>
 800ffee:	2d00      	cmp	r5, #0
 800fff0:	f000 809a 	beq.w	8010128 <_dtoa_r+0x468>
 800fff4:	9b00      	ldr	r3, [sp, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	dd32      	ble.n	8010060 <_dtoa_r+0x3a0>
 800fffa:	4ab7      	ldr	r2, [pc, #732]	; (80102d8 <_dtoa_r+0x618>)
 800fffc:	f003 030f 	and.w	r3, r3, #15
 8010000:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010008:	9b00      	ldr	r3, [sp, #0]
 801000a:	05d8      	lsls	r0, r3, #23
 801000c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010010:	d516      	bpl.n	8010040 <_dtoa_r+0x380>
 8010012:	4bb2      	ldr	r3, [pc, #712]	; (80102dc <_dtoa_r+0x61c>)
 8010014:	ec51 0b19 	vmov	r0, r1, d9
 8010018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801001c:	f7f0 fc1e 	bl	800085c <__aeabi_ddiv>
 8010020:	f007 070f 	and.w	r7, r7, #15
 8010024:	4682      	mov	sl, r0
 8010026:	468b      	mov	fp, r1
 8010028:	2503      	movs	r5, #3
 801002a:	4eac      	ldr	r6, [pc, #688]	; (80102dc <_dtoa_r+0x61c>)
 801002c:	b957      	cbnz	r7, 8010044 <_dtoa_r+0x384>
 801002e:	4642      	mov	r2, r8
 8010030:	464b      	mov	r3, r9
 8010032:	4650      	mov	r0, sl
 8010034:	4659      	mov	r1, fp
 8010036:	f7f0 fc11 	bl	800085c <__aeabi_ddiv>
 801003a:	4682      	mov	sl, r0
 801003c:	468b      	mov	fp, r1
 801003e:	e028      	b.n	8010092 <_dtoa_r+0x3d2>
 8010040:	2502      	movs	r5, #2
 8010042:	e7f2      	b.n	801002a <_dtoa_r+0x36a>
 8010044:	07f9      	lsls	r1, r7, #31
 8010046:	d508      	bpl.n	801005a <_dtoa_r+0x39a>
 8010048:	4640      	mov	r0, r8
 801004a:	4649      	mov	r1, r9
 801004c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010050:	f7f0 fada 	bl	8000608 <__aeabi_dmul>
 8010054:	3501      	adds	r5, #1
 8010056:	4680      	mov	r8, r0
 8010058:	4689      	mov	r9, r1
 801005a:	107f      	asrs	r7, r7, #1
 801005c:	3608      	adds	r6, #8
 801005e:	e7e5      	b.n	801002c <_dtoa_r+0x36c>
 8010060:	f000 809b 	beq.w	801019a <_dtoa_r+0x4da>
 8010064:	9b00      	ldr	r3, [sp, #0]
 8010066:	4f9d      	ldr	r7, [pc, #628]	; (80102dc <_dtoa_r+0x61c>)
 8010068:	425e      	negs	r6, r3
 801006a:	4b9b      	ldr	r3, [pc, #620]	; (80102d8 <_dtoa_r+0x618>)
 801006c:	f006 020f 	and.w	r2, r6, #15
 8010070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010078:	ec51 0b19 	vmov	r0, r1, d9
 801007c:	f7f0 fac4 	bl	8000608 <__aeabi_dmul>
 8010080:	1136      	asrs	r6, r6, #4
 8010082:	4682      	mov	sl, r0
 8010084:	468b      	mov	fp, r1
 8010086:	2300      	movs	r3, #0
 8010088:	2502      	movs	r5, #2
 801008a:	2e00      	cmp	r6, #0
 801008c:	d17a      	bne.n	8010184 <_dtoa_r+0x4c4>
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1d3      	bne.n	801003a <_dtoa_r+0x37a>
 8010092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 8082 	beq.w	801019e <_dtoa_r+0x4de>
 801009a:	4b91      	ldr	r3, [pc, #580]	; (80102e0 <_dtoa_r+0x620>)
 801009c:	2200      	movs	r2, #0
 801009e:	4650      	mov	r0, sl
 80100a0:	4659      	mov	r1, fp
 80100a2:	f7f0 fd23 	bl	8000aec <__aeabi_dcmplt>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d079      	beq.n	801019e <_dtoa_r+0x4de>
 80100aa:	9b03      	ldr	r3, [sp, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d076      	beq.n	801019e <_dtoa_r+0x4de>
 80100b0:	9b02      	ldr	r3, [sp, #8]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	dd36      	ble.n	8010124 <_dtoa_r+0x464>
 80100b6:	9b00      	ldr	r3, [sp, #0]
 80100b8:	4650      	mov	r0, sl
 80100ba:	4659      	mov	r1, fp
 80100bc:	1e5f      	subs	r7, r3, #1
 80100be:	2200      	movs	r2, #0
 80100c0:	4b88      	ldr	r3, [pc, #544]	; (80102e4 <_dtoa_r+0x624>)
 80100c2:	f7f0 faa1 	bl	8000608 <__aeabi_dmul>
 80100c6:	9e02      	ldr	r6, [sp, #8]
 80100c8:	4682      	mov	sl, r0
 80100ca:	468b      	mov	fp, r1
 80100cc:	3501      	adds	r5, #1
 80100ce:	4628      	mov	r0, r5
 80100d0:	f7f0 fa30 	bl	8000534 <__aeabi_i2d>
 80100d4:	4652      	mov	r2, sl
 80100d6:	465b      	mov	r3, fp
 80100d8:	f7f0 fa96 	bl	8000608 <__aeabi_dmul>
 80100dc:	4b82      	ldr	r3, [pc, #520]	; (80102e8 <_dtoa_r+0x628>)
 80100de:	2200      	movs	r2, #0
 80100e0:	f7f0 f8dc 	bl	800029c <__adddf3>
 80100e4:	46d0      	mov	r8, sl
 80100e6:	46d9      	mov	r9, fp
 80100e8:	4682      	mov	sl, r0
 80100ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80100ee:	2e00      	cmp	r6, #0
 80100f0:	d158      	bne.n	80101a4 <_dtoa_r+0x4e4>
 80100f2:	4b7e      	ldr	r3, [pc, #504]	; (80102ec <_dtoa_r+0x62c>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	4640      	mov	r0, r8
 80100f8:	4649      	mov	r1, r9
 80100fa:	f7f0 f8cd 	bl	8000298 <__aeabi_dsub>
 80100fe:	4652      	mov	r2, sl
 8010100:	465b      	mov	r3, fp
 8010102:	4680      	mov	r8, r0
 8010104:	4689      	mov	r9, r1
 8010106:	f7f0 fd0f 	bl	8000b28 <__aeabi_dcmpgt>
 801010a:	2800      	cmp	r0, #0
 801010c:	f040 8295 	bne.w	801063a <_dtoa_r+0x97a>
 8010110:	4652      	mov	r2, sl
 8010112:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010116:	4640      	mov	r0, r8
 8010118:	4649      	mov	r1, r9
 801011a:	f7f0 fce7 	bl	8000aec <__aeabi_dcmplt>
 801011e:	2800      	cmp	r0, #0
 8010120:	f040 8289 	bne.w	8010636 <_dtoa_r+0x976>
 8010124:	ec5b ab19 	vmov	sl, fp, d9
 8010128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801012a:	2b00      	cmp	r3, #0
 801012c:	f2c0 8148 	blt.w	80103c0 <_dtoa_r+0x700>
 8010130:	9a00      	ldr	r2, [sp, #0]
 8010132:	2a0e      	cmp	r2, #14
 8010134:	f300 8144 	bgt.w	80103c0 <_dtoa_r+0x700>
 8010138:	4b67      	ldr	r3, [pc, #412]	; (80102d8 <_dtoa_r+0x618>)
 801013a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801013e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010144:	2b00      	cmp	r3, #0
 8010146:	f280 80d5 	bge.w	80102f4 <_dtoa_r+0x634>
 801014a:	9b03      	ldr	r3, [sp, #12]
 801014c:	2b00      	cmp	r3, #0
 801014e:	f300 80d1 	bgt.w	80102f4 <_dtoa_r+0x634>
 8010152:	f040 826f 	bne.w	8010634 <_dtoa_r+0x974>
 8010156:	4b65      	ldr	r3, [pc, #404]	; (80102ec <_dtoa_r+0x62c>)
 8010158:	2200      	movs	r2, #0
 801015a:	4640      	mov	r0, r8
 801015c:	4649      	mov	r1, r9
 801015e:	f7f0 fa53 	bl	8000608 <__aeabi_dmul>
 8010162:	4652      	mov	r2, sl
 8010164:	465b      	mov	r3, fp
 8010166:	f7f0 fcd5 	bl	8000b14 <__aeabi_dcmpge>
 801016a:	9e03      	ldr	r6, [sp, #12]
 801016c:	4637      	mov	r7, r6
 801016e:	2800      	cmp	r0, #0
 8010170:	f040 8245 	bne.w	80105fe <_dtoa_r+0x93e>
 8010174:	9d01      	ldr	r5, [sp, #4]
 8010176:	2331      	movs	r3, #49	; 0x31
 8010178:	f805 3b01 	strb.w	r3, [r5], #1
 801017c:	9b00      	ldr	r3, [sp, #0]
 801017e:	3301      	adds	r3, #1
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	e240      	b.n	8010606 <_dtoa_r+0x946>
 8010184:	07f2      	lsls	r2, r6, #31
 8010186:	d505      	bpl.n	8010194 <_dtoa_r+0x4d4>
 8010188:	e9d7 2300 	ldrd	r2, r3, [r7]
 801018c:	f7f0 fa3c 	bl	8000608 <__aeabi_dmul>
 8010190:	3501      	adds	r5, #1
 8010192:	2301      	movs	r3, #1
 8010194:	1076      	asrs	r6, r6, #1
 8010196:	3708      	adds	r7, #8
 8010198:	e777      	b.n	801008a <_dtoa_r+0x3ca>
 801019a:	2502      	movs	r5, #2
 801019c:	e779      	b.n	8010092 <_dtoa_r+0x3d2>
 801019e:	9f00      	ldr	r7, [sp, #0]
 80101a0:	9e03      	ldr	r6, [sp, #12]
 80101a2:	e794      	b.n	80100ce <_dtoa_r+0x40e>
 80101a4:	9901      	ldr	r1, [sp, #4]
 80101a6:	4b4c      	ldr	r3, [pc, #304]	; (80102d8 <_dtoa_r+0x618>)
 80101a8:	4431      	add	r1, r6
 80101aa:	910d      	str	r1, [sp, #52]	; 0x34
 80101ac:	9908      	ldr	r1, [sp, #32]
 80101ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80101b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101b6:	2900      	cmp	r1, #0
 80101b8:	d043      	beq.n	8010242 <_dtoa_r+0x582>
 80101ba:	494d      	ldr	r1, [pc, #308]	; (80102f0 <_dtoa_r+0x630>)
 80101bc:	2000      	movs	r0, #0
 80101be:	f7f0 fb4d 	bl	800085c <__aeabi_ddiv>
 80101c2:	4652      	mov	r2, sl
 80101c4:	465b      	mov	r3, fp
 80101c6:	f7f0 f867 	bl	8000298 <__aeabi_dsub>
 80101ca:	9d01      	ldr	r5, [sp, #4]
 80101cc:	4682      	mov	sl, r0
 80101ce:	468b      	mov	fp, r1
 80101d0:	4649      	mov	r1, r9
 80101d2:	4640      	mov	r0, r8
 80101d4:	f7f0 fcc8 	bl	8000b68 <__aeabi_d2iz>
 80101d8:	4606      	mov	r6, r0
 80101da:	f7f0 f9ab 	bl	8000534 <__aeabi_i2d>
 80101de:	4602      	mov	r2, r0
 80101e0:	460b      	mov	r3, r1
 80101e2:	4640      	mov	r0, r8
 80101e4:	4649      	mov	r1, r9
 80101e6:	f7f0 f857 	bl	8000298 <__aeabi_dsub>
 80101ea:	3630      	adds	r6, #48	; 0x30
 80101ec:	f805 6b01 	strb.w	r6, [r5], #1
 80101f0:	4652      	mov	r2, sl
 80101f2:	465b      	mov	r3, fp
 80101f4:	4680      	mov	r8, r0
 80101f6:	4689      	mov	r9, r1
 80101f8:	f7f0 fc78 	bl	8000aec <__aeabi_dcmplt>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d163      	bne.n	80102c8 <_dtoa_r+0x608>
 8010200:	4642      	mov	r2, r8
 8010202:	464b      	mov	r3, r9
 8010204:	4936      	ldr	r1, [pc, #216]	; (80102e0 <_dtoa_r+0x620>)
 8010206:	2000      	movs	r0, #0
 8010208:	f7f0 f846 	bl	8000298 <__aeabi_dsub>
 801020c:	4652      	mov	r2, sl
 801020e:	465b      	mov	r3, fp
 8010210:	f7f0 fc6c 	bl	8000aec <__aeabi_dcmplt>
 8010214:	2800      	cmp	r0, #0
 8010216:	f040 80b5 	bne.w	8010384 <_dtoa_r+0x6c4>
 801021a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801021c:	429d      	cmp	r5, r3
 801021e:	d081      	beq.n	8010124 <_dtoa_r+0x464>
 8010220:	4b30      	ldr	r3, [pc, #192]	; (80102e4 <_dtoa_r+0x624>)
 8010222:	2200      	movs	r2, #0
 8010224:	4650      	mov	r0, sl
 8010226:	4659      	mov	r1, fp
 8010228:	f7f0 f9ee 	bl	8000608 <__aeabi_dmul>
 801022c:	4b2d      	ldr	r3, [pc, #180]	; (80102e4 <_dtoa_r+0x624>)
 801022e:	4682      	mov	sl, r0
 8010230:	468b      	mov	fp, r1
 8010232:	4640      	mov	r0, r8
 8010234:	4649      	mov	r1, r9
 8010236:	2200      	movs	r2, #0
 8010238:	f7f0 f9e6 	bl	8000608 <__aeabi_dmul>
 801023c:	4680      	mov	r8, r0
 801023e:	4689      	mov	r9, r1
 8010240:	e7c6      	b.n	80101d0 <_dtoa_r+0x510>
 8010242:	4650      	mov	r0, sl
 8010244:	4659      	mov	r1, fp
 8010246:	f7f0 f9df 	bl	8000608 <__aeabi_dmul>
 801024a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801024c:	9d01      	ldr	r5, [sp, #4]
 801024e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010250:	4682      	mov	sl, r0
 8010252:	468b      	mov	fp, r1
 8010254:	4649      	mov	r1, r9
 8010256:	4640      	mov	r0, r8
 8010258:	f7f0 fc86 	bl	8000b68 <__aeabi_d2iz>
 801025c:	4606      	mov	r6, r0
 801025e:	f7f0 f969 	bl	8000534 <__aeabi_i2d>
 8010262:	3630      	adds	r6, #48	; 0x30
 8010264:	4602      	mov	r2, r0
 8010266:	460b      	mov	r3, r1
 8010268:	4640      	mov	r0, r8
 801026a:	4649      	mov	r1, r9
 801026c:	f7f0 f814 	bl	8000298 <__aeabi_dsub>
 8010270:	f805 6b01 	strb.w	r6, [r5], #1
 8010274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010276:	429d      	cmp	r5, r3
 8010278:	4680      	mov	r8, r0
 801027a:	4689      	mov	r9, r1
 801027c:	f04f 0200 	mov.w	r2, #0
 8010280:	d124      	bne.n	80102cc <_dtoa_r+0x60c>
 8010282:	4b1b      	ldr	r3, [pc, #108]	; (80102f0 <_dtoa_r+0x630>)
 8010284:	4650      	mov	r0, sl
 8010286:	4659      	mov	r1, fp
 8010288:	f7f0 f808 	bl	800029c <__adddf3>
 801028c:	4602      	mov	r2, r0
 801028e:	460b      	mov	r3, r1
 8010290:	4640      	mov	r0, r8
 8010292:	4649      	mov	r1, r9
 8010294:	f7f0 fc48 	bl	8000b28 <__aeabi_dcmpgt>
 8010298:	2800      	cmp	r0, #0
 801029a:	d173      	bne.n	8010384 <_dtoa_r+0x6c4>
 801029c:	4652      	mov	r2, sl
 801029e:	465b      	mov	r3, fp
 80102a0:	4913      	ldr	r1, [pc, #76]	; (80102f0 <_dtoa_r+0x630>)
 80102a2:	2000      	movs	r0, #0
 80102a4:	f7ef fff8 	bl	8000298 <__aeabi_dsub>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4640      	mov	r0, r8
 80102ae:	4649      	mov	r1, r9
 80102b0:	f7f0 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	f43f af35 	beq.w	8010124 <_dtoa_r+0x464>
 80102ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80102bc:	1e6b      	subs	r3, r5, #1
 80102be:	930f      	str	r3, [sp, #60]	; 0x3c
 80102c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80102c4:	2b30      	cmp	r3, #48	; 0x30
 80102c6:	d0f8      	beq.n	80102ba <_dtoa_r+0x5fa>
 80102c8:	9700      	str	r7, [sp, #0]
 80102ca:	e049      	b.n	8010360 <_dtoa_r+0x6a0>
 80102cc:	4b05      	ldr	r3, [pc, #20]	; (80102e4 <_dtoa_r+0x624>)
 80102ce:	f7f0 f99b 	bl	8000608 <__aeabi_dmul>
 80102d2:	4680      	mov	r8, r0
 80102d4:	4689      	mov	r9, r1
 80102d6:	e7bd      	b.n	8010254 <_dtoa_r+0x594>
 80102d8:	08011eb8 	.word	0x08011eb8
 80102dc:	08011e90 	.word	0x08011e90
 80102e0:	3ff00000 	.word	0x3ff00000
 80102e4:	40240000 	.word	0x40240000
 80102e8:	401c0000 	.word	0x401c0000
 80102ec:	40140000 	.word	0x40140000
 80102f0:	3fe00000 	.word	0x3fe00000
 80102f4:	9d01      	ldr	r5, [sp, #4]
 80102f6:	4656      	mov	r6, sl
 80102f8:	465f      	mov	r7, fp
 80102fa:	4642      	mov	r2, r8
 80102fc:	464b      	mov	r3, r9
 80102fe:	4630      	mov	r0, r6
 8010300:	4639      	mov	r1, r7
 8010302:	f7f0 faab 	bl	800085c <__aeabi_ddiv>
 8010306:	f7f0 fc2f 	bl	8000b68 <__aeabi_d2iz>
 801030a:	4682      	mov	sl, r0
 801030c:	f7f0 f912 	bl	8000534 <__aeabi_i2d>
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	f7f0 f978 	bl	8000608 <__aeabi_dmul>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4630      	mov	r0, r6
 801031e:	4639      	mov	r1, r7
 8010320:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010324:	f7ef ffb8 	bl	8000298 <__aeabi_dsub>
 8010328:	f805 6b01 	strb.w	r6, [r5], #1
 801032c:	9e01      	ldr	r6, [sp, #4]
 801032e:	9f03      	ldr	r7, [sp, #12]
 8010330:	1bae      	subs	r6, r5, r6
 8010332:	42b7      	cmp	r7, r6
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	d135      	bne.n	80103a6 <_dtoa_r+0x6e6>
 801033a:	f7ef ffaf 	bl	800029c <__adddf3>
 801033e:	4642      	mov	r2, r8
 8010340:	464b      	mov	r3, r9
 8010342:	4606      	mov	r6, r0
 8010344:	460f      	mov	r7, r1
 8010346:	f7f0 fbef 	bl	8000b28 <__aeabi_dcmpgt>
 801034a:	b9d0      	cbnz	r0, 8010382 <_dtoa_r+0x6c2>
 801034c:	4642      	mov	r2, r8
 801034e:	464b      	mov	r3, r9
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f0 fbc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8010358:	b110      	cbz	r0, 8010360 <_dtoa_r+0x6a0>
 801035a:	f01a 0f01 	tst.w	sl, #1
 801035e:	d110      	bne.n	8010382 <_dtoa_r+0x6c2>
 8010360:	4620      	mov	r0, r4
 8010362:	ee18 1a10 	vmov	r1, s16
 8010366:	f000 fc2b 	bl	8010bc0 <_Bfree>
 801036a:	2300      	movs	r3, #0
 801036c:	9800      	ldr	r0, [sp, #0]
 801036e:	702b      	strb	r3, [r5, #0]
 8010370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010372:	3001      	adds	r0, #1
 8010374:	6018      	str	r0, [r3, #0]
 8010376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010378:	2b00      	cmp	r3, #0
 801037a:	f43f acf1 	beq.w	800fd60 <_dtoa_r+0xa0>
 801037e:	601d      	str	r5, [r3, #0]
 8010380:	e4ee      	b.n	800fd60 <_dtoa_r+0xa0>
 8010382:	9f00      	ldr	r7, [sp, #0]
 8010384:	462b      	mov	r3, r5
 8010386:	461d      	mov	r5, r3
 8010388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801038c:	2a39      	cmp	r2, #57	; 0x39
 801038e:	d106      	bne.n	801039e <_dtoa_r+0x6de>
 8010390:	9a01      	ldr	r2, [sp, #4]
 8010392:	429a      	cmp	r2, r3
 8010394:	d1f7      	bne.n	8010386 <_dtoa_r+0x6c6>
 8010396:	9901      	ldr	r1, [sp, #4]
 8010398:	2230      	movs	r2, #48	; 0x30
 801039a:	3701      	adds	r7, #1
 801039c:	700a      	strb	r2, [r1, #0]
 801039e:	781a      	ldrb	r2, [r3, #0]
 80103a0:	3201      	adds	r2, #1
 80103a2:	701a      	strb	r2, [r3, #0]
 80103a4:	e790      	b.n	80102c8 <_dtoa_r+0x608>
 80103a6:	4ba6      	ldr	r3, [pc, #664]	; (8010640 <_dtoa_r+0x980>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	f7f0 f92d 	bl	8000608 <__aeabi_dmul>
 80103ae:	2200      	movs	r2, #0
 80103b0:	2300      	movs	r3, #0
 80103b2:	4606      	mov	r6, r0
 80103b4:	460f      	mov	r7, r1
 80103b6:	f7f0 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d09d      	beq.n	80102fa <_dtoa_r+0x63a>
 80103be:	e7cf      	b.n	8010360 <_dtoa_r+0x6a0>
 80103c0:	9a08      	ldr	r2, [sp, #32]
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	f000 80d7 	beq.w	8010576 <_dtoa_r+0x8b6>
 80103c8:	9a06      	ldr	r2, [sp, #24]
 80103ca:	2a01      	cmp	r2, #1
 80103cc:	f300 80ba 	bgt.w	8010544 <_dtoa_r+0x884>
 80103d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	f000 80b2 	beq.w	801053c <_dtoa_r+0x87c>
 80103d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80103dc:	9e07      	ldr	r6, [sp, #28]
 80103de:	9d04      	ldr	r5, [sp, #16]
 80103e0:	9a04      	ldr	r2, [sp, #16]
 80103e2:	441a      	add	r2, r3
 80103e4:	9204      	str	r2, [sp, #16]
 80103e6:	9a05      	ldr	r2, [sp, #20]
 80103e8:	2101      	movs	r1, #1
 80103ea:	441a      	add	r2, r3
 80103ec:	4620      	mov	r0, r4
 80103ee:	9205      	str	r2, [sp, #20]
 80103f0:	f000 fc9e 	bl	8010d30 <__i2b>
 80103f4:	4607      	mov	r7, r0
 80103f6:	2d00      	cmp	r5, #0
 80103f8:	dd0c      	ble.n	8010414 <_dtoa_r+0x754>
 80103fa:	9b05      	ldr	r3, [sp, #20]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	dd09      	ble.n	8010414 <_dtoa_r+0x754>
 8010400:	42ab      	cmp	r3, r5
 8010402:	9a04      	ldr	r2, [sp, #16]
 8010404:	bfa8      	it	ge
 8010406:	462b      	movge	r3, r5
 8010408:	1ad2      	subs	r2, r2, r3
 801040a:	9204      	str	r2, [sp, #16]
 801040c:	9a05      	ldr	r2, [sp, #20]
 801040e:	1aed      	subs	r5, r5, r3
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	9305      	str	r3, [sp, #20]
 8010414:	9b07      	ldr	r3, [sp, #28]
 8010416:	b31b      	cbz	r3, 8010460 <_dtoa_r+0x7a0>
 8010418:	9b08      	ldr	r3, [sp, #32]
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 80af 	beq.w	801057e <_dtoa_r+0x8be>
 8010420:	2e00      	cmp	r6, #0
 8010422:	dd13      	ble.n	801044c <_dtoa_r+0x78c>
 8010424:	4639      	mov	r1, r7
 8010426:	4632      	mov	r2, r6
 8010428:	4620      	mov	r0, r4
 801042a:	f000 fd41 	bl	8010eb0 <__pow5mult>
 801042e:	ee18 2a10 	vmov	r2, s16
 8010432:	4601      	mov	r1, r0
 8010434:	4607      	mov	r7, r0
 8010436:	4620      	mov	r0, r4
 8010438:	f000 fc90 	bl	8010d5c <__multiply>
 801043c:	ee18 1a10 	vmov	r1, s16
 8010440:	4680      	mov	r8, r0
 8010442:	4620      	mov	r0, r4
 8010444:	f000 fbbc 	bl	8010bc0 <_Bfree>
 8010448:	ee08 8a10 	vmov	s16, r8
 801044c:	9b07      	ldr	r3, [sp, #28]
 801044e:	1b9a      	subs	r2, r3, r6
 8010450:	d006      	beq.n	8010460 <_dtoa_r+0x7a0>
 8010452:	ee18 1a10 	vmov	r1, s16
 8010456:	4620      	mov	r0, r4
 8010458:	f000 fd2a 	bl	8010eb0 <__pow5mult>
 801045c:	ee08 0a10 	vmov	s16, r0
 8010460:	2101      	movs	r1, #1
 8010462:	4620      	mov	r0, r4
 8010464:	f000 fc64 	bl	8010d30 <__i2b>
 8010468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801046a:	2b00      	cmp	r3, #0
 801046c:	4606      	mov	r6, r0
 801046e:	f340 8088 	ble.w	8010582 <_dtoa_r+0x8c2>
 8010472:	461a      	mov	r2, r3
 8010474:	4601      	mov	r1, r0
 8010476:	4620      	mov	r0, r4
 8010478:	f000 fd1a 	bl	8010eb0 <__pow5mult>
 801047c:	9b06      	ldr	r3, [sp, #24]
 801047e:	2b01      	cmp	r3, #1
 8010480:	4606      	mov	r6, r0
 8010482:	f340 8081 	ble.w	8010588 <_dtoa_r+0x8c8>
 8010486:	f04f 0800 	mov.w	r8, #0
 801048a:	6933      	ldr	r3, [r6, #16]
 801048c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010490:	6918      	ldr	r0, [r3, #16]
 8010492:	f000 fbfd 	bl	8010c90 <__hi0bits>
 8010496:	f1c0 0020 	rsb	r0, r0, #32
 801049a:	9b05      	ldr	r3, [sp, #20]
 801049c:	4418      	add	r0, r3
 801049e:	f010 001f 	ands.w	r0, r0, #31
 80104a2:	f000 8092 	beq.w	80105ca <_dtoa_r+0x90a>
 80104a6:	f1c0 0320 	rsb	r3, r0, #32
 80104aa:	2b04      	cmp	r3, #4
 80104ac:	f340 808a 	ble.w	80105c4 <_dtoa_r+0x904>
 80104b0:	f1c0 001c 	rsb	r0, r0, #28
 80104b4:	9b04      	ldr	r3, [sp, #16]
 80104b6:	4403      	add	r3, r0
 80104b8:	9304      	str	r3, [sp, #16]
 80104ba:	9b05      	ldr	r3, [sp, #20]
 80104bc:	4403      	add	r3, r0
 80104be:	4405      	add	r5, r0
 80104c0:	9305      	str	r3, [sp, #20]
 80104c2:	9b04      	ldr	r3, [sp, #16]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	dd07      	ble.n	80104d8 <_dtoa_r+0x818>
 80104c8:	ee18 1a10 	vmov	r1, s16
 80104cc:	461a      	mov	r2, r3
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 fd48 	bl	8010f64 <__lshift>
 80104d4:	ee08 0a10 	vmov	s16, r0
 80104d8:	9b05      	ldr	r3, [sp, #20]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	dd05      	ble.n	80104ea <_dtoa_r+0x82a>
 80104de:	4631      	mov	r1, r6
 80104e0:	461a      	mov	r2, r3
 80104e2:	4620      	mov	r0, r4
 80104e4:	f000 fd3e 	bl	8010f64 <__lshift>
 80104e8:	4606      	mov	r6, r0
 80104ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d06e      	beq.n	80105ce <_dtoa_r+0x90e>
 80104f0:	ee18 0a10 	vmov	r0, s16
 80104f4:	4631      	mov	r1, r6
 80104f6:	f000 fda5 	bl	8011044 <__mcmp>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	da67      	bge.n	80105ce <_dtoa_r+0x90e>
 80104fe:	9b00      	ldr	r3, [sp, #0]
 8010500:	3b01      	subs	r3, #1
 8010502:	ee18 1a10 	vmov	r1, s16
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	220a      	movs	r2, #10
 801050a:	2300      	movs	r3, #0
 801050c:	4620      	mov	r0, r4
 801050e:	f000 fb79 	bl	8010c04 <__multadd>
 8010512:	9b08      	ldr	r3, [sp, #32]
 8010514:	ee08 0a10 	vmov	s16, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	f000 81b1 	beq.w	8010880 <_dtoa_r+0xbc0>
 801051e:	2300      	movs	r3, #0
 8010520:	4639      	mov	r1, r7
 8010522:	220a      	movs	r2, #10
 8010524:	4620      	mov	r0, r4
 8010526:	f000 fb6d 	bl	8010c04 <__multadd>
 801052a:	9b02      	ldr	r3, [sp, #8]
 801052c:	2b00      	cmp	r3, #0
 801052e:	4607      	mov	r7, r0
 8010530:	f300 808e 	bgt.w	8010650 <_dtoa_r+0x990>
 8010534:	9b06      	ldr	r3, [sp, #24]
 8010536:	2b02      	cmp	r3, #2
 8010538:	dc51      	bgt.n	80105de <_dtoa_r+0x91e>
 801053a:	e089      	b.n	8010650 <_dtoa_r+0x990>
 801053c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801053e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010542:	e74b      	b.n	80103dc <_dtoa_r+0x71c>
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	1e5e      	subs	r6, r3, #1
 8010548:	9b07      	ldr	r3, [sp, #28]
 801054a:	42b3      	cmp	r3, r6
 801054c:	bfbf      	itttt	lt
 801054e:	9b07      	ldrlt	r3, [sp, #28]
 8010550:	9607      	strlt	r6, [sp, #28]
 8010552:	1af2      	sublt	r2, r6, r3
 8010554:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010556:	bfb6      	itet	lt
 8010558:	189b      	addlt	r3, r3, r2
 801055a:	1b9e      	subge	r6, r3, r6
 801055c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801055e:	9b03      	ldr	r3, [sp, #12]
 8010560:	bfb8      	it	lt
 8010562:	2600      	movlt	r6, #0
 8010564:	2b00      	cmp	r3, #0
 8010566:	bfb7      	itett	lt
 8010568:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801056c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010570:	1a9d      	sublt	r5, r3, r2
 8010572:	2300      	movlt	r3, #0
 8010574:	e734      	b.n	80103e0 <_dtoa_r+0x720>
 8010576:	9e07      	ldr	r6, [sp, #28]
 8010578:	9d04      	ldr	r5, [sp, #16]
 801057a:	9f08      	ldr	r7, [sp, #32]
 801057c:	e73b      	b.n	80103f6 <_dtoa_r+0x736>
 801057e:	9a07      	ldr	r2, [sp, #28]
 8010580:	e767      	b.n	8010452 <_dtoa_r+0x792>
 8010582:	9b06      	ldr	r3, [sp, #24]
 8010584:	2b01      	cmp	r3, #1
 8010586:	dc18      	bgt.n	80105ba <_dtoa_r+0x8fa>
 8010588:	f1ba 0f00 	cmp.w	sl, #0
 801058c:	d115      	bne.n	80105ba <_dtoa_r+0x8fa>
 801058e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010592:	b993      	cbnz	r3, 80105ba <_dtoa_r+0x8fa>
 8010594:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010598:	0d1b      	lsrs	r3, r3, #20
 801059a:	051b      	lsls	r3, r3, #20
 801059c:	b183      	cbz	r3, 80105c0 <_dtoa_r+0x900>
 801059e:	9b04      	ldr	r3, [sp, #16]
 80105a0:	3301      	adds	r3, #1
 80105a2:	9304      	str	r3, [sp, #16]
 80105a4:	9b05      	ldr	r3, [sp, #20]
 80105a6:	3301      	adds	r3, #1
 80105a8:	9305      	str	r3, [sp, #20]
 80105aa:	f04f 0801 	mov.w	r8, #1
 80105ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f47f af6a 	bne.w	801048a <_dtoa_r+0x7ca>
 80105b6:	2001      	movs	r0, #1
 80105b8:	e76f      	b.n	801049a <_dtoa_r+0x7da>
 80105ba:	f04f 0800 	mov.w	r8, #0
 80105be:	e7f6      	b.n	80105ae <_dtoa_r+0x8ee>
 80105c0:	4698      	mov	r8, r3
 80105c2:	e7f4      	b.n	80105ae <_dtoa_r+0x8ee>
 80105c4:	f43f af7d 	beq.w	80104c2 <_dtoa_r+0x802>
 80105c8:	4618      	mov	r0, r3
 80105ca:	301c      	adds	r0, #28
 80105cc:	e772      	b.n	80104b4 <_dtoa_r+0x7f4>
 80105ce:	9b03      	ldr	r3, [sp, #12]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	dc37      	bgt.n	8010644 <_dtoa_r+0x984>
 80105d4:	9b06      	ldr	r3, [sp, #24]
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	dd34      	ble.n	8010644 <_dtoa_r+0x984>
 80105da:	9b03      	ldr	r3, [sp, #12]
 80105dc:	9302      	str	r3, [sp, #8]
 80105de:	9b02      	ldr	r3, [sp, #8]
 80105e0:	b96b      	cbnz	r3, 80105fe <_dtoa_r+0x93e>
 80105e2:	4631      	mov	r1, r6
 80105e4:	2205      	movs	r2, #5
 80105e6:	4620      	mov	r0, r4
 80105e8:	f000 fb0c 	bl	8010c04 <__multadd>
 80105ec:	4601      	mov	r1, r0
 80105ee:	4606      	mov	r6, r0
 80105f0:	ee18 0a10 	vmov	r0, s16
 80105f4:	f000 fd26 	bl	8011044 <__mcmp>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	f73f adbb 	bgt.w	8010174 <_dtoa_r+0x4b4>
 80105fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010600:	9d01      	ldr	r5, [sp, #4]
 8010602:	43db      	mvns	r3, r3
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	f04f 0800 	mov.w	r8, #0
 801060a:	4631      	mov	r1, r6
 801060c:	4620      	mov	r0, r4
 801060e:	f000 fad7 	bl	8010bc0 <_Bfree>
 8010612:	2f00      	cmp	r7, #0
 8010614:	f43f aea4 	beq.w	8010360 <_dtoa_r+0x6a0>
 8010618:	f1b8 0f00 	cmp.w	r8, #0
 801061c:	d005      	beq.n	801062a <_dtoa_r+0x96a>
 801061e:	45b8      	cmp	r8, r7
 8010620:	d003      	beq.n	801062a <_dtoa_r+0x96a>
 8010622:	4641      	mov	r1, r8
 8010624:	4620      	mov	r0, r4
 8010626:	f000 facb 	bl	8010bc0 <_Bfree>
 801062a:	4639      	mov	r1, r7
 801062c:	4620      	mov	r0, r4
 801062e:	f000 fac7 	bl	8010bc0 <_Bfree>
 8010632:	e695      	b.n	8010360 <_dtoa_r+0x6a0>
 8010634:	2600      	movs	r6, #0
 8010636:	4637      	mov	r7, r6
 8010638:	e7e1      	b.n	80105fe <_dtoa_r+0x93e>
 801063a:	9700      	str	r7, [sp, #0]
 801063c:	4637      	mov	r7, r6
 801063e:	e599      	b.n	8010174 <_dtoa_r+0x4b4>
 8010640:	40240000 	.word	0x40240000
 8010644:	9b08      	ldr	r3, [sp, #32]
 8010646:	2b00      	cmp	r3, #0
 8010648:	f000 80ca 	beq.w	80107e0 <_dtoa_r+0xb20>
 801064c:	9b03      	ldr	r3, [sp, #12]
 801064e:	9302      	str	r3, [sp, #8]
 8010650:	2d00      	cmp	r5, #0
 8010652:	dd05      	ble.n	8010660 <_dtoa_r+0x9a0>
 8010654:	4639      	mov	r1, r7
 8010656:	462a      	mov	r2, r5
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fc83 	bl	8010f64 <__lshift>
 801065e:	4607      	mov	r7, r0
 8010660:	f1b8 0f00 	cmp.w	r8, #0
 8010664:	d05b      	beq.n	801071e <_dtoa_r+0xa5e>
 8010666:	6879      	ldr	r1, [r7, #4]
 8010668:	4620      	mov	r0, r4
 801066a:	f000 fa69 	bl	8010b40 <_Balloc>
 801066e:	4605      	mov	r5, r0
 8010670:	b928      	cbnz	r0, 801067e <_dtoa_r+0x9be>
 8010672:	4b87      	ldr	r3, [pc, #540]	; (8010890 <_dtoa_r+0xbd0>)
 8010674:	4602      	mov	r2, r0
 8010676:	f240 21ea 	movw	r1, #746	; 0x2ea
 801067a:	f7ff bb3b 	b.w	800fcf4 <_dtoa_r+0x34>
 801067e:	693a      	ldr	r2, [r7, #16]
 8010680:	3202      	adds	r2, #2
 8010682:	0092      	lsls	r2, r2, #2
 8010684:	f107 010c 	add.w	r1, r7, #12
 8010688:	300c      	adds	r0, #12
 801068a:	f7fe fb40 	bl	800ed0e <memcpy>
 801068e:	2201      	movs	r2, #1
 8010690:	4629      	mov	r1, r5
 8010692:	4620      	mov	r0, r4
 8010694:	f000 fc66 	bl	8010f64 <__lshift>
 8010698:	9b01      	ldr	r3, [sp, #4]
 801069a:	f103 0901 	add.w	r9, r3, #1
 801069e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80106a2:	4413      	add	r3, r2
 80106a4:	9305      	str	r3, [sp, #20]
 80106a6:	f00a 0301 	and.w	r3, sl, #1
 80106aa:	46b8      	mov	r8, r7
 80106ac:	9304      	str	r3, [sp, #16]
 80106ae:	4607      	mov	r7, r0
 80106b0:	4631      	mov	r1, r6
 80106b2:	ee18 0a10 	vmov	r0, s16
 80106b6:	f7ff fa75 	bl	800fba4 <quorem>
 80106ba:	4641      	mov	r1, r8
 80106bc:	9002      	str	r0, [sp, #8]
 80106be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80106c2:	ee18 0a10 	vmov	r0, s16
 80106c6:	f000 fcbd 	bl	8011044 <__mcmp>
 80106ca:	463a      	mov	r2, r7
 80106cc:	9003      	str	r0, [sp, #12]
 80106ce:	4631      	mov	r1, r6
 80106d0:	4620      	mov	r0, r4
 80106d2:	f000 fcd3 	bl	801107c <__mdiff>
 80106d6:	68c2      	ldr	r2, [r0, #12]
 80106d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80106dc:	4605      	mov	r5, r0
 80106de:	bb02      	cbnz	r2, 8010722 <_dtoa_r+0xa62>
 80106e0:	4601      	mov	r1, r0
 80106e2:	ee18 0a10 	vmov	r0, s16
 80106e6:	f000 fcad 	bl	8011044 <__mcmp>
 80106ea:	4602      	mov	r2, r0
 80106ec:	4629      	mov	r1, r5
 80106ee:	4620      	mov	r0, r4
 80106f0:	9207      	str	r2, [sp, #28]
 80106f2:	f000 fa65 	bl	8010bc0 <_Bfree>
 80106f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80106fa:	ea43 0102 	orr.w	r1, r3, r2
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	430b      	orrs	r3, r1
 8010702:	464d      	mov	r5, r9
 8010704:	d10f      	bne.n	8010726 <_dtoa_r+0xa66>
 8010706:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801070a:	d02a      	beq.n	8010762 <_dtoa_r+0xaa2>
 801070c:	9b03      	ldr	r3, [sp, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	dd02      	ble.n	8010718 <_dtoa_r+0xa58>
 8010712:	9b02      	ldr	r3, [sp, #8]
 8010714:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010718:	f88b a000 	strb.w	sl, [fp]
 801071c:	e775      	b.n	801060a <_dtoa_r+0x94a>
 801071e:	4638      	mov	r0, r7
 8010720:	e7ba      	b.n	8010698 <_dtoa_r+0x9d8>
 8010722:	2201      	movs	r2, #1
 8010724:	e7e2      	b.n	80106ec <_dtoa_r+0xa2c>
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	db04      	blt.n	8010736 <_dtoa_r+0xa76>
 801072c:	9906      	ldr	r1, [sp, #24]
 801072e:	430b      	orrs	r3, r1
 8010730:	9904      	ldr	r1, [sp, #16]
 8010732:	430b      	orrs	r3, r1
 8010734:	d122      	bne.n	801077c <_dtoa_r+0xabc>
 8010736:	2a00      	cmp	r2, #0
 8010738:	ddee      	ble.n	8010718 <_dtoa_r+0xa58>
 801073a:	ee18 1a10 	vmov	r1, s16
 801073e:	2201      	movs	r2, #1
 8010740:	4620      	mov	r0, r4
 8010742:	f000 fc0f 	bl	8010f64 <__lshift>
 8010746:	4631      	mov	r1, r6
 8010748:	ee08 0a10 	vmov	s16, r0
 801074c:	f000 fc7a 	bl	8011044 <__mcmp>
 8010750:	2800      	cmp	r0, #0
 8010752:	dc03      	bgt.n	801075c <_dtoa_r+0xa9c>
 8010754:	d1e0      	bne.n	8010718 <_dtoa_r+0xa58>
 8010756:	f01a 0f01 	tst.w	sl, #1
 801075a:	d0dd      	beq.n	8010718 <_dtoa_r+0xa58>
 801075c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010760:	d1d7      	bne.n	8010712 <_dtoa_r+0xa52>
 8010762:	2339      	movs	r3, #57	; 0x39
 8010764:	f88b 3000 	strb.w	r3, [fp]
 8010768:	462b      	mov	r3, r5
 801076a:	461d      	mov	r5, r3
 801076c:	3b01      	subs	r3, #1
 801076e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010772:	2a39      	cmp	r2, #57	; 0x39
 8010774:	d071      	beq.n	801085a <_dtoa_r+0xb9a>
 8010776:	3201      	adds	r2, #1
 8010778:	701a      	strb	r2, [r3, #0]
 801077a:	e746      	b.n	801060a <_dtoa_r+0x94a>
 801077c:	2a00      	cmp	r2, #0
 801077e:	dd07      	ble.n	8010790 <_dtoa_r+0xad0>
 8010780:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010784:	d0ed      	beq.n	8010762 <_dtoa_r+0xaa2>
 8010786:	f10a 0301 	add.w	r3, sl, #1
 801078a:	f88b 3000 	strb.w	r3, [fp]
 801078e:	e73c      	b.n	801060a <_dtoa_r+0x94a>
 8010790:	9b05      	ldr	r3, [sp, #20]
 8010792:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010796:	4599      	cmp	r9, r3
 8010798:	d047      	beq.n	801082a <_dtoa_r+0xb6a>
 801079a:	ee18 1a10 	vmov	r1, s16
 801079e:	2300      	movs	r3, #0
 80107a0:	220a      	movs	r2, #10
 80107a2:	4620      	mov	r0, r4
 80107a4:	f000 fa2e 	bl	8010c04 <__multadd>
 80107a8:	45b8      	cmp	r8, r7
 80107aa:	ee08 0a10 	vmov	s16, r0
 80107ae:	f04f 0300 	mov.w	r3, #0
 80107b2:	f04f 020a 	mov.w	r2, #10
 80107b6:	4641      	mov	r1, r8
 80107b8:	4620      	mov	r0, r4
 80107ba:	d106      	bne.n	80107ca <_dtoa_r+0xb0a>
 80107bc:	f000 fa22 	bl	8010c04 <__multadd>
 80107c0:	4680      	mov	r8, r0
 80107c2:	4607      	mov	r7, r0
 80107c4:	f109 0901 	add.w	r9, r9, #1
 80107c8:	e772      	b.n	80106b0 <_dtoa_r+0x9f0>
 80107ca:	f000 fa1b 	bl	8010c04 <__multadd>
 80107ce:	4639      	mov	r1, r7
 80107d0:	4680      	mov	r8, r0
 80107d2:	2300      	movs	r3, #0
 80107d4:	220a      	movs	r2, #10
 80107d6:	4620      	mov	r0, r4
 80107d8:	f000 fa14 	bl	8010c04 <__multadd>
 80107dc:	4607      	mov	r7, r0
 80107de:	e7f1      	b.n	80107c4 <_dtoa_r+0xb04>
 80107e0:	9b03      	ldr	r3, [sp, #12]
 80107e2:	9302      	str	r3, [sp, #8]
 80107e4:	9d01      	ldr	r5, [sp, #4]
 80107e6:	ee18 0a10 	vmov	r0, s16
 80107ea:	4631      	mov	r1, r6
 80107ec:	f7ff f9da 	bl	800fba4 <quorem>
 80107f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80107f4:	9b01      	ldr	r3, [sp, #4]
 80107f6:	f805 ab01 	strb.w	sl, [r5], #1
 80107fa:	1aea      	subs	r2, r5, r3
 80107fc:	9b02      	ldr	r3, [sp, #8]
 80107fe:	4293      	cmp	r3, r2
 8010800:	dd09      	ble.n	8010816 <_dtoa_r+0xb56>
 8010802:	ee18 1a10 	vmov	r1, s16
 8010806:	2300      	movs	r3, #0
 8010808:	220a      	movs	r2, #10
 801080a:	4620      	mov	r0, r4
 801080c:	f000 f9fa 	bl	8010c04 <__multadd>
 8010810:	ee08 0a10 	vmov	s16, r0
 8010814:	e7e7      	b.n	80107e6 <_dtoa_r+0xb26>
 8010816:	9b02      	ldr	r3, [sp, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	bfc8      	it	gt
 801081c:	461d      	movgt	r5, r3
 801081e:	9b01      	ldr	r3, [sp, #4]
 8010820:	bfd8      	it	le
 8010822:	2501      	movle	r5, #1
 8010824:	441d      	add	r5, r3
 8010826:	f04f 0800 	mov.w	r8, #0
 801082a:	ee18 1a10 	vmov	r1, s16
 801082e:	2201      	movs	r2, #1
 8010830:	4620      	mov	r0, r4
 8010832:	f000 fb97 	bl	8010f64 <__lshift>
 8010836:	4631      	mov	r1, r6
 8010838:	ee08 0a10 	vmov	s16, r0
 801083c:	f000 fc02 	bl	8011044 <__mcmp>
 8010840:	2800      	cmp	r0, #0
 8010842:	dc91      	bgt.n	8010768 <_dtoa_r+0xaa8>
 8010844:	d102      	bne.n	801084c <_dtoa_r+0xb8c>
 8010846:	f01a 0f01 	tst.w	sl, #1
 801084a:	d18d      	bne.n	8010768 <_dtoa_r+0xaa8>
 801084c:	462b      	mov	r3, r5
 801084e:	461d      	mov	r5, r3
 8010850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010854:	2a30      	cmp	r2, #48	; 0x30
 8010856:	d0fa      	beq.n	801084e <_dtoa_r+0xb8e>
 8010858:	e6d7      	b.n	801060a <_dtoa_r+0x94a>
 801085a:	9a01      	ldr	r2, [sp, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d184      	bne.n	801076a <_dtoa_r+0xaaa>
 8010860:	9b00      	ldr	r3, [sp, #0]
 8010862:	3301      	adds	r3, #1
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	2331      	movs	r3, #49	; 0x31
 8010868:	7013      	strb	r3, [r2, #0]
 801086a:	e6ce      	b.n	801060a <_dtoa_r+0x94a>
 801086c:	4b09      	ldr	r3, [pc, #36]	; (8010894 <_dtoa_r+0xbd4>)
 801086e:	f7ff ba95 	b.w	800fd9c <_dtoa_r+0xdc>
 8010872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010874:	2b00      	cmp	r3, #0
 8010876:	f47f aa6e 	bne.w	800fd56 <_dtoa_r+0x96>
 801087a:	4b07      	ldr	r3, [pc, #28]	; (8010898 <_dtoa_r+0xbd8>)
 801087c:	f7ff ba8e 	b.w	800fd9c <_dtoa_r+0xdc>
 8010880:	9b02      	ldr	r3, [sp, #8]
 8010882:	2b00      	cmp	r3, #0
 8010884:	dcae      	bgt.n	80107e4 <_dtoa_r+0xb24>
 8010886:	9b06      	ldr	r3, [sp, #24]
 8010888:	2b02      	cmp	r3, #2
 801088a:	f73f aea8 	bgt.w	80105de <_dtoa_r+0x91e>
 801088e:	e7a9      	b.n	80107e4 <_dtoa_r+0xb24>
 8010890:	08011e1f 	.word	0x08011e1f
 8010894:	08011d7c 	.word	0x08011d7c
 8010898:	08011da0 	.word	0x08011da0

0801089c <__sflush_r>:
 801089c:	898a      	ldrh	r2, [r1, #12]
 801089e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a2:	4605      	mov	r5, r0
 80108a4:	0710      	lsls	r0, r2, #28
 80108a6:	460c      	mov	r4, r1
 80108a8:	d458      	bmi.n	801095c <__sflush_r+0xc0>
 80108aa:	684b      	ldr	r3, [r1, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	dc05      	bgt.n	80108bc <__sflush_r+0x20>
 80108b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dc02      	bgt.n	80108bc <__sflush_r+0x20>
 80108b6:	2000      	movs	r0, #0
 80108b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108be:	2e00      	cmp	r6, #0
 80108c0:	d0f9      	beq.n	80108b6 <__sflush_r+0x1a>
 80108c2:	2300      	movs	r3, #0
 80108c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108c8:	682f      	ldr	r7, [r5, #0]
 80108ca:	602b      	str	r3, [r5, #0]
 80108cc:	d032      	beq.n	8010934 <__sflush_r+0x98>
 80108ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108d0:	89a3      	ldrh	r3, [r4, #12]
 80108d2:	075a      	lsls	r2, r3, #29
 80108d4:	d505      	bpl.n	80108e2 <__sflush_r+0x46>
 80108d6:	6863      	ldr	r3, [r4, #4]
 80108d8:	1ac0      	subs	r0, r0, r3
 80108da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108dc:	b10b      	cbz	r3, 80108e2 <__sflush_r+0x46>
 80108de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108e0:	1ac0      	subs	r0, r0, r3
 80108e2:	2300      	movs	r3, #0
 80108e4:	4602      	mov	r2, r0
 80108e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108e8:	6a21      	ldr	r1, [r4, #32]
 80108ea:	4628      	mov	r0, r5
 80108ec:	47b0      	blx	r6
 80108ee:	1c43      	adds	r3, r0, #1
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	d106      	bne.n	8010902 <__sflush_r+0x66>
 80108f4:	6829      	ldr	r1, [r5, #0]
 80108f6:	291d      	cmp	r1, #29
 80108f8:	d82c      	bhi.n	8010954 <__sflush_r+0xb8>
 80108fa:	4a2a      	ldr	r2, [pc, #168]	; (80109a4 <__sflush_r+0x108>)
 80108fc:	40ca      	lsrs	r2, r1
 80108fe:	07d6      	lsls	r6, r2, #31
 8010900:	d528      	bpl.n	8010954 <__sflush_r+0xb8>
 8010902:	2200      	movs	r2, #0
 8010904:	6062      	str	r2, [r4, #4]
 8010906:	04d9      	lsls	r1, r3, #19
 8010908:	6922      	ldr	r2, [r4, #16]
 801090a:	6022      	str	r2, [r4, #0]
 801090c:	d504      	bpl.n	8010918 <__sflush_r+0x7c>
 801090e:	1c42      	adds	r2, r0, #1
 8010910:	d101      	bne.n	8010916 <__sflush_r+0x7a>
 8010912:	682b      	ldr	r3, [r5, #0]
 8010914:	b903      	cbnz	r3, 8010918 <__sflush_r+0x7c>
 8010916:	6560      	str	r0, [r4, #84]	; 0x54
 8010918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801091a:	602f      	str	r7, [r5, #0]
 801091c:	2900      	cmp	r1, #0
 801091e:	d0ca      	beq.n	80108b6 <__sflush_r+0x1a>
 8010920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010924:	4299      	cmp	r1, r3
 8010926:	d002      	beq.n	801092e <__sflush_r+0x92>
 8010928:	4628      	mov	r0, r5
 801092a:	f000 fca3 	bl	8011274 <_free_r>
 801092e:	2000      	movs	r0, #0
 8010930:	6360      	str	r0, [r4, #52]	; 0x34
 8010932:	e7c1      	b.n	80108b8 <__sflush_r+0x1c>
 8010934:	6a21      	ldr	r1, [r4, #32]
 8010936:	2301      	movs	r3, #1
 8010938:	4628      	mov	r0, r5
 801093a:	47b0      	blx	r6
 801093c:	1c41      	adds	r1, r0, #1
 801093e:	d1c7      	bne.n	80108d0 <__sflush_r+0x34>
 8010940:	682b      	ldr	r3, [r5, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d0c4      	beq.n	80108d0 <__sflush_r+0x34>
 8010946:	2b1d      	cmp	r3, #29
 8010948:	d001      	beq.n	801094e <__sflush_r+0xb2>
 801094a:	2b16      	cmp	r3, #22
 801094c:	d101      	bne.n	8010952 <__sflush_r+0xb6>
 801094e:	602f      	str	r7, [r5, #0]
 8010950:	e7b1      	b.n	80108b6 <__sflush_r+0x1a>
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010958:	81a3      	strh	r3, [r4, #12]
 801095a:	e7ad      	b.n	80108b8 <__sflush_r+0x1c>
 801095c:	690f      	ldr	r7, [r1, #16]
 801095e:	2f00      	cmp	r7, #0
 8010960:	d0a9      	beq.n	80108b6 <__sflush_r+0x1a>
 8010962:	0793      	lsls	r3, r2, #30
 8010964:	680e      	ldr	r6, [r1, #0]
 8010966:	bf08      	it	eq
 8010968:	694b      	ldreq	r3, [r1, #20]
 801096a:	600f      	str	r7, [r1, #0]
 801096c:	bf18      	it	ne
 801096e:	2300      	movne	r3, #0
 8010970:	eba6 0807 	sub.w	r8, r6, r7
 8010974:	608b      	str	r3, [r1, #8]
 8010976:	f1b8 0f00 	cmp.w	r8, #0
 801097a:	dd9c      	ble.n	80108b6 <__sflush_r+0x1a>
 801097c:	6a21      	ldr	r1, [r4, #32]
 801097e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010980:	4643      	mov	r3, r8
 8010982:	463a      	mov	r2, r7
 8010984:	4628      	mov	r0, r5
 8010986:	47b0      	blx	r6
 8010988:	2800      	cmp	r0, #0
 801098a:	dc06      	bgt.n	801099a <__sflush_r+0xfe>
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010992:	81a3      	strh	r3, [r4, #12]
 8010994:	f04f 30ff 	mov.w	r0, #4294967295
 8010998:	e78e      	b.n	80108b8 <__sflush_r+0x1c>
 801099a:	4407      	add	r7, r0
 801099c:	eba8 0800 	sub.w	r8, r8, r0
 80109a0:	e7e9      	b.n	8010976 <__sflush_r+0xda>
 80109a2:	bf00      	nop
 80109a4:	20400001 	.word	0x20400001

080109a8 <_fflush_r>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	690b      	ldr	r3, [r1, #16]
 80109ac:	4605      	mov	r5, r0
 80109ae:	460c      	mov	r4, r1
 80109b0:	b913      	cbnz	r3, 80109b8 <_fflush_r+0x10>
 80109b2:	2500      	movs	r5, #0
 80109b4:	4628      	mov	r0, r5
 80109b6:	bd38      	pop	{r3, r4, r5, pc}
 80109b8:	b118      	cbz	r0, 80109c2 <_fflush_r+0x1a>
 80109ba:	6983      	ldr	r3, [r0, #24]
 80109bc:	b90b      	cbnz	r3, 80109c2 <_fflush_r+0x1a>
 80109be:	f7fe f8e1 	bl	800eb84 <__sinit>
 80109c2:	4b14      	ldr	r3, [pc, #80]	; (8010a14 <_fflush_r+0x6c>)
 80109c4:	429c      	cmp	r4, r3
 80109c6:	d11b      	bne.n	8010a00 <_fflush_r+0x58>
 80109c8:	686c      	ldr	r4, [r5, #4]
 80109ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0ef      	beq.n	80109b2 <_fflush_r+0xa>
 80109d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109d4:	07d0      	lsls	r0, r2, #31
 80109d6:	d404      	bmi.n	80109e2 <_fflush_r+0x3a>
 80109d8:	0599      	lsls	r1, r3, #22
 80109da:	d402      	bmi.n	80109e2 <_fflush_r+0x3a>
 80109dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109de:	f7fe f994 	bl	800ed0a <__retarget_lock_acquire_recursive>
 80109e2:	4628      	mov	r0, r5
 80109e4:	4621      	mov	r1, r4
 80109e6:	f7ff ff59 	bl	801089c <__sflush_r>
 80109ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109ec:	07da      	lsls	r2, r3, #31
 80109ee:	4605      	mov	r5, r0
 80109f0:	d4e0      	bmi.n	80109b4 <_fflush_r+0xc>
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	059b      	lsls	r3, r3, #22
 80109f6:	d4dd      	bmi.n	80109b4 <_fflush_r+0xc>
 80109f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109fa:	f7fe f987 	bl	800ed0c <__retarget_lock_release_recursive>
 80109fe:	e7d9      	b.n	80109b4 <_fflush_r+0xc>
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <_fflush_r+0x70>)
 8010a02:	429c      	cmp	r4, r3
 8010a04:	d101      	bne.n	8010a0a <_fflush_r+0x62>
 8010a06:	68ac      	ldr	r4, [r5, #8]
 8010a08:	e7df      	b.n	80109ca <_fflush_r+0x22>
 8010a0a:	4b04      	ldr	r3, [pc, #16]	; (8010a1c <_fflush_r+0x74>)
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	bf08      	it	eq
 8010a10:	68ec      	ldreq	r4, [r5, #12]
 8010a12:	e7da      	b.n	80109ca <_fflush_r+0x22>
 8010a14:	08011d28 	.word	0x08011d28
 8010a18:	08011d48 	.word	0x08011d48
 8010a1c:	08011d08 	.word	0x08011d08

08010a20 <_localeconv_r>:
 8010a20:	4800      	ldr	r0, [pc, #0]	; (8010a24 <_localeconv_r+0x4>)
 8010a22:	4770      	bx	lr
 8010a24:	20000288 	.word	0x20000288

08010a28 <_lseek_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d07      	ldr	r5, [pc, #28]	; (8010a48 <_lseek_r+0x20>)
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	4608      	mov	r0, r1
 8010a30:	4611      	mov	r1, r2
 8010a32:	2200      	movs	r2, #0
 8010a34:	602a      	str	r2, [r5, #0]
 8010a36:	461a      	mov	r2, r3
 8010a38:	f7f2 fd36 	bl	80034a8 <_lseek>
 8010a3c:	1c43      	adds	r3, r0, #1
 8010a3e:	d102      	bne.n	8010a46 <_lseek_r+0x1e>
 8010a40:	682b      	ldr	r3, [r5, #0]
 8010a42:	b103      	cbz	r3, 8010a46 <_lseek_r+0x1e>
 8010a44:	6023      	str	r3, [r4, #0]
 8010a46:	bd38      	pop	{r3, r4, r5, pc}
 8010a48:	20006be0 	.word	0x20006be0

08010a4c <__swhatbuf_r>:
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	460e      	mov	r6, r1
 8010a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a54:	2900      	cmp	r1, #0
 8010a56:	b096      	sub	sp, #88	; 0x58
 8010a58:	4614      	mov	r4, r2
 8010a5a:	461d      	mov	r5, r3
 8010a5c:	da08      	bge.n	8010a70 <__swhatbuf_r+0x24>
 8010a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a62:	2200      	movs	r2, #0
 8010a64:	602a      	str	r2, [r5, #0]
 8010a66:	061a      	lsls	r2, r3, #24
 8010a68:	d410      	bmi.n	8010a8c <__swhatbuf_r+0x40>
 8010a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a6e:	e00e      	b.n	8010a8e <__swhatbuf_r+0x42>
 8010a70:	466a      	mov	r2, sp
 8010a72:	f000 fde9 	bl	8011648 <_fstat_r>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	dbf1      	blt.n	8010a5e <__swhatbuf_r+0x12>
 8010a7a:	9a01      	ldr	r2, [sp, #4]
 8010a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a84:	425a      	negs	r2, r3
 8010a86:	415a      	adcs	r2, r3
 8010a88:	602a      	str	r2, [r5, #0]
 8010a8a:	e7ee      	b.n	8010a6a <__swhatbuf_r+0x1e>
 8010a8c:	2340      	movs	r3, #64	; 0x40
 8010a8e:	2000      	movs	r0, #0
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	b016      	add	sp, #88	; 0x58
 8010a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a98 <__smakebuf_r>:
 8010a98:	898b      	ldrh	r3, [r1, #12]
 8010a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a9c:	079d      	lsls	r5, r3, #30
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	d507      	bpl.n	8010ab4 <__smakebuf_r+0x1c>
 8010aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	6123      	str	r3, [r4, #16]
 8010aac:	2301      	movs	r3, #1
 8010aae:	6163      	str	r3, [r4, #20]
 8010ab0:	b002      	add	sp, #8
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}
 8010ab4:	ab01      	add	r3, sp, #4
 8010ab6:	466a      	mov	r2, sp
 8010ab8:	f7ff ffc8 	bl	8010a4c <__swhatbuf_r>
 8010abc:	9900      	ldr	r1, [sp, #0]
 8010abe:	4605      	mov	r5, r0
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	f7fe f95b 	bl	800ed7c <_malloc_r>
 8010ac6:	b948      	cbnz	r0, 8010adc <__smakebuf_r+0x44>
 8010ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010acc:	059a      	lsls	r2, r3, #22
 8010ace:	d4ef      	bmi.n	8010ab0 <__smakebuf_r+0x18>
 8010ad0:	f023 0303 	bic.w	r3, r3, #3
 8010ad4:	f043 0302 	orr.w	r3, r3, #2
 8010ad8:	81a3      	strh	r3, [r4, #12]
 8010ada:	e7e3      	b.n	8010aa4 <__smakebuf_r+0xc>
 8010adc:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <__smakebuf_r+0x7c>)
 8010ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ae0:	89a3      	ldrh	r3, [r4, #12]
 8010ae2:	6020      	str	r0, [r4, #0]
 8010ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ae8:	81a3      	strh	r3, [r4, #12]
 8010aea:	9b00      	ldr	r3, [sp, #0]
 8010aec:	6163      	str	r3, [r4, #20]
 8010aee:	9b01      	ldr	r3, [sp, #4]
 8010af0:	6120      	str	r0, [r4, #16]
 8010af2:	b15b      	cbz	r3, 8010b0c <__smakebuf_r+0x74>
 8010af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 fdb7 	bl	801166c <_isatty_r>
 8010afe:	b128      	cbz	r0, 8010b0c <__smakebuf_r+0x74>
 8010b00:	89a3      	ldrh	r3, [r4, #12]
 8010b02:	f023 0303 	bic.w	r3, r3, #3
 8010b06:	f043 0301 	orr.w	r3, r3, #1
 8010b0a:	81a3      	strh	r3, [r4, #12]
 8010b0c:	89a0      	ldrh	r0, [r4, #12]
 8010b0e:	4305      	orrs	r5, r0
 8010b10:	81a5      	strh	r5, [r4, #12]
 8010b12:	e7cd      	b.n	8010ab0 <__smakebuf_r+0x18>
 8010b14:	0800eb1d 	.word	0x0800eb1d

08010b18 <malloc>:
 8010b18:	4b02      	ldr	r3, [pc, #8]	; (8010b24 <malloc+0xc>)
 8010b1a:	4601      	mov	r1, r0
 8010b1c:	6818      	ldr	r0, [r3, #0]
 8010b1e:	f7fe b92d 	b.w	800ed7c <_malloc_r>
 8010b22:	bf00      	nop
 8010b24:	20000134 	.word	0x20000134

08010b28 <__malloc_lock>:
 8010b28:	4801      	ldr	r0, [pc, #4]	; (8010b30 <__malloc_lock+0x8>)
 8010b2a:	f7fe b8ee 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 8010b2e:	bf00      	nop
 8010b30:	20006bd4 	.word	0x20006bd4

08010b34 <__malloc_unlock>:
 8010b34:	4801      	ldr	r0, [pc, #4]	; (8010b3c <__malloc_unlock+0x8>)
 8010b36:	f7fe b8e9 	b.w	800ed0c <__retarget_lock_release_recursive>
 8010b3a:	bf00      	nop
 8010b3c:	20006bd4 	.word	0x20006bd4

08010b40 <_Balloc>:
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b44:	4604      	mov	r4, r0
 8010b46:	460d      	mov	r5, r1
 8010b48:	b976      	cbnz	r6, 8010b68 <_Balloc+0x28>
 8010b4a:	2010      	movs	r0, #16
 8010b4c:	f7ff ffe4 	bl	8010b18 <malloc>
 8010b50:	4602      	mov	r2, r0
 8010b52:	6260      	str	r0, [r4, #36]	; 0x24
 8010b54:	b920      	cbnz	r0, 8010b60 <_Balloc+0x20>
 8010b56:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <_Balloc+0x78>)
 8010b58:	4818      	ldr	r0, [pc, #96]	; (8010bbc <_Balloc+0x7c>)
 8010b5a:	2166      	movs	r1, #102	; 0x66
 8010b5c:	f000 fd44 	bl	80115e8 <__assert_func>
 8010b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b64:	6006      	str	r6, [r0, #0]
 8010b66:	60c6      	str	r6, [r0, #12]
 8010b68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010b6a:	68f3      	ldr	r3, [r6, #12]
 8010b6c:	b183      	cbz	r3, 8010b90 <_Balloc+0x50>
 8010b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b76:	b9b8      	cbnz	r0, 8010ba8 <_Balloc+0x68>
 8010b78:	2101      	movs	r1, #1
 8010b7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010b7e:	1d72      	adds	r2, r6, #5
 8010b80:	0092      	lsls	r2, r2, #2
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 fb60 	bl	8011248 <_calloc_r>
 8010b88:	b160      	cbz	r0, 8010ba4 <_Balloc+0x64>
 8010b8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b8e:	e00e      	b.n	8010bae <_Balloc+0x6e>
 8010b90:	2221      	movs	r2, #33	; 0x21
 8010b92:	2104      	movs	r1, #4
 8010b94:	4620      	mov	r0, r4
 8010b96:	f000 fb57 	bl	8011248 <_calloc_r>
 8010b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b9c:	60f0      	str	r0, [r6, #12]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1e4      	bne.n	8010b6e <_Balloc+0x2e>
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	bd70      	pop	{r4, r5, r6, pc}
 8010ba8:	6802      	ldr	r2, [r0, #0]
 8010baa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bae:	2300      	movs	r3, #0
 8010bb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bb4:	e7f7      	b.n	8010ba6 <_Balloc+0x66>
 8010bb6:	bf00      	nop
 8010bb8:	08011dad 	.word	0x08011dad
 8010bbc:	08011e30 	.word	0x08011e30

08010bc0 <_Bfree>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010bc4:	4605      	mov	r5, r0
 8010bc6:	460c      	mov	r4, r1
 8010bc8:	b976      	cbnz	r6, 8010be8 <_Bfree+0x28>
 8010bca:	2010      	movs	r0, #16
 8010bcc:	f7ff ffa4 	bl	8010b18 <malloc>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	6268      	str	r0, [r5, #36]	; 0x24
 8010bd4:	b920      	cbnz	r0, 8010be0 <_Bfree+0x20>
 8010bd6:	4b09      	ldr	r3, [pc, #36]	; (8010bfc <_Bfree+0x3c>)
 8010bd8:	4809      	ldr	r0, [pc, #36]	; (8010c00 <_Bfree+0x40>)
 8010bda:	218a      	movs	r1, #138	; 0x8a
 8010bdc:	f000 fd04 	bl	80115e8 <__assert_func>
 8010be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010be4:	6006      	str	r6, [r0, #0]
 8010be6:	60c6      	str	r6, [r0, #12]
 8010be8:	b13c      	cbz	r4, 8010bfa <_Bfree+0x3a>
 8010bea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010bec:	6862      	ldr	r2, [r4, #4]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010bf4:	6021      	str	r1, [r4, #0]
 8010bf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010bfa:	bd70      	pop	{r4, r5, r6, pc}
 8010bfc:	08011dad 	.word	0x08011dad
 8010c00:	08011e30 	.word	0x08011e30

08010c04 <__multadd>:
 8010c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c08:	690d      	ldr	r5, [r1, #16]
 8010c0a:	4607      	mov	r7, r0
 8010c0c:	460c      	mov	r4, r1
 8010c0e:	461e      	mov	r6, r3
 8010c10:	f101 0c14 	add.w	ip, r1, #20
 8010c14:	2000      	movs	r0, #0
 8010c16:	f8dc 3000 	ldr.w	r3, [ip]
 8010c1a:	b299      	uxth	r1, r3
 8010c1c:	fb02 6101 	mla	r1, r2, r1, r6
 8010c20:	0c1e      	lsrs	r6, r3, #16
 8010c22:	0c0b      	lsrs	r3, r1, #16
 8010c24:	fb02 3306 	mla	r3, r2, r6, r3
 8010c28:	b289      	uxth	r1, r1
 8010c2a:	3001      	adds	r0, #1
 8010c2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c30:	4285      	cmp	r5, r0
 8010c32:	f84c 1b04 	str.w	r1, [ip], #4
 8010c36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c3a:	dcec      	bgt.n	8010c16 <__multadd+0x12>
 8010c3c:	b30e      	cbz	r6, 8010c82 <__multadd+0x7e>
 8010c3e:	68a3      	ldr	r3, [r4, #8]
 8010c40:	42ab      	cmp	r3, r5
 8010c42:	dc19      	bgt.n	8010c78 <__multadd+0x74>
 8010c44:	6861      	ldr	r1, [r4, #4]
 8010c46:	4638      	mov	r0, r7
 8010c48:	3101      	adds	r1, #1
 8010c4a:	f7ff ff79 	bl	8010b40 <_Balloc>
 8010c4e:	4680      	mov	r8, r0
 8010c50:	b928      	cbnz	r0, 8010c5e <__multadd+0x5a>
 8010c52:	4602      	mov	r2, r0
 8010c54:	4b0c      	ldr	r3, [pc, #48]	; (8010c88 <__multadd+0x84>)
 8010c56:	480d      	ldr	r0, [pc, #52]	; (8010c8c <__multadd+0x88>)
 8010c58:	21b5      	movs	r1, #181	; 0xb5
 8010c5a:	f000 fcc5 	bl	80115e8 <__assert_func>
 8010c5e:	6922      	ldr	r2, [r4, #16]
 8010c60:	3202      	adds	r2, #2
 8010c62:	f104 010c 	add.w	r1, r4, #12
 8010c66:	0092      	lsls	r2, r2, #2
 8010c68:	300c      	adds	r0, #12
 8010c6a:	f7fe f850 	bl	800ed0e <memcpy>
 8010c6e:	4621      	mov	r1, r4
 8010c70:	4638      	mov	r0, r7
 8010c72:	f7ff ffa5 	bl	8010bc0 <_Bfree>
 8010c76:	4644      	mov	r4, r8
 8010c78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c7c:	3501      	adds	r5, #1
 8010c7e:	615e      	str	r6, [r3, #20]
 8010c80:	6125      	str	r5, [r4, #16]
 8010c82:	4620      	mov	r0, r4
 8010c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c88:	08011e1f 	.word	0x08011e1f
 8010c8c:	08011e30 	.word	0x08011e30

08010c90 <__hi0bits>:
 8010c90:	0c03      	lsrs	r3, r0, #16
 8010c92:	041b      	lsls	r3, r3, #16
 8010c94:	b9d3      	cbnz	r3, 8010ccc <__hi0bits+0x3c>
 8010c96:	0400      	lsls	r0, r0, #16
 8010c98:	2310      	movs	r3, #16
 8010c9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010c9e:	bf04      	itt	eq
 8010ca0:	0200      	lsleq	r0, r0, #8
 8010ca2:	3308      	addeq	r3, #8
 8010ca4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ca8:	bf04      	itt	eq
 8010caa:	0100      	lsleq	r0, r0, #4
 8010cac:	3304      	addeq	r3, #4
 8010cae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010cb2:	bf04      	itt	eq
 8010cb4:	0080      	lsleq	r0, r0, #2
 8010cb6:	3302      	addeq	r3, #2
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	db05      	blt.n	8010cc8 <__hi0bits+0x38>
 8010cbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010cc0:	f103 0301 	add.w	r3, r3, #1
 8010cc4:	bf08      	it	eq
 8010cc6:	2320      	moveq	r3, #32
 8010cc8:	4618      	mov	r0, r3
 8010cca:	4770      	bx	lr
 8010ccc:	2300      	movs	r3, #0
 8010cce:	e7e4      	b.n	8010c9a <__hi0bits+0xa>

08010cd0 <__lo0bits>:
 8010cd0:	6803      	ldr	r3, [r0, #0]
 8010cd2:	f013 0207 	ands.w	r2, r3, #7
 8010cd6:	4601      	mov	r1, r0
 8010cd8:	d00b      	beq.n	8010cf2 <__lo0bits+0x22>
 8010cda:	07da      	lsls	r2, r3, #31
 8010cdc:	d423      	bmi.n	8010d26 <__lo0bits+0x56>
 8010cde:	0798      	lsls	r0, r3, #30
 8010ce0:	bf49      	itett	mi
 8010ce2:	085b      	lsrmi	r3, r3, #1
 8010ce4:	089b      	lsrpl	r3, r3, #2
 8010ce6:	2001      	movmi	r0, #1
 8010ce8:	600b      	strmi	r3, [r1, #0]
 8010cea:	bf5c      	itt	pl
 8010cec:	600b      	strpl	r3, [r1, #0]
 8010cee:	2002      	movpl	r0, #2
 8010cf0:	4770      	bx	lr
 8010cf2:	b298      	uxth	r0, r3
 8010cf4:	b9a8      	cbnz	r0, 8010d22 <__lo0bits+0x52>
 8010cf6:	0c1b      	lsrs	r3, r3, #16
 8010cf8:	2010      	movs	r0, #16
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	b90a      	cbnz	r2, 8010d02 <__lo0bits+0x32>
 8010cfe:	3008      	adds	r0, #8
 8010d00:	0a1b      	lsrs	r3, r3, #8
 8010d02:	071a      	lsls	r2, r3, #28
 8010d04:	bf04      	itt	eq
 8010d06:	091b      	lsreq	r3, r3, #4
 8010d08:	3004      	addeq	r0, #4
 8010d0a:	079a      	lsls	r2, r3, #30
 8010d0c:	bf04      	itt	eq
 8010d0e:	089b      	lsreq	r3, r3, #2
 8010d10:	3002      	addeq	r0, #2
 8010d12:	07da      	lsls	r2, r3, #31
 8010d14:	d403      	bmi.n	8010d1e <__lo0bits+0x4e>
 8010d16:	085b      	lsrs	r3, r3, #1
 8010d18:	f100 0001 	add.w	r0, r0, #1
 8010d1c:	d005      	beq.n	8010d2a <__lo0bits+0x5a>
 8010d1e:	600b      	str	r3, [r1, #0]
 8010d20:	4770      	bx	lr
 8010d22:	4610      	mov	r0, r2
 8010d24:	e7e9      	b.n	8010cfa <__lo0bits+0x2a>
 8010d26:	2000      	movs	r0, #0
 8010d28:	4770      	bx	lr
 8010d2a:	2020      	movs	r0, #32
 8010d2c:	4770      	bx	lr
	...

08010d30 <__i2b>:
 8010d30:	b510      	push	{r4, lr}
 8010d32:	460c      	mov	r4, r1
 8010d34:	2101      	movs	r1, #1
 8010d36:	f7ff ff03 	bl	8010b40 <_Balloc>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	b928      	cbnz	r0, 8010d4a <__i2b+0x1a>
 8010d3e:	4b05      	ldr	r3, [pc, #20]	; (8010d54 <__i2b+0x24>)
 8010d40:	4805      	ldr	r0, [pc, #20]	; (8010d58 <__i2b+0x28>)
 8010d42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d46:	f000 fc4f 	bl	80115e8 <__assert_func>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	6144      	str	r4, [r0, #20]
 8010d4e:	6103      	str	r3, [r0, #16]
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	bf00      	nop
 8010d54:	08011e1f 	.word	0x08011e1f
 8010d58:	08011e30 	.word	0x08011e30

08010d5c <__multiply>:
 8010d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d60:	4691      	mov	r9, r2
 8010d62:	690a      	ldr	r2, [r1, #16]
 8010d64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	bfb8      	it	lt
 8010d6c:	460b      	movlt	r3, r1
 8010d6e:	460c      	mov	r4, r1
 8010d70:	bfbc      	itt	lt
 8010d72:	464c      	movlt	r4, r9
 8010d74:	4699      	movlt	r9, r3
 8010d76:	6927      	ldr	r7, [r4, #16]
 8010d78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d7c:	68a3      	ldr	r3, [r4, #8]
 8010d7e:	6861      	ldr	r1, [r4, #4]
 8010d80:	eb07 060a 	add.w	r6, r7, sl
 8010d84:	42b3      	cmp	r3, r6
 8010d86:	b085      	sub	sp, #20
 8010d88:	bfb8      	it	lt
 8010d8a:	3101      	addlt	r1, #1
 8010d8c:	f7ff fed8 	bl	8010b40 <_Balloc>
 8010d90:	b930      	cbnz	r0, 8010da0 <__multiply+0x44>
 8010d92:	4602      	mov	r2, r0
 8010d94:	4b44      	ldr	r3, [pc, #272]	; (8010ea8 <__multiply+0x14c>)
 8010d96:	4845      	ldr	r0, [pc, #276]	; (8010eac <__multiply+0x150>)
 8010d98:	f240 115d 	movw	r1, #349	; 0x15d
 8010d9c:	f000 fc24 	bl	80115e8 <__assert_func>
 8010da0:	f100 0514 	add.w	r5, r0, #20
 8010da4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010da8:	462b      	mov	r3, r5
 8010daa:	2200      	movs	r2, #0
 8010dac:	4543      	cmp	r3, r8
 8010dae:	d321      	bcc.n	8010df4 <__multiply+0x98>
 8010db0:	f104 0314 	add.w	r3, r4, #20
 8010db4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010db8:	f109 0314 	add.w	r3, r9, #20
 8010dbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010dc0:	9202      	str	r2, [sp, #8]
 8010dc2:	1b3a      	subs	r2, r7, r4
 8010dc4:	3a15      	subs	r2, #21
 8010dc6:	f022 0203 	bic.w	r2, r2, #3
 8010dca:	3204      	adds	r2, #4
 8010dcc:	f104 0115 	add.w	r1, r4, #21
 8010dd0:	428f      	cmp	r7, r1
 8010dd2:	bf38      	it	cc
 8010dd4:	2204      	movcc	r2, #4
 8010dd6:	9201      	str	r2, [sp, #4]
 8010dd8:	9a02      	ldr	r2, [sp, #8]
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d80c      	bhi.n	8010dfa <__multiply+0x9e>
 8010de0:	2e00      	cmp	r6, #0
 8010de2:	dd03      	ble.n	8010dec <__multiply+0x90>
 8010de4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d05a      	beq.n	8010ea2 <__multiply+0x146>
 8010dec:	6106      	str	r6, [r0, #16]
 8010dee:	b005      	add	sp, #20
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df4:	f843 2b04 	str.w	r2, [r3], #4
 8010df8:	e7d8      	b.n	8010dac <__multiply+0x50>
 8010dfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8010dfe:	f1ba 0f00 	cmp.w	sl, #0
 8010e02:	d024      	beq.n	8010e4e <__multiply+0xf2>
 8010e04:	f104 0e14 	add.w	lr, r4, #20
 8010e08:	46a9      	mov	r9, r5
 8010e0a:	f04f 0c00 	mov.w	ip, #0
 8010e0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010e12:	f8d9 1000 	ldr.w	r1, [r9]
 8010e16:	fa1f fb82 	uxth.w	fp, r2
 8010e1a:	b289      	uxth	r1, r1
 8010e1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010e20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010e24:	f8d9 2000 	ldr.w	r2, [r9]
 8010e28:	4461      	add	r1, ip
 8010e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010e32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e36:	b289      	uxth	r1, r1
 8010e38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e3c:	4577      	cmp	r7, lr
 8010e3e:	f849 1b04 	str.w	r1, [r9], #4
 8010e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e46:	d8e2      	bhi.n	8010e0e <__multiply+0xb2>
 8010e48:	9a01      	ldr	r2, [sp, #4]
 8010e4a:	f845 c002 	str.w	ip, [r5, r2]
 8010e4e:	9a03      	ldr	r2, [sp, #12]
 8010e50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e54:	3304      	adds	r3, #4
 8010e56:	f1b9 0f00 	cmp.w	r9, #0
 8010e5a:	d020      	beq.n	8010e9e <__multiply+0x142>
 8010e5c:	6829      	ldr	r1, [r5, #0]
 8010e5e:	f104 0c14 	add.w	ip, r4, #20
 8010e62:	46ae      	mov	lr, r5
 8010e64:	f04f 0a00 	mov.w	sl, #0
 8010e68:	f8bc b000 	ldrh.w	fp, [ip]
 8010e6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010e70:	fb09 220b 	mla	r2, r9, fp, r2
 8010e74:	4492      	add	sl, r2
 8010e76:	b289      	uxth	r1, r1
 8010e78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010e7c:	f84e 1b04 	str.w	r1, [lr], #4
 8010e80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010e84:	f8be 1000 	ldrh.w	r1, [lr]
 8010e88:	0c12      	lsrs	r2, r2, #16
 8010e8a:	fb09 1102 	mla	r1, r9, r2, r1
 8010e8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010e92:	4567      	cmp	r7, ip
 8010e94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010e98:	d8e6      	bhi.n	8010e68 <__multiply+0x10c>
 8010e9a:	9a01      	ldr	r2, [sp, #4]
 8010e9c:	50a9      	str	r1, [r5, r2]
 8010e9e:	3504      	adds	r5, #4
 8010ea0:	e79a      	b.n	8010dd8 <__multiply+0x7c>
 8010ea2:	3e01      	subs	r6, #1
 8010ea4:	e79c      	b.n	8010de0 <__multiply+0x84>
 8010ea6:	bf00      	nop
 8010ea8:	08011e1f 	.word	0x08011e1f
 8010eac:	08011e30 	.word	0x08011e30

08010eb0 <__pow5mult>:
 8010eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb4:	4615      	mov	r5, r2
 8010eb6:	f012 0203 	ands.w	r2, r2, #3
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460f      	mov	r7, r1
 8010ebe:	d007      	beq.n	8010ed0 <__pow5mult+0x20>
 8010ec0:	4c25      	ldr	r4, [pc, #148]	; (8010f58 <__pow5mult+0xa8>)
 8010ec2:	3a01      	subs	r2, #1
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010eca:	f7ff fe9b 	bl	8010c04 <__multadd>
 8010ece:	4607      	mov	r7, r0
 8010ed0:	10ad      	asrs	r5, r5, #2
 8010ed2:	d03d      	beq.n	8010f50 <__pow5mult+0xa0>
 8010ed4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010ed6:	b97c      	cbnz	r4, 8010ef8 <__pow5mult+0x48>
 8010ed8:	2010      	movs	r0, #16
 8010eda:	f7ff fe1d 	bl	8010b18 <malloc>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	6270      	str	r0, [r6, #36]	; 0x24
 8010ee2:	b928      	cbnz	r0, 8010ef0 <__pow5mult+0x40>
 8010ee4:	4b1d      	ldr	r3, [pc, #116]	; (8010f5c <__pow5mult+0xac>)
 8010ee6:	481e      	ldr	r0, [pc, #120]	; (8010f60 <__pow5mult+0xb0>)
 8010ee8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010eec:	f000 fb7c 	bl	80115e8 <__assert_func>
 8010ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ef4:	6004      	str	r4, [r0, #0]
 8010ef6:	60c4      	str	r4, [r0, #12]
 8010ef8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f00:	b94c      	cbnz	r4, 8010f16 <__pow5mult+0x66>
 8010f02:	f240 2171 	movw	r1, #625	; 0x271
 8010f06:	4630      	mov	r0, r6
 8010f08:	f7ff ff12 	bl	8010d30 <__i2b>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f12:	4604      	mov	r4, r0
 8010f14:	6003      	str	r3, [r0, #0]
 8010f16:	f04f 0900 	mov.w	r9, #0
 8010f1a:	07eb      	lsls	r3, r5, #31
 8010f1c:	d50a      	bpl.n	8010f34 <__pow5mult+0x84>
 8010f1e:	4639      	mov	r1, r7
 8010f20:	4622      	mov	r2, r4
 8010f22:	4630      	mov	r0, r6
 8010f24:	f7ff ff1a 	bl	8010d5c <__multiply>
 8010f28:	4639      	mov	r1, r7
 8010f2a:	4680      	mov	r8, r0
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f7ff fe47 	bl	8010bc0 <_Bfree>
 8010f32:	4647      	mov	r7, r8
 8010f34:	106d      	asrs	r5, r5, #1
 8010f36:	d00b      	beq.n	8010f50 <__pow5mult+0xa0>
 8010f38:	6820      	ldr	r0, [r4, #0]
 8010f3a:	b938      	cbnz	r0, 8010f4c <__pow5mult+0x9c>
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	4621      	mov	r1, r4
 8010f40:	4630      	mov	r0, r6
 8010f42:	f7ff ff0b 	bl	8010d5c <__multiply>
 8010f46:	6020      	str	r0, [r4, #0]
 8010f48:	f8c0 9000 	str.w	r9, [r0]
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	e7e4      	b.n	8010f1a <__pow5mult+0x6a>
 8010f50:	4638      	mov	r0, r7
 8010f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f56:	bf00      	nop
 8010f58:	08011f80 	.word	0x08011f80
 8010f5c:	08011dad 	.word	0x08011dad
 8010f60:	08011e30 	.word	0x08011e30

08010f64 <__lshift>:
 8010f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f68:	460c      	mov	r4, r1
 8010f6a:	6849      	ldr	r1, [r1, #4]
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f72:	68a3      	ldr	r3, [r4, #8]
 8010f74:	4607      	mov	r7, r0
 8010f76:	4691      	mov	r9, r2
 8010f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f7c:	f108 0601 	add.w	r6, r8, #1
 8010f80:	42b3      	cmp	r3, r6
 8010f82:	db0b      	blt.n	8010f9c <__lshift+0x38>
 8010f84:	4638      	mov	r0, r7
 8010f86:	f7ff fddb 	bl	8010b40 <_Balloc>
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	b948      	cbnz	r0, 8010fa2 <__lshift+0x3e>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	4b2a      	ldr	r3, [pc, #168]	; (801103c <__lshift+0xd8>)
 8010f92:	482b      	ldr	r0, [pc, #172]	; (8011040 <__lshift+0xdc>)
 8010f94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010f98:	f000 fb26 	bl	80115e8 <__assert_func>
 8010f9c:	3101      	adds	r1, #1
 8010f9e:	005b      	lsls	r3, r3, #1
 8010fa0:	e7ee      	b.n	8010f80 <__lshift+0x1c>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	f100 0114 	add.w	r1, r0, #20
 8010fa8:	f100 0210 	add.w	r2, r0, #16
 8010fac:	4618      	mov	r0, r3
 8010fae:	4553      	cmp	r3, sl
 8010fb0:	db37      	blt.n	8011022 <__lshift+0xbe>
 8010fb2:	6920      	ldr	r0, [r4, #16]
 8010fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fb8:	f104 0314 	add.w	r3, r4, #20
 8010fbc:	f019 091f 	ands.w	r9, r9, #31
 8010fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010fc8:	d02f      	beq.n	801102a <__lshift+0xc6>
 8010fca:	f1c9 0e20 	rsb	lr, r9, #32
 8010fce:	468a      	mov	sl, r1
 8010fd0:	f04f 0c00 	mov.w	ip, #0
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	fa02 f209 	lsl.w	r2, r2, r9
 8010fda:	ea42 020c 	orr.w	r2, r2, ip
 8010fde:	f84a 2b04 	str.w	r2, [sl], #4
 8010fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fe6:	4298      	cmp	r0, r3
 8010fe8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010fec:	d8f2      	bhi.n	8010fd4 <__lshift+0x70>
 8010fee:	1b03      	subs	r3, r0, r4
 8010ff0:	3b15      	subs	r3, #21
 8010ff2:	f023 0303 	bic.w	r3, r3, #3
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	f104 0215 	add.w	r2, r4, #21
 8010ffc:	4290      	cmp	r0, r2
 8010ffe:	bf38      	it	cc
 8011000:	2304      	movcc	r3, #4
 8011002:	f841 c003 	str.w	ip, [r1, r3]
 8011006:	f1bc 0f00 	cmp.w	ip, #0
 801100a:	d001      	beq.n	8011010 <__lshift+0xac>
 801100c:	f108 0602 	add.w	r6, r8, #2
 8011010:	3e01      	subs	r6, #1
 8011012:	4638      	mov	r0, r7
 8011014:	612e      	str	r6, [r5, #16]
 8011016:	4621      	mov	r1, r4
 8011018:	f7ff fdd2 	bl	8010bc0 <_Bfree>
 801101c:	4628      	mov	r0, r5
 801101e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011022:	f842 0f04 	str.w	r0, [r2, #4]!
 8011026:	3301      	adds	r3, #1
 8011028:	e7c1      	b.n	8010fae <__lshift+0x4a>
 801102a:	3904      	subs	r1, #4
 801102c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011030:	f841 2f04 	str.w	r2, [r1, #4]!
 8011034:	4298      	cmp	r0, r3
 8011036:	d8f9      	bhi.n	801102c <__lshift+0xc8>
 8011038:	e7ea      	b.n	8011010 <__lshift+0xac>
 801103a:	bf00      	nop
 801103c:	08011e1f 	.word	0x08011e1f
 8011040:	08011e30 	.word	0x08011e30

08011044 <__mcmp>:
 8011044:	b530      	push	{r4, r5, lr}
 8011046:	6902      	ldr	r2, [r0, #16]
 8011048:	690c      	ldr	r4, [r1, #16]
 801104a:	1b12      	subs	r2, r2, r4
 801104c:	d10e      	bne.n	801106c <__mcmp+0x28>
 801104e:	f100 0314 	add.w	r3, r0, #20
 8011052:	3114      	adds	r1, #20
 8011054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801105c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011064:	42a5      	cmp	r5, r4
 8011066:	d003      	beq.n	8011070 <__mcmp+0x2c>
 8011068:	d305      	bcc.n	8011076 <__mcmp+0x32>
 801106a:	2201      	movs	r2, #1
 801106c:	4610      	mov	r0, r2
 801106e:	bd30      	pop	{r4, r5, pc}
 8011070:	4283      	cmp	r3, r0
 8011072:	d3f3      	bcc.n	801105c <__mcmp+0x18>
 8011074:	e7fa      	b.n	801106c <__mcmp+0x28>
 8011076:	f04f 32ff 	mov.w	r2, #4294967295
 801107a:	e7f7      	b.n	801106c <__mcmp+0x28>

0801107c <__mdiff>:
 801107c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011080:	460c      	mov	r4, r1
 8011082:	4606      	mov	r6, r0
 8011084:	4611      	mov	r1, r2
 8011086:	4620      	mov	r0, r4
 8011088:	4690      	mov	r8, r2
 801108a:	f7ff ffdb 	bl	8011044 <__mcmp>
 801108e:	1e05      	subs	r5, r0, #0
 8011090:	d110      	bne.n	80110b4 <__mdiff+0x38>
 8011092:	4629      	mov	r1, r5
 8011094:	4630      	mov	r0, r6
 8011096:	f7ff fd53 	bl	8010b40 <_Balloc>
 801109a:	b930      	cbnz	r0, 80110aa <__mdiff+0x2e>
 801109c:	4b3a      	ldr	r3, [pc, #232]	; (8011188 <__mdiff+0x10c>)
 801109e:	4602      	mov	r2, r0
 80110a0:	f240 2132 	movw	r1, #562	; 0x232
 80110a4:	4839      	ldr	r0, [pc, #228]	; (801118c <__mdiff+0x110>)
 80110a6:	f000 fa9f 	bl	80115e8 <__assert_func>
 80110aa:	2301      	movs	r3, #1
 80110ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b4:	bfa4      	itt	ge
 80110b6:	4643      	movge	r3, r8
 80110b8:	46a0      	movge	r8, r4
 80110ba:	4630      	mov	r0, r6
 80110bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80110c0:	bfa6      	itte	ge
 80110c2:	461c      	movge	r4, r3
 80110c4:	2500      	movge	r5, #0
 80110c6:	2501      	movlt	r5, #1
 80110c8:	f7ff fd3a 	bl	8010b40 <_Balloc>
 80110cc:	b920      	cbnz	r0, 80110d8 <__mdiff+0x5c>
 80110ce:	4b2e      	ldr	r3, [pc, #184]	; (8011188 <__mdiff+0x10c>)
 80110d0:	4602      	mov	r2, r0
 80110d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80110d6:	e7e5      	b.n	80110a4 <__mdiff+0x28>
 80110d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80110dc:	6926      	ldr	r6, [r4, #16]
 80110de:	60c5      	str	r5, [r0, #12]
 80110e0:	f104 0914 	add.w	r9, r4, #20
 80110e4:	f108 0514 	add.w	r5, r8, #20
 80110e8:	f100 0e14 	add.w	lr, r0, #20
 80110ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80110f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80110f4:	f108 0210 	add.w	r2, r8, #16
 80110f8:	46f2      	mov	sl, lr
 80110fa:	2100      	movs	r1, #0
 80110fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011100:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011104:	fa1f f883 	uxth.w	r8, r3
 8011108:	fa11 f18b 	uxtah	r1, r1, fp
 801110c:	0c1b      	lsrs	r3, r3, #16
 801110e:	eba1 0808 	sub.w	r8, r1, r8
 8011112:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011116:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801111a:	fa1f f888 	uxth.w	r8, r8
 801111e:	1419      	asrs	r1, r3, #16
 8011120:	454e      	cmp	r6, r9
 8011122:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011126:	f84a 3b04 	str.w	r3, [sl], #4
 801112a:	d8e7      	bhi.n	80110fc <__mdiff+0x80>
 801112c:	1b33      	subs	r3, r6, r4
 801112e:	3b15      	subs	r3, #21
 8011130:	f023 0303 	bic.w	r3, r3, #3
 8011134:	3304      	adds	r3, #4
 8011136:	3415      	adds	r4, #21
 8011138:	42a6      	cmp	r6, r4
 801113a:	bf38      	it	cc
 801113c:	2304      	movcc	r3, #4
 801113e:	441d      	add	r5, r3
 8011140:	4473      	add	r3, lr
 8011142:	469e      	mov	lr, r3
 8011144:	462e      	mov	r6, r5
 8011146:	4566      	cmp	r6, ip
 8011148:	d30e      	bcc.n	8011168 <__mdiff+0xec>
 801114a:	f10c 0203 	add.w	r2, ip, #3
 801114e:	1b52      	subs	r2, r2, r5
 8011150:	f022 0203 	bic.w	r2, r2, #3
 8011154:	3d03      	subs	r5, #3
 8011156:	45ac      	cmp	ip, r5
 8011158:	bf38      	it	cc
 801115a:	2200      	movcc	r2, #0
 801115c:	441a      	add	r2, r3
 801115e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011162:	b17b      	cbz	r3, 8011184 <__mdiff+0x108>
 8011164:	6107      	str	r7, [r0, #16]
 8011166:	e7a3      	b.n	80110b0 <__mdiff+0x34>
 8011168:	f856 8b04 	ldr.w	r8, [r6], #4
 801116c:	fa11 f288 	uxtah	r2, r1, r8
 8011170:	1414      	asrs	r4, r2, #16
 8011172:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011176:	b292      	uxth	r2, r2
 8011178:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801117c:	f84e 2b04 	str.w	r2, [lr], #4
 8011180:	1421      	asrs	r1, r4, #16
 8011182:	e7e0      	b.n	8011146 <__mdiff+0xca>
 8011184:	3f01      	subs	r7, #1
 8011186:	e7ea      	b.n	801115e <__mdiff+0xe2>
 8011188:	08011e1f 	.word	0x08011e1f
 801118c:	08011e30 	.word	0x08011e30

08011190 <__d2b>:
 8011190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011194:	4689      	mov	r9, r1
 8011196:	2101      	movs	r1, #1
 8011198:	ec57 6b10 	vmov	r6, r7, d0
 801119c:	4690      	mov	r8, r2
 801119e:	f7ff fccf 	bl	8010b40 <_Balloc>
 80111a2:	4604      	mov	r4, r0
 80111a4:	b930      	cbnz	r0, 80111b4 <__d2b+0x24>
 80111a6:	4602      	mov	r2, r0
 80111a8:	4b25      	ldr	r3, [pc, #148]	; (8011240 <__d2b+0xb0>)
 80111aa:	4826      	ldr	r0, [pc, #152]	; (8011244 <__d2b+0xb4>)
 80111ac:	f240 310a 	movw	r1, #778	; 0x30a
 80111b0:	f000 fa1a 	bl	80115e8 <__assert_func>
 80111b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80111b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80111bc:	bb35      	cbnz	r5, 801120c <__d2b+0x7c>
 80111be:	2e00      	cmp	r6, #0
 80111c0:	9301      	str	r3, [sp, #4]
 80111c2:	d028      	beq.n	8011216 <__d2b+0x86>
 80111c4:	4668      	mov	r0, sp
 80111c6:	9600      	str	r6, [sp, #0]
 80111c8:	f7ff fd82 	bl	8010cd0 <__lo0bits>
 80111cc:	9900      	ldr	r1, [sp, #0]
 80111ce:	b300      	cbz	r0, 8011212 <__d2b+0x82>
 80111d0:	9a01      	ldr	r2, [sp, #4]
 80111d2:	f1c0 0320 	rsb	r3, r0, #32
 80111d6:	fa02 f303 	lsl.w	r3, r2, r3
 80111da:	430b      	orrs	r3, r1
 80111dc:	40c2      	lsrs	r2, r0
 80111de:	6163      	str	r3, [r4, #20]
 80111e0:	9201      	str	r2, [sp, #4]
 80111e2:	9b01      	ldr	r3, [sp, #4]
 80111e4:	61a3      	str	r3, [r4, #24]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	bf14      	ite	ne
 80111ea:	2202      	movne	r2, #2
 80111ec:	2201      	moveq	r2, #1
 80111ee:	6122      	str	r2, [r4, #16]
 80111f0:	b1d5      	cbz	r5, 8011228 <__d2b+0x98>
 80111f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80111f6:	4405      	add	r5, r0
 80111f8:	f8c9 5000 	str.w	r5, [r9]
 80111fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011200:	f8c8 0000 	str.w	r0, [r8]
 8011204:	4620      	mov	r0, r4
 8011206:	b003      	add	sp, #12
 8011208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011210:	e7d5      	b.n	80111be <__d2b+0x2e>
 8011212:	6161      	str	r1, [r4, #20]
 8011214:	e7e5      	b.n	80111e2 <__d2b+0x52>
 8011216:	a801      	add	r0, sp, #4
 8011218:	f7ff fd5a 	bl	8010cd0 <__lo0bits>
 801121c:	9b01      	ldr	r3, [sp, #4]
 801121e:	6163      	str	r3, [r4, #20]
 8011220:	2201      	movs	r2, #1
 8011222:	6122      	str	r2, [r4, #16]
 8011224:	3020      	adds	r0, #32
 8011226:	e7e3      	b.n	80111f0 <__d2b+0x60>
 8011228:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801122c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011230:	f8c9 0000 	str.w	r0, [r9]
 8011234:	6918      	ldr	r0, [r3, #16]
 8011236:	f7ff fd2b 	bl	8010c90 <__hi0bits>
 801123a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801123e:	e7df      	b.n	8011200 <__d2b+0x70>
 8011240:	08011e1f 	.word	0x08011e1f
 8011244:	08011e30 	.word	0x08011e30

08011248 <_calloc_r>:
 8011248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801124a:	fba1 2402 	umull	r2, r4, r1, r2
 801124e:	b94c      	cbnz	r4, 8011264 <_calloc_r+0x1c>
 8011250:	4611      	mov	r1, r2
 8011252:	9201      	str	r2, [sp, #4]
 8011254:	f7fd fd92 	bl	800ed7c <_malloc_r>
 8011258:	9a01      	ldr	r2, [sp, #4]
 801125a:	4605      	mov	r5, r0
 801125c:	b930      	cbnz	r0, 801126c <_calloc_r+0x24>
 801125e:	4628      	mov	r0, r5
 8011260:	b003      	add	sp, #12
 8011262:	bd30      	pop	{r4, r5, pc}
 8011264:	220c      	movs	r2, #12
 8011266:	6002      	str	r2, [r0, #0]
 8011268:	2500      	movs	r5, #0
 801126a:	e7f8      	b.n	801125e <_calloc_r+0x16>
 801126c:	4621      	mov	r1, r4
 801126e:	f7fd fd5c 	bl	800ed2a <memset>
 8011272:	e7f4      	b.n	801125e <_calloc_r+0x16>

08011274 <_free_r>:
 8011274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011276:	2900      	cmp	r1, #0
 8011278:	d044      	beq.n	8011304 <_free_r+0x90>
 801127a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801127e:	9001      	str	r0, [sp, #4]
 8011280:	2b00      	cmp	r3, #0
 8011282:	f1a1 0404 	sub.w	r4, r1, #4
 8011286:	bfb8      	it	lt
 8011288:	18e4      	addlt	r4, r4, r3
 801128a:	f7ff fc4d 	bl	8010b28 <__malloc_lock>
 801128e:	4a1e      	ldr	r2, [pc, #120]	; (8011308 <_free_r+0x94>)
 8011290:	9801      	ldr	r0, [sp, #4]
 8011292:	6813      	ldr	r3, [r2, #0]
 8011294:	b933      	cbnz	r3, 80112a4 <_free_r+0x30>
 8011296:	6063      	str	r3, [r4, #4]
 8011298:	6014      	str	r4, [r2, #0]
 801129a:	b003      	add	sp, #12
 801129c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112a0:	f7ff bc48 	b.w	8010b34 <__malloc_unlock>
 80112a4:	42a3      	cmp	r3, r4
 80112a6:	d908      	bls.n	80112ba <_free_r+0x46>
 80112a8:	6825      	ldr	r5, [r4, #0]
 80112aa:	1961      	adds	r1, r4, r5
 80112ac:	428b      	cmp	r3, r1
 80112ae:	bf01      	itttt	eq
 80112b0:	6819      	ldreq	r1, [r3, #0]
 80112b2:	685b      	ldreq	r3, [r3, #4]
 80112b4:	1949      	addeq	r1, r1, r5
 80112b6:	6021      	streq	r1, [r4, #0]
 80112b8:	e7ed      	b.n	8011296 <_free_r+0x22>
 80112ba:	461a      	mov	r2, r3
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	b10b      	cbz	r3, 80112c4 <_free_r+0x50>
 80112c0:	42a3      	cmp	r3, r4
 80112c2:	d9fa      	bls.n	80112ba <_free_r+0x46>
 80112c4:	6811      	ldr	r1, [r2, #0]
 80112c6:	1855      	adds	r5, r2, r1
 80112c8:	42a5      	cmp	r5, r4
 80112ca:	d10b      	bne.n	80112e4 <_free_r+0x70>
 80112cc:	6824      	ldr	r4, [r4, #0]
 80112ce:	4421      	add	r1, r4
 80112d0:	1854      	adds	r4, r2, r1
 80112d2:	42a3      	cmp	r3, r4
 80112d4:	6011      	str	r1, [r2, #0]
 80112d6:	d1e0      	bne.n	801129a <_free_r+0x26>
 80112d8:	681c      	ldr	r4, [r3, #0]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	6053      	str	r3, [r2, #4]
 80112de:	4421      	add	r1, r4
 80112e0:	6011      	str	r1, [r2, #0]
 80112e2:	e7da      	b.n	801129a <_free_r+0x26>
 80112e4:	d902      	bls.n	80112ec <_free_r+0x78>
 80112e6:	230c      	movs	r3, #12
 80112e8:	6003      	str	r3, [r0, #0]
 80112ea:	e7d6      	b.n	801129a <_free_r+0x26>
 80112ec:	6825      	ldr	r5, [r4, #0]
 80112ee:	1961      	adds	r1, r4, r5
 80112f0:	428b      	cmp	r3, r1
 80112f2:	bf04      	itt	eq
 80112f4:	6819      	ldreq	r1, [r3, #0]
 80112f6:	685b      	ldreq	r3, [r3, #4]
 80112f8:	6063      	str	r3, [r4, #4]
 80112fa:	bf04      	itt	eq
 80112fc:	1949      	addeq	r1, r1, r5
 80112fe:	6021      	streq	r1, [r4, #0]
 8011300:	6054      	str	r4, [r2, #4]
 8011302:	e7ca      	b.n	801129a <_free_r+0x26>
 8011304:	b003      	add	sp, #12
 8011306:	bd30      	pop	{r4, r5, pc}
 8011308:	20006bd8 	.word	0x20006bd8

0801130c <__ssputs_r>:
 801130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011310:	688e      	ldr	r6, [r1, #8]
 8011312:	429e      	cmp	r6, r3
 8011314:	4682      	mov	sl, r0
 8011316:	460c      	mov	r4, r1
 8011318:	4690      	mov	r8, r2
 801131a:	461f      	mov	r7, r3
 801131c:	d838      	bhi.n	8011390 <__ssputs_r+0x84>
 801131e:	898a      	ldrh	r2, [r1, #12]
 8011320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011324:	d032      	beq.n	801138c <__ssputs_r+0x80>
 8011326:	6825      	ldr	r5, [r4, #0]
 8011328:	6909      	ldr	r1, [r1, #16]
 801132a:	eba5 0901 	sub.w	r9, r5, r1
 801132e:	6965      	ldr	r5, [r4, #20]
 8011330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011338:	3301      	adds	r3, #1
 801133a:	444b      	add	r3, r9
 801133c:	106d      	asrs	r5, r5, #1
 801133e:	429d      	cmp	r5, r3
 8011340:	bf38      	it	cc
 8011342:	461d      	movcc	r5, r3
 8011344:	0553      	lsls	r3, r2, #21
 8011346:	d531      	bpl.n	80113ac <__ssputs_r+0xa0>
 8011348:	4629      	mov	r1, r5
 801134a:	f7fd fd17 	bl	800ed7c <_malloc_r>
 801134e:	4606      	mov	r6, r0
 8011350:	b950      	cbnz	r0, 8011368 <__ssputs_r+0x5c>
 8011352:	230c      	movs	r3, #12
 8011354:	f8ca 3000 	str.w	r3, [sl]
 8011358:	89a3      	ldrh	r3, [r4, #12]
 801135a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801135e:	81a3      	strh	r3, [r4, #12]
 8011360:	f04f 30ff 	mov.w	r0, #4294967295
 8011364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011368:	6921      	ldr	r1, [r4, #16]
 801136a:	464a      	mov	r2, r9
 801136c:	f7fd fccf 	bl	800ed0e <memcpy>
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801137a:	81a3      	strh	r3, [r4, #12]
 801137c:	6126      	str	r6, [r4, #16]
 801137e:	6165      	str	r5, [r4, #20]
 8011380:	444e      	add	r6, r9
 8011382:	eba5 0509 	sub.w	r5, r5, r9
 8011386:	6026      	str	r6, [r4, #0]
 8011388:	60a5      	str	r5, [r4, #8]
 801138a:	463e      	mov	r6, r7
 801138c:	42be      	cmp	r6, r7
 801138e:	d900      	bls.n	8011392 <__ssputs_r+0x86>
 8011390:	463e      	mov	r6, r7
 8011392:	6820      	ldr	r0, [r4, #0]
 8011394:	4632      	mov	r2, r6
 8011396:	4641      	mov	r1, r8
 8011398:	f000 f98a 	bl	80116b0 <memmove>
 801139c:	68a3      	ldr	r3, [r4, #8]
 801139e:	1b9b      	subs	r3, r3, r6
 80113a0:	60a3      	str	r3, [r4, #8]
 80113a2:	6823      	ldr	r3, [r4, #0]
 80113a4:	4433      	add	r3, r6
 80113a6:	6023      	str	r3, [r4, #0]
 80113a8:	2000      	movs	r0, #0
 80113aa:	e7db      	b.n	8011364 <__ssputs_r+0x58>
 80113ac:	462a      	mov	r2, r5
 80113ae:	f000 f999 	bl	80116e4 <_realloc_r>
 80113b2:	4606      	mov	r6, r0
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d1e1      	bne.n	801137c <__ssputs_r+0x70>
 80113b8:	6921      	ldr	r1, [r4, #16]
 80113ba:	4650      	mov	r0, sl
 80113bc:	f7ff ff5a 	bl	8011274 <_free_r>
 80113c0:	e7c7      	b.n	8011352 <__ssputs_r+0x46>
	...

080113c4 <_svfiprintf_r>:
 80113c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c8:	4698      	mov	r8, r3
 80113ca:	898b      	ldrh	r3, [r1, #12]
 80113cc:	061b      	lsls	r3, r3, #24
 80113ce:	b09d      	sub	sp, #116	; 0x74
 80113d0:	4607      	mov	r7, r0
 80113d2:	460d      	mov	r5, r1
 80113d4:	4614      	mov	r4, r2
 80113d6:	d50e      	bpl.n	80113f6 <_svfiprintf_r+0x32>
 80113d8:	690b      	ldr	r3, [r1, #16]
 80113da:	b963      	cbnz	r3, 80113f6 <_svfiprintf_r+0x32>
 80113dc:	2140      	movs	r1, #64	; 0x40
 80113de:	f7fd fccd 	bl	800ed7c <_malloc_r>
 80113e2:	6028      	str	r0, [r5, #0]
 80113e4:	6128      	str	r0, [r5, #16]
 80113e6:	b920      	cbnz	r0, 80113f2 <_svfiprintf_r+0x2e>
 80113e8:	230c      	movs	r3, #12
 80113ea:	603b      	str	r3, [r7, #0]
 80113ec:	f04f 30ff 	mov.w	r0, #4294967295
 80113f0:	e0d1      	b.n	8011596 <_svfiprintf_r+0x1d2>
 80113f2:	2340      	movs	r3, #64	; 0x40
 80113f4:	616b      	str	r3, [r5, #20]
 80113f6:	2300      	movs	r3, #0
 80113f8:	9309      	str	r3, [sp, #36]	; 0x24
 80113fa:	2320      	movs	r3, #32
 80113fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011400:	f8cd 800c 	str.w	r8, [sp, #12]
 8011404:	2330      	movs	r3, #48	; 0x30
 8011406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80115b0 <_svfiprintf_r+0x1ec>
 801140a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801140e:	f04f 0901 	mov.w	r9, #1
 8011412:	4623      	mov	r3, r4
 8011414:	469a      	mov	sl, r3
 8011416:	f813 2b01 	ldrb.w	r2, [r3], #1
 801141a:	b10a      	cbz	r2, 8011420 <_svfiprintf_r+0x5c>
 801141c:	2a25      	cmp	r2, #37	; 0x25
 801141e:	d1f9      	bne.n	8011414 <_svfiprintf_r+0x50>
 8011420:	ebba 0b04 	subs.w	fp, sl, r4
 8011424:	d00b      	beq.n	801143e <_svfiprintf_r+0x7a>
 8011426:	465b      	mov	r3, fp
 8011428:	4622      	mov	r2, r4
 801142a:	4629      	mov	r1, r5
 801142c:	4638      	mov	r0, r7
 801142e:	f7ff ff6d 	bl	801130c <__ssputs_r>
 8011432:	3001      	adds	r0, #1
 8011434:	f000 80aa 	beq.w	801158c <_svfiprintf_r+0x1c8>
 8011438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801143a:	445a      	add	r2, fp
 801143c:	9209      	str	r2, [sp, #36]	; 0x24
 801143e:	f89a 3000 	ldrb.w	r3, [sl]
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 80a2 	beq.w	801158c <_svfiprintf_r+0x1c8>
 8011448:	2300      	movs	r3, #0
 801144a:	f04f 32ff 	mov.w	r2, #4294967295
 801144e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011452:	f10a 0a01 	add.w	sl, sl, #1
 8011456:	9304      	str	r3, [sp, #16]
 8011458:	9307      	str	r3, [sp, #28]
 801145a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801145e:	931a      	str	r3, [sp, #104]	; 0x68
 8011460:	4654      	mov	r4, sl
 8011462:	2205      	movs	r2, #5
 8011464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011468:	4851      	ldr	r0, [pc, #324]	; (80115b0 <_svfiprintf_r+0x1ec>)
 801146a:	f7ee fec1 	bl	80001f0 <memchr>
 801146e:	9a04      	ldr	r2, [sp, #16]
 8011470:	b9d8      	cbnz	r0, 80114aa <_svfiprintf_r+0xe6>
 8011472:	06d0      	lsls	r0, r2, #27
 8011474:	bf44      	itt	mi
 8011476:	2320      	movmi	r3, #32
 8011478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801147c:	0711      	lsls	r1, r2, #28
 801147e:	bf44      	itt	mi
 8011480:	232b      	movmi	r3, #43	; 0x2b
 8011482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011486:	f89a 3000 	ldrb.w	r3, [sl]
 801148a:	2b2a      	cmp	r3, #42	; 0x2a
 801148c:	d015      	beq.n	80114ba <_svfiprintf_r+0xf6>
 801148e:	9a07      	ldr	r2, [sp, #28]
 8011490:	4654      	mov	r4, sl
 8011492:	2000      	movs	r0, #0
 8011494:	f04f 0c0a 	mov.w	ip, #10
 8011498:	4621      	mov	r1, r4
 801149a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801149e:	3b30      	subs	r3, #48	; 0x30
 80114a0:	2b09      	cmp	r3, #9
 80114a2:	d94e      	bls.n	8011542 <_svfiprintf_r+0x17e>
 80114a4:	b1b0      	cbz	r0, 80114d4 <_svfiprintf_r+0x110>
 80114a6:	9207      	str	r2, [sp, #28]
 80114a8:	e014      	b.n	80114d4 <_svfiprintf_r+0x110>
 80114aa:	eba0 0308 	sub.w	r3, r0, r8
 80114ae:	fa09 f303 	lsl.w	r3, r9, r3
 80114b2:	4313      	orrs	r3, r2
 80114b4:	9304      	str	r3, [sp, #16]
 80114b6:	46a2      	mov	sl, r4
 80114b8:	e7d2      	b.n	8011460 <_svfiprintf_r+0x9c>
 80114ba:	9b03      	ldr	r3, [sp, #12]
 80114bc:	1d19      	adds	r1, r3, #4
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	9103      	str	r1, [sp, #12]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	bfbb      	ittet	lt
 80114c6:	425b      	neglt	r3, r3
 80114c8:	f042 0202 	orrlt.w	r2, r2, #2
 80114cc:	9307      	strge	r3, [sp, #28]
 80114ce:	9307      	strlt	r3, [sp, #28]
 80114d0:	bfb8      	it	lt
 80114d2:	9204      	strlt	r2, [sp, #16]
 80114d4:	7823      	ldrb	r3, [r4, #0]
 80114d6:	2b2e      	cmp	r3, #46	; 0x2e
 80114d8:	d10c      	bne.n	80114f4 <_svfiprintf_r+0x130>
 80114da:	7863      	ldrb	r3, [r4, #1]
 80114dc:	2b2a      	cmp	r3, #42	; 0x2a
 80114de:	d135      	bne.n	801154c <_svfiprintf_r+0x188>
 80114e0:	9b03      	ldr	r3, [sp, #12]
 80114e2:	1d1a      	adds	r2, r3, #4
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	9203      	str	r2, [sp, #12]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	bfb8      	it	lt
 80114ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80114f0:	3402      	adds	r4, #2
 80114f2:	9305      	str	r3, [sp, #20]
 80114f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80115c0 <_svfiprintf_r+0x1fc>
 80114f8:	7821      	ldrb	r1, [r4, #0]
 80114fa:	2203      	movs	r2, #3
 80114fc:	4650      	mov	r0, sl
 80114fe:	f7ee fe77 	bl	80001f0 <memchr>
 8011502:	b140      	cbz	r0, 8011516 <_svfiprintf_r+0x152>
 8011504:	2340      	movs	r3, #64	; 0x40
 8011506:	eba0 000a 	sub.w	r0, r0, sl
 801150a:	fa03 f000 	lsl.w	r0, r3, r0
 801150e:	9b04      	ldr	r3, [sp, #16]
 8011510:	4303      	orrs	r3, r0
 8011512:	3401      	adds	r4, #1
 8011514:	9304      	str	r3, [sp, #16]
 8011516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801151a:	4826      	ldr	r0, [pc, #152]	; (80115b4 <_svfiprintf_r+0x1f0>)
 801151c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011520:	2206      	movs	r2, #6
 8011522:	f7ee fe65 	bl	80001f0 <memchr>
 8011526:	2800      	cmp	r0, #0
 8011528:	d038      	beq.n	801159c <_svfiprintf_r+0x1d8>
 801152a:	4b23      	ldr	r3, [pc, #140]	; (80115b8 <_svfiprintf_r+0x1f4>)
 801152c:	bb1b      	cbnz	r3, 8011576 <_svfiprintf_r+0x1b2>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	3307      	adds	r3, #7
 8011532:	f023 0307 	bic.w	r3, r3, #7
 8011536:	3308      	adds	r3, #8
 8011538:	9303      	str	r3, [sp, #12]
 801153a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801153c:	4433      	add	r3, r6
 801153e:	9309      	str	r3, [sp, #36]	; 0x24
 8011540:	e767      	b.n	8011412 <_svfiprintf_r+0x4e>
 8011542:	fb0c 3202 	mla	r2, ip, r2, r3
 8011546:	460c      	mov	r4, r1
 8011548:	2001      	movs	r0, #1
 801154a:	e7a5      	b.n	8011498 <_svfiprintf_r+0xd4>
 801154c:	2300      	movs	r3, #0
 801154e:	3401      	adds	r4, #1
 8011550:	9305      	str	r3, [sp, #20]
 8011552:	4619      	mov	r1, r3
 8011554:	f04f 0c0a 	mov.w	ip, #10
 8011558:	4620      	mov	r0, r4
 801155a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801155e:	3a30      	subs	r2, #48	; 0x30
 8011560:	2a09      	cmp	r2, #9
 8011562:	d903      	bls.n	801156c <_svfiprintf_r+0x1a8>
 8011564:	2b00      	cmp	r3, #0
 8011566:	d0c5      	beq.n	80114f4 <_svfiprintf_r+0x130>
 8011568:	9105      	str	r1, [sp, #20]
 801156a:	e7c3      	b.n	80114f4 <_svfiprintf_r+0x130>
 801156c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011570:	4604      	mov	r4, r0
 8011572:	2301      	movs	r3, #1
 8011574:	e7f0      	b.n	8011558 <_svfiprintf_r+0x194>
 8011576:	ab03      	add	r3, sp, #12
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	462a      	mov	r2, r5
 801157c:	4b0f      	ldr	r3, [pc, #60]	; (80115bc <_svfiprintf_r+0x1f8>)
 801157e:	a904      	add	r1, sp, #16
 8011580:	4638      	mov	r0, r7
 8011582:	f7fd fd0f 	bl	800efa4 <_printf_float>
 8011586:	1c42      	adds	r2, r0, #1
 8011588:	4606      	mov	r6, r0
 801158a:	d1d6      	bne.n	801153a <_svfiprintf_r+0x176>
 801158c:	89ab      	ldrh	r3, [r5, #12]
 801158e:	065b      	lsls	r3, r3, #25
 8011590:	f53f af2c 	bmi.w	80113ec <_svfiprintf_r+0x28>
 8011594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011596:	b01d      	add	sp, #116	; 0x74
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	ab03      	add	r3, sp, #12
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	462a      	mov	r2, r5
 80115a2:	4b06      	ldr	r3, [pc, #24]	; (80115bc <_svfiprintf_r+0x1f8>)
 80115a4:	a904      	add	r1, sp, #16
 80115a6:	4638      	mov	r0, r7
 80115a8:	f7fd ffa0 	bl	800f4ec <_printf_i>
 80115ac:	e7eb      	b.n	8011586 <_svfiprintf_r+0x1c2>
 80115ae:	bf00      	nop
 80115b0:	08011f8c 	.word	0x08011f8c
 80115b4:	08011f96 	.word	0x08011f96
 80115b8:	0800efa5 	.word	0x0800efa5
 80115bc:	0801130d 	.word	0x0801130d
 80115c0:	08011f92 	.word	0x08011f92

080115c4 <_read_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4d07      	ldr	r5, [pc, #28]	; (80115e4 <_read_r+0x20>)
 80115c8:	4604      	mov	r4, r0
 80115ca:	4608      	mov	r0, r1
 80115cc:	4611      	mov	r1, r2
 80115ce:	2200      	movs	r2, #0
 80115d0:	602a      	str	r2, [r5, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f7f1 ff08 	bl	80033e8 <_read>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	d102      	bne.n	80115e2 <_read_r+0x1e>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	b103      	cbz	r3, 80115e2 <_read_r+0x1e>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	20006be0 	.word	0x20006be0

080115e8 <__assert_func>:
 80115e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115ea:	4614      	mov	r4, r2
 80115ec:	461a      	mov	r2, r3
 80115ee:	4b09      	ldr	r3, [pc, #36]	; (8011614 <__assert_func+0x2c>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4605      	mov	r5, r0
 80115f4:	68d8      	ldr	r0, [r3, #12]
 80115f6:	b14c      	cbz	r4, 801160c <__assert_func+0x24>
 80115f8:	4b07      	ldr	r3, [pc, #28]	; (8011618 <__assert_func+0x30>)
 80115fa:	9100      	str	r1, [sp, #0]
 80115fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011600:	4906      	ldr	r1, [pc, #24]	; (801161c <__assert_func+0x34>)
 8011602:	462b      	mov	r3, r5
 8011604:	f000 f80e 	bl	8011624 <fiprintf>
 8011608:	f000 fa01 	bl	8011a0e <abort>
 801160c:	4b04      	ldr	r3, [pc, #16]	; (8011620 <__assert_func+0x38>)
 801160e:	461c      	mov	r4, r3
 8011610:	e7f3      	b.n	80115fa <__assert_func+0x12>
 8011612:	bf00      	nop
 8011614:	20000134 	.word	0x20000134
 8011618:	08011f9d 	.word	0x08011f9d
 801161c:	08011faa 	.word	0x08011faa
 8011620:	08011fd8 	.word	0x08011fd8

08011624 <fiprintf>:
 8011624:	b40e      	push	{r1, r2, r3}
 8011626:	b503      	push	{r0, r1, lr}
 8011628:	4601      	mov	r1, r0
 801162a:	ab03      	add	r3, sp, #12
 801162c:	4805      	ldr	r0, [pc, #20]	; (8011644 <fiprintf+0x20>)
 801162e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011632:	6800      	ldr	r0, [r0, #0]
 8011634:	9301      	str	r3, [sp, #4]
 8011636:	f000 f8ad 	bl	8011794 <_vfiprintf_r>
 801163a:	b002      	add	sp, #8
 801163c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011640:	b003      	add	sp, #12
 8011642:	4770      	bx	lr
 8011644:	20000134 	.word	0x20000134

08011648 <_fstat_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d07      	ldr	r5, [pc, #28]	; (8011668 <_fstat_r+0x20>)
 801164c:	2300      	movs	r3, #0
 801164e:	4604      	mov	r4, r0
 8011650:	4608      	mov	r0, r1
 8011652:	4611      	mov	r1, r2
 8011654:	602b      	str	r3, [r5, #0]
 8011656:	f7f1 ff0c 	bl	8003472 <_fstat>
 801165a:	1c43      	adds	r3, r0, #1
 801165c:	d102      	bne.n	8011664 <_fstat_r+0x1c>
 801165e:	682b      	ldr	r3, [r5, #0]
 8011660:	b103      	cbz	r3, 8011664 <_fstat_r+0x1c>
 8011662:	6023      	str	r3, [r4, #0]
 8011664:	bd38      	pop	{r3, r4, r5, pc}
 8011666:	bf00      	nop
 8011668:	20006be0 	.word	0x20006be0

0801166c <_isatty_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4d06      	ldr	r5, [pc, #24]	; (8011688 <_isatty_r+0x1c>)
 8011670:	2300      	movs	r3, #0
 8011672:	4604      	mov	r4, r0
 8011674:	4608      	mov	r0, r1
 8011676:	602b      	str	r3, [r5, #0]
 8011678:	f7f1 ff0b 	bl	8003492 <_isatty>
 801167c:	1c43      	adds	r3, r0, #1
 801167e:	d102      	bne.n	8011686 <_isatty_r+0x1a>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	b103      	cbz	r3, 8011686 <_isatty_r+0x1a>
 8011684:	6023      	str	r3, [r4, #0]
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	20006be0 	.word	0x20006be0

0801168c <__ascii_mbtowc>:
 801168c:	b082      	sub	sp, #8
 801168e:	b901      	cbnz	r1, 8011692 <__ascii_mbtowc+0x6>
 8011690:	a901      	add	r1, sp, #4
 8011692:	b142      	cbz	r2, 80116a6 <__ascii_mbtowc+0x1a>
 8011694:	b14b      	cbz	r3, 80116aa <__ascii_mbtowc+0x1e>
 8011696:	7813      	ldrb	r3, [r2, #0]
 8011698:	600b      	str	r3, [r1, #0]
 801169a:	7812      	ldrb	r2, [r2, #0]
 801169c:	1e10      	subs	r0, r2, #0
 801169e:	bf18      	it	ne
 80116a0:	2001      	movne	r0, #1
 80116a2:	b002      	add	sp, #8
 80116a4:	4770      	bx	lr
 80116a6:	4610      	mov	r0, r2
 80116a8:	e7fb      	b.n	80116a2 <__ascii_mbtowc+0x16>
 80116aa:	f06f 0001 	mvn.w	r0, #1
 80116ae:	e7f8      	b.n	80116a2 <__ascii_mbtowc+0x16>

080116b0 <memmove>:
 80116b0:	4288      	cmp	r0, r1
 80116b2:	b510      	push	{r4, lr}
 80116b4:	eb01 0402 	add.w	r4, r1, r2
 80116b8:	d902      	bls.n	80116c0 <memmove+0x10>
 80116ba:	4284      	cmp	r4, r0
 80116bc:	4623      	mov	r3, r4
 80116be:	d807      	bhi.n	80116d0 <memmove+0x20>
 80116c0:	1e43      	subs	r3, r0, #1
 80116c2:	42a1      	cmp	r1, r4
 80116c4:	d008      	beq.n	80116d8 <memmove+0x28>
 80116c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116ce:	e7f8      	b.n	80116c2 <memmove+0x12>
 80116d0:	4402      	add	r2, r0
 80116d2:	4601      	mov	r1, r0
 80116d4:	428a      	cmp	r2, r1
 80116d6:	d100      	bne.n	80116da <memmove+0x2a>
 80116d8:	bd10      	pop	{r4, pc}
 80116da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116e2:	e7f7      	b.n	80116d4 <memmove+0x24>

080116e4 <_realloc_r>:
 80116e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e8:	4680      	mov	r8, r0
 80116ea:	4614      	mov	r4, r2
 80116ec:	460e      	mov	r6, r1
 80116ee:	b921      	cbnz	r1, 80116fa <_realloc_r+0x16>
 80116f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116f4:	4611      	mov	r1, r2
 80116f6:	f7fd bb41 	b.w	800ed7c <_malloc_r>
 80116fa:	b92a      	cbnz	r2, 8011708 <_realloc_r+0x24>
 80116fc:	f7ff fdba 	bl	8011274 <_free_r>
 8011700:	4625      	mov	r5, r4
 8011702:	4628      	mov	r0, r5
 8011704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011708:	f000 f988 	bl	8011a1c <_malloc_usable_size_r>
 801170c:	4284      	cmp	r4, r0
 801170e:	4607      	mov	r7, r0
 8011710:	d802      	bhi.n	8011718 <_realloc_r+0x34>
 8011712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011716:	d812      	bhi.n	801173e <_realloc_r+0x5a>
 8011718:	4621      	mov	r1, r4
 801171a:	4640      	mov	r0, r8
 801171c:	f7fd fb2e 	bl	800ed7c <_malloc_r>
 8011720:	4605      	mov	r5, r0
 8011722:	2800      	cmp	r0, #0
 8011724:	d0ed      	beq.n	8011702 <_realloc_r+0x1e>
 8011726:	42bc      	cmp	r4, r7
 8011728:	4622      	mov	r2, r4
 801172a:	4631      	mov	r1, r6
 801172c:	bf28      	it	cs
 801172e:	463a      	movcs	r2, r7
 8011730:	f7fd faed 	bl	800ed0e <memcpy>
 8011734:	4631      	mov	r1, r6
 8011736:	4640      	mov	r0, r8
 8011738:	f7ff fd9c 	bl	8011274 <_free_r>
 801173c:	e7e1      	b.n	8011702 <_realloc_r+0x1e>
 801173e:	4635      	mov	r5, r6
 8011740:	e7df      	b.n	8011702 <_realloc_r+0x1e>

08011742 <__sfputc_r>:
 8011742:	6893      	ldr	r3, [r2, #8]
 8011744:	3b01      	subs	r3, #1
 8011746:	2b00      	cmp	r3, #0
 8011748:	b410      	push	{r4}
 801174a:	6093      	str	r3, [r2, #8]
 801174c:	da08      	bge.n	8011760 <__sfputc_r+0x1e>
 801174e:	6994      	ldr	r4, [r2, #24]
 8011750:	42a3      	cmp	r3, r4
 8011752:	db01      	blt.n	8011758 <__sfputc_r+0x16>
 8011754:	290a      	cmp	r1, #10
 8011756:	d103      	bne.n	8011760 <__sfputc_r+0x1e>
 8011758:	f85d 4b04 	ldr.w	r4, [sp], #4
 801175c:	f7fe b940 	b.w	800f9e0 <__swbuf_r>
 8011760:	6813      	ldr	r3, [r2, #0]
 8011762:	1c58      	adds	r0, r3, #1
 8011764:	6010      	str	r0, [r2, #0]
 8011766:	7019      	strb	r1, [r3, #0]
 8011768:	4608      	mov	r0, r1
 801176a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801176e:	4770      	bx	lr

08011770 <__sfputs_r>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	4606      	mov	r6, r0
 8011774:	460f      	mov	r7, r1
 8011776:	4614      	mov	r4, r2
 8011778:	18d5      	adds	r5, r2, r3
 801177a:	42ac      	cmp	r4, r5
 801177c:	d101      	bne.n	8011782 <__sfputs_r+0x12>
 801177e:	2000      	movs	r0, #0
 8011780:	e007      	b.n	8011792 <__sfputs_r+0x22>
 8011782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011786:	463a      	mov	r2, r7
 8011788:	4630      	mov	r0, r6
 801178a:	f7ff ffda 	bl	8011742 <__sfputc_r>
 801178e:	1c43      	adds	r3, r0, #1
 8011790:	d1f3      	bne.n	801177a <__sfputs_r+0xa>
 8011792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011794 <_vfiprintf_r>:
 8011794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011798:	460d      	mov	r5, r1
 801179a:	b09d      	sub	sp, #116	; 0x74
 801179c:	4614      	mov	r4, r2
 801179e:	4698      	mov	r8, r3
 80117a0:	4606      	mov	r6, r0
 80117a2:	b118      	cbz	r0, 80117ac <_vfiprintf_r+0x18>
 80117a4:	6983      	ldr	r3, [r0, #24]
 80117a6:	b90b      	cbnz	r3, 80117ac <_vfiprintf_r+0x18>
 80117a8:	f7fd f9ec 	bl	800eb84 <__sinit>
 80117ac:	4b89      	ldr	r3, [pc, #548]	; (80119d4 <_vfiprintf_r+0x240>)
 80117ae:	429d      	cmp	r5, r3
 80117b0:	d11b      	bne.n	80117ea <_vfiprintf_r+0x56>
 80117b2:	6875      	ldr	r5, [r6, #4]
 80117b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117b6:	07d9      	lsls	r1, r3, #31
 80117b8:	d405      	bmi.n	80117c6 <_vfiprintf_r+0x32>
 80117ba:	89ab      	ldrh	r3, [r5, #12]
 80117bc:	059a      	lsls	r2, r3, #22
 80117be:	d402      	bmi.n	80117c6 <_vfiprintf_r+0x32>
 80117c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117c2:	f7fd faa2 	bl	800ed0a <__retarget_lock_acquire_recursive>
 80117c6:	89ab      	ldrh	r3, [r5, #12]
 80117c8:	071b      	lsls	r3, r3, #28
 80117ca:	d501      	bpl.n	80117d0 <_vfiprintf_r+0x3c>
 80117cc:	692b      	ldr	r3, [r5, #16]
 80117ce:	b9eb      	cbnz	r3, 801180c <_vfiprintf_r+0x78>
 80117d0:	4629      	mov	r1, r5
 80117d2:	4630      	mov	r0, r6
 80117d4:	f7fe f968 	bl	800faa8 <__swsetup_r>
 80117d8:	b1c0      	cbz	r0, 801180c <_vfiprintf_r+0x78>
 80117da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117dc:	07dc      	lsls	r4, r3, #31
 80117de:	d50e      	bpl.n	80117fe <_vfiprintf_r+0x6a>
 80117e0:	f04f 30ff 	mov.w	r0, #4294967295
 80117e4:	b01d      	add	sp, #116	; 0x74
 80117e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ea:	4b7b      	ldr	r3, [pc, #492]	; (80119d8 <_vfiprintf_r+0x244>)
 80117ec:	429d      	cmp	r5, r3
 80117ee:	d101      	bne.n	80117f4 <_vfiprintf_r+0x60>
 80117f0:	68b5      	ldr	r5, [r6, #8]
 80117f2:	e7df      	b.n	80117b4 <_vfiprintf_r+0x20>
 80117f4:	4b79      	ldr	r3, [pc, #484]	; (80119dc <_vfiprintf_r+0x248>)
 80117f6:	429d      	cmp	r5, r3
 80117f8:	bf08      	it	eq
 80117fa:	68f5      	ldreq	r5, [r6, #12]
 80117fc:	e7da      	b.n	80117b4 <_vfiprintf_r+0x20>
 80117fe:	89ab      	ldrh	r3, [r5, #12]
 8011800:	0598      	lsls	r0, r3, #22
 8011802:	d4ed      	bmi.n	80117e0 <_vfiprintf_r+0x4c>
 8011804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011806:	f7fd fa81 	bl	800ed0c <__retarget_lock_release_recursive>
 801180a:	e7e9      	b.n	80117e0 <_vfiprintf_r+0x4c>
 801180c:	2300      	movs	r3, #0
 801180e:	9309      	str	r3, [sp, #36]	; 0x24
 8011810:	2320      	movs	r3, #32
 8011812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011816:	f8cd 800c 	str.w	r8, [sp, #12]
 801181a:	2330      	movs	r3, #48	; 0x30
 801181c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80119e0 <_vfiprintf_r+0x24c>
 8011820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011824:	f04f 0901 	mov.w	r9, #1
 8011828:	4623      	mov	r3, r4
 801182a:	469a      	mov	sl, r3
 801182c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011830:	b10a      	cbz	r2, 8011836 <_vfiprintf_r+0xa2>
 8011832:	2a25      	cmp	r2, #37	; 0x25
 8011834:	d1f9      	bne.n	801182a <_vfiprintf_r+0x96>
 8011836:	ebba 0b04 	subs.w	fp, sl, r4
 801183a:	d00b      	beq.n	8011854 <_vfiprintf_r+0xc0>
 801183c:	465b      	mov	r3, fp
 801183e:	4622      	mov	r2, r4
 8011840:	4629      	mov	r1, r5
 8011842:	4630      	mov	r0, r6
 8011844:	f7ff ff94 	bl	8011770 <__sfputs_r>
 8011848:	3001      	adds	r0, #1
 801184a:	f000 80aa 	beq.w	80119a2 <_vfiprintf_r+0x20e>
 801184e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011850:	445a      	add	r2, fp
 8011852:	9209      	str	r2, [sp, #36]	; 0x24
 8011854:	f89a 3000 	ldrb.w	r3, [sl]
 8011858:	2b00      	cmp	r3, #0
 801185a:	f000 80a2 	beq.w	80119a2 <_vfiprintf_r+0x20e>
 801185e:	2300      	movs	r3, #0
 8011860:	f04f 32ff 	mov.w	r2, #4294967295
 8011864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011868:	f10a 0a01 	add.w	sl, sl, #1
 801186c:	9304      	str	r3, [sp, #16]
 801186e:	9307      	str	r3, [sp, #28]
 8011870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011874:	931a      	str	r3, [sp, #104]	; 0x68
 8011876:	4654      	mov	r4, sl
 8011878:	2205      	movs	r2, #5
 801187a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801187e:	4858      	ldr	r0, [pc, #352]	; (80119e0 <_vfiprintf_r+0x24c>)
 8011880:	f7ee fcb6 	bl	80001f0 <memchr>
 8011884:	9a04      	ldr	r2, [sp, #16]
 8011886:	b9d8      	cbnz	r0, 80118c0 <_vfiprintf_r+0x12c>
 8011888:	06d1      	lsls	r1, r2, #27
 801188a:	bf44      	itt	mi
 801188c:	2320      	movmi	r3, #32
 801188e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011892:	0713      	lsls	r3, r2, #28
 8011894:	bf44      	itt	mi
 8011896:	232b      	movmi	r3, #43	; 0x2b
 8011898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801189c:	f89a 3000 	ldrb.w	r3, [sl]
 80118a0:	2b2a      	cmp	r3, #42	; 0x2a
 80118a2:	d015      	beq.n	80118d0 <_vfiprintf_r+0x13c>
 80118a4:	9a07      	ldr	r2, [sp, #28]
 80118a6:	4654      	mov	r4, sl
 80118a8:	2000      	movs	r0, #0
 80118aa:	f04f 0c0a 	mov.w	ip, #10
 80118ae:	4621      	mov	r1, r4
 80118b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118b4:	3b30      	subs	r3, #48	; 0x30
 80118b6:	2b09      	cmp	r3, #9
 80118b8:	d94e      	bls.n	8011958 <_vfiprintf_r+0x1c4>
 80118ba:	b1b0      	cbz	r0, 80118ea <_vfiprintf_r+0x156>
 80118bc:	9207      	str	r2, [sp, #28]
 80118be:	e014      	b.n	80118ea <_vfiprintf_r+0x156>
 80118c0:	eba0 0308 	sub.w	r3, r0, r8
 80118c4:	fa09 f303 	lsl.w	r3, r9, r3
 80118c8:	4313      	orrs	r3, r2
 80118ca:	9304      	str	r3, [sp, #16]
 80118cc:	46a2      	mov	sl, r4
 80118ce:	e7d2      	b.n	8011876 <_vfiprintf_r+0xe2>
 80118d0:	9b03      	ldr	r3, [sp, #12]
 80118d2:	1d19      	adds	r1, r3, #4
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	9103      	str	r1, [sp, #12]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	bfbb      	ittet	lt
 80118dc:	425b      	neglt	r3, r3
 80118de:	f042 0202 	orrlt.w	r2, r2, #2
 80118e2:	9307      	strge	r3, [sp, #28]
 80118e4:	9307      	strlt	r3, [sp, #28]
 80118e6:	bfb8      	it	lt
 80118e8:	9204      	strlt	r2, [sp, #16]
 80118ea:	7823      	ldrb	r3, [r4, #0]
 80118ec:	2b2e      	cmp	r3, #46	; 0x2e
 80118ee:	d10c      	bne.n	801190a <_vfiprintf_r+0x176>
 80118f0:	7863      	ldrb	r3, [r4, #1]
 80118f2:	2b2a      	cmp	r3, #42	; 0x2a
 80118f4:	d135      	bne.n	8011962 <_vfiprintf_r+0x1ce>
 80118f6:	9b03      	ldr	r3, [sp, #12]
 80118f8:	1d1a      	adds	r2, r3, #4
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	9203      	str	r2, [sp, #12]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	bfb8      	it	lt
 8011902:	f04f 33ff 	movlt.w	r3, #4294967295
 8011906:	3402      	adds	r4, #2
 8011908:	9305      	str	r3, [sp, #20]
 801190a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80119f0 <_vfiprintf_r+0x25c>
 801190e:	7821      	ldrb	r1, [r4, #0]
 8011910:	2203      	movs	r2, #3
 8011912:	4650      	mov	r0, sl
 8011914:	f7ee fc6c 	bl	80001f0 <memchr>
 8011918:	b140      	cbz	r0, 801192c <_vfiprintf_r+0x198>
 801191a:	2340      	movs	r3, #64	; 0x40
 801191c:	eba0 000a 	sub.w	r0, r0, sl
 8011920:	fa03 f000 	lsl.w	r0, r3, r0
 8011924:	9b04      	ldr	r3, [sp, #16]
 8011926:	4303      	orrs	r3, r0
 8011928:	3401      	adds	r4, #1
 801192a:	9304      	str	r3, [sp, #16]
 801192c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011930:	482c      	ldr	r0, [pc, #176]	; (80119e4 <_vfiprintf_r+0x250>)
 8011932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011936:	2206      	movs	r2, #6
 8011938:	f7ee fc5a 	bl	80001f0 <memchr>
 801193c:	2800      	cmp	r0, #0
 801193e:	d03f      	beq.n	80119c0 <_vfiprintf_r+0x22c>
 8011940:	4b29      	ldr	r3, [pc, #164]	; (80119e8 <_vfiprintf_r+0x254>)
 8011942:	bb1b      	cbnz	r3, 801198c <_vfiprintf_r+0x1f8>
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	3307      	adds	r3, #7
 8011948:	f023 0307 	bic.w	r3, r3, #7
 801194c:	3308      	adds	r3, #8
 801194e:	9303      	str	r3, [sp, #12]
 8011950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011952:	443b      	add	r3, r7
 8011954:	9309      	str	r3, [sp, #36]	; 0x24
 8011956:	e767      	b.n	8011828 <_vfiprintf_r+0x94>
 8011958:	fb0c 3202 	mla	r2, ip, r2, r3
 801195c:	460c      	mov	r4, r1
 801195e:	2001      	movs	r0, #1
 8011960:	e7a5      	b.n	80118ae <_vfiprintf_r+0x11a>
 8011962:	2300      	movs	r3, #0
 8011964:	3401      	adds	r4, #1
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	4619      	mov	r1, r3
 801196a:	f04f 0c0a 	mov.w	ip, #10
 801196e:	4620      	mov	r0, r4
 8011970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011974:	3a30      	subs	r2, #48	; 0x30
 8011976:	2a09      	cmp	r2, #9
 8011978:	d903      	bls.n	8011982 <_vfiprintf_r+0x1ee>
 801197a:	2b00      	cmp	r3, #0
 801197c:	d0c5      	beq.n	801190a <_vfiprintf_r+0x176>
 801197e:	9105      	str	r1, [sp, #20]
 8011980:	e7c3      	b.n	801190a <_vfiprintf_r+0x176>
 8011982:	fb0c 2101 	mla	r1, ip, r1, r2
 8011986:	4604      	mov	r4, r0
 8011988:	2301      	movs	r3, #1
 801198a:	e7f0      	b.n	801196e <_vfiprintf_r+0x1da>
 801198c:	ab03      	add	r3, sp, #12
 801198e:	9300      	str	r3, [sp, #0]
 8011990:	462a      	mov	r2, r5
 8011992:	4b16      	ldr	r3, [pc, #88]	; (80119ec <_vfiprintf_r+0x258>)
 8011994:	a904      	add	r1, sp, #16
 8011996:	4630      	mov	r0, r6
 8011998:	f7fd fb04 	bl	800efa4 <_printf_float>
 801199c:	4607      	mov	r7, r0
 801199e:	1c78      	adds	r0, r7, #1
 80119a0:	d1d6      	bne.n	8011950 <_vfiprintf_r+0x1bc>
 80119a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119a4:	07d9      	lsls	r1, r3, #31
 80119a6:	d405      	bmi.n	80119b4 <_vfiprintf_r+0x220>
 80119a8:	89ab      	ldrh	r3, [r5, #12]
 80119aa:	059a      	lsls	r2, r3, #22
 80119ac:	d402      	bmi.n	80119b4 <_vfiprintf_r+0x220>
 80119ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119b0:	f7fd f9ac 	bl	800ed0c <__retarget_lock_release_recursive>
 80119b4:	89ab      	ldrh	r3, [r5, #12]
 80119b6:	065b      	lsls	r3, r3, #25
 80119b8:	f53f af12 	bmi.w	80117e0 <_vfiprintf_r+0x4c>
 80119bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119be:	e711      	b.n	80117e4 <_vfiprintf_r+0x50>
 80119c0:	ab03      	add	r3, sp, #12
 80119c2:	9300      	str	r3, [sp, #0]
 80119c4:	462a      	mov	r2, r5
 80119c6:	4b09      	ldr	r3, [pc, #36]	; (80119ec <_vfiprintf_r+0x258>)
 80119c8:	a904      	add	r1, sp, #16
 80119ca:	4630      	mov	r0, r6
 80119cc:	f7fd fd8e 	bl	800f4ec <_printf_i>
 80119d0:	e7e4      	b.n	801199c <_vfiprintf_r+0x208>
 80119d2:	bf00      	nop
 80119d4:	08011d28 	.word	0x08011d28
 80119d8:	08011d48 	.word	0x08011d48
 80119dc:	08011d08 	.word	0x08011d08
 80119e0:	08011f8c 	.word	0x08011f8c
 80119e4:	08011f96 	.word	0x08011f96
 80119e8:	0800efa5 	.word	0x0800efa5
 80119ec:	08011771 	.word	0x08011771
 80119f0:	08011f92 	.word	0x08011f92

080119f4 <__ascii_wctomb>:
 80119f4:	b149      	cbz	r1, 8011a0a <__ascii_wctomb+0x16>
 80119f6:	2aff      	cmp	r2, #255	; 0xff
 80119f8:	bf85      	ittet	hi
 80119fa:	238a      	movhi	r3, #138	; 0x8a
 80119fc:	6003      	strhi	r3, [r0, #0]
 80119fe:	700a      	strbls	r2, [r1, #0]
 8011a00:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a04:	bf98      	it	ls
 8011a06:	2001      	movls	r0, #1
 8011a08:	4770      	bx	lr
 8011a0a:	4608      	mov	r0, r1
 8011a0c:	4770      	bx	lr

08011a0e <abort>:
 8011a0e:	b508      	push	{r3, lr}
 8011a10:	2006      	movs	r0, #6
 8011a12:	f000 f833 	bl	8011a7c <raise>
 8011a16:	2001      	movs	r0, #1
 8011a18:	f7f1 fcdc 	bl	80033d4 <_exit>

08011a1c <_malloc_usable_size_r>:
 8011a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a20:	1f18      	subs	r0, r3, #4
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	bfbc      	itt	lt
 8011a26:	580b      	ldrlt	r3, [r1, r0]
 8011a28:	18c0      	addlt	r0, r0, r3
 8011a2a:	4770      	bx	lr

08011a2c <_raise_r>:
 8011a2c:	291f      	cmp	r1, #31
 8011a2e:	b538      	push	{r3, r4, r5, lr}
 8011a30:	4604      	mov	r4, r0
 8011a32:	460d      	mov	r5, r1
 8011a34:	d904      	bls.n	8011a40 <_raise_r+0x14>
 8011a36:	2316      	movs	r3, #22
 8011a38:	6003      	str	r3, [r0, #0]
 8011a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3e:	bd38      	pop	{r3, r4, r5, pc}
 8011a40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a42:	b112      	cbz	r2, 8011a4a <_raise_r+0x1e>
 8011a44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a48:	b94b      	cbnz	r3, 8011a5e <_raise_r+0x32>
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	f000 f830 	bl	8011ab0 <_getpid_r>
 8011a50:	462a      	mov	r2, r5
 8011a52:	4601      	mov	r1, r0
 8011a54:	4620      	mov	r0, r4
 8011a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a5a:	f000 b817 	b.w	8011a8c <_kill_r>
 8011a5e:	2b01      	cmp	r3, #1
 8011a60:	d00a      	beq.n	8011a78 <_raise_r+0x4c>
 8011a62:	1c59      	adds	r1, r3, #1
 8011a64:	d103      	bne.n	8011a6e <_raise_r+0x42>
 8011a66:	2316      	movs	r3, #22
 8011a68:	6003      	str	r3, [r0, #0]
 8011a6a:	2001      	movs	r0, #1
 8011a6c:	e7e7      	b.n	8011a3e <_raise_r+0x12>
 8011a6e:	2400      	movs	r4, #0
 8011a70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a74:	4628      	mov	r0, r5
 8011a76:	4798      	blx	r3
 8011a78:	2000      	movs	r0, #0
 8011a7a:	e7e0      	b.n	8011a3e <_raise_r+0x12>

08011a7c <raise>:
 8011a7c:	4b02      	ldr	r3, [pc, #8]	; (8011a88 <raise+0xc>)
 8011a7e:	4601      	mov	r1, r0
 8011a80:	6818      	ldr	r0, [r3, #0]
 8011a82:	f7ff bfd3 	b.w	8011a2c <_raise_r>
 8011a86:	bf00      	nop
 8011a88:	20000134 	.word	0x20000134

08011a8c <_kill_r>:
 8011a8c:	b538      	push	{r3, r4, r5, lr}
 8011a8e:	4d07      	ldr	r5, [pc, #28]	; (8011aac <_kill_r+0x20>)
 8011a90:	2300      	movs	r3, #0
 8011a92:	4604      	mov	r4, r0
 8011a94:	4608      	mov	r0, r1
 8011a96:	4611      	mov	r1, r2
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	f7f1 fc8b 	bl	80033b4 <_kill>
 8011a9e:	1c43      	adds	r3, r0, #1
 8011aa0:	d102      	bne.n	8011aa8 <_kill_r+0x1c>
 8011aa2:	682b      	ldr	r3, [r5, #0]
 8011aa4:	b103      	cbz	r3, 8011aa8 <_kill_r+0x1c>
 8011aa6:	6023      	str	r3, [r4, #0]
 8011aa8:	bd38      	pop	{r3, r4, r5, pc}
 8011aaa:	bf00      	nop
 8011aac:	20006be0 	.word	0x20006be0

08011ab0 <_getpid_r>:
 8011ab0:	f7f1 bc78 	b.w	80033a4 <_getpid>

08011ab4 <_init>:
 8011ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab6:	bf00      	nop
 8011ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aba:	bc08      	pop	{r3}
 8011abc:	469e      	mov	lr, r3
 8011abe:	4770      	bx	lr

08011ac0 <_fini>:
 8011ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac2:	bf00      	nop
 8011ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ac6:	bc08      	pop	{r3}
 8011ac8:	469e      	mov	lr, r3
 8011aca:	4770      	bx	lr
