
neptune-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800c960  0800c960  0001c960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd94  0800cd94  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd9c  0800cd9c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd9c  0800cd9c  0001cd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cda0  0800cda0  0001cda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800cda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e14  200002cc  0800d070  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e0  0800d070  000220e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ce2  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003915  00000000  00000000  00037fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8fb  00000000  00000000  0003e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fe8  00000000  00000000  0005aa0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d01  00000000  00000000  000749f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001156f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a8  00000000  00000000  00115744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c944 	.word	0x0800c944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800c944 	.word	0x0800c944

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <BMX055_init>:
/**
 @brief Begin Device
 @retval true normaly done
 @retval false device error
 */
bool BMX055_init(BMX055_Handle *bmx055) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	// Set CS pins HIGH
	HAL_GPIO_WritePin(bmx055->acc_CS_port, bmx055->acc_CS_pin, GPIO_PIN_SET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6858      	ldr	r0, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	891b      	ldrh	r3, [r3, #8]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f001 fe22 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->gyro_CS_port, bmx055->gyro_CS_pin, GPIO_PIN_SET);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6918      	ldr	r0, [r3, #16]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	8a9b      	ldrh	r3, [r3, #20]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f001 fe1a 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->mag_CS_port, bmx055->mag_CS_pin, GPIO_PIN_SET);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69d8      	ldr	r0, [r3, #28]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	8c1b      	ldrh	r3, [r3, #32]
 8000eec:	2201      	movs	r2, #1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 fe12 	bl	8002b18 <HAL_GPIO_WritePin>

	// Set accel scale factor and map to m/s^2
	// 12bit (4096) accelerometer maps to specified range. This is used to calculate scale factor.
	// Note: +-16g is range of 32g
	switch (bmx055->acc_range) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7a9b      	ldrb	r3, [r3, #10]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	2b09      	cmp	r3, #9
 8000efc:	d826      	bhi.n	8000f4c <BMX055_init+0x90>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <BMX055_init+0x48>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f45 	.word	0x08000f45
 8000f08:	08000f4d 	.word	0x08000f4d
 8000f0c:	08000f3d 	.word	0x08000f3d
 8000f10:	08000f4d 	.word	0x08000f4d
 8000f14:	08000f4d 	.word	0x08000f4d
 8000f18:	08000f35 	.word	0x08000f35
 8000f1c:	08000f4d 	.word	0x08000f4d
 8000f20:	08000f4d 	.word	0x08000f4d
 8000f24:	08000f4d 	.word	0x08000f4d
 8000f28:	08000f2d 	.word	0x08000f2d
	case BMX055_ACC_RANGE_16:
		// 16g
		bmx055->acc_rescale = (2.0 * 16.0 / 4096.0) * 9.81;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <BMX055_init+0x118>)
 8000f30:	60da      	str	r2, [r3, #12]
		break;
 8000f32:	e00b      	b.n	8000f4c <BMX055_init+0x90>
	case BMX055_ACC_RANGE_8:
		// 8g
		bmx055->acc_rescale = (2.0 * 8.0 / 4096.0) * 9.81;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <BMX055_init+0x11c>)
 8000f38:	60da      	str	r2, [r3, #12]
		break;
 8000f3a:	e007      	b.n	8000f4c <BMX055_init+0x90>
	case BMX055_ACC_RANGE_4:
		// 4g
		bmx055->acc_rescale = (2.0 * 4.0 / 4096.0) * 9.81;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <BMX055_init+0x120>)
 8000f40:	60da      	str	r2, [r3, #12]
		break;
 8000f42:	e003      	b.n	8000f4c <BMX055_init+0x90>
	case BMX055_ACC_RANGE_2:
		// 2g
		bmx055->acc_rescale = (2.0 * 2.0 / 4096.0) * 9.81;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <BMX055_init+0x124>)
 8000f48:	60da      	str	r2, [r3, #12]
		break;
 8000f4a:	bf00      	nop
	}

	// Set gyro scale factor for map to degrees and map from deg to rad
	// 16bit (65536) gyro maps to specified range. This is used to calculate scale factor.
	// Note: +-2000 deg/s is range of 4000 deg/s
	switch (bmx055->gyro_range) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7d9b      	ldrb	r3, [r3, #22]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d821      	bhi.n	8000f98 <BMX055_init+0xdc>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <BMX055_init+0xa0>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000f71 	.word	0x08000f71
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08000f81 	.word	0x08000f81
 8000f68:	08000f89 	.word	0x08000f89
 8000f6c:	08000f91 	.word	0x08000f91
	case BMX055_GYRO_RANGE_16_4:
		// 2000
		bmx055->gyro_rescale = (2.0 * 2000.0 / 65536.0) * (M_PI / 180.0);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <BMX055_init+0x128>)
 8000f74:	619a      	str	r2, [r3, #24]
		break;
 8000f76:	e00f      	b.n	8000f98 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_32_8:
		// 1000
		bmx055->gyro_rescale = (2.0 * 1000.0 / 65536.0) * (M_PI / 180.0);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <BMX055_init+0x12c>)
 8000f7c:	619a      	str	r2, [r3, #24]
		break;
 8000f7e:	e00b      	b.n	8000f98 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_65_6:
		// 500
		bmx055->gyro_rescale = (2.0 * 500.0 / 65536.0) * (M_PI / 180.0);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <BMX055_init+0x130>)
 8000f84:	619a      	str	r2, [r3, #24]
		break;
 8000f86:	e007      	b.n	8000f98 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_131_2:
		// 250
		bmx055->gyro_rescale = (2.0 * 250.0 / 65536.0) * (M_PI / 180.0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <BMX055_init+0x134>)
 8000f8c:	619a      	str	r2, [r3, #24]
		break;
 8000f8e:	e003      	b.n	8000f98 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_262_4:
		// 125
		bmx055->gyro_rescale = (2.0 * 125.0 / 65536.0) * (M_PI / 180.0);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <BMX055_init+0x138>)
 8000f94:	619a      	str	r2, [r3, #24]
		break;
 8000f96:	bf00      	nop
	}

	// Set mag scale factor to units of uT
	// XY axes are 12bit (4096) and Z axis is 15bit (32768).
	// XY axis maximum value is +-1300uT and Z axis maximum value is +-2500uT
	bmx055->mag_rescale_xy = (2.0*1300.0 / 4096.0);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <BMX055_init+0x13c>)
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	bmx055->mag_rescale_z = (2.0*2500.0 / 32768.0);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <BMX055_init+0x140>)
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28


	if (BMX055_searchDevice(bmx055)) {
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f82b 	bl	8001000 <BMX055_searchDevice>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <BMX055_init+0x10e>
		BMX055_configuration(bmx055);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f878 	bl	80010a6 <BMX055_configuration>
//		uint8_t res = perform_adv_self_test(bmx055);
		if (!perform_normal_self_test(bmx055))
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fa21 	bl	80013fe <perform_normal_self_test>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <BMX055_init+0x10a>
			return true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e002      	b.n	8000fcc <BMX055_init+0x110>
		else
			return false;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <BMX055_init+0x110>
	} else {
		return false;
 8000fca:	2300      	movs	r3, #0
	}
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	3d9cf5c3 	.word	0x3d9cf5c3
 8000fd8:	3d1cf5c3 	.word	0x3d1cf5c3
 8000fdc:	3c9cf5c3 	.word	0x3c9cf5c3
 8000fe0:	3c1cf5c3 	.word	0x3c1cf5c3
 8000fe4:	3a8ba058 	.word	0x3a8ba058
 8000fe8:	3a0ba058 	.word	0x3a0ba058
 8000fec:	398ba058 	.word	0x398ba058
 8000ff0:	390ba058 	.word	0x390ba058
 8000ff4:	388ba058 	.word	0x388ba058
 8000ff8:	3f228000 	.word	0x3f228000
 8000ffc:	3e1c4000 	.word	0x3e1c4000

08001000 <BMX055_searchDevice>:
/**
 * @brief Search bmx055
 * @retval true  Found Device
 * @retval false : Not Found Device
 */
bool BMX055_searchDevice(BMX055_Handle *bmx055) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t acc_device = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
	uint8_t mag_device = 0x00;
 800100c:	2300      	movs	r3, #0
 800100e:	73bb      	strb	r3, [r7, #14]

	// Mag SoftReset
	uint8_t data = 0x82;
 8001010:	2382      	movs	r3, #130	; 0x82
 8001012:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69d9      	ldr	r1, [r3, #28]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8c1a      	ldrh	r2, [r3, #32]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030d 	add.w	r3, r7, #13
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	234b      	movs	r3, #75	; 0x4b
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f986 	bl	800133a <BMX055_writeSPI>
	HAL_Delay(2);
 800102e:	2002      	movs	r0, #2
 8001030:	f001 f846 	bl	80020c0 <HAL_Delay>

	/* Mag Setting */
	// set sleep mode
	data = BMX055_MAG_POW_CTL_SLEEP_MODE;
 8001034:	2301      	movs	r3, #1
 8001036:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69d9      	ldr	r1, [r3, #28]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	8c1a      	ldrh	r2, [r3, #32]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030d 	add.w	r3, r7, #13
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	234b      	movs	r3, #75	; 0x4b
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f974 	bl	800133a <BMX055_writeSPI>
	HAL_Delay(3);
 8001052:	2003      	movs	r0, #3
 8001054:	f001 f834 	bl	80020c0 <HAL_Delay>

	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_WHO_AM_I_REG, &acc_device, 1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	891a      	ldrh	r2, [r3, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f107 030f 	add.w	r3, r7, #15
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f990 	bl	8001392 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_CHIP_ID, &mag_device, 1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69d9      	ldr	r1, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8c1a      	ldrh	r2, [r3, #32]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 030e 	add.w	r3, r7, #14
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f983 	bl	8001392 <BMX055_readSPI>

	if (acc_device == BMX055_ACC_DEVICE && mag_device == BMX055_MAG_DEVICE) {
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2bfa      	cmp	r3, #250	; 0xfa
 8001090:	d104      	bne.n	800109c <BMX055_searchDevice+0x9c>
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	2b32      	cmp	r3, #50	; 0x32
 8001096:	d101      	bne.n	800109c <BMX055_searchDevice+0x9c>
		return true;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <BMX055_searchDevice+0x9e>
	} else {
		return false;
 800109c:	2300      	movs	r3, #0
	}
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <BMX055_configuration>:

/**
 * @brief Set Config
 */
void BMX055_configuration(BMX055_Handle *bmx055) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af02      	add	r7, sp, #8
 80010ac:	6078      	str	r0, [r7, #4]
	/* SoftReset */
	uint8_t data = BMX055_INITIATED_SOFT_RESET;
 80010ae:	23b6      	movs	r3, #182	; 0xb6
 80010b0:	73fb      	strb	r3, [r7, #15]
	// Accel SoftReset
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_RESET_REG, &data, 1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6859      	ldr	r1, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	891a      	ldrh	r2, [r3, #8]
 80010ba:	2301      	movs	r3, #1
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	f107 030f 	add.w	r3, r7, #15
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2314      	movs	r3, #20
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f937 	bl	800133a <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 80010cc:	2002      	movs	r0, #2
 80010ce:	f000 fff7 	bl	80020c0 <HAL_Delay>
	// Gyro SoftReset
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_RESET_REG, &data, 1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6919      	ldr	r1, [r3, #16]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	8a9a      	ldrh	r2, [r3, #20]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f107 030f 	add.w	r3, r7, #15
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2314      	movs	r3, #20
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f927 	bl	800133a <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 80010ec:	2002      	movs	r0, #2
 80010ee:	f000 ffe7 	bl	80020c0 <HAL_Delay>

	// adv.st, DataRate, OperationMode, SelfTest (NomalMode)
	data = bmx055->mag_data_rate;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80010f8:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69d9      	ldr	r1, [r3, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	8c1a      	ldrh	r2, [r3, #32]
 8001102:	2301      	movs	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	f107 030f 	add.w	r3, r7, #15
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	234c      	movs	r3, #76	; 0x4c
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f913 	bl	800133a <BMX055_writeSPI>
	// Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
	data = 0x04;
 8001114:	2304      	movs	r3, #4
 8001116:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_XY_REG, &data, 1);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69d9      	ldr	r1, [r3, #28]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	8c1a      	ldrh	r2, [r3, #32]
 8001120:	2301      	movs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f107 030f 	add.w	r3, r7, #15
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2351      	movs	r3, #81	; 0x51
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f904 	bl	800133a <BMX055_writeSPI>
	// Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
	data = 0x0F;
 8001132:	230f      	movs	r3, #15
 8001134:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_Z_REG, &data, 1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69d9      	ldr	r1, [r3, #28]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	8c1a      	ldrh	r2, [r3, #32]
 800113e:	2301      	movs	r3, #1
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f107 030f 	add.w	r3, r7, #15
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2352      	movs	r3, #82	; 0x52
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f8f5 	bl	800133a <BMX055_writeSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69d9      	ldr	r1, [r3, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8c1a      	ldrh	r2, [r3, #32]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 030f 	add.w	r3, r7, #15
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	234c      	movs	r3, #76	; 0x4c
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f914 	bl	8001392 <BMX055_readSPI>

	/* Accel Setting */
	// Select Accel PMU Range
	data = bmx055->acc_range;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7a9b      	ldrb	r3, [r3, #10]
 800116e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_RANGE_REG, &data, 1);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	891a      	ldrh	r2, [r3, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 030f 	add.w	r3, r7, #15
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	230f      	movs	r3, #15
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8d8 	bl	800133a <BMX055_writeSPI>
	// Select Accel PMU_BW
	data = bmx055->acc_range;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7a9b      	ldrb	r3, [r3, #10]
 800118e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_BW_REG, &data, 1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	891a      	ldrh	r2, [r3, #8]
 8001198:	2301      	movs	r3, #1
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f107 030f 	add.w	r3, r7, #15
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2310      	movs	r3, #16
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f8c8 	bl	800133a <BMX055_writeSPI>
	// Select Accel PMU_LPW  (NomalMode, SleepDuration 0.5ms)
	data = BMX055_ACC_PMU_LPW_MODE_NOMAL | BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_LPW_REG, &data, 1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6859      	ldr	r1, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	891a      	ldrh	r2, [r3, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	f107 030f 	add.w	r3, r7, #15
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2311      	movs	r3, #17
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f8b9 	bl	800133a <BMX055_writeSPI>

	/* Gyro Setting */
	// Select Gyro Range
	data = bmx055->gyro_range;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7d9b      	ldrb	r3, [r3, #22]
 80011cc:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_RANGE_REG, &data, 1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	8a9a      	ldrh	r2, [r3, #20]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 030f 	add.w	r3, r7, #15
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	230f      	movs	r3, #15
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f8a9 	bl	800133a <BMX055_writeSPI>
	// Select Gyro BW
	data = bmx055->gyro_bandwidth;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7ddb      	ldrb	r3, [r3, #23]
 80011ec:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_BW_REG, &data, 1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6919      	ldr	r1, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8a9a      	ldrh	r2, [r3, #20]
 80011f6:	2301      	movs	r3, #1
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2310      	movs	r3, #16
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f899 	bl	800133a <BMX055_writeSPI>
	// Select Gyro LPM1 (NomalMode, SleepDuration 2ms)
	data = BMX055_GYRO_LPM1_MODE_NOMAL | BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_LPM1_REG, &data, 1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6919      	ldr	r1, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8a9a      	ldrh	r2, [r3, #20]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	f107 030f 	add.w	r3, r7, #15
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2311      	movs	r3, #17
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f88a 	bl	800133a <BMX055_writeSPI>

	HAL_Delay(200);
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f000 ff4a 	bl	80020c0 <HAL_Delay>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <BMX055_readAccel>:

/**
 * @brief Read Accel
 * @param [out] *accl : accel value  (X-accel : accl[0], Y-accel : accl[1], Z-accel : accl[2])
 */
void BMX055_readAccel(BMX055_Handle *bmx055, float *accl) {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08d      	sub	sp, #52	; 0x34
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	uint16_t accl_data[6] = { 0 };
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
	int accel_read[3];

	// read accel value
	for (int i = 0; i < 6; i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	e017      	b.n	8001280 <BMX055_readAccel+0x4c>
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	8918      	ldrh	r0, [r3, #8]
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3302      	adds	r3, #2
 800125e:	b2dc      	uxtb	r4, r3
		BMX055_ACC_DATA_START_REG + i, &accl_data[i], 1);
 8001260:	f107 0218 	add.w	r2, r7, #24
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 800126a:	2201      	movs	r2, #1
 800126c:	9201      	str	r2, [sp, #4]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4623      	mov	r3, r4
 8001272:	4602      	mov	r2, r0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f88c 	bl	8001392 <BMX055_readSPI>
	for (int i = 0; i < 6; i++) {
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b05      	cmp	r3, #5
 8001284:	dde4      	ble.n	8001250 <BMX055_readAccel+0x1c>
	}

	// conv data  accel:12bit
	accel_read[0] = ((accl_data[1] << 4) | (accl_data[0] >> 4));
 8001286:	8b7b      	ldrh	r3, [r7, #26]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	8b3a      	ldrh	r2, [r7, #24]
 800128c:	0912      	lsrs	r2, r2, #4
 800128e:	b292      	uxth	r2, r2
 8001290:	4313      	orrs	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

	if (accel_read[0] > 2047) {
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800129a:	db03      	blt.n	80012a4 <BMX055_readAccel+0x70>
		accel_read[0] -= 4096;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80012a2:	60fb      	str	r3, [r7, #12]
	}
	accl[0] = accel_read[0] * bmx055->acc_rescale;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	edc3 7a00 	vstr	s15, [r3]

	accel_read[1] = ((accl_data[3] << 4) | (accl_data[2] >> 4));
 80012be:	8bfb      	ldrh	r3, [r7, #30]
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	8bba      	ldrh	r2, [r7, #28]
 80012c4:	0912      	lsrs	r2, r2, #4
 80012c6:	b292      	uxth	r2, r2
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
	if (accel_read[1] > 2047) {
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012d2:	db03      	blt.n	80012dc <BMX055_readAccel+0xa8>
		accel_read[1] -= 4096;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80012da:	613b      	str	r3, [r7, #16]
	}
	accl[1] = accel_read[1] * bmx055->acc_rescale;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3304      	adds	r3, #4
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc3 7a00 	vstr	s15, [r3]

	accel_read[2] = ((accl_data[5] << 4) | (accl_data[4] >> 4));
 80012f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	8c3a      	ldrh	r2, [r7, #32]
 80012fe:	0912      	lsrs	r2, r2, #4
 8001300:	b292      	uxth	r2, r2
 8001302:	4313      	orrs	r3, r2
 8001304:	617b      	str	r3, [r7, #20]
	if (accel_read[2] > 2047) {
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800130c:	db03      	blt.n	8001316 <BMX055_readAccel+0xe2>
		accel_read[2] -= 4096;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001314:	617b      	str	r3, [r7, #20]
	}
	accl[2] = accel_read[2] * bmx055->acc_rescale;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	edd3 7a03 	vldr	s15, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3308      	adds	r3, #8
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132e:	edc3 7a00 	vstr	s15, [r3]
}
 8001332:	bf00      	nop
 8001334:	372c      	adds	r7, #44	; 0x2c
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}

0800133a <BMX055_writeSPI>:
 * @param [in] CS_Pin
 * @param [in] register_addr
 * @param [in] data
 * @param [in] len
 */
void BMX055_writeSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	4611      	mov	r1, r2
 8001346:	461a      	mov	r2, r3
 8001348:	460b      	mov	r3, r1
 800134a:	80fb      	strh	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f001 fbde 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(bmx055->hspi, &register_addr, 1, 1000);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	1d79      	adds	r1, r7, #5
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	2201      	movs	r2, #1
 8001368:	f003 fb25 	bl	80049b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(bmx055->hspi, data, len, 1000);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	b29a      	uxth	r2, r3
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	69b9      	ldr	r1, [r7, #24]
 800137a:	f003 fb1c 	bl	80049b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2201      	movs	r2, #1
 8001382:	4619      	mov	r1, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f001 fbc7 	bl	8002b18 <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <BMX055_readSPI>:
 * @param [in] device Device type (gyro, accel or mag)
 * @param [in] register_addr Register Address
 * @param [in] num Data Length
 * @param [out] *buf Read Data
 */
void BMX055_readSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 8001392:	b590      	push	{r4, r7, lr}
 8001394:	b08d      	sub	sp, #52	; 0x34
 8001396:	af02      	add	r7, sp, #8
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	4611      	mov	r1, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	460b      	mov	r3, r1
 80013a2:	80fb      	strh	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	717b      	strb	r3, [r7, #5]
	// Add RW bit to start of register
	register_addr = register_addr | 0x80;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	717b      	strb	r3, [r7, #5]
	uint8_t packet[20];

	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f001 fbad 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmx055->hspi, &register_addr, packet, len + 1, 1000);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f107 0214 	add.w	r2, r7, #20
 80013ce:	1d79      	adds	r1, r7, #5
 80013d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80013d4:	9400      	str	r4, [sp, #0]
 80013d6:	f003 fc2a 	bl	8004c2e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2201      	movs	r2, #1
 80013de:	4619      	mov	r1, r3
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f001 fb99 	bl	8002b18 <HAL_GPIO_WritePin>

	// Copy data into "data" spot in memory
	memcpy(data, &packet[1], len);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	3301      	adds	r3, #1
 80013ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013ee:	4619      	mov	r1, r3
 80013f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013f2:	f008 fd89 	bl	8009f08 <memcpy>
}
 80013f6:	bf00      	nop
 80013f8:	372c      	adds	r7, #44	; 0x2c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}

080013fe <perform_normal_self_test>:
}

/*!
 * @brief This internal API is used to perform normal self test
 */
static int8_t perform_normal_self_test(BMX055_Handle *bmx055) {
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af02      	add	r7, sp, #8
 8001404:	6078      	str	r0, [r7, #4]
	uint8_t read_data;
	uint8_t data;
	// Set sleep mode
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &read_data, 1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69d9      	ldr	r1, [r3, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8c1a      	ldrh	r2, [r3, #32]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 030e 	add.w	r3, r7, #14
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	234c      	movs	r3, #76	; 0x4c
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffb9 	bl	8001392 <BMX055_readSPI>
	data = read_data | 0b00000110; // Set opMode to sleep
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	f043 0306 	orr.w	r3, r3, #6
 8001426:	b2db      	uxtb	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69d9      	ldr	r1, [r3, #28]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	8c1a      	ldrh	r2, [r3, #32]
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	f107 030d 	add.w	r3, r7, #13
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	234c      	movs	r3, #76	; 0x4c
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff7b 	bl	800133a <BMX055_writeSPI>

	/* Set the Self Test bit(bit0) of the 0x4C register */
	data = read_data | 0b00000001; // Set opMode to sleep
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69d9      	ldr	r1, [r3, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8c1a      	ldrh	r2, [r3, #32]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	234c      	movs	r3, #76	; 0x4c
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff69 	bl	800133a <BMX055_writeSPI>
	HAL_Delay(2);
 8001468:	2002      	movs	r0, #2
 800146a:	f000 fe29 	bl	80020c0 <HAL_Delay>

	/* Validate normal self test */
	uint8_t self_test_rslt[3];
	uint8_t status;
	// Read the data from register 0x42, 0x44 and 0x46
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG, &self_test_rslt[0], 1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69d9      	ldr	r1, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	8c1a      	ldrh	r2, [r3, #32]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2342      	movs	r3, #66	; 0x42
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff85 	bl	8001392 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 2, &self_test_rslt[1], 1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69d9      	ldr	r1, [r3, #28]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	8c1a      	ldrh	r2, [r3, #32]
 8001490:	2301      	movs	r3, #1
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	3301      	adds	r3, #1
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2344      	movs	r3, #68	; 0x44
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff77 	bl	8001392 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 4, &self_test_rslt[2], 1);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69d9      	ldr	r1, [r3, #28]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	8c1a      	ldrh	r2, [r3, #32]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	3302      	adds	r3, #2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2346      	movs	r3, #70	; 0x46
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff69 	bl	8001392 <BMX055_readSPI>

	/* Combine the self test status and store it in the first
	 * 3 bits of the status variable for processing
	 */
	status = (uint8_t) ((self_test_rslt[2] & 1) & (self_test_rslt[1] & 1) & (self_test_rslt[0] & 1));
 80014c0:	7aba      	ldrb	r2, [r7, #10]
 80014c2:	7a7b      	ldrb	r3, [r7, #9]
 80014c4:	4013      	ands	r3, r2
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	7a3b      	ldrb	r3, [r7, #8]
 80014ca:	4013      	ands	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]

	if (status)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <perform_normal_self_test+0xe0>
		return BMX055_MAG_SELF_TEST_SUCCESS;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <perform_normal_self_test+0xe2>
	else
		return BMX055_MAG_SELF_TEST_FAIL;
 80014de:	2307      	movs	r3, #7
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f000 fd75 	bl	8001fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f2:	f000 f859 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f6:	f000 fa37 	bl	8001968 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014fa:	f000 f911 	bl	8001720 <MX_SPI1_Init>
  MX_SPI2_Init();
 80014fe:	f000 f945 	bl	800178c <MX_SPI2_Init>
  MX_SPI3_Init();
 8001502:	f000 f979 	bl	80017f8 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001506:	f000 f8b9 	bl	800167c <MX_ADC1_Init>
  MX_TIM3_Init();
 800150a:	f000 f9ab 	bl	8001864 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800150e:	f007 ffe7 	bl	80094e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	4820      	ldr	r0, [pc, #128]	; (8001598 <main+0xb0>)
 8001516:	f003 fe9f 	bl	8005258 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800151a:	2104      	movs	r1, #4
 800151c:	481e      	ldr	r0, [pc, #120]	; (8001598 <main+0xb0>)
 800151e:	f003 fe9b 	bl	8005258 <HAL_TIM_PWM_Start>

  /* BMX055 configurations */
	bmx055.hspi = &hspi1;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <main+0xb4>)
 8001524:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <main+0xb8>)
 8001526:	601a      	str	r2, [r3, #0]
	// Accelerometer parameters
	bmx055.acc_CS_port = ACC_CE_GPIO_Port;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <main+0xb4>)
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <main+0xbc>)
 800152c:	605a      	str	r2, [r3, #4]
	bmx055.acc_CS_pin = ACC_CE_Pin;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <main+0xb4>)
 8001530:	2201      	movs	r2, #1
 8001532:	811a      	strh	r2, [r3, #8]
	bmx055.acc_range = BMX055_ACC_RANGE_4;
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <main+0xb4>)
 8001536:	2205      	movs	r2, #5
 8001538:	729a      	strb	r2, [r3, #10]
	bmx055.acc_bandwidth = BMX055_ACC_PMU_BW_7_81;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <main+0xb4>)
 800153c:	2208      	movs	r2, #8
 800153e:	72da      	strb	r2, [r3, #11]

	// Gyroscope parameters
	bmx055.gyro_CS_port = GYR_CE_GPIO_Port;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <main+0xb4>)
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <main+0xbc>)
 8001544:	611a      	str	r2, [r3, #16]
	bmx055.gyro_CS_pin = GYR_CE_Pin;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <main+0xb4>)
 8001548:	2202      	movs	r2, #2
 800154a:	829a      	strh	r2, [r3, #20]
	bmx055.gyro_range = BMX055_GYRO_RANGE_65_6;		// 500 deg/s
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <main+0xb4>)
 800154e:	2202      	movs	r2, #2
 8001550:	759a      	strb	r2, [r3, #22]
	bmx055.gyro_bandwidth = BMX055_GYRO_BW_64;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <main+0xb4>)
 8001554:	2206      	movs	r2, #6
 8001556:	75da      	strb	r2, [r3, #23]

	// Magnetometer parameters
	bmx055.mag_CS_port = MAG_CE_GPIO_Port;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <main+0xb4>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <main+0xbc>)
 800155c:	61da      	str	r2, [r3, #28]
	bmx055.mag_CS_pin = MAG_CE_Pin;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <main+0xb4>)
 8001560:	2204      	movs	r2, #4
 8001562:	841a      	strh	r2, [r3, #32]
	bmx055.mag_data_rate = BMX055_MAG_DATA_RATE_30;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <main+0xb4>)
 8001566:	2238      	movs	r2, #56	; 0x38
 8001568:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  while (!BMX055_init(&bmx055)) {
 800156c:	e000      	b.n	8001570 <main+0x88>
    continue;
 800156e:	bf00      	nop
  while (!BMX055_init(&bmx055)) {
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <main+0xb4>)
 8001572:	f7ff fca3 	bl	8000ebc <BMX055_init>
 8001576:	4603      	mov	r3, r0
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f5      	bne.n	800156e <main+0x86>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	float accel_data[3];
	  BMX055_readAccel(&bmx055, accel_data);
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <main+0xb4>)
 8001588:	f7ff fe54 	bl	8001234 <BMX055_readAccel>
	// }

  


	HAL_Delay(300);
 800158c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001590:	f000 fd96 	bl	80020c0 <HAL_Delay>
  {
 8001594:	e7f5      	b.n	8001582 <main+0x9a>
 8001596:	bf00      	nop
 8001598:	20000438 	.word	0x20000438
 800159c:	20000480 	.word	0x20000480
 80015a0:	20000330 	.word	0x20000330
 80015a4:	40020400 	.word	0x40020400

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 fcb4 	bl	8009f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <SystemClock_Config+0xcc>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <SystemClock_Config+0xd0>)
 80015f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001618:	230c      	movs	r3, #12
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 800161c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001622:	2304      	movs	r3, #4
 8001624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001626:	2308      	movs	r3, #8
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fd08 	bl	8004044 <HAL_RCC_OscConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800163a:	f000 fa15 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163e:	230f      	movs	r3, #15
 8001640:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001642:	2302      	movs	r3, #2
 8001644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2103      	movs	r1, #3
 800165a:	4618      	mov	r0, r3
 800165c:	f002 ff6a 	bl	8004534 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001666:	f000 f9ff 	bl	8001a68 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	; 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <MX_ADC1_Init+0x98>)
 8001690:	4a21      	ldr	r2, [pc, #132]	; (8001718 <MX_ADC1_Init+0x9c>)
 8001692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_ADC1_Init+0x98>)
 8001696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_ADC1_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_ADC1_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_ADC1_Init+0x98>)
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <MX_ADC1_Init+0xa0>)
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_ADC1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_ADC1_Init+0x98>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_ADC1_Init+0x98>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_ADC1_Init+0x98>)
 80016d8:	2201      	movs	r2, #1
 80016da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_ADC1_Init+0x98>)
 80016de:	f000 fd13 	bl	8002108 <HAL_ADC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016e8:	f000 f9be 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_ADC1_Init+0x98>)
 80016fe:	f000 fd47 	bl	8002190 <HAL_ADC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001708:	f000 f9ae 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200002e8 	.word	0x200002e8
 8001718:	40012000 	.word	0x40012000
 800171c:	0f000001 	.word	0x0f000001

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI1_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_SPI1_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x64>)
 8001754:	2218      	movs	r2, #24
 8001756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI1_Init+0x64>)
 8001772:	f003 f897 	bl	80048a4 <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800177c:	f000 f974 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000330 	.word	0x20000330
 8001788:	40013000 	.word	0x40013000

0800178c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI2_Init+0x64>)
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <MX_SPI2_Init+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI2_Init+0x64>)
 8001798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800179c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017c0:	2220      	movs	r2, #32
 80017c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017d8:	220a      	movs	r2, #10
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_SPI2_Init+0x64>)
 80017de:	f003 f861 	bl	80048a4 <HAL_SPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017e8:	f000 f93e 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000388 	.word	0x20000388
 80017f4:	40003800 	.word	0x40003800

080017f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_SPI3_Init+0x64>)
 80017fe:	4a18      	ldr	r2, [pc, #96]	; (8001860 <MX_SPI3_Init+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_SPI3_Init+0x64>)
 8001804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_SPI3_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_SPI3_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI3_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_SPI3_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI3_Init+0x64>)
 8001824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001828:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI3_Init+0x64>)
 800182c:	2230      	movs	r2, #48	; 0x30
 800182e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_SPI3_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI3_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_SPI3_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI3_Init+0x64>)
 8001844:	220a      	movs	r2, #10
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_SPI3_Init+0x64>)
 800184a:	f003 f82b 	bl	80048a4 <HAL_SPI_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001854:	f000 f908 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200003e0 	.word	0x200003e0
 8001860:	40003c00 	.word	0x40003c00

08001864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001896:	4a33      	ldr	r2, [pc, #204]	; (8001964 <MX_TIM3_Init+0x100>)
 8001898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <MX_TIM3_Init+0xfc>)
 800189c:	f242 527f 	movw	r2, #9599	; 0x257f
 80018a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018aa:	22c7      	movs	r2, #199	; 0xc7
 80018ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018bc:	f003 fc24 	bl	8005108 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018c6:	f000 f8cf 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4822      	ldr	r0, [pc, #136]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018d8:	f003 fe30 	bl	800553c <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018e2:	f000 f8c1 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018e6:	481e      	ldr	r0, [pc, #120]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018e8:	f003 fc5d 	bl	80051a6 <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018f2:	f000 f8b9 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4619      	mov	r1, r3
 8001904:	4816      	ldr	r0, [pc, #88]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001906:	f004 f9ad 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001910:	f000 f8aa 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	; 0x60
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	480d      	ldr	r0, [pc, #52]	; (8001960 <MX_TIM3_Init+0xfc>)
 800192c:	f003 fd44 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001936:	f000 f897 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2204      	movs	r2, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4807      	ldr	r0, [pc, #28]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001942:	f003 fd39 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800194c:	f000 f88c 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001950:	4803      	ldr	r0, [pc, #12]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001952:	f000 f9d3 	bl	8001cfc <HAL_TIM_MspPostInit>

}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	; 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000438 	.word	0x20000438
 8001964:	40000400 	.word	0x40000400

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <MX_GPIO_Init+0xf4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a35      	ldr	r2, [pc, #212]	; (8001a5c <MX_GPIO_Init+0xf4>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <MX_GPIO_Init+0xf4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_GPIO_Init+0xf4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	210e      	movs	r1, #14
 80019f2:	481b      	ldr	r0, [pc, #108]	; (8001a60 <MX_GPIO_Init+0xf8>)
 80019f4:	f001 f890 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2107      	movs	r1, #7
 80019fc:	4819      	ldr	r0, [pc, #100]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019fe:	f001 f88b 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_10O_Pin */
  GPIO_InitStruct.Pin = RF_10O_Pin;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_10O_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4812      	ldr	r0, [pc, #72]	; (8001a60 <MX_GPIO_Init+0xf8>)
 8001a16:	f000 fefb 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_RESET_Pin RF_CE_Pin SD_CE_Pin */
  GPIO_InitStruct.Pin = RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin;
 8001a1a:	230e      	movs	r3, #14
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <MX_GPIO_Init+0xf8>)
 8001a32:	f000 feed 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CE_Pin GYR_CE_Pin MAG_CE_Pin */
  GPIO_InitStruct.Pin = ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin;
 8001a36:	2307      	movs	r3, #7
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001a4e:	f000 fedf 	bl	8002810 <HAL_GPIO_Init>

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020400 	.word	0x40020400

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <Error_Handler+0x8>
	...

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <HAL_MspInit+0x4c>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_MspInit+0x4c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <HAL_ADC_MspInit+0x7c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d127      	bne.n	8001b36 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_ADC_MspInit+0x80>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_ADC_MspInit+0x80>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_ADC_MspInit+0x80>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_ADC_MspInit+0x80>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <HAL_ADC_MspInit+0x80>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_ADC_MspInit+0x80>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = S1_FBK_Pin|S2_FBK_Pin;
 8001b1e:	230c      	movs	r3, #12
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b22:	2303      	movs	r3, #3
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_ADC_MspInit+0x84>)
 8001b32:	f000 fe6d 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40012000 	.word	0x40012000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <HAL_SPI_MspInit+0x150>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a43      	ldr	r2, [pc, #268]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001ba6:	23e0      	movs	r3, #224	; 0xe0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <HAL_SPI_MspInit+0x158>)
 8001bc2:	f000 fe25 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bc6:	e064      	b.n	8001c92 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a36      	ldr	r2, [pc, #216]	; (8001ca8 <HAL_SPI_MspInit+0x15c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12d      	bne.n	8001c2e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8001c0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4821      	ldr	r0, [pc, #132]	; (8001cac <HAL_SPI_MspInit+0x160>)
 8001c28:	f000 fdf2 	bl	8002810 <HAL_GPIO_Init>
}
 8001c2c:	e031      	b.n	8001c92 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_SPI_MspInit+0x164>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d12c      	bne.n	8001c92 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_SPI_MspInit+0x154>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001c70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c82:	2306      	movs	r3, #6
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_SPI_MspInit+0x168>)
 8001c8e:	f000 fdbf 	bl	8002810 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	; 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013000 	.word	0x40013000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40003800 	.word	0x40003800
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40003c00 	.word	0x40003c00
 8001cb4:	40020800 	.word	0x40020800

08001cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_TIM_Base_MspInit+0x40>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_TIM_Base_MspInit+0x40>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_TIM_Base_MspInit+0x40>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_TIM_MspPostInit+0x68>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d11d      	bne.n	8001d5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_TIM_MspPostInit+0x6c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_TIM_MspPostInit+0x6c>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = S1_CTRL_Pin|S2_CTRL_Pin;
 8001d3a:	2330      	movs	r3, #48	; 0x30
 8001d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <HAL_TIM_MspPostInit+0x70>)
 8001d56:	f000 fd5b 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 f960 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <OTG_FS_IRQHandler+0x10>)
 8001dca:	f001 f80e 	bl	8002dea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200019a4 	.word	0x200019a4

08001dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_kill>:

int _kill(int pid, int sig)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df2:	f008 f85f 	bl	8009eb4 <__errno>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2216      	movs	r2, #22
 8001dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_exit>:

void _exit (int status)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffe7 	bl	8001de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e1a:	e7fe      	b.n	8001e1a <_exit+0x12>

08001e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e00a      	b.n	8001e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2e:	f3af 8000 	nop.w
 8001e32:	4601      	mov	r1, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf0      	blt.n	8001e2e <_read+0x12>
  }

  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e009      	b.n	8001e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf1      	blt.n	8001e68 <_write+0x12>
  }
  return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_close>:

int _close(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_isatty>:

int _isatty(int file)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <_sbrk+0x5c>)
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <_sbrk+0x60>)
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <_sbrk+0x64>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <_sbrk+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d207      	bcs.n	8001f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f28:	f007 ffc4 	bl	8009eb4 <__errno>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	220c      	movs	r2, #12
 8001f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f36:	e009      	b.n	8001f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <_sbrk+0x64>)
 8001f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20020000 	.word	0x20020000
 8001f58:	00000400 	.word	0x00000400
 8001f5c:	200004bc 	.word	0x200004bc
 8001f60:	200020e0 	.word	0x200020e0

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb2:	f7ff ffd7 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f007 ff83 	bl	8009ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fba:	f7ff fa95 	bl	80014e8 <main>
  bx  lr    
 8001fbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001fcc:	0800cda4 	.word	0x0800cda4
  ldr r2, =_sbss
 8001fd0:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001fd4:	200020e0 	.word	0x200020e0

08001fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC_IRQHandler>
	...

08001fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <HAL_Init+0x40>)
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_Init+0x40>)
 8001ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_Init+0x40>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f000 fbc1 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200a:	200f      	movs	r0, #15
 800200c:	f000 f808 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002010:	f7ff fd30 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fbd9 	bl	80027f6 <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205c:	f000 fba1 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000000 	.word	0x20000000
 8002078:	20000008 	.word	0x20000008
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008
 80020a4:	200004c0 	.word	0x200004c0

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	200004c0 	.word	0x200004c0

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff ffee 	bl	80020a8 <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_Delay+0x44>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d8f7      	bhi.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000008 	.word	0x20000008

08002108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e033      	b.n	8002186 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fccc 	bl	8001ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800214e:	f023 0302 	bic.w	r3, r3, #2
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f94a 	bl	80023f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
 8002176:	e001      	b.n	800217c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e113      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x244>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d925      	bls.n	8002208 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	2207      	movs	r2, #7
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43da      	mvns	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	400a      	ands	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68d9      	ldr	r1, [r3, #12]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4403      	add	r3, r0
 80021fa:	3b1e      	subs	r3, #30
 80021fc:	409a      	lsls	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	e022      	b.n	800224e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	2207      	movs	r2, #7
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	400a      	ands	r2, r1
 800222a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	4603      	mov	r3, r0
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4403      	add	r3, r0
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d824      	bhi.n	80022a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b05      	subs	r3, #5
 8002268:	221f      	movs	r2, #31
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3b05      	subs	r3, #5
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
 800229e:	e04c      	b.n	800233a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	d824      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b23      	subs	r3, #35	; 0x23
 80022ba:	221f      	movs	r2, #31
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43da      	mvns	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	400a      	ands	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b23      	subs	r3, #35	; 0x23
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
 80022f0:	e023      	b.n	800233a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b41      	subs	r3, #65	; 0x41
 8002304:	221f      	movs	r2, #31
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	400a      	ands	r2, r1
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	3b41      	subs	r3, #65	; 0x41
 800232e:	fa00 f203 	lsl.w	r2, r0, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_ADC_ConfigChannel+0x250>)
 800233c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_ADC_ConfigChannel+0x254>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10f      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b12      	cmp	r3, #18
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_ADC_ConfigChannel+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12b      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_ADC_ConfigChannel+0x258>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x1f4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b11      	cmp	r3, #17
 8002382:	d122      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_ADC_ConfigChannel+0x258>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_ADC_ConfigChannel+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_ADC_ConfigChannel+0x260>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9a      	lsrs	r2, r3, #18
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012300 	.word	0x40012300
 80023e4:	40012000 	.word	0x40012000
 80023e8:	10000012 	.word	0x10000012
 80023ec:	20000000 	.word	0x20000000
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fc:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <ADC_Init+0x1f0>)
 80023fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <ADC_Init+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e00f      	b.n	80024f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0202 	bic.w	r2, r2, #2
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	005a      	lsls	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800253e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	035a      	lsls	r2, r3, #13
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e007      	b.n	8002568 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	3b01      	subs	r3, #1
 8002584:	051a      	lsls	r2, r3, #20
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025aa:	025a      	lsls	r2, r3, #9
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	029a      	lsls	r2, r3, #10
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012300 	.word	0x40012300
 80025e8:	0f000001 	.word	0x0f000001

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e159      	b.n	8002ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8148 	bne.w	8002ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a2 	beq.w	8002ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x2ec>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_GPIO_Init+0x2f0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x202>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_GPIO_Init+0x2f4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x1fe>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_GPIO_Init+0x2f8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x1fa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_GPIO_Init+0x2fc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x1f6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <HAL_GPIO_Init+0x300>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x1f2>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_GPIO_Init+0x2ec>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f aea2 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4c:	b08f      	sub	sp, #60	; 0x3c
 8002b4e:	af0a      	add	r7, sp, #40	; 0x28
 8002b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e10f      	b.n	8002d7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f006 fe92 	bl	80098a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2203      	movs	r2, #3
 8002b80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 f9e5 	bl	8005f6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	687e      	ldr	r6, [r7, #4]
 8002ba8:	466d      	mov	r5, sp
 8002baa:	f106 0410 	add.w	r4, r6, #16
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bbe:	1d33      	adds	r3, r6, #4
 8002bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	f003 f8bc 	bl	8005d40 <USB_CoreInit>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0d0      	b.n	8002d7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 f9d3 	bl	8005f8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e04a      	b.n	8002c82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333d      	adds	r3, #61	; 0x3d
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333c      	adds	r3, #60	; 0x3c
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	b298      	uxth	r0, r3
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3344      	adds	r3, #68	; 0x44
 8002c28:	4602      	mov	r2, r0
 8002c2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3340      	adds	r3, #64	; 0x40
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3348      	adds	r3, #72	; 0x48
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	; 0x4c
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3354      	adds	r3, #84	; 0x54
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3af      	bcc.n	8002bec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e044      	b.n	8002d1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3b5      	bcc.n	8002c92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	687e      	ldr	r6, [r7, #4]
 8002d2e:	466d      	mov	r5, sp
 8002d30:	f106 0410 	add.w	r4, r6, #16
 8002d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d44:	1d33      	adds	r3, r6, #4
 8002d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f003 f96b 	bl	8006024 <USB_DevInit>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00d      	b.n	8002d7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 faba 	bl	80072ee <USB_DevDisconnect>

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_Start+0x1c>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e020      	b.n	8002de2 <HAL_PCD_Start+0x5e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d109      	bne.n	8002dc4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d005      	beq.n	8002dc4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 f8bd 	bl	8005f48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fa6a 	bl	80072ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dea:	b590      	push	{r4, r7, lr}
 8002dec:	b08d      	sub	sp, #52	; 0x34
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fb28 	bl	8007456 <USB_GetMode>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 848a 	bne.w	8003722 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 fa8c 	bl	8007330 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8480 	beq.w	8003720 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fa79 	bl	8007330 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d107      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f002 0202 	and.w	r2, r2, #2
 8002e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 fa67 	bl	8007330 <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d161      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0210 	bic.w	r2, r2, #16
 8002e7a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	0c5b      	lsrs	r3, r3, #17
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d124      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d035      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6a38      	ldr	r0, [r7, #32]
 8002ec8:	f004 f89e 	bl	8007008 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	441a      	add	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eea:	441a      	add	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	621a      	str	r2, [r3, #32]
 8002ef0:	e016      	b.n	8002f20 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	0c5b      	lsrs	r3, r3, #17
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d110      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f04:	2208      	movs	r2, #8
 8002f06:	4619      	mov	r1, r3
 8002f08:	6a38      	ldr	r0, [r7, #32]
 8002f0a:	f004 f87d 	bl	8007008 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1a:	441a      	add	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0210 	orr.w	r2, r2, #16
 8002f2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 f9fb 	bl	8007330 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f44:	f040 80a7 	bne.w	8003096 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f004 fa00 	bl	8007356 <USB_ReadDevAllOutEpInterrupt>
 8002f56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f58:	e099      	b.n	800308e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 808e 	beq.w	8003082 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fa24 	bl	80073be <USB_ReadDevOutEPInterrupt>
 8002f76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2301      	movs	r3, #1
 8002f92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fec2 	bl	8003d20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 ff98 	bl	8003ef0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2310      	movs	r3, #16
 8002fda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d030      	beq.n	8003048 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d109      	bne.n	8003006 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003004:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d108      	bne.n	8003036 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2200      	movs	r2, #0
 8003028:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	b2db      	uxtb	r3, r3
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f006 fd31 	bl	8009a98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003042:	461a      	mov	r2, r3
 8003044:	2302      	movs	r3, #2
 8003046:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	2320      	movs	r3, #32
 8003062:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	461a      	mov	r2, r3
 800307c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003080:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	3301      	adds	r3, #1
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f af62 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f004 f948 	bl	8007330 <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030aa:	f040 80db 	bne.w	8003264 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 f969 	bl	800738a <USB_ReadDevAllInEpInterrupt>
 80030b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030be:	e0cd      	b.n	800325c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80c2 	beq.w	8003250 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f98f 	bl	80073fa <USB_ReadDevInEPInterrupt>
 80030dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d057      	beq.n	8003198 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2201      	movs	r2, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003108:	4013      	ands	r3, r2
 800310a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003118:	461a      	mov	r2, r3
 800311a:	2301      	movs	r3, #1
 800311c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d132      	bne.n	800318c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	334c      	adds	r3, #76	; 0x4c
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4403      	add	r3, r0
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4419      	add	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	334c      	adds	r3, #76	; 0x4c
 800315c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <HAL_PCD_IRQHandler+0x3a2>
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3354      	adds	r3, #84	; 0x54
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	f004 f996 	bl	80074b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f006 fc05 	bl	80099a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	2308      	movs	r3, #8
 80031b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ca:	461a      	mov	r2, r3
 80031cc:	2310      	movs	r3, #16
 80031ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e6:	461a      	mov	r2, r3
 80031e8:	2340      	movs	r3, #64	; 0x40
 80031ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d023      	beq.n	800323e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	6a38      	ldr	r0, [r7, #32]
 80031fa:	f003 f877 	bl	80062ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3338      	adds	r3, #56	; 0x38
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	78db      	ldrb	r3, [r3, #3]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f006 fc48 	bl	8009abc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003238:	461a      	mov	r2, r3
 800323a:	2302      	movs	r3, #2
 800323c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fcdb 	bl	8003c06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f af2e 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f861 	bl	8007330 <USB_ReadInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003278:	d122      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032a0:	2100      	movs	r1, #0
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fec2 	bl	800402c <HAL_PCDEx_LPM_Callback>
 80032a8:	e002      	b.n	80032b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f006 fbe6 	bl	8009a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 f833 	bl	8007330 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d4:	d112      	bne.n	80032fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f006 fba2 	bl	8009a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 f815 	bl	8007330 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003310:	f040 80b7 	bne.w	8003482 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2110      	movs	r1, #16
 800332e:	4618      	mov	r0, r3
 8003330:	f002 ffdc 	bl	80062ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003338:	e046      	b.n	80033c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	461a      	mov	r2, r3
 8003348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800334c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	440a      	add	r2, r1
 8003364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800336c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	461a      	mov	r2, r3
 800337c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003380:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003392:	0151      	lsls	r1, r2, #5
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	440a      	add	r2, r1
 8003398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800339c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b2:	0151      	lsls	r1, r2, #5
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	440a      	add	r2, r1
 80033b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	3301      	adds	r3, #1
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d3b3      	bcc.n	800333a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fe:	f043 030b 	orr.w	r3, r3, #11
 8003402:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003414:	f043 030b 	orr.w	r3, r3, #11
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	e015      	b.n	8003448 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800342e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003432:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003442:	f043 030b 	orr.w	r3, r3, #11
 8003446:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003456:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800345a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800346c:	461a      	mov	r2, r3
 800346e:	f004 f823 	bl	80074b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 ff52 	bl	8007330 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	d124      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f003 ffe8 	bl	8007472 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 ff9d 	bl	80063e6 <USB_GetDevSpeed>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681c      	ldr	r4, [r3, #0]
 80034b8:	f001 f9e8 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80034bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	4620      	mov	r0, r4
 80034c8:	f002 fc9c 	bl	8005e04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f006 fa90 	bl	80099f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 ff22 	bl	8007330 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d10a      	bne.n	800350c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f006 fa6d 	bl	80099d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f002 0208 	and.w	r2, r2, #8
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 ff0d 	bl	8007330 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d122      	bne.n	8003566 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800352c:	2301      	movs	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	e014      	b.n	800355c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb27 	bl	8003ba4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	3301      	adds	r3, #1
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	429a      	cmp	r2, r3
 8003564:	d3e5      	bcc.n	8003532 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fee0 	bl	8007330 <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357a:	d13b      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e02b      	b.n	80035da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3340      	adds	r3, #64	; 0x40
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d115      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da12      	bge.n	80035d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	333f      	adds	r3, #63	; 0x3f
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fae8 	bl	8003ba4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	3301      	adds	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3ce      	bcc.n	8003582 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f003 fe99 	bl	8007330 <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003608:	d155      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800360a:	2301      	movs	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	e045      	b.n	800369c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d12e      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003638:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800363a:	2b00      	cmp	r3, #0
 800363c:	da2b      	bge.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800364a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800364e:	429a      	cmp	r2, r3
 8003650:	d121      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003692:	6053      	str	r3, [r2, #4]
            break;
 8003694:	e007      	b.n	80036a6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3301      	adds	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d3b4      	bcc.n	8003610 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 fe38 	bl	8007330 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d10a      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f006 fa07 	bl	8009ae0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fe22 	bl	8007330 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d115      	bne.n	8003722 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f006 f9f7 	bl	8009afc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	e000      	b.n	8003722 <HAL_PCD_IRQHandler+0x938>
      return;
 8003720:	bf00      	nop
    }
  }
}
 8003722:	3734      	adds	r7, #52	; 0x34
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_SetAddress+0x1a>
 800373e:	2302      	movs	r3, #2
 8003740:	e013      	b.n	800376a <HAL_PCD_SetAddress+0x42>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fd80 	bl	8007260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	461a      	mov	r2, r3
 8003780:	4603      	mov	r3, r0
 8003782:	70fb      	strb	r3, [r7, #3]
 8003784:	460b      	mov	r3, r1
 8003786:	803b      	strh	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da0f      	bge.n	80037b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	3338      	adds	r3, #56	; 0x38
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	3304      	adds	r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	705a      	strb	r2, [r3, #1]
 80037b6:	e00f      	b.n	80037d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037e4:	883a      	ldrh	r2, [r7, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	78ba      	ldrb	r2, [r7, #2]
 80037ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003802:	78bb      	ldrb	r3, [r7, #2]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d102      	bne.n	800380e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_PCD_EP_Open+0xaa>
 8003818:	2302      	movs	r3, #2
 800381a:	e00e      	b.n	800383a <HAL_PCD_EP_Open+0xc8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fe00 	bl	8006430 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003838:	7afb      	ldrb	r3, [r7, #11]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800384e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0f      	bge.n	8003876 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3338      	adds	r3, #56	; 0x38
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	705a      	strb	r2, [r3, #1]
 8003874:	e00f      	b.n	8003896 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_PCD_EP_Close+0x6e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e00e      	b.n	80038ce <HAL_PCD_EP_Close+0x8c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	4618      	mov	r0, r3
 80038c0:	f002 fe3e 	bl	8006540 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	460b      	mov	r3, r1
 80038e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	b2da      	uxtb	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	f003 f91d 	bl	8006b88 <USB_EP0StartXfer>
 800394e:	e008      	b.n	8003962 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	f002 fecb 	bl	80066f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	460b      	mov	r3, r1
 80039aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ac:	7afb      	ldrb	r3, [r7, #11]
 80039ae:	f003 020f 	and.w	r2, r3, #15
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3338      	adds	r3, #56	; 0x38
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2200      	movs	r2, #0
 80039d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2201      	movs	r2, #1
 80039da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039dc:	7afb      	ldrb	r3, [r7, #11]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d102      	bne.n	80039f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6979      	ldr	r1, [r7, #20]
 8003a0e:	f003 f8bb 	bl	8006b88 <USB_EP0StartXfer>
 8003a12:	e008      	b.n	8003a26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	f002 fe69 	bl	80066f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 020f 	and.w	r2, r3, #15
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d901      	bls.n	8003a4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e050      	b.n	8003af0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da0f      	bge.n	8003a76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3338      	adds	r3, #56	; 0x38
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	705a      	strb	r2, [r3, #1]
 8003a74:	e00d      	b.n	8003a92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_PCD_EP_SetStall+0x82>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e01e      	b.n	8003af0 <HAL_PCD_EP_SetStall+0xc0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 faf9 	bl	80070b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	b2d9      	uxtb	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f003 fce9 	bl	80074b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d901      	bls.n	8003b16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e042      	b.n	8003b9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da0f      	bge.n	8003b3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3338      	adds	r3, #56	; 0x38
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	705a      	strb	r2, [r3, #1]
 8003b3c:	e00f      	b.n	8003b5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_PCD_EP_ClrStall+0x86>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e00e      	b.n	8003b9c <HAL_PCD_EP_ClrStall+0xa4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f003 fb01 	bl	8007194 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	da0c      	bge.n	8003bd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	3338      	adds	r3, #56	; 0x38
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	3304      	adds	r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e00c      	b.n	8003bec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 f920 	bl	8006e38 <USB_EPStopXfer>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3338      	adds	r3, #56	; 0x38
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d901      	bls.n	8003c3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06c      	b.n	8003d18 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d902      	bls.n	8003c5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c62:	e02b      	b.n	8003cbc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d902      	bls.n	8003c80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	3303      	adds	r3, #3
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6919      	ldr	r1, [r3, #16]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f003 f974 	bl	8006f8c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	441a      	add	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d809      	bhi.n	8003ce6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d203      	bcs.n	8003ce6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1be      	bne.n	8003c64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d811      	bhi.n	8003d16 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	6939      	ldr	r1, [r7, #16]
 8003d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d12:	4013      	ands	r3, r2
 8003d14:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	333c      	adds	r3, #60	; 0x3c
 8003d38:	3304      	adds	r3, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d17b      	bne.n	8003e4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4a61      	ldr	r2, [pc, #388]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f240 80b9 	bls.w	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80b3 	beq.w	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	461a      	mov	r2, r3
 8003d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d88:	6093      	str	r3, [r2, #8]
 8003d8a:	e0a7      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da2:	461a      	mov	r2, r3
 8003da4:	2320      	movs	r3, #32
 8003da6:	6093      	str	r3, [r2, #8]
 8003da8:	e098      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 8093 	bne.w	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	4a4b      	ldr	r2, [pc, #300]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d90f      	bls.n	8003dde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	6093      	str	r3, [r2, #8]
 8003ddc:	e07e      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	0159      	lsls	r1, r3, #5
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	440b      	add	r3, r1
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d114      	bne.n	8003e40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	f003 fb44 	bl	80074b8 <USB_EP0_OutStart>
 8003e30:	e006      	b.n	8003e40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	441a      	add	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f005 fd90 	bl	800996c <HAL_PCD_DataOutStageCallback>
 8003e4c:	e046      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d124      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	6093      	str	r3, [r2, #8]
 8003e74:	e032      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2320      	movs	r3, #32
 8003e90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	4619      	mov	r1, r3
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f005 fd67 	bl	800996c <HAL_PCD_DataOutStageCallback>
 8003e9e:	e01d      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d114      	bne.n	8003ed0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f003 faf4 	bl	80074b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f005 fd48 	bl	800996c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	4f54300a 	.word	0x4f54300a
 8003eec:	4f54310a 	.word	0x4f54310a

08003ef0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	333c      	adds	r3, #60	; 0x3c
 8003f08:	3304      	adds	r3, #4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d90e      	bls.n	8003f44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f005 fcff 	bl	8009948 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d90c      	bls.n	8003f6c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f64:	461a      	mov	r2, r3
 8003f66:	2101      	movs	r1, #1
 8003f68:	f003 faa6 	bl	80074b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	4f54300a 	.word	0x4f54300a

08003f7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f9a:	883b      	ldrh	r3, [r7, #0]
 8003f9c:	0419      	lsls	r1, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa8:	e028      	b.n	8003ffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e00d      	b.n	8003fda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3ec      	bcc.n	8003fbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fe4:	883b      	ldrh	r3, [r7, #0]
 8003fe6:	0418      	lsls	r0, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4302      	orrs	r2, r0
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e267      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d075      	beq.n	800414e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004062:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00c      	beq.n	8004088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406e:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d112      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004086:	d10b      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	4b7e      	ldr	r3, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05b      	beq.n	800414c <HAL_RCC_OscConfig+0x108>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d157      	bne.n	800414c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e242      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x74>
 80040aa:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e01d      	b.n	80040f4 <HAL_RCC_OscConfig+0xb0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x98>
 80040c2:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6f      	ldr	r2, [pc, #444]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6c      	ldr	r2, [pc, #432]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0xb0>
 80040dc:	4b69      	ldr	r3, [pc, #420]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a68      	ldr	r2, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a65      	ldr	r2, [pc, #404]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fd ffd4 	bl	80020a8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd ffd0 	bl	80020a8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e207      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0xc0>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fd ffc0 	bl	80020a8 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd ffbc 	bl	80020a8 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1f3      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0xe8>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d063      	beq.n	8004222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d11c      	bne.n	80041ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b44      	ldr	r3, [pc, #272]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x152>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e1c7      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	e03a      	b.n	8004222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b4:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x244>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd ff75 	bl	80020a8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd ff71 	bl	80020a8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1a8      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4925      	ldr	r1, [pc, #148]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCC_OscConfig+0x244>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd ff54 	bl	80020a8 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004204:	f7fd ff50 	bl	80020a8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e187      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <HAL_RCC_OscConfig+0x248>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd ff34 	bl	80020a8 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd ff30 	bl	80020a8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e167      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x200>
 8004262:	e01b      	b.n	800429c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_OscConfig+0x248>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fd ff1d 	bl	80020a8 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e00e      	b.n	8004290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004272:	f7fd ff19 	bl	80020a8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d907      	bls.n	8004290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e150      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
 8004284:	40023800 	.word	0x40023800
 8004288:	42470000 	.word	0x42470000
 800428c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004290:	4b88      	ldr	r3, [pc, #544]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ea      	bne.n	8004272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8097 	beq.w	80043d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ae:	4b81      	ldr	r3, [pc, #516]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	4b7d      	ldr	r3, [pc, #500]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b7a      	ldr	r3, [pc, #488]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b74      	ldr	r3, [pc, #464]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a73      	ldr	r2, [pc, #460]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fed9 	bl	80020a8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fd fed5 	bl	80020a8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e10c      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x2ea>
 8004320:	4b64      	ldr	r3, [pc, #400]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a63      	ldr	r2, [pc, #396]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	e01c      	b.n	8004368 <HAL_RCC_OscConfig+0x324>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x30c>
 8004336:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a5e      	ldr	r2, [pc, #376]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
 8004342:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a5b      	ldr	r2, [pc, #364]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0x324>
 8004350:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a57      	ldr	r2, [pc, #348]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
 800435c:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a54      	ldr	r2, [pc, #336]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd fe9a 	bl	80020a8 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd fe96 	bl	80020a8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	; 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0cb      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438e:	4b49      	ldr	r3, [pc, #292]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ee      	beq.n	8004378 <HAL_RCC_OscConfig+0x334>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439c:	f7fd fe84 	bl	80020a8 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fe80 	bl	80020a8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0b5      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ee      	bne.n	80043a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a1 	beq.w	8004524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d05c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d141      	bne.n	800447a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b31      	ldr	r3, [pc, #196]	; (80044bc <HAL_RCC_OscConfig+0x478>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd fe54 	bl	80020a8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fe50 	bl	80020a8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e087      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	3b01      	subs	r3, #1
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	491b      	ldr	r1, [pc, #108]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x478>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd fe29 	bl	80020a8 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445a:	f7fd fe25 	bl	80020a8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e05c      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x416>
 8004478:	e054      	b.n	8004524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_OscConfig+0x478>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fd fe12 	bl	80020a8 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fe0e 	bl	80020a8 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e045      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x444>
 80044a6:	e03d      	b.n	8004524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e038      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40007000 	.word	0x40007000
 80044bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c0:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_RCC_OscConfig+0x4ec>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d028      	beq.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d121      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d11a      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d111      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	3b01      	subs	r3, #1
 800450a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800

08004534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0cc      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004548:	4b68      	ldr	r3, [pc, #416]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d90c      	bls.n	8004570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a52      	ldr	r2, [pc, #328]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d044      	beq.n	8004654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d119      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e06f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004602:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e067      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4934      	ldr	r1, [pc, #208]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004624:	f7fd fd40 	bl	80020a8 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	e00a      	b.n	8004642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462c:	f7fd fd3c 	bl	80020a8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 020c 	and.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	429a      	cmp	r2, r3
 8004652:	d1eb      	bne.n	800462c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d20c      	bcs.n	800467c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd fca0 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023c00 	.word	0x40023c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	0800c9a8 	.word	0x0800c9a8
 80046f8:	20000000 	.word	0x20000000
 80046fc:	20000004 	.word	0x20000004

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b090      	sub	sp, #64	; 0x40
 8004706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
 800470c:	2300      	movs	r3, #0
 800470e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004710:	2300      	movs	r3, #0
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_GetSysClockFreq+0x180>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	d00d      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x40>
 8004724:	2b08      	cmp	r3, #8
 8004726:	f200 80a1 	bhi.w	800486c <HAL_RCC_GetSysClockFreq+0x16c>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x3a>
 8004732:	e09b      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_GetSysClockFreq+0x184>)
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004738:	e09b      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473a:	4b53      	ldr	r3, [pc, #332]	; (8004888 <HAL_RCC_GetSysClockFreq+0x188>)
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800473e:	e098      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004740:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <HAL_RCC_GetSysClockFreq+0x180>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474a:	4b4d      	ldr	r3, [pc, #308]	; (8004880 <HAL_RCC_GetSysClockFreq+0x180>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d028      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_GetSysClockFreq+0x180>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	2200      	movs	r2, #0
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	627a      	str	r2, [r7, #36]	; 0x24
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004768:	2100      	movs	r1, #0
 800476a:	4b47      	ldr	r3, [pc, #284]	; (8004888 <HAL_RCC_GetSysClockFreq+0x188>)
 800476c:	fb03 f201 	mul.w	r2, r3, r1
 8004770:	2300      	movs	r3, #0
 8004772:	fb00 f303 	mul.w	r3, r0, r3
 8004776:	4413      	add	r3, r2
 8004778:	4a43      	ldr	r2, [pc, #268]	; (8004888 <HAL_RCC_GetSysClockFreq+0x188>)
 800477a:	fba0 1202 	umull	r1, r2, r0, r2
 800477e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004780:	460a      	mov	r2, r1
 8004782:	62ba      	str	r2, [r7, #40]	; 0x28
 8004784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004786:	4413      	add	r3, r2
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2200      	movs	r2, #0
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	61fa      	str	r2, [r7, #28]
 8004792:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004796:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800479a:	f7fc fa0d 	bl	8000bb8 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4613      	mov	r3, r2
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a6:	e053      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a8:	4b35      	ldr	r3, [pc, #212]	; (8004880 <HAL_RCC_GetSysClockFreq+0x180>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	2200      	movs	r2, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	617a      	str	r2, [r7, #20]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047ba:	f04f 0b00 	mov.w	fp, #0
 80047be:	4652      	mov	r2, sl
 80047c0:	465b      	mov	r3, fp
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	0159      	lsls	r1, r3, #5
 80047cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d0:	0150      	lsls	r0, r2, #5
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	ebb2 080a 	subs.w	r8, r2, sl
 80047da:	eb63 090b 	sbc.w	r9, r3, fp
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047f2:	ebb2 0408 	subs.w	r4, r2, r8
 80047f6:	eb63 0509 	sbc.w	r5, r3, r9
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	00eb      	lsls	r3, r5, #3
 8004804:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004808:	00e2      	lsls	r2, r4, #3
 800480a:	4614      	mov	r4, r2
 800480c:	461d      	mov	r5, r3
 800480e:	eb14 030a 	adds.w	r3, r4, sl
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	eb45 030b 	adc.w	r3, r5, fp
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004826:	4629      	mov	r1, r5
 8004828:	028b      	lsls	r3, r1, #10
 800482a:	4621      	mov	r1, r4
 800482c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004830:	4621      	mov	r1, r4
 8004832:	028a      	lsls	r2, r1, #10
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483a:	2200      	movs	r2, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	60fa      	str	r2, [r7, #12]
 8004840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004844:	f7fc f9b8 	bl	8000bb8 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4613      	mov	r3, r2
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_GetSysClockFreq+0x180>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	3301      	adds	r3, #1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800486a:	e002      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetSysClockFreq+0x184>)
 800486e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004874:	4618      	mov	r0, r3
 8004876:	3740      	adds	r7, #64	; 0x40
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	00f42400 	.word	0x00f42400
 8004888:	00b71b00 	.word	0x00b71b00

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000000 	.word	0x20000000

080048a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07b      	b.n	80049ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d009      	beq.n	80048dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
 80048ce:	e005      	b.n	80048dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd f928 	bl	8001b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	f003 0104 	and.w	r1, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f003 0210 	and.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_Transmit+0x22>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e126      	b.n	8004c26 <HAL_SPI_Transmit+0x270>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e0:	f7fd fb62 	bl	80020a8 <HAL_GetTick>
 80049e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049fa:	e10b      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x52>
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a0c:	e102      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2203      	movs	r2, #3
 8004a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a54:	d10f      	bne.n	8004a76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9c:	d14b      	bne.n	8004b36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Transmit+0xf6>
 8004aa6:	8afb      	ldrh	r3, [r7, #22]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d13e      	bne.n	8004b2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ad0:	e02b      	b.n	8004b2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b04:	e011      	b.n	8004b2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b06:	f7fd facf 	bl	80020a8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d803      	bhi.n	8004b1e <HAL_SPI_Transmit+0x168>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Transmit+0x16e>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b28:	e074      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ce      	bne.n	8004ad2 <HAL_SPI_Transmit+0x11c>
 8004b34:	e04c      	b.n	8004bd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit+0x18e>
 8004b3e:	8afb      	ldrh	r3, [r7, #22]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d140      	bne.n	8004bc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b6a:	e02c      	b.n	8004bc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d113      	bne.n	8004ba2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ba0:	e011      	b.n	8004bc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba2:	f7fd fa81 	bl	80020a8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d803      	bhi.n	8004bba <HAL_SPI_Transmit+0x204>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb8:	d102      	bne.n	8004bc0 <HAL_SPI_Transmit+0x20a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc4:	e026      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1cd      	bne.n	8004b6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fa55 	bl	8005084 <SPI_EndRxTxTransaction>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e000      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08c      	sub	sp, #48	; 0x30
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_SPI_TransmitReceive+0x26>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e18a      	b.n	8004f6a <HAL_SPI_TransmitReceive+0x33c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5c:	f7fd fa24 	bl	80020a8 <HAL_GetTick>
 8004c60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c72:	887b      	ldrh	r3, [r7, #2]
 8004c74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d00f      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x70>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c84:	d107      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x68>
 8004c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d003      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c9c:	e15b      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x82>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x82>
 8004caa:	887b      	ldrh	r3, [r7, #2]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cb6:	e14e      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d003      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2205      	movs	r2, #5
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	887a      	ldrh	r2, [r7, #2]
 8004ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	887a      	ldrh	r2, [r7, #2]
 8004cee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d178      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x10a>
 8004d32:	8b7b      	ldrh	r3, [r7, #26]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d166      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5c:	e053      	b.n	8004e06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x176>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x176>
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d113      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d119      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x1b8>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d014      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de2:	2301      	movs	r3, #1
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004de6:	f7fd f95f 	bl	80020a8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d807      	bhi.n	8004e06 <HAL_SPI_TransmitReceive+0x1d8>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfc:	d003      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e04:	e0a7      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1a6      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1a1      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x130>
 8004e1a:	e07c      	b.n	8004f16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x1fc>
 8004e24:	8b7b      	ldrh	r3, [r7, #26]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d16b      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e50:	e057      	b.n	8004f02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11c      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x26c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x26c>
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d114      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d119      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x2ae>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d014      	beq.n	8004edc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004edc:	f7fd f8e4 	bl	80020a8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d803      	bhi.n	8004ef4 <HAL_SPI_TransmitReceive+0x2c6>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ef2:	d102      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x2cc>
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f00:	e029      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1a2      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x224>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d19d      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8b2 	bl	8005084 <SPI_EndRxTxTransaction>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f32:	e010      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	e000      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3730      	adds	r7, #48	; 0x30
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f84:	f7fd f890 	bl	80020a8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	4413      	add	r3, r2
 8004f92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f94:	f7fd f888 	bl	80020a8 <HAL_GetTick>
 8004f98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f9a:	4b39      	ldr	r3, [pc, #228]	; (8005080 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	015b      	lsls	r3, r3, #5
 8004fa0:	0d1b      	lsrs	r3, r3, #20
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004faa:	e054      	b.n	8005056 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb2:	d050      	beq.n	8005056 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb4:	f7fd f878 	bl	80020a8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d902      	bls.n	8004fca <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d13d      	bne.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe2:	d111      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fec:	d004      	beq.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d107      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d10f      	bne.n	8005032 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e017      	b.n	8005076 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3b01      	subs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	429a      	cmp	r2, r3
 8005072:	d19b      	bne.n	8004fac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000000 	.word	0x20000000

08005084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <SPI_EndRxTxTransaction+0x7c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <SPI_EndRxTxTransaction+0x80>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0d5b      	lsrs	r3, r3, #21
 800509c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ae:	d112      	bne.n	80050d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ff5a 	bl	8004f74 <SPI_WaitFlagStateUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00f      	b.n	80050f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3b01      	subs	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d0f2      	beq.n	80050d6 <SPI_EndRxTxTransaction+0x52>
 80050f0:	e000      	b.n	80050f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80050f2:	bf00      	nop
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000000 	.word	0x20000000
 8005104:	165e9f81 	.word	0x165e9f81

08005108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e041      	b.n	800519e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc fdc2 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f000 fac0 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e041      	b.n	800523c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f839 	bl	8005244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 fa71 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_TIM_PWM_Start+0x24>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e022      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d109      	bne.n	8005296 <HAL_TIM_PWM_Start+0x3e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e015      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x58>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e068      	b.n	800539c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0x82>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0x92>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fc84 	bl	8005c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a23      	ldr	r2, [pc, #140]	; (80053a4 <HAL_TIM_PWM_Start+0x14c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d107      	bne.n	800532a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_TIM_PWM_Start+0x14c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533c:	d013      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <HAL_TIM_PWM_Start+0x150>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a17      	ldr	r2, [pc, #92]	; (80053ac <HAL_TIM_PWM_Start+0x154>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <HAL_TIM_PWM_Start+0x158>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a14      	ldr	r2, [pc, #80]	; (80053b4 <HAL_TIM_PWM_Start+0x15c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d111      	bne.n	800538a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b06      	cmp	r3, #6
 8005376:	d010      	beq.n	800539a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005388:	e007      	b.n	800539a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40014000 	.word	0x40014000

080053b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0ae      	b.n	8005534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	f200 809f 	bhi.w	8005524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005525 	.word	0x08005525
 80053f4:	08005525 	.word	0x08005525
 80053f8:	08005525 	.word	0x08005525
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005525 	.word	0x08005525
 8005404:	08005525 	.word	0x08005525
 8005408:	08005525 	.word	0x08005525
 800540c:	080054a3 	.word	0x080054a3
 8005410:	08005525 	.word	0x08005525
 8005414:	08005525 	.word	0x08005525
 8005418:	08005525 	.word	0x08005525
 800541c:	080054e3 	.word	0x080054e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f9d0 	bl	80057cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0204 	bic.w	r2, r2, #4
 800544a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6999      	ldr	r1, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
      break;
 800545e:	e064      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa16 	bl	8005898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	619a      	str	r2, [r3, #24]
      break;
 80054a0:	e043      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fa61 	bl	8005970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0204 	bic.w	r2, r2, #4
 80054cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69d9      	ldr	r1, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	61da      	str	r2, [r3, #28]
      break;
 80054e0:	e023      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 faab 	bl	8005a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	021a      	lsls	r2, r3, #8
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	61da      	str	r2, [r3, #28]
      break;
 8005522:	e002      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
      break;
 8005528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIM_ConfigClockSource+0x1c>
 8005554:	2302      	movs	r3, #2
 8005556:	e0b4      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x186>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005590:	d03e      	beq.n	8005610 <HAL_TIM_ConfigClockSource+0xd4>
 8005592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005596:	f200 8087 	bhi.w	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	f000 8086 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x172>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a6:	d87f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b70      	cmp	r3, #112	; 0x70
 80055aa:	d01a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0xa6>
 80055ac:	2b70      	cmp	r3, #112	; 0x70
 80055ae:	d87b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d050      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x11a>
 80055b4:	2b60      	cmp	r3, #96	; 0x60
 80055b6:	d877      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b50      	cmp	r3, #80	; 0x50
 80055ba:	d03c      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0xfa>
 80055bc:	2b50      	cmp	r3, #80	; 0x50
 80055be:	d873      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d058      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x13a>
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d86f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d064      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d86b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d060      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d867      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d05a      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055e0:	e062      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6899      	ldr	r1, [r3, #8]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f000 faf1 	bl	8005bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]
      break;
 800560e:	e04f      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6899      	ldr	r1, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f000 fada 	bl	8005bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005632:	609a      	str	r2, [r3, #8]
      break;
 8005634:	e03c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 fa4e 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2150      	movs	r1, #80	; 0x50
 800564e:	4618      	mov	r0, r3
 8005650:	f000 faa7 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 8005654:	e02c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fa6d 	bl	8005b42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2160      	movs	r1, #96	; 0x60
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa97 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 8005674:	e01c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fa2e 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa87 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 fa7e 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80056a6:	e003      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a34      	ldr	r2, [pc, #208]	; (80057b0 <TIM_Base_SetConfig+0xe4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00f      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ea:	d00b      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a31      	ldr	r2, [pc, #196]	; (80057b4 <TIM_Base_SetConfig+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a30      	ldr	r2, [pc, #192]	; (80057b8 <TIM_Base_SetConfig+0xec>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <TIM_Base_SetConfig+0xf0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <TIM_Base_SetConfig+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01b      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d017      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <TIM_Base_SetConfig+0xe8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <TIM_Base_SetConfig+0xec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a20      	ldr	r2, [pc, #128]	; (80057bc <TIM_Base_SetConfig+0xf0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <TIM_Base_SetConfig+0xf4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <TIM_Base_SetConfig+0xf8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <TIM_Base_SetConfig+0xfc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <TIM_Base_SetConfig+0xe4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d103      	bne.n	800579c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	615a      	str	r2, [r3, #20]
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 0302 	bic.w	r3, r3, #2
 8005814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <TIM_OC1_SetConfig+0xc8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d10c      	bne.n	8005842 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0308 	bic.w	r3, r3, #8
 800582e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f023 0304 	bic.w	r3, r3, #4
 8005840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <TIM_OC1_SetConfig+0xc8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40010000 	.word	0x40010000

08005898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0210 	bic.w	r2, r3, #16
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 0320 	bic.w	r3, r3, #32
 80058e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1e      	ldr	r2, [pc, #120]	; (800596c <TIM_OC2_SetConfig+0xd4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a15      	ldr	r2, [pc, #84]	; (800596c <TIM_OC2_SetConfig+0xd4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d113      	bne.n	8005944 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000

08005970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <TIM_OC3_SetConfig+0xd0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10d      	bne.n	80059ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a14      	ldr	r2, [pc, #80]	; (8005a40 <TIM_OC3_SetConfig+0xd0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d113      	bne.n	8005a1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40010000 	.word	0x40010000

08005a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	031b      	lsls	r3, r3, #12
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <TIM_OC4_SetConfig+0x9c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d109      	bne.n	8005ab8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	019b      	lsls	r3, r3, #6
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0210 	bic.w	r2, r3, #16
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f043 0307 	orr.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e050      	b.n	8005d1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d013      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10c      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000

08005d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d40:	b084      	sub	sp, #16
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	f107 001c 	add.w	r0, r7, #28
 8005d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d122      	bne.n	8005d9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d105      	bne.n	8005d92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 fbee 	bl	8007574 <USB_CoreReset>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e01a      	b.n	8005dd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 fbe2 	bl	8007574 <USB_CoreReset>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc6:	e005      	b.n	8005dd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10b      	bne.n	8005df2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f043 0206 	orr.w	r2, r3, #6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dfe:	b004      	add	sp, #16
 8005e00:	4770      	bx	lr
	...

08005e04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d165      	bne.n	8005ee4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4a41      	ldr	r2, [pc, #260]	; (8005f20 <USB_SetTurnaroundTime+0x11c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d906      	bls.n	8005e2e <USB_SetTurnaroundTime+0x2a>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a40      	ldr	r2, [pc, #256]	; (8005f24 <USB_SetTurnaroundTime+0x120>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d202      	bcs.n	8005e2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e28:	230f      	movs	r3, #15
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e062      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4a3c      	ldr	r2, [pc, #240]	; (8005f24 <USB_SetTurnaroundTime+0x120>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d306      	bcc.n	8005e44 <USB_SetTurnaroundTime+0x40>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a3b      	ldr	r2, [pc, #236]	; (8005f28 <USB_SetTurnaroundTime+0x124>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d202      	bcs.n	8005e44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e3e:	230e      	movs	r3, #14
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e057      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a38      	ldr	r2, [pc, #224]	; (8005f28 <USB_SetTurnaroundTime+0x124>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d306      	bcc.n	8005e5a <USB_SetTurnaroundTime+0x56>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a37      	ldr	r2, [pc, #220]	; (8005f2c <USB_SetTurnaroundTime+0x128>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d202      	bcs.n	8005e5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e54:	230d      	movs	r3, #13
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e04c      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4a33      	ldr	r2, [pc, #204]	; (8005f2c <USB_SetTurnaroundTime+0x128>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d306      	bcc.n	8005e70 <USB_SetTurnaroundTime+0x6c>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a32      	ldr	r2, [pc, #200]	; (8005f30 <USB_SetTurnaroundTime+0x12c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d802      	bhi.n	8005e70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e041      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <USB_SetTurnaroundTime+0x12c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d906      	bls.n	8005e86 <USB_SetTurnaroundTime+0x82>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <USB_SetTurnaroundTime+0x130>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d802      	bhi.n	8005e86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e80:	230b      	movs	r3, #11
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e036      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <USB_SetTurnaroundTime+0x130>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d906      	bls.n	8005e9c <USB_SetTurnaroundTime+0x98>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a29      	ldr	r2, [pc, #164]	; (8005f38 <USB_SetTurnaroundTime+0x134>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d802      	bhi.n	8005e9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e96:	230a      	movs	r3, #10
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e02b      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <USB_SetTurnaroundTime+0x134>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d906      	bls.n	8005eb2 <USB_SetTurnaroundTime+0xae>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <USB_SetTurnaroundTime+0x138>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d202      	bcs.n	8005eb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eac:	2309      	movs	r3, #9
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e020      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <USB_SetTurnaroundTime+0x138>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d306      	bcc.n	8005ec8 <USB_SetTurnaroundTime+0xc4>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a20      	ldr	r2, [pc, #128]	; (8005f40 <USB_SetTurnaroundTime+0x13c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d802      	bhi.n	8005ec8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e015      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <USB_SetTurnaroundTime+0x13c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d906      	bls.n	8005ede <USB_SetTurnaroundTime+0xda>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <USB_SetTurnaroundTime+0x140>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d202      	bcs.n	8005ede <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ed8:	2307      	movs	r3, #7
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e00a      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ede:	2306      	movs	r3, #6
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e007      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005eea:	2309      	movs	r3, #9
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e001      	b.n	8005ef4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ef0:	2309      	movs	r3, #9
 8005ef2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	029b      	lsls	r3, r3, #10
 8005f08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	00d8acbf 	.word	0x00d8acbf
 8005f24:	00e4e1c0 	.word	0x00e4e1c0
 8005f28:	00f42400 	.word	0x00f42400
 8005f2c:	01067380 	.word	0x01067380
 8005f30:	011a499f 	.word	0x011a499f
 8005f34:	01312cff 	.word	0x01312cff
 8005f38:	014ca43f 	.word	0x014ca43f
 8005f3c:	016e3600 	.word	0x016e3600
 8005f40:	01a6ab1f 	.word	0x01a6ab1f
 8005f44:	01e84800 	.word	0x01e84800

08005f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f043 0201 	orr.w	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d115      	bne.n	8005fda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fba:	2001      	movs	r0, #1
 8005fbc:	f7fc f880 	bl	80020c0 <HAL_Delay>
      ms++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fa45 	bl	8007456 <USB_GetMode>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d01e      	beq.n	8006010 <USB_SetCurrentMode+0x84>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b31      	cmp	r3, #49	; 0x31
 8005fd6:	d9f0      	bls.n	8005fba <USB_SetCurrentMode+0x2e>
 8005fd8:	e01a      	b.n	8006010 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d115      	bne.n	800600c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fec:	2001      	movs	r0, #1
 8005fee:	f7fc f867 	bl	80020c0 <HAL_Delay>
      ms++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fa2c 	bl	8007456 <USB_GetMode>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <USB_SetCurrentMode+0x84>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b31      	cmp	r3, #49	; 0x31
 8006008:	d9f0      	bls.n	8005fec <USB_SetCurrentMode+0x60>
 800600a:	e001      	b.n	8006010 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e005      	b.n	800601c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b32      	cmp	r3, #50	; 0x32
 8006014:	d101      	bne.n	800601a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	e009      	b.n	8006058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3340      	adds	r3, #64	; 0x40
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	2200      	movs	r2, #0
 8006050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	3301      	adds	r3, #1
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b0e      	cmp	r3, #14
 800605c:	d9f2      	bls.n	8006044 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800605e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11c      	bne.n	800609e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006072:	f043 0302 	orr.w	r3, r3, #2
 8006076:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
 800609c:	e00b      	b.n	80060b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060bc:	461a      	mov	r2, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	4619      	mov	r1, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d0:	461a      	mov	r2, r3
 80060d2:	680b      	ldr	r3, [r1, #0]
 80060d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10c      	bne.n	80060f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060e2:	2100      	movs	r1, #0
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f965 	bl	80063b4 <USB_SetDevSpeed>
 80060ea:	e008      	b.n	80060fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060ec:	2101      	movs	r1, #1
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f960 	bl	80063b4 <USB_SetDevSpeed>
 80060f4:	e003      	b.n	80060fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060f6:	2103      	movs	r1, #3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f95b 	bl	80063b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060fe:	2110      	movs	r1, #16
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8f3 	bl	80062ec <USB_FlushTxFifo>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f91f 	bl	8006354 <USB_FlushRxFifo>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	461a      	mov	r2, r3
 8006128:	2300      	movs	r3, #0
 800612a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	461a      	mov	r2, r3
 8006134:	2300      	movs	r3, #0
 8006136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	461a      	mov	r2, r3
 8006140:	2300      	movs	r3, #0
 8006142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	e043      	b.n	80061d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006160:	d118      	bne.n	8006194 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	461a      	mov	r2, r3
 8006176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	e013      	b.n	80061a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	461a      	mov	r2, r3
 800618c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e008      	b.n	80061a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	461a      	mov	r2, r3
 80061a2:	2300      	movs	r3, #0
 80061a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	461a      	mov	r2, r3
 80061b4:	2300      	movs	r3, #0
 80061b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	461a      	mov	r2, r3
 80061c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	3301      	adds	r3, #1
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3b7      	bcc.n	800614a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e043      	b.n	8006268 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f6:	d118      	bne.n	800622a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	461a      	mov	r2, r3
 800620c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e013      	b.n	800623c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	461a      	mov	r2, r3
 8006222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e008      	b.n	800623c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	461a      	mov	r2, r3
 8006238:	2300      	movs	r3, #0
 800623a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	461a      	mov	r2, r3
 800624a:	2300      	movs	r3, #0
 800624c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	461a      	mov	r2, r3
 800625c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	3301      	adds	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	429a      	cmp	r2, r3
 800626e:	d3b7      	bcc.n	80061e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f043 0210 	orr.w	r2, r3, #16
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <USB_DevInit+0x2c4>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f043 0208 	orr.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d107      	bne.n	80062d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062d0:	f043 0304 	orr.w	r3, r3, #4
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e4:	b004      	add	sp, #16
 80062e6:	4770      	bx	lr
 80062e8:	803c3800 	.word	0x803c3800

080062ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <USB_FlushTxFifo+0x64>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e01b      	b.n	8006344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	daf2      	bge.n	80062fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	019b      	lsls	r3, r3, #6
 800631c:	f043 0220 	orr.w	r2, r3, #32
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <USB_FlushTxFifo+0x64>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e006      	b.n	8006344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b20      	cmp	r3, #32
 8006340:	d0f0      	beq.n	8006324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	00030d40 	.word	0x00030d40

08006354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <USB_FlushRxFifo+0x5c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e018      	b.n	80063a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	daf2      	bge.n	8006360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2210      	movs	r2, #16
 8006382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <USB_FlushRxFifo+0x5c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e006      	b.n	80063a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d0f0      	beq.n	8006384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	00030d40 	.word	0x00030d40

080063b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d4:	4313      	orrs	r3, r2
 80063d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0306 	and.w	r3, r3, #6
 80063fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
 800640a:	e00a      	b.n	8006422 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d002      	beq.n	8006418 <USB_GetDevSpeed+0x32>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b06      	cmp	r3, #6
 8006416:	d102      	bne.n	800641e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006418:	2302      	movs	r3, #2
 800641a:	75fb      	strb	r3, [r7, #23]
 800641c:	e001      	b.n	8006422 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800641e:	230f      	movs	r3, #15
 8006420:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d13a      	bne.n	80064c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	b29b      	uxth	r3, r3
 8006464:	68f9      	ldr	r1, [r7, #12]
 8006466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800646a:	4313      	orrs	r3, r2
 800646c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d155      	bne.n	8006530 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	059b      	lsls	r3, r3, #22
 80064a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a8:	4313      	orrs	r3, r2
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e036      	b.n	8006530 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d11a      	bne.n	8006530 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006516:	430b      	orrs	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d161      	bne.n	8006620 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006572:	d11f      	bne.n	80065b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006592:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d4:	4013      	ands	r3, r2
 80065d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f303 	lsl.w	r3, r1, r3
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f8:	4013      	ands	r3, r2
 80065fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	0159      	lsls	r1, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	440b      	add	r3, r1
 8006612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006616:	4619      	mov	r1, r3
 8006618:	4b35      	ldr	r3, [pc, #212]	; (80066f0 <USB_DeactivateEndpoint+0x1b0>)
 800661a:	4013      	ands	r3, r2
 800661c:	600b      	str	r3, [r1, #0]
 800661e:	e060      	b.n	80066e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006636:	d11f      	bne.n	8006678 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006652:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006656:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	43db      	mvns	r3, r3
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006698:	4013      	ands	r3, r2
 800669a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	2101      	movs	r1, #1
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	43db      	mvns	r3, r3
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066bc:	4013      	ands	r3, r2
 80066be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	0159      	lsls	r1, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	440b      	add	r3, r1
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	4619      	mov	r1, r3
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <USB_DeactivateEndpoint+0x1b4>)
 80066de:	4013      	ands	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	ec337800 	.word	0xec337800
 80066f4:	eff37800 	.word	0xeff37800

080066f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 815c 	bne.w	80069d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d132      	bne.n	8006788 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006740:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	0cdb      	lsrs	r3, r3, #19
 8006782:	04db      	lsls	r3, r3, #19
 8006784:	6113      	str	r3, [r2, #16]
 8006786:	e074      	b.n	8006872 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	0cdb      	lsrs	r3, r3, #19
 80067a4:	04db      	lsls	r3, r3, #19
 80067a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6999      	ldr	r1, [r3, #24]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	440b      	add	r3, r1
 80067e4:	1e59      	subs	r1, r3, #1
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80067ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067f0:	4b9d      	ldr	r3, [pc, #628]	; (8006a68 <USB_EPStartXfer+0x370>)
 80067f2:	400b      	ands	r3, r1
 80067f4:	69b9      	ldr	r1, [r7, #24]
 80067f6:	0148      	lsls	r0, r1, #5
 80067f8:	69f9      	ldr	r1, [r7, #28]
 80067fa:	4401      	add	r1, r0
 80067fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006800:	4313      	orrs	r3, r2
 8006802:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	0148      	lsls	r0, r1, #5
 800681e:	69f9      	ldr	r1, [r7, #28]
 8006820:	4401      	add	r1, r0
 8006822:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006826:	4313      	orrs	r3, r2
 8006828:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	791b      	ldrb	r3, [r3, #4]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d11f      	bne.n	8006872 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006850:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006870:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d14b      	bne.n	8006910 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	791b      	ldrb	r3, [r3, #4]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d128      	bne.n	80068ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d110      	bne.n	80068ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	e00f      	b.n	80068ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006908:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e133      	b.n	8006b78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800692e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	791b      	ldrb	r3, [r3, #4]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d015      	beq.n	8006964 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 811b 	beq.w	8006b78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	2101      	movs	r1, #1
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	69f9      	ldr	r1, [r7, #28]
 800695a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800695e:	4313      	orrs	r3, r2
 8006960:	634b      	str	r3, [r1, #52]	; 0x34
 8006962:	e109      	b.n	8006b78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d110      	bne.n	8006996 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	e00f      	b.n	80069b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6919      	ldr	r1, [r3, #16]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	b298      	uxth	r0, r3
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4603      	mov	r3, r0
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fade 	bl	8006f8c <USB_WritePacket>
 80069d0:	e0d2      	b.n	8006b78 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ec:	0cdb      	lsrs	r3, r3, #19
 80069ee:	04db      	lsls	r3, r3, #19
 80069f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d126      	bne.n	8006a6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a34:	69b9      	ldr	r1, [r7, #24]
 8006a36:	0148      	lsls	r0, r1, #5
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	4401      	add	r1, r0
 8006a3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a40:	4313      	orrs	r3, r2
 8006a42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a62:	6113      	str	r3, [r2, #16]
 8006a64:	e03a      	b.n	8006adc <USB_EPStartXfer+0x3e4>
 8006a66:	bf00      	nop
 8006a68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	1e5a      	subs	r2, r3, #1
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	8afa      	ldrh	r2, [r7, #22]
 8006a88:	fb03 f202 	mul.w	r2, r3, r2
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	04d9      	lsls	r1, r3, #19
 8006aa2:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <USB_EPStartXfer+0x48c>)
 8006aa4:	400b      	ands	r3, r1
 8006aa6:	69b9      	ldr	r1, [r7, #24]
 8006aa8:	0148      	lsls	r0, r1, #5
 8006aaa:	69f9      	ldr	r1, [r7, #28]
 8006aac:	4401      	add	r1, r0
 8006aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006acc:	69b9      	ldr	r1, [r7, #24]
 8006ace:	0148      	lsls	r0, r1, #5
 8006ad0:	69f9      	ldr	r1, [r7, #28]
 8006ad2:	4401      	add	r1, r0
 8006ad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10d      	bne.n	8006afe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6919      	ldr	r1, [r3, #16]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	460a      	mov	r2, r1
 8006afc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	791b      	ldrb	r3, [r3, #4]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d128      	bne.n	8006b58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d110      	bne.n	8006b38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e00f      	b.n	8006b58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	1ff80000 	.word	0x1ff80000

08006b88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	f040 80ce 	bne.w	8006d46 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d132      	bne.n	8006c18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c10:	0cdb      	lsrs	r3, r3, #19
 8006c12:	04db      	lsls	r3, r3, #19
 8006c14:	6113      	str	r3, [r2, #16]
 8006c16:	e04e      	b.n	8006cb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	0cdb      	lsrs	r3, r3, #19
 8006c34:	04db      	lsls	r3, r3, #19
 8006c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d903      	bls.n	8006c70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca6:	6939      	ldr	r1, [r7, #16]
 8006ca8:	0148      	lsls	r0, r1, #5
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	4401      	add	r1, r0
 8006cae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d11e      	bne.n	8006cfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	e097      	b.n	8006e2a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8083 	beq.w	8006e2a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	2101      	movs	r1, #1
 8006d36:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3a:	6979      	ldr	r1, [r7, #20]
 8006d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d40:	4313      	orrs	r3, r2
 8006d42:	634b      	str	r3, [r1, #52]	; 0x34
 8006d44:	e071      	b.n	8006e2a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d60:	0cdb      	lsrs	r3, r3, #19
 8006d62:	04db      	lsls	r3, r3, #19
 8006d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dd8:	6939      	ldr	r1, [r7, #16]
 8006dda:	0148      	lsls	r0, r1, #5
 8006ddc:	6979      	ldr	r1, [r7, #20]
 8006dde:	4401      	add	r1, r0
 8006de0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006de4:	4313      	orrs	r3, r2
 8006de6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d10d      	bne.n	8006e0a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6919      	ldr	r1, [r3, #16]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	460a      	mov	r2, r1
 8006e08:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d14a      	bne.n	8006eec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e6e:	f040 8086 	bne.w	8006f7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d902      	bls.n	8006ed0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ece:	e056      	b.n	8006f7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee8:	d0e7      	beq.n	8006eba <USB_EPStopXfer+0x82>
 8006eea:	e048      	b.n	8006f7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f04:	d13b      	bne.n	8006f7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	7812      	ldrb	r2, [r2, #0]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	7812      	ldrb	r2, [r2, #0]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d902      	bls.n	8006f64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
          break;
 8006f62:	e00c      	b.n	8006f7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f7c:	d0e7      	beq.n	8006f4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	; 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4611      	mov	r1, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	71fb      	strb	r3, [r7, #7]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006faa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d123      	bne.n	8006ffa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fb2:	88bb      	ldrh	r3, [r7, #4]
 8006fb4:	3303      	adds	r3, #3
 8006fb6:	089b      	lsrs	r3, r3, #2
 8006fb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e018      	b.n	8006ff2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	031a      	lsls	r2, r3, #12
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fcc:	461a      	mov	r2, r3
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d3e2      	bcc.n	8006fc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3724      	adds	r7, #36	; 0x24
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007008:	b480      	push	{r7}
 800700a:	b08b      	sub	sp, #44	; 0x2c
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	b29b      	uxth	r3, r3
 8007024:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	623b      	str	r3, [r7, #32]
 8007032:	e014      	b.n	800705e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	3301      	adds	r3, #1
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	3301      	adds	r3, #1
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	3301      	adds	r3, #1
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	3301      	adds	r3, #1
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	3301      	adds	r3, #1
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	429a      	cmp	r2, r3
 8007064:	d3e6      	bcc.n	8007034 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007066:	8bfb      	ldrh	r3, [r7, #30]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01e      	beq.n	80070aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007076:	461a      	mov	r2, r3
 8007078:	f107 0310 	add.w	r3, r7, #16
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
 800708c:	b2da      	uxtb	r2, r3
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	701a      	strb	r2, [r3, #0]
      i++;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	3301      	adds	r3, #1
 8007096:	623b      	str	r3, [r7, #32]
      pDest++;
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	3301      	adds	r3, #1
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800709e:	8bfb      	ldrh	r3, [r7, #30]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070a4:	8bfb      	ldrh	r3, [r7, #30]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1ea      	bne.n	8007080 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	372c      	adds	r7, #44	; 0x2c
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d12c      	bne.n	800712e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	db12      	blt.n	800710c <USB_EPSetStall+0x54>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00f      	beq.n	800710c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800710a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	e02b      	b.n	8007186 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	db12      	blt.n	8007166 <USB_EPSetStall+0xae>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00f      	beq.n	8007166 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007164:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	440a      	add	r2, r1
 800717c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007184:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d128      	bne.n	8007202 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	791b      	ldrb	r3, [r3, #4]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d003      	beq.n	80071e0 <USB_EPClearStall+0x4c>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	791b      	ldrb	r3, [r3, #4]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d138      	bne.n	8007252 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	e027      	b.n	8007252 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d003      	beq.n	8007232 <USB_EPClearStall+0x9e>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	791b      	ldrb	r3, [r3, #4]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d10f      	bne.n	8007252 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	440a      	add	r2, r1
 8007248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800724c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007250:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800727e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007282:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800729a:	4313      	orrs	r3, r2
 800729c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072da:	f023 0302 	bic.w	r3, r3, #2
 80072de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007308:	f023 0303 	bic.w	r3, r3, #3
 800730c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800731c:	f043 0302 	orr.w	r3, r3, #2
 8007320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	4013      	ands	r3, r2
 8007378:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	0c1b      	lsrs	r3, r3, #16
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	b29b      	uxth	r3, r3
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	4013      	ands	r3, r2
 80073ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073ec:	68bb      	ldr	r3, [r7, #8]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b087      	sub	sp, #28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	fa22 f303 	lsr.w	r3, r2, r3
 800742a:	01db      	lsls	r3, r3, #7
 800742c:	b2db      	uxtb	r3, r3
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4013      	ands	r3, r2
 8007446:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007448:	68bb      	ldr	r3, [r7, #8]
}
 800744a:	4618      	mov	r0, r3
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0301 	and.w	r3, r3, #1
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	460b      	mov	r3, r1
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	333c      	adds	r3, #60	; 0x3c
 80074ce:	3304      	adds	r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <USB_EP0_OutStart+0xb8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d90a      	bls.n	80074f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ec:	d101      	bne.n	80074f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e037      	b.n	8007562 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	461a      	mov	r2, r3
 80074fa:	2300      	movs	r3, #0
 80074fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007520:	f043 0318 	orr.w	r3, r3, #24
 8007524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007534:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007538:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10f      	bne.n	8007560 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800755e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	4f54300a 	.word	0x4f54300a

08007574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <USB_CoreReset+0x64>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d901      	bls.n	8007592 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e01b      	b.n	80075ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	daf2      	bge.n	8007580 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f043 0201 	orr.w	r2, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <USB_CoreReset+0x64>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d901      	bls.n	80075bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e006      	b.n	80075ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d0f0      	beq.n	80075aa <USB_CoreReset+0x36>

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	00030d40 	.word	0x00030d40

080075dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075ec:	f002 fc1e 	bl	8009e2c <USBD_static_malloc>
 80075f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d109      	bne.n	800760c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32b0      	adds	r2, #176	; 0xb0
 8007602:	2100      	movs	r1, #0
 8007604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007608:	2302      	movs	r3, #2
 800760a:	e0d4      	b.n	80077b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800760c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007610:	2100      	movs	r1, #0
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f002 fc86 	bl	8009f24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32b0      	adds	r2, #176	; 0xb0
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	32b0      	adds	r2, #176	; 0xb0
 8007632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	7c1b      	ldrb	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d138      	bne.n	80076b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007644:	4b5e      	ldr	r3, [pc, #376]	; (80077c0 <USBD_CDC_Init+0x1e4>)
 8007646:	7819      	ldrb	r1, [r3, #0]
 8007648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800764c:	2202      	movs	r2, #2
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f002 fac9 	bl	8009be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007654:	4b5a      	ldr	r3, [pc, #360]	; (80077c0 <USBD_CDC_Init+0x1e4>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	f003 020f 	and.w	r2, r3, #15
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	3324      	adds	r3, #36	; 0x24
 800766a:	2201      	movs	r2, #1
 800766c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800766e:	4b55      	ldr	r3, [pc, #340]	; (80077c4 <USBD_CDC_Init+0x1e8>)
 8007670:	7819      	ldrb	r1, [r3, #0]
 8007672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007676:	2202      	movs	r2, #2
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f002 fab4 	bl	8009be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800767e:	4b51      	ldr	r3, [pc, #324]	; (80077c4 <USBD_CDC_Init+0x1e8>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	f003 020f 	and.w	r2, r3, #15
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007696:	2201      	movs	r2, #1
 8007698:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800769a:	4b4b      	ldr	r3, [pc, #300]	; (80077c8 <USBD_CDC_Init+0x1ec>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	f003 020f 	and.w	r2, r3, #15
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	440b      	add	r3, r1
 80076ae:	3326      	adds	r3, #38	; 0x26
 80076b0:	2210      	movs	r2, #16
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e035      	b.n	8007722 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076b6:	4b42      	ldr	r3, [pc, #264]	; (80077c0 <USBD_CDC_Init+0x1e4>)
 80076b8:	7819      	ldrb	r1, [r3, #0]
 80076ba:	2340      	movs	r3, #64	; 0x40
 80076bc:	2202      	movs	r2, #2
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f002 fa91 	bl	8009be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076c4:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <USBD_CDC_Init+0x1e4>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	3324      	adds	r3, #36	; 0x24
 80076da:	2201      	movs	r2, #1
 80076dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076de:	4b39      	ldr	r3, [pc, #228]	; (80077c4 <USBD_CDC_Init+0x1e8>)
 80076e0:	7819      	ldrb	r1, [r3, #0]
 80076e2:	2340      	movs	r3, #64	; 0x40
 80076e4:	2202      	movs	r2, #2
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f002 fa7d 	bl	8009be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076ec:	4b35      	ldr	r3, [pc, #212]	; (80077c4 <USBD_CDC_Init+0x1e8>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007704:	2201      	movs	r2, #1
 8007706:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007708:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <USBD_CDC_Init+0x1ec>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	3326      	adds	r3, #38	; 0x26
 800771e:	2210      	movs	r2, #16
 8007720:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007722:	4b29      	ldr	r3, [pc, #164]	; (80077c8 <USBD_CDC_Init+0x1ec>)
 8007724:	7819      	ldrb	r1, [r3, #0]
 8007726:	2308      	movs	r3, #8
 8007728:	2203      	movs	r2, #3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f002 fa5b 	bl	8009be6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007730:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <USBD_CDC_Init+0x1ec>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 020f 	and.w	r2, r3, #15
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	3324      	adds	r3, #36	; 0x24
 8007746:	2201      	movs	r2, #1
 8007748:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	33b0      	adds	r3, #176	; 0xb0
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007780:	2302      	movs	r3, #2
 8007782:	e018      	b.n	80077b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7c1b      	ldrb	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <USBD_CDC_Init+0x1e8>)
 800778e:	7819      	ldrb	r1, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f002 fb12 	bl	8009dc4 <USBD_LL_PrepareReceive>
 80077a0:	e008      	b.n	80077b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077a2:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <USBD_CDC_Init+0x1e8>)
 80077a4:	7819      	ldrb	r1, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f002 fb08 	bl	8009dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000093 	.word	0x20000093
 80077c4:	20000094 	.word	0x20000094
 80077c8:	20000095 	.word	0x20000095

080077cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80077d8:	4b3a      	ldr	r3, [pc, #232]	; (80078c4 <USBD_CDC_DeInit+0xf8>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f002 fa27 	bl	8009c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077e4:	4b37      	ldr	r3, [pc, #220]	; (80078c4 <USBD_CDC_DeInit+0xf8>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	f003 020f 	and.w	r2, r3, #15
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	3324      	adds	r3, #36	; 0x24
 80077fa:	2200      	movs	r2, #0
 80077fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80077fe:	4b32      	ldr	r3, [pc, #200]	; (80078c8 <USBD_CDC_DeInit+0xfc>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f002 fa14 	bl	8009c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800780a:	4b2f      	ldr	r3, [pc, #188]	; (80078c8 <USBD_CDC_DeInit+0xfc>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	f003 020f 	and.w	r2, r3, #15
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007822:	2200      	movs	r2, #0
 8007824:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007826:	4b29      	ldr	r3, [pc, #164]	; (80078cc <USBD_CDC_DeInit+0x100>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f002 fa00 	bl	8009c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007832:	4b26      	ldr	r3, [pc, #152]	; (80078cc <USBD_CDC_DeInit+0x100>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	f003 020f 	and.w	r2, r3, #15
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	3324      	adds	r3, #36	; 0x24
 8007848:	2200      	movs	r2, #0
 800784a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800784c:	4b1f      	ldr	r3, [pc, #124]	; (80078cc <USBD_CDC_DeInit+0x100>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 020f 	and.w	r2, r3, #15
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3326      	adds	r3, #38	; 0x26
 8007862:	2200      	movs	r2, #0
 8007864:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	32b0      	adds	r2, #176	; 0xb0
 8007870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01f      	beq.n	80078b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	33b0      	adds	r3, #176	; 0xb0
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	32b0      	adds	r2, #176	; 0xb0
 8007896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789a:	4618      	mov	r0, r3
 800789c:	f002 fad4 	bl	8009e48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32b0      	adds	r2, #176	; 0xb0
 80078aa:	2100      	movs	r1, #0
 80078ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000093 	.word	0x20000093
 80078c8:	20000094 	.word	0x20000094
 80078cc:	20000095 	.word	0x20000095

080078d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	32b0      	adds	r2, #176	; 0xb0
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e0bf      	b.n	8007a80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007908:	2b00      	cmp	r3, #0
 800790a:	d050      	beq.n	80079ae <USBD_CDC_Setup+0xde>
 800790c:	2b20      	cmp	r3, #32
 800790e:	f040 80af 	bne.w	8007a70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	88db      	ldrh	r3, [r3, #6]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d03a      	beq.n	8007990 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b25b      	sxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	da1b      	bge.n	800795c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	33b0      	adds	r3, #176	; 0xb0
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800793a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	88d2      	ldrh	r2, [r2, #6]
 8007940:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	88db      	ldrh	r3, [r3, #6]
 8007946:	2b07      	cmp	r3, #7
 8007948:	bf28      	it	cs
 800794a:	2307      	movcs	r3, #7
 800794c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	89fa      	ldrh	r2, [r7, #14]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fd43 	bl	80093e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800795a:	e090      	b.n	8007a7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	785a      	ldrb	r2, [r3, #1]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	88db      	ldrh	r3, [r3, #6]
 800796a:	2b3f      	cmp	r3, #63	; 0x3f
 800796c:	d803      	bhi.n	8007976 <USBD_CDC_Setup+0xa6>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	88db      	ldrh	r3, [r3, #6]
 8007972:	b2da      	uxtb	r2, r3
 8007974:	e000      	b.n	8007978 <USBD_CDC_Setup+0xa8>
 8007976:	2240      	movs	r2, #64	; 0x40
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800797e:	6939      	ldr	r1, [r7, #16]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007986:	461a      	mov	r2, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 fd55 	bl	8009438 <USBD_CtlPrepareRx>
      break;
 800798e:	e076      	b.n	8007a7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	33b0      	adds	r3, #176	; 0xb0
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	7850      	ldrb	r0, [r2, #1]
 80079a6:	2200      	movs	r2, #0
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	4798      	blx	r3
      break;
 80079ac:	e067      	b.n	8007a7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	2b0b      	cmp	r3, #11
 80079b4:	d851      	bhi.n	8007a5a <USBD_CDC_Setup+0x18a>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <USBD_CDC_Setup+0xec>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079ed 	.word	0x080079ed
 80079c0:	08007a69 	.word	0x08007a69
 80079c4:	08007a5b 	.word	0x08007a5b
 80079c8:	08007a5b 	.word	0x08007a5b
 80079cc:	08007a5b 	.word	0x08007a5b
 80079d0:	08007a5b 	.word	0x08007a5b
 80079d4:	08007a5b 	.word	0x08007a5b
 80079d8:	08007a5b 	.word	0x08007a5b
 80079dc:	08007a5b 	.word	0x08007a5b
 80079e0:	08007a5b 	.word	0x08007a5b
 80079e4:	08007a17 	.word	0x08007a17
 80079e8:	08007a41 	.word	0x08007a41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d107      	bne.n	8007a08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079f8:	f107 030a 	add.w	r3, r7, #10
 80079fc:	2202      	movs	r2, #2
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 fced 	bl	80093e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a06:	e032      	b.n	8007a6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fc77 	bl	80092fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	75fb      	strb	r3, [r7, #23]
          break;
 8007a14:	e02b      	b.n	8007a6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d107      	bne.n	8007a32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a22:	f107 030d 	add.w	r3, r7, #13
 8007a26:	2201      	movs	r2, #1
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fcd8 	bl	80093e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a30:	e01d      	b.n	8007a6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fc62 	bl	80092fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a3e:	e016      	b.n	8007a6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d00f      	beq.n	8007a6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fc55 	bl	80092fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a58:	e008      	b.n	8007a6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fc4e 	bl	80092fe <USBD_CtlError>
          ret = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	75fb      	strb	r3, [r7, #23]
          break;
 8007a66:	e002      	b.n	8007a6e <USBD_CDC_Setup+0x19e>
          break;
 8007a68:	bf00      	nop
 8007a6a:	e008      	b.n	8007a7e <USBD_CDC_Setup+0x1ae>
          break;
 8007a6c:	bf00      	nop
      }
      break;
 8007a6e:	e006      	b.n	8007a7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fc43 	bl	80092fe <USBD_CtlError>
      ret = USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	32b0      	adds	r2, #176	; 0xb0
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e065      	b.n	8007b7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	32b0      	adds	r2, #176	; 0xb0
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	f003 020f 	and.w	r2, r3, #15
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02f      	beq.n	8007b3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	f003 020f 	and.w	r2, r3, #15
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	3318      	adds	r3, #24
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	f003 010f 	and.w	r1, r3, #15
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	460b      	mov	r3, r1
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	440b      	add	r3, r1
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4403      	add	r3, r0
 8007b04:	3348      	adds	r3, #72	; 0x48
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d112      	bne.n	8007b3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3318      	adds	r3, #24
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b2e:	78f9      	ldrb	r1, [r7, #3]
 8007b30:	2300      	movs	r3, #0
 8007b32:	2200      	movs	r2, #0
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f002 f924 	bl	8009d82 <USBD_LL_Transmit>
 8007b3a:	e01f      	b.n	8007b7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	33b0      	adds	r3, #176	; 0xb0
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	33b0      	adds	r3, #176	; 0xb0
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	32b0      	adds	r2, #176	; 0xb0
 8007b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	32b0      	adds	r2, #176	; 0xb0
 8007bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e01a      	b.n	8007bee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f002 f922 	bl	8009e06 <USBD_LL_GetRxDataSize>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	33b0      	adds	r3, #176	; 0xb0
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007be8:	4611      	mov	r1, r2
 8007bea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	32b0      	adds	r2, #176	; 0xb0
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e025      	b.n	8007c64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	33b0      	adds	r3, #176	; 0xb0
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <USBD_CDC_EP0_RxReady+0x6c>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c32:	2bff      	cmp	r3, #255	; 0xff
 8007c34:	d015      	beq.n	8007c62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	33b0      	adds	r3, #176	; 0xb0
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c56:	b292      	uxth	r2, r2
 8007c58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	22ff      	movs	r2, #255	; 0xff
 8007c5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c74:	2182      	movs	r1, #130	; 0x82
 8007c76:	4818      	ldr	r0, [pc, #96]	; (8007cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c78:	f000 fd09 	bl	800868e <USBD_GetEpDesc>
 8007c7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c7e:	2101      	movs	r1, #1
 8007c80:	4815      	ldr	r0, [pc, #84]	; (8007cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c82:	f000 fd04 	bl	800868e <USBD_GetEpDesc>
 8007c86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c88:	2181      	movs	r1, #129	; 0x81
 8007c8a:	4813      	ldr	r0, [pc, #76]	; (8007cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c8c:	f000 fcff 	bl	800868e <USBD_GetEpDesc>
 8007c90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cac:	711a      	strb	r2, [r3, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d006      	beq.n	8007cc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc0:	711a      	strb	r2, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2243      	movs	r2, #67	; 0x43
 8007cca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ccc:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000050 	.word	0x20000050

08007cdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ce4:	2182      	movs	r1, #130	; 0x82
 8007ce6:	4818      	ldr	r0, [pc, #96]	; (8007d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ce8:	f000 fcd1 	bl	800868e <USBD_GetEpDesc>
 8007cec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4815      	ldr	r0, [pc, #84]	; (8007d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cf2:	f000 fccc 	bl	800868e <USBD_GetEpDesc>
 8007cf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cf8:	2181      	movs	r1, #129	; 0x81
 8007cfa:	4813      	ldr	r0, [pc, #76]	; (8007d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cfc:	f000 fcc7 	bl	800868e <USBD_GetEpDesc>
 8007d00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2210      	movs	r2, #16
 8007d0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d006      	beq.n	8007d22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2200      	movs	r2, #0
 8007d18:	711a      	strb	r2, [r3, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f042 0202 	orr.w	r2, r2, #2
 8007d20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	711a      	strb	r2, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f042 0202 	orr.w	r2, r2, #2
 8007d34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2243      	movs	r2, #67	; 0x43
 8007d3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000050 	.word	0x20000050

08007d4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d54:	2182      	movs	r1, #130	; 0x82
 8007d56:	4818      	ldr	r0, [pc, #96]	; (8007db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d58:	f000 fc99 	bl	800868e <USBD_GetEpDesc>
 8007d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4815      	ldr	r0, [pc, #84]	; (8007db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d62:	f000 fc94 	bl	800868e <USBD_GetEpDesc>
 8007d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d68:	2181      	movs	r1, #129	; 0x81
 8007d6a:	4813      	ldr	r0, [pc, #76]	; (8007db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d6c:	f000 fc8f 	bl	800868e <USBD_GetEpDesc>
 8007d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2210      	movs	r2, #16
 8007d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d006      	beq.n	8007d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d8c:	711a      	strb	r2, [r3, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da0:	711a      	strb	r2, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2243      	movs	r2, #67	; 0x43
 8007daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dac:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000050 	.word	0x20000050

08007dbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220a      	movs	r2, #10
 8007dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007dca:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	2000000c 	.word	0x2000000c

08007ddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e009      	b.n	8007e04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	33b0      	adds	r3, #176	; 0xb0
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	32b0      	adds	r2, #176	; 0xb0
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e008      	b.n	8007e48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	32b0      	adds	r2, #176	; 0xb0
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e004      	b.n	8007e82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	32b0      	adds	r2, #176	; 0xb0
 8007ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32b0      	adds	r2, #176	; 0xb0
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e018      	b.n	8007ef0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7c1b      	ldrb	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <USBD_CDC_ReceivePacket+0x68>)
 8007ec8:	7819      	ldrb	r1, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 ff75 	bl	8009dc4 <USBD_LL_PrepareReceive>
 8007eda:	e008      	b.n	8007eee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <USBD_CDC_ReceivePacket+0x68>)
 8007ede:	7819      	ldrb	r1, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 ff6b 	bl	8009dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000094 	.word	0x20000094

08007efc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e01f      	b.n	8007f54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	79fa      	ldrb	r2, [r7, #7]
 8007f46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fde5 	bl	8009b18 <USBD_LL_Init>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e025      	b.n	8007fc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	32ae      	adds	r2, #174	; 0xae
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32ae      	adds	r2, #174	; 0xae
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	f107 020e 	add.w	r2, r7, #14
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	4602      	mov	r2, r0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fded 	bl	8009bb0 <USBD_LL_Start>
 8007fd6:	4603      	mov	r3, r0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d009      	beq.n	8008024 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	4611      	mov	r1, r2
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	4611      	mov	r1, r2
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008054:	2303      	movs	r3, #3
 8008056:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f001 f908 	bl	800928a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008088:	461a      	mov	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2b02      	cmp	r3, #2
 800809c:	d01a      	beq.n	80080d4 <USBD_LL_SetupStage+0x72>
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d822      	bhi.n	80080e8 <USBD_LL_SetupStage+0x86>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <USBD_LL_SetupStage+0x4a>
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d00a      	beq.n	80080c0 <USBD_LL_SetupStage+0x5e>
 80080aa:	e01d      	b.n	80080e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb5f 	bl	8008778 <USBD_StdDevReq>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]
      break;
 80080be:	e020      	b.n	8008102 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fbc7 	bl	800885c <USBD_StdItfReq>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]
      break;
 80080d2:	e016      	b.n	8008102 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fc29 	bl	8008934 <USBD_StdEPReq>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
      break;
 80080e6:	e00c      	b.n	8008102 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 fdba 	bl	8009c70 <USBD_LL_StallEP>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008100:	bf00      	nop
  }

  return ret;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	460b      	mov	r3, r1
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d16e      	bne.n	8008202 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800812a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008132:	2b03      	cmp	r3, #3
 8008134:	f040 8098 	bne.w	8008268 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	429a      	cmp	r2, r3
 8008142:	d913      	bls.n	800816c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	1ad2      	subs	r2, r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	4293      	cmp	r3, r2
 800815c:	bf28      	it	cs
 800815e:	4613      	movcs	r3, r2
 8008160:	461a      	mov	r2, r3
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f001 f984 	bl	8009472 <USBD_CtlContinueRx>
 800816a:	e07d      	b.n	8008268 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2b02      	cmp	r3, #2
 8008178:	d014      	beq.n	80081a4 <USBD_LL_DataOutStage+0x98>
 800817a:	2b02      	cmp	r3, #2
 800817c:	d81d      	bhi.n	80081ba <USBD_LL_DataOutStage+0xae>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <USBD_LL_DataOutStage+0x7c>
 8008182:	2b01      	cmp	r3, #1
 8008184:	d003      	beq.n	800818e <USBD_LL_DataOutStage+0x82>
 8008186:	e018      	b.n	80081ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	75bb      	strb	r3, [r7, #22]
            break;
 800818c:	e018      	b.n	80081c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008194:	b2db      	uxtb	r3, r3
 8008196:	4619      	mov	r1, r3
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 fa5e 	bl	800865a <USBD_CoreFindIF>
 800819e:	4603      	mov	r3, r0
 80081a0:	75bb      	strb	r3, [r7, #22]
            break;
 80081a2:	e00d      	b.n	80081c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	4619      	mov	r1, r3
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 fa60 	bl	8008674 <USBD_CoreFindEP>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75bb      	strb	r3, [r7, #22]
            break;
 80081b8:	e002      	b.n	80081c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75bb      	strb	r3, [r7, #22]
            break;
 80081be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081c0:	7dbb      	ldrb	r3, [r7, #22]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d119      	bne.n	80081fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d113      	bne.n	80081fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081d2:	7dba      	ldrb	r2, [r7, #22]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	32ae      	adds	r2, #174	; 0xae
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081e2:	7dba      	ldrb	r2, [r7, #22]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081ea:	7dba      	ldrb	r2, [r7, #22]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	32ae      	adds	r2, #174	; 0xae
 80081f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f001 f94a 	bl	8009494 <USBD_CtlSendStatus>
 8008200:	e032      	b.n	8008268 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008202:	7afb      	ldrb	r3, [r7, #11]
 8008204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008208:	b2db      	uxtb	r3, r3
 800820a:	4619      	mov	r1, r3
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fa31 	bl	8008674 <USBD_CoreFindEP>
 8008212:	4603      	mov	r3, r0
 8008214:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008216:	7dbb      	ldrb	r3, [r7, #22]
 8008218:	2bff      	cmp	r3, #255	; 0xff
 800821a:	d025      	beq.n	8008268 <USBD_LL_DataOutStage+0x15c>
 800821c:	7dbb      	ldrb	r3, [r7, #22]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d122      	bne.n	8008268 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b03      	cmp	r3, #3
 800822c:	d117      	bne.n	800825e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800822e:	7dba      	ldrb	r2, [r7, #22]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	32ae      	adds	r2, #174	; 0xae
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00f      	beq.n	800825e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800823e:	7dba      	ldrb	r2, [r7, #22]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008246:	7dba      	ldrb	r2, [r7, #22]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	32ae      	adds	r2, #174	; 0xae
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	7afa      	ldrb	r2, [r7, #11]
 8008254:	4611      	mov	r1, r2
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	e000      	b.n	800826a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b086      	sub	sp, #24
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	460b      	mov	r3, r1
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d16f      	bne.n	8008366 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3314      	adds	r3, #20
 800828a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008292:	2b02      	cmp	r3, #2
 8008294:	d15a      	bne.n	800834c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d914      	bls.n	80082cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f001 f8ac 	bl	8009416 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082be:	2300      	movs	r3, #0
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f001 fd7d 	bl	8009dc4 <USBD_LL_PrepareReceive>
 80082ca:	e03f      	b.n	800834c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d11c      	bne.n	8008312 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d316      	bcc.n	8008312 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d20f      	bcs.n	8008312 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f001 f88d 	bl	8009416 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008304:	2300      	movs	r3, #0
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f001 fd5a 	bl	8009dc4 <USBD_LL_PrepareReceive>
 8008310:	e01c      	b.n	800834c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b03      	cmp	r3, #3
 800831c:	d10f      	bne.n	800833e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f001 fc95 	bl	8009c70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 f8b7 	bl	80094ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d03a      	beq.n	80083cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fe42 	bl	8007fe0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008364:	e032      	b.n	80083cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008366:	7afb      	ldrb	r3, [r7, #11]
 8008368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f97f 	bl	8008674 <USBD_CoreFindEP>
 8008376:	4603      	mov	r3, r0
 8008378:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	2bff      	cmp	r3, #255	; 0xff
 800837e:	d025      	beq.n	80083cc <USBD_LL_DataInStage+0x15a>
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d122      	bne.n	80083cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d11c      	bne.n	80083cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008392:	7dfa      	ldrb	r2, [r7, #23]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	32ae      	adds	r2, #174	; 0xae
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d014      	beq.n	80083cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80083a2:	7dfa      	ldrb	r2, [r7, #23]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80083aa:	7dfa      	ldrb	r2, [r7, #23]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	32ae      	adds	r2, #174	; 0xae
 80083b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	7afa      	ldrb	r2, [r7, #11]
 80083b8:	4611      	mov	r1, r2
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	4798      	blx	r3
 80083be:	4603      	mov	r3, r0
 80083c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083c2:	7dbb      	ldrb	r3, [r7, #22]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80083c8:	7dbb      	ldrb	r3, [r7, #22]
 80083ca:	e000      	b.n	80083ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d014      	beq.n	800843c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6852      	ldr	r2, [r2, #4]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	4611      	mov	r1, r2
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008438:	2303      	movs	r3, #3
 800843a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800843c:	2340      	movs	r3, #64	; 0x40
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fbcf 	bl	8009be6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2240      	movs	r2, #64	; 0x40
 8008454:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	2200      	movs	r2, #0
 800845c:	2180      	movs	r1, #128	; 0x80
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fbc1 	bl	8009be6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2240      	movs	r2, #64	; 0x40
 800846e:	621a      	str	r2, [r3, #32]

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2204      	movs	r2, #4
 80084b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d106      	bne.n	80084e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b03      	cmp	r3, #3
 8008508:	d110      	bne.n	800852c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	32ae      	adds	r2, #174	; 0xae
 800854c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	e01c      	b.n	8008592 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b03      	cmp	r3, #3
 8008562:	d115      	bne.n	8008590 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	32ae      	adds	r2, #174	; 0xae
 800856e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32ae      	adds	r2, #174	; 0xae
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	4611      	mov	r1, r2
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	32ae      	adds	r2, #174	; 0xae
 80085b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e01c      	b.n	80085f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d115      	bne.n	80085f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	32ae      	adds	r2, #174	; 0xae
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32ae      	adds	r2, #174	; 0xae
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	4611      	mov	r1, r2
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00e      	beq.n	8008650 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6852      	ldr	r2, [r2, #4]
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	4611      	mov	r1, r2
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800864c:	2303      	movs	r3, #3
 800864e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008666:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008680:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b086      	sub	sp, #24
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d920      	bls.n	80086f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80086be:	e013      	b.n	80086e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80086c0:	f107 030a 	add.w	r3, r7, #10
 80086c4:	4619      	mov	r1, r3
 80086c6:	6978      	ldr	r0, [r7, #20]
 80086c8:	f000 f81b 	bl	8008702 <USBD_GetNextDesc>
 80086cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d108      	bne.n	80086e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	789b      	ldrb	r3, [r3, #2]
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d008      	beq.n	80086f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	885b      	ldrh	r3, [r3, #2]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	897b      	ldrh	r3, [r7, #10]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d8e5      	bhi.n	80086c0 <USBD_GetEpDesc+0x32>
 80086f4:	e000      	b.n	80086f8 <USBD_GetEpDesc+0x6a>
          break;
 80086f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086f8:	693b      	ldr	r3, [r7, #16]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	881a      	ldrh	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	4413      	add	r3, r2
 800871c:	b29a      	uxth	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4413      	add	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800872e:	68fb      	ldr	r3, [r7, #12]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	3301      	adds	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800875a:	8a3b      	ldrh	r3, [r7, #16]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	b21a      	sxth	r2, r3
 8008760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008764:	4313      	orrs	r3, r2
 8008766:	b21b      	sxth	r3, r3
 8008768:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800876a:	89fb      	ldrh	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800878e:	2b40      	cmp	r3, #64	; 0x40
 8008790:	d005      	beq.n	800879e <USBD_StdDevReq+0x26>
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	d857      	bhi.n	8008846 <USBD_StdDevReq+0xce>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00f      	beq.n	80087ba <USBD_StdDevReq+0x42>
 800879a:	2b20      	cmp	r3, #32
 800879c:	d153      	bne.n	8008846 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	32ae      	adds	r2, #174	; 0xae
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]
      break;
 80087b8:	e04a      	b.n	8008850 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b09      	cmp	r3, #9
 80087c0:	d83b      	bhi.n	800883a <USBD_StdDevReq+0xc2>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <USBD_StdDevReq+0x50>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	0800881d 	.word	0x0800881d
 80087cc:	08008831 	.word	0x08008831
 80087d0:	0800883b 	.word	0x0800883b
 80087d4:	08008827 	.word	0x08008827
 80087d8:	0800883b 	.word	0x0800883b
 80087dc:	080087fb 	.word	0x080087fb
 80087e0:	080087f1 	.word	0x080087f1
 80087e4:	0800883b 	.word	0x0800883b
 80087e8:	08008813 	.word	0x08008813
 80087ec:	08008805 	.word	0x08008805
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa3c 	bl	8008c70 <USBD_GetDescriptor>
          break;
 80087f8:	e024      	b.n	8008844 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fba1 	bl	8008f44 <USBD_SetAddress>
          break;
 8008802:	e01f      	b.n	8008844 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fbe0 	bl	8008fcc <USBD_SetConfig>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]
          break;
 8008810:	e018      	b.n	8008844 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fc83 	bl	8009120 <USBD_GetConfig>
          break;
 800881a:	e013      	b.n	8008844 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fcb4 	bl	800918c <USBD_GetStatus>
          break;
 8008824:	e00e      	b.n	8008844 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fce3 	bl	80091f4 <USBD_SetFeature>
          break;
 800882e:	e009      	b.n	8008844 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fd07 	bl	8009246 <USBD_ClrFeature>
          break;
 8008838:	e004      	b.n	8008844 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fd5e 	bl	80092fe <USBD_CtlError>
          break;
 8008842:	bf00      	nop
      }
      break;
 8008844:	e004      	b.n	8008850 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fd58 	bl	80092fe <USBD_CtlError>
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop

0800885c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d005      	beq.n	8008882 <USBD_StdItfReq+0x26>
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d852      	bhi.n	8008920 <USBD_StdItfReq+0xc4>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <USBD_StdItfReq+0x26>
 800887e:	2b20      	cmp	r3, #32
 8008880:	d14e      	bne.n	8008920 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	2b02      	cmp	r3, #2
 800888e:	d840      	bhi.n	8008912 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	889b      	ldrh	r3, [r3, #4]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b01      	cmp	r3, #1
 8008898:	d836      	bhi.n	8008908 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	889b      	ldrh	r3, [r3, #4]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fed9 	bl	800865a <USBD_CoreFindIF>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2bff      	cmp	r3, #255	; 0xff
 80088b0:	d01d      	beq.n	80088ee <USBD_StdItfReq+0x92>
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11a      	bne.n	80088ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80088b8:	7bba      	ldrb	r2, [r7, #14]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	32ae      	adds	r2, #174	; 0xae
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00f      	beq.n	80088e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088c8:	7bba      	ldrb	r2, [r7, #14]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088d0:	7bba      	ldrb	r2, [r7, #14]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	32ae      	adds	r2, #174	; 0xae
 80088d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088e6:	e004      	b.n	80088f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088e8:	2303      	movs	r3, #3
 80088ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088ec:	e001      	b.n	80088f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d110      	bne.n	800891c <USBD_StdItfReq+0xc0>
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10d      	bne.n	800891c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fdc7 	bl	8009494 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008906:	e009      	b.n	800891c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fcf7 	bl	80092fe <USBD_CtlError>
          break;
 8008910:	e004      	b.n	800891c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fcf2 	bl	80092fe <USBD_CtlError>
          break;
 800891a:	e000      	b.n	800891e <USBD_StdItfReq+0xc2>
          break;
 800891c:	bf00      	nop
      }
      break;
 800891e:	e004      	b.n	800892a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fceb 	bl	80092fe <USBD_CtlError>
      break;
 8008928:	bf00      	nop
  }

  return ret;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	889b      	ldrh	r3, [r3, #4]
 8008946:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d007      	beq.n	8008964 <USBD_StdEPReq+0x30>
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	f200 817f 	bhi.w	8008c58 <USBD_StdEPReq+0x324>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d02a      	beq.n	80089b4 <USBD_StdEPReq+0x80>
 800895e:	2b20      	cmp	r3, #32
 8008960:	f040 817a 	bne.w	8008c58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fe83 	bl	8008674 <USBD_CoreFindEP>
 800896e:	4603      	mov	r3, r0
 8008970:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008972:	7b7b      	ldrb	r3, [r7, #13]
 8008974:	2bff      	cmp	r3, #255	; 0xff
 8008976:	f000 8174 	beq.w	8008c62 <USBD_StdEPReq+0x32e>
 800897a:	7b7b      	ldrb	r3, [r7, #13]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 8170 	bne.w	8008c62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008982:	7b7a      	ldrb	r2, [r7, #13]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800898a:	7b7a      	ldrb	r2, [r7, #13]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	32ae      	adds	r2, #174	; 0xae
 8008990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 8163 	beq.w	8008c62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800899c:	7b7a      	ldrb	r2, [r7, #13]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	32ae      	adds	r2, #174	; 0xae
 80089a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089b2:	e156      	b.n	8008c62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d008      	beq.n	80089ce <USBD_StdEPReq+0x9a>
 80089bc:	2b03      	cmp	r3, #3
 80089be:	f300 8145 	bgt.w	8008c4c <USBD_StdEPReq+0x318>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 809b 	beq.w	8008afe <USBD_StdEPReq+0x1ca>
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d03c      	beq.n	8008a46 <USBD_StdEPReq+0x112>
 80089cc:	e13e      	b.n	8008c4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d002      	beq.n	80089e0 <USBD_StdEPReq+0xac>
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d016      	beq.n	8008a0c <USBD_StdEPReq+0xd8>
 80089de:	e02c      	b.n	8008a3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <USBD_StdEPReq+0xce>
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b80      	cmp	r3, #128	; 0x80
 80089ea:	d00a      	beq.n	8008a02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f93d 	bl	8009c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089f6:	2180      	movs	r1, #128	; 0x80
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f939 	bl	8009c70 <USBD_LL_StallEP>
 80089fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a00:	e020      	b.n	8008a44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fc7a 	bl	80092fe <USBD_CtlError>
              break;
 8008a0a:	e01b      	b.n	8008a44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	885b      	ldrh	r3, [r3, #2]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10e      	bne.n	8008a32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <USBD_StdEPReq+0xfe>
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b80      	cmp	r3, #128	; 0x80
 8008a1e:	d008      	beq.n	8008a32 <USBD_StdEPReq+0xfe>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	88db      	ldrh	r3, [r3, #6]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f91f 	bl	8009c70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fd2e 	bl	8009494 <USBD_CtlSendStatus>

              break;
 8008a38:	e004      	b.n	8008a44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fc5e 	bl	80092fe <USBD_CtlError>
              break;
 8008a42:	bf00      	nop
          }
          break;
 8008a44:	e107      	b.n	8008c56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d002      	beq.n	8008a58 <USBD_StdEPReq+0x124>
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d016      	beq.n	8008a84 <USBD_StdEPReq+0x150>
 8008a56:	e04b      	b.n	8008af0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00d      	beq.n	8008a7a <USBD_StdEPReq+0x146>
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	2b80      	cmp	r3, #128	; 0x80
 8008a62:	d00a      	beq.n	8008a7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f901 	bl	8009c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a6e:	2180      	movs	r1, #128	; 0x80
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 f8fd 	bl	8009c70 <USBD_LL_StallEP>
 8008a76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a78:	e040      	b.n	8008afc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fc3e 	bl	80092fe <USBD_CtlError>
              break;
 8008a82:	e03b      	b.n	8008afc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d136      	bne.n	8008afa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 f907 	bl	8009cae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fcf7 	bl	8009494 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fde2 	bl	8008674 <USBD_CoreFindEP>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ab4:	7b7b      	ldrb	r3, [r7, #13]
 8008ab6:	2bff      	cmp	r3, #255	; 0xff
 8008ab8:	d01f      	beq.n	8008afa <USBD_StdEPReq+0x1c6>
 8008aba:	7b7b      	ldrb	r3, [r7, #13]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d11c      	bne.n	8008afa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ac0:	7b7a      	ldrb	r2, [r7, #13]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ac8:	7b7a      	ldrb	r2, [r7, #13]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	32ae      	adds	r2, #174	; 0xae
 8008ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d010      	beq.n	8008afa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ad8:	7b7a      	ldrb	r2, [r7, #13]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	32ae      	adds	r2, #174	; 0xae
 8008ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	4798      	blx	r3
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008aee:	e004      	b.n	8008afa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc03 	bl	80092fe <USBD_CtlError>
              break;
 8008af8:	e000      	b.n	8008afc <USBD_StdEPReq+0x1c8>
              break;
 8008afa:	bf00      	nop
          }
          break;
 8008afc:	e0ab      	b.n	8008c56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d002      	beq.n	8008b10 <USBD_StdEPReq+0x1dc>
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d032      	beq.n	8008b74 <USBD_StdEPReq+0x240>
 8008b0e:	e097      	b.n	8008c40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <USBD_StdEPReq+0x1f2>
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b80      	cmp	r3, #128	; 0x80
 8008b1a:	d004      	beq.n	8008b26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fbed 	bl	80092fe <USBD_CtlError>
                break;
 8008b24:	e091      	b.n	8008c4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da0b      	bge.n	8008b46 <USBD_StdEPReq+0x212>
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	3304      	adds	r3, #4
 8008b44:	e00b      	b.n	8008b5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc37 	bl	80093e0 <USBD_CtlSendData>
              break;
 8008b72:	e06a      	b.n	8008c4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	da11      	bge.n	8008ba0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	3324      	adds	r3, #36	; 0x24
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d117      	bne.n	8008bc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fbb0 	bl	80092fe <USBD_CtlError>
                  break;
 8008b9e:	e054      	b.n	8008c4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	f003 020f 	and.w	r2, r3, #15
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb9d 	bl	80092fe <USBD_CtlError>
                  break;
 8008bc4:	e041      	b.n	8008c4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da0b      	bge.n	8008be6 <USBD_StdEPReq+0x2b2>
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	3310      	adds	r3, #16
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	3304      	adds	r3, #4
 8008be4:	e00b      	b.n	8008bfe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <USBD_StdEPReq+0x2d8>
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	2b80      	cmp	r3, #128	; 0x80
 8008c0a:	d103      	bne.n	8008c14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	e00e      	b.n	8008c32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f867 	bl	8009cec <USBD_LL_IsStallEP>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2201      	movs	r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2202      	movs	r2, #2
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fbd1 	bl	80093e0 <USBD_CtlSendData>
              break;
 8008c3e:	e004      	b.n	8008c4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fb5b 	bl	80092fe <USBD_CtlError>
              break;
 8008c48:	bf00      	nop
          }
          break;
 8008c4a:	e004      	b.n	8008c56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fb55 	bl	80092fe <USBD_CtlError>
          break;
 8008c54:	bf00      	nop
      }
      break;
 8008c56:	e005      	b.n	8008c64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fb4f 	bl	80092fe <USBD_CtlError>
      break;
 8008c60:	e000      	b.n	8008c64 <USBD_StdEPReq+0x330>
      break;
 8008c62:	bf00      	nop
  }

  return ret;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	885b      	ldrh	r3, [r3, #2]
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	2b06      	cmp	r3, #6
 8008c92:	f200 8128 	bhi.w	8008ee6 <USBD_GetDescriptor+0x276>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <USBD_GetDescriptor+0x2c>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cd1 	.word	0x08008cd1
 8008ca4:	08008d11 	.word	0x08008d11
 8008ca8:	08008ee7 	.word	0x08008ee7
 8008cac:	08008ee7 	.word	0x08008ee7
 8008cb0:	08008e87 	.word	0x08008e87
 8008cb4:	08008eb3 	.word	0x08008eb3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7c12      	ldrb	r2, [r2, #16]
 8008cc4:	f107 0108 	add.w	r1, r7, #8
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
      break;
 8008cce:	e112      	b.n	8008ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7c1b      	ldrb	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10d      	bne.n	8008cf4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce0:	f107 0208 	add.w	r2, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	2202      	movs	r2, #2
 8008cf0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cf2:	e100      	b.n	8008ef6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	f107 0208 	add.w	r2, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	701a      	strb	r2, [r3, #0]
      break;
 8008d0e:	e0f2      	b.n	8008ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	885b      	ldrh	r3, [r3, #2]
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	f200 80ac 	bhi.w	8008e74 <USBD_GetDescriptor+0x204>
 8008d1c:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <USBD_GetDescriptor+0xb4>)
 8008d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d22:	bf00      	nop
 8008d24:	08008d3d 	.word	0x08008d3d
 8008d28:	08008d71 	.word	0x08008d71
 8008d2c:	08008da5 	.word	0x08008da5
 8008d30:	08008dd9 	.word	0x08008dd9
 8008d34:	08008e0d 	.word	0x08008e0d
 8008d38:	08008e41 	.word	0x08008e41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7c12      	ldrb	r2, [r2, #16]
 8008d54:	f107 0108 	add.w	r1, r7, #8
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5e:	e091      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 facb 	bl	80092fe <USBD_CtlError>
            err++;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6e:	e089      	b.n	8008e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	7c12      	ldrb	r2, [r2, #16]
 8008d88:	f107 0108 	add.w	r1, r7, #8
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d92:	e077      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fab1 	bl	80092fe <USBD_CtlError>
            err++;
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	72fb      	strb	r3, [r7, #11]
          break;
 8008da2:	e06f      	b.n	8008e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	7c12      	ldrb	r2, [r2, #16]
 8008dbc:	f107 0108 	add.w	r1, r7, #8
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
 8008dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc6:	e05d      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa97 	bl	80092fe <USBD_CtlError>
            err++;
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008dd6:	e055      	b.n	8008e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	7c12      	ldrb	r2, [r2, #16]
 8008df0:	f107 0108 	add.w	r1, r7, #8
 8008df4:	4610      	mov	r0, r2
 8008df6:	4798      	blx	r3
 8008df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dfa:	e043      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fa7d 	bl	80092fe <USBD_CtlError>
            err++;
 8008e04:	7afb      	ldrb	r3, [r7, #11]
 8008e06:	3301      	adds	r3, #1
 8008e08:	72fb      	strb	r3, [r7, #11]
          break;
 8008e0a:	e03b      	b.n	8008e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7c12      	ldrb	r2, [r2, #16]
 8008e24:	f107 0108 	add.w	r1, r7, #8
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
 8008e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e2e:	e029      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa63 	bl	80092fe <USBD_CtlError>
            err++;
 8008e38:	7afb      	ldrb	r3, [r7, #11]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e3e:	e021      	b.n	8008e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	7c12      	ldrb	r2, [r2, #16]
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e62:	e00f      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa49 	bl	80092fe <USBD_CtlError>
            err++;
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	72fb      	strb	r3, [r7, #11]
          break;
 8008e72:	e007      	b.n	8008e84 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa41 	bl	80092fe <USBD_CtlError>
          err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e82:	bf00      	nop
      }
      break;
 8008e84:	e037      	b.n	8008ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	7c1b      	ldrb	r3, [r3, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	f107 0208 	add.w	r2, r7, #8
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	4798      	blx	r3
 8008e9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ea0:	e029      	b.n	8008ef6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fa2a 	bl	80092fe <USBD_CtlError>
        err++;
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	3301      	adds	r3, #1
 8008eae:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb0:	e021      	b.n	8008ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7c1b      	ldrb	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10d      	bne.n	8008ed6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	f107 0208 	add.w	r2, r7, #8
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4798      	blx	r3
 8008eca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	2207      	movs	r2, #7
 8008ed2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ed4:	e00f      	b.n	8008ef6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fa10 	bl	80092fe <USBD_CtlError>
        err++;
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee4:	e007      	b.n	8008ef6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa08 	bl	80092fe <USBD_CtlError>
      err++;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef4:	bf00      	nop
  }

  if (err != 0U)
 8008ef6:	7afb      	ldrb	r3, [r7, #11]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d11e      	bne.n	8008f3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	88db      	ldrh	r3, [r3, #6]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d016      	beq.n	8008f32 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f04:	893b      	ldrh	r3, [r7, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	88da      	ldrh	r2, [r3, #6]
 8008f0e:	893b      	ldrh	r3, [r7, #8]
 8008f10:	4293      	cmp	r3, r2
 8008f12:	bf28      	it	cs
 8008f14:	4613      	movcs	r3, r2
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f1a:	893b      	ldrh	r3, [r7, #8]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68f9      	ldr	r1, [r7, #12]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fa5d 	bl	80093e0 <USBD_CtlSendData>
 8008f26:	e009      	b.n	8008f3c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f9e7 	bl	80092fe <USBD_CtlError>
 8008f30:	e004      	b.n	8008f3c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 faae 	bl	8009494 <USBD_CtlSendStatus>
 8008f38:	e000      	b.n	8008f3c <USBD_GetDescriptor+0x2cc>
    return;
 8008f3a:	bf00      	nop
  }
}
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop

08008f44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	889b      	ldrh	r3, [r3, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d131      	bne.n	8008fba <USBD_SetAddress+0x76>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	88db      	ldrh	r3, [r3, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d12d      	bne.n	8008fba <USBD_SetAddress+0x76>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	885b      	ldrh	r3, [r3, #2]
 8008f62:	2b7f      	cmp	r3, #127	; 0x7f
 8008f64:	d829      	bhi.n	8008fba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	885b      	ldrh	r3, [r3, #2]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d104      	bne.n	8008f88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9bc 	bl	80092fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	e01d      	b.n	8008fc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	7bfa      	ldrb	r2, [r7, #15]
 8008f8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fed5 	bl	8009d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa7a 	bl	8009494 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fae:	e009      	b.n	8008fc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb8:	e004      	b.n	8008fc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f99e 	bl	80092fe <USBD_CtlError>
  }
}
 8008fc2:	bf00      	nop
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	885b      	ldrh	r3, [r3, #2]
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	4b4e      	ldr	r3, [pc, #312]	; (800911c <USBD_SetConfig+0x150>)
 8008fe2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fe4:	4b4d      	ldr	r3, [pc, #308]	; (800911c <USBD_SetConfig+0x150>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d905      	bls.n	8008ff8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f985 	bl	80092fe <USBD_CtlError>
    return USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e08c      	b.n	8009112 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d002      	beq.n	800900a <USBD_SetConfig+0x3e>
 8009004:	2b03      	cmp	r3, #3
 8009006:	d029      	beq.n	800905c <USBD_SetConfig+0x90>
 8009008:	e075      	b.n	80090f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800900a:	4b44      	ldr	r3, [pc, #272]	; (800911c <USBD_SetConfig+0x150>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d020      	beq.n	8009054 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009012:	4b42      	ldr	r3, [pc, #264]	; (800911c <USBD_SetConfig+0x150>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800901c:	4b3f      	ldr	r3, [pc, #252]	; (800911c <USBD_SetConfig+0x150>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fe ffe7 	bl	8007ff6 <USBD_SetClassConfig>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d008      	beq.n	8009044 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f962 	bl	80092fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2202      	movs	r2, #2
 800903e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009042:	e065      	b.n	8009110 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa25 	bl	8009494 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2203      	movs	r2, #3
 800904e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009052:	e05d      	b.n	8009110 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa1d 	bl	8009494 <USBD_CtlSendStatus>
      break;
 800905a:	e059      	b.n	8009110 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800905c:	4b2f      	ldr	r3, [pc, #188]	; (800911c <USBD_SetConfig+0x150>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d112      	bne.n	800908a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800906c:	4b2b      	ldr	r3, [pc, #172]	; (800911c <USBD_SetConfig+0x150>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009076:	4b29      	ldr	r3, [pc, #164]	; (800911c <USBD_SetConfig+0x150>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fe ffd6 	bl	800802e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa06 	bl	8009494 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009088:	e042      	b.n	8009110 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <USBD_SetConfig+0x150>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	429a      	cmp	r2, r3
 8009096:	d02a      	beq.n	80090ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe ffc4 	bl	800802e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090a6:	4b1d      	ldr	r3, [pc, #116]	; (800911c <USBD_SetConfig+0x150>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090b0:	4b1a      	ldr	r3, [pc, #104]	; (800911c <USBD_SetConfig+0x150>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe ff9d 	bl	8007ff6 <USBD_SetClassConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00f      	beq.n	80090e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f918 	bl	80092fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fe ffa9 	bl	800802e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090e4:	e014      	b.n	8009110 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f9d4 	bl	8009494 <USBD_CtlSendStatus>
      break;
 80090ec:	e010      	b.n	8009110 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9d0 	bl	8009494 <USBD_CtlSendStatus>
      break;
 80090f4:	e00c      	b.n	8009110 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f900 	bl	80092fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090fe:	4b07      	ldr	r3, [pc, #28]	; (800911c <USBD_SetConfig+0x150>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fe ff92 	bl	800802e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800910a:	2303      	movs	r3, #3
 800910c:	73fb      	strb	r3, [r7, #15]
      break;
 800910e:	bf00      	nop
  }

  return ret;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200004c4 	.word	0x200004c4

08009120 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	88db      	ldrh	r3, [r3, #6]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d004      	beq.n	800913c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8e2 	bl	80092fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800913a:	e023      	b.n	8009184 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b02      	cmp	r3, #2
 8009146:	dc02      	bgt.n	800914e <USBD_GetConfig+0x2e>
 8009148:	2b00      	cmp	r3, #0
 800914a:	dc03      	bgt.n	8009154 <USBD_GetConfig+0x34>
 800914c:	e015      	b.n	800917a <USBD_GetConfig+0x5a>
 800914e:	2b03      	cmp	r3, #3
 8009150:	d00b      	beq.n	800916a <USBD_GetConfig+0x4a>
 8009152:	e012      	b.n	800917a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3308      	adds	r3, #8
 800915e:	2201      	movs	r2, #1
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f93c 	bl	80093e0 <USBD_CtlSendData>
        break;
 8009168:	e00c      	b.n	8009184 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3304      	adds	r3, #4
 800916e:	2201      	movs	r2, #1
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f934 	bl	80093e0 <USBD_CtlSendData>
        break;
 8009178:	e004      	b.n	8009184 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f8be 	bl	80092fe <USBD_CtlError>
        break;
 8009182:	bf00      	nop
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800919c:	b2db      	uxtb	r3, r3
 800919e:	3b01      	subs	r3, #1
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d81e      	bhi.n	80091e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	88db      	ldrh	r3, [r3, #6]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d004      	beq.n	80091b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f8a5 	bl	80092fe <USBD_CtlError>
        break;
 80091b4:	e01a      	b.n	80091ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f043 0202 	orr.w	r2, r3, #2
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	330c      	adds	r3, #12
 80091d6:	2202      	movs	r2, #2
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f900 	bl	80093e0 <USBD_CtlSendData>
      break;
 80091e0:	e004      	b.n	80091ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f88a 	bl	80092fe <USBD_CtlError>
      break;
 80091ea:	bf00      	nop
  }
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d107      	bne.n	8009216 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f940 	bl	8009494 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009214:	e013      	b.n	800923e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	885b      	ldrh	r3, [r3, #2]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d10b      	bne.n	8009236 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	889b      	ldrh	r3, [r3, #4]
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	b29b      	uxth	r3, r3
 8009226:	b2da      	uxtb	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f930 	bl	8009494 <USBD_CtlSendStatus>
}
 8009234:	e003      	b.n	800923e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f860 	bl	80092fe <USBD_CtlError>
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009256:	b2db      	uxtb	r3, r3
 8009258:	3b01      	subs	r3, #1
 800925a:	2b02      	cmp	r3, #2
 800925c:	d80b      	bhi.n	8009276 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	885b      	ldrh	r3, [r3, #2]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d10c      	bne.n	8009280 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f910 	bl	8009494 <USBD_CtlSendStatus>
      }
      break;
 8009274:	e004      	b.n	8009280 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f840 	bl	80092fe <USBD_CtlError>
      break;
 800927e:	e000      	b.n	8009282 <USBD_ClrFeature+0x3c>
      break;
 8009280:	bf00      	nop
  }
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff fa41 	bl	800873c <SWAPBYTE>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3301      	adds	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f7ff fa34 	bl	800873c <SWAPBYTE>
 80092d4:	4603      	mov	r3, r0
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3301      	adds	r3, #1
 80092e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff fa27 	bl	800873c <SWAPBYTE>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	80da      	strh	r2, [r3, #6]
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009308:	2180      	movs	r1, #128	; 0x80
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fcb0 	bl	8009c70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009310:	2100      	movs	r1, #0
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fcac 	bl	8009c70 <USBD_LL_StallEP>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d036      	beq.n	80093a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800933a:	6938      	ldr	r0, [r7, #16]
 800933c:	f000 f836 	bl	80093ac <USBD_GetLen>
 8009340:	4603      	mov	r3, r0
 8009342:	3301      	adds	r3, #1
 8009344:	b29b      	uxth	r3, r3
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	701a      	strb	r2, [r3, #0]
  idx++;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	3301      	adds	r3, #1
 800935e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	4413      	add	r3, r2
 8009366:	2203      	movs	r2, #3
 8009368:	701a      	strb	r2, [r3, #0]
  idx++;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	3301      	adds	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009370:	e013      	b.n	800939a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	4413      	add	r3, r2
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	7812      	ldrb	r2, [r2, #0]
 800937c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3301      	adds	r3, #1
 8009382:	613b      	str	r3, [r7, #16]
    idx++;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	3301      	adds	r3, #1
 8009388:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4413      	add	r3, r2
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
    idx++;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	3301      	adds	r3, #1
 8009398:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e7      	bne.n	8009372 <USBD_GetString+0x52>
 80093a2:	e000      	b.n	80093a6 <USBD_GetString+0x86>
    return;
 80093a4:	bf00      	nop
  }
}
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093bc:	e005      	b.n	80093ca <USBD_GetLen+0x1e>
  {
    len++;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	3301      	adds	r3, #1
 80093c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1f5      	bne.n	80093be <USBD_GetLen+0x12>
  }

  return len;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	2100      	movs	r1, #0
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 fcbb 	bl	8009d82 <USBD_LL_Transmit>

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	2100      	movs	r1, #0
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fcaa 	bl	8009d82 <USBD_LL_Transmit>

  return USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2203      	movs	r2, #3
 8009448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	2100      	movs	r1, #0
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fcae 	bl	8009dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fc9d 	bl	8009dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2204      	movs	r2, #4
 80094a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094a4:	2300      	movs	r3, #0
 80094a6:	2200      	movs	r2, #0
 80094a8:	2100      	movs	r1, #0
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fc69 	bl	8009d82 <USBD_LL_Transmit>

  return USBD_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2205      	movs	r2, #5
 80094c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ca:	2300      	movs	r3, #0
 80094cc:	2200      	movs	r2, #0
 80094ce:	2100      	movs	r1, #0
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fc77 	bl	8009dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094e4:	2200      	movs	r2, #0
 80094e6:	4912      	ldr	r1, [pc, #72]	; (8009530 <MX_USB_DEVICE_Init+0x50>)
 80094e8:	4812      	ldr	r0, [pc, #72]	; (8009534 <MX_USB_DEVICE_Init+0x54>)
 80094ea:	f7fe fd07 	bl	8007efc <USBD_Init>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094f4:	f7f8 fab8 	bl	8001a68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094f8:	490f      	ldr	r1, [pc, #60]	; (8009538 <MX_USB_DEVICE_Init+0x58>)
 80094fa:	480e      	ldr	r0, [pc, #56]	; (8009534 <MX_USB_DEVICE_Init+0x54>)
 80094fc:	f7fe fd2e 	bl	8007f5c <USBD_RegisterClass>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009506:	f7f8 faaf 	bl	8001a68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800950a:	490c      	ldr	r1, [pc, #48]	; (800953c <MX_USB_DEVICE_Init+0x5c>)
 800950c:	4809      	ldr	r0, [pc, #36]	; (8009534 <MX_USB_DEVICE_Init+0x54>)
 800950e:	f7fe fc65 	bl	8007ddc <USBD_CDC_RegisterInterface>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009518:	f7f8 faa6 	bl	8001a68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800951c:	4805      	ldr	r0, [pc, #20]	; (8009534 <MX_USB_DEVICE_Init+0x54>)
 800951e:	f7fe fd53 	bl	8007fc8 <USBD_Start>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009528:	f7f8 fa9e 	bl	8001a68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800952c:	bf00      	nop
 800952e:	bd80      	pop	{r7, pc}
 8009530:	200000ac 	.word	0x200000ac
 8009534:	200004c8 	.word	0x200004c8
 8009538:	20000018 	.word	0x20000018
 800953c:	20000098 	.word	0x20000098

08009540 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009544:	2200      	movs	r2, #0
 8009546:	4905      	ldr	r1, [pc, #20]	; (800955c <CDC_Init_FS+0x1c>)
 8009548:	4805      	ldr	r0, [pc, #20]	; (8009560 <CDC_Init_FS+0x20>)
 800954a:	f7fe fc61 	bl	8007e10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800954e:	4905      	ldr	r1, [pc, #20]	; (8009564 <CDC_Init_FS+0x24>)
 8009550:	4803      	ldr	r0, [pc, #12]	; (8009560 <CDC_Init_FS+0x20>)
 8009552:	f7fe fc7f 	bl	8007e54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009556:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009558:	4618      	mov	r0, r3
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000fa4 	.word	0x20000fa4
 8009560:	200004c8 	.word	0x200004c8
 8009564:	200007a4 	.word	0x200007a4

08009568 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800956c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800956e:	4618      	mov	r0, r3
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
 8009584:	4613      	mov	r3, r2
 8009586:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2b23      	cmp	r3, #35	; 0x23
 800958c:	d84a      	bhi.n	8009624 <CDC_Control_FS+0xac>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <CDC_Control_FS+0x1c>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	08009625 	.word	0x08009625
 8009598:	08009625 	.word	0x08009625
 800959c:	08009625 	.word	0x08009625
 80095a0:	08009625 	.word	0x08009625
 80095a4:	08009625 	.word	0x08009625
 80095a8:	08009625 	.word	0x08009625
 80095ac:	08009625 	.word	0x08009625
 80095b0:	08009625 	.word	0x08009625
 80095b4:	08009625 	.word	0x08009625
 80095b8:	08009625 	.word	0x08009625
 80095bc:	08009625 	.word	0x08009625
 80095c0:	08009625 	.word	0x08009625
 80095c4:	08009625 	.word	0x08009625
 80095c8:	08009625 	.word	0x08009625
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009625 	.word	0x08009625
 80095d4:	08009625 	.word	0x08009625
 80095d8:	08009625 	.word	0x08009625
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009625 	.word	0x08009625
 80095e4:	08009625 	.word	0x08009625
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	08009625 	.word	0x08009625
 80095f4:	08009625 	.word	0x08009625
 80095f8:	08009625 	.word	0x08009625
 80095fc:	08009625 	.word	0x08009625
 8009600:	08009625 	.word	0x08009625
 8009604:	08009625 	.word	0x08009625
 8009608:	08009625 	.word	0x08009625
 800960c:	08009625 	.word	0x08009625
 8009610:	08009625 	.word	0x08009625
 8009614:	08009625 	.word	0x08009625
 8009618:	08009625 	.word	0x08009625
 800961c:	08009625 	.word	0x08009625
 8009620:	08009625 	.word	0x08009625
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009624:	bf00      	nop
  }

  return (USBD_OK);
 8009626:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	4805      	ldr	r0, [pc, #20]	; (8009658 <CDC_Receive_FS+0x24>)
 8009642:	f7fe fc07 	bl	8007e54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009646:	4804      	ldr	r0, [pc, #16]	; (8009658 <CDC_Receive_FS+0x24>)
 8009648:	f7fe fc22 	bl	8007e90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800964c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	200004c8 	.word	0x200004c8

0800965c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800966e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009672:	4618      	mov	r0, r3
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
	...

08009680 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	6039      	str	r1, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2212      	movs	r2, #18
 8009690:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009692:	4b03      	ldr	r3, [pc, #12]	; (80096a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	200000c8 	.word	0x200000c8

080096a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	4603      	mov	r3, r0
 80096ac:	6039      	str	r1, [r7, #0]
 80096ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2204      	movs	r2, #4
 80096b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096b6:	4b03      	ldr	r3, [pc, #12]	; (80096c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	200000dc 	.word	0x200000dc

080096c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	6039      	str	r1, [r7, #0]
 80096d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d105      	bne.n	80096e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	4907      	ldr	r1, [pc, #28]	; (80096fc <USBD_FS_ProductStrDescriptor+0x34>)
 80096de:	4808      	ldr	r0, [pc, #32]	; (8009700 <USBD_FS_ProductStrDescriptor+0x38>)
 80096e0:	f7ff fe1e 	bl	8009320 <USBD_GetString>
 80096e4:	e004      	b.n	80096f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	4904      	ldr	r1, [pc, #16]	; (80096fc <USBD_FS_ProductStrDescriptor+0x34>)
 80096ea:	4805      	ldr	r0, [pc, #20]	; (8009700 <USBD_FS_ProductStrDescriptor+0x38>)
 80096ec:	f7ff fe18 	bl	8009320 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096f0:	4b02      	ldr	r3, [pc, #8]	; (80096fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	200017a4 	.word	0x200017a4
 8009700:	0800c960 	.word	0x0800c960

08009704 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	6039      	str	r1, [r7, #0]
 800970e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	4904      	ldr	r1, [pc, #16]	; (8009724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009714:	4804      	ldr	r0, [pc, #16]	; (8009728 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009716:	f7ff fe03 	bl	8009320 <USBD_GetString>
  return USBD_StrDesc;
 800971a:	4b02      	ldr	r3, [pc, #8]	; (8009724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	200017a4 	.word	0x200017a4
 8009728:	0800c978 	.word	0x0800c978

0800972c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	6039      	str	r1, [r7, #0]
 8009736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	221a      	movs	r2, #26
 800973c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800973e:	f000 f843 	bl	80097c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009742:	4b02      	ldr	r3, [pc, #8]	; (800974c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	200000e0 	.word	0x200000e0

08009750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d105      	bne.n	800976e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4907      	ldr	r1, [pc, #28]	; (8009784 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009766:	4808      	ldr	r0, [pc, #32]	; (8009788 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009768:	f7ff fdda 	bl	8009320 <USBD_GetString>
 800976c:	e004      	b.n	8009778 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	4904      	ldr	r1, [pc, #16]	; (8009784 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009772:	4805      	ldr	r0, [pc, #20]	; (8009788 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009774:	f7ff fdd4 	bl	8009320 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009778:	4b02      	ldr	r3, [pc, #8]	; (8009784 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	200017a4 	.word	0x200017a4
 8009788:	0800c98c 	.word	0x0800c98c

0800978c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d105      	bne.n	80097aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4907      	ldr	r1, [pc, #28]	; (80097c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097a2:	4808      	ldr	r0, [pc, #32]	; (80097c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097a4:	f7ff fdbc 	bl	8009320 <USBD_GetString>
 80097a8:	e004      	b.n	80097b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	4904      	ldr	r1, [pc, #16]	; (80097c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097ae:	4805      	ldr	r0, [pc, #20]	; (80097c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097b0:	f7ff fdb6 	bl	8009320 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097b4:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	200017a4 	.word	0x200017a4
 80097c4:	0800c998 	.word	0x0800c998

080097c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097ce:	4b0f      	ldr	r3, [pc, #60]	; (800980c <Get_SerialNum+0x44>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <Get_SerialNum+0x48>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097da:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <Get_SerialNum+0x4c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4413      	add	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097ee:	2208      	movs	r2, #8
 80097f0:	4909      	ldr	r1, [pc, #36]	; (8009818 <Get_SerialNum+0x50>)
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f814 	bl	8009820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097f8:	2204      	movs	r2, #4
 80097fa:	4908      	ldr	r1, [pc, #32]	; (800981c <Get_SerialNum+0x54>)
 80097fc:	68b8      	ldr	r0, [r7, #8]
 80097fe:	f000 f80f 	bl	8009820 <IntToUnicode>
  }
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	1fff7a10 	.word	0x1fff7a10
 8009810:	1fff7a14 	.word	0x1fff7a14
 8009814:	1fff7a18 	.word	0x1fff7a18
 8009818:	200000e2 	.word	0x200000e2
 800981c:	200000f2 	.word	0x200000f2

08009820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]
 8009836:	e027      	b.n	8009888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	0f1b      	lsrs	r3, r3, #28
 800983c:	2b09      	cmp	r3, #9
 800983e:	d80b      	bhi.n	8009858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	0f1b      	lsrs	r3, r3, #28
 8009844:	b2da      	uxtb	r2, r3
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4619      	mov	r1, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	440b      	add	r3, r1
 8009850:	3230      	adds	r2, #48	; 0x30
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	e00a      	b.n	800986e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0f1b      	lsrs	r3, r3, #28
 800985c:	b2da      	uxtb	r2, r3
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	4619      	mov	r1, r3
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	440b      	add	r3, r1
 8009868:	3237      	adds	r2, #55	; 0x37
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	3301      	adds	r3, #1
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	4413      	add	r3, r2
 800987e:	2200      	movs	r2, #0
 8009880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	3301      	adds	r3, #1
 8009886:	75fb      	strb	r3, [r7, #23]
 8009888:	7dfa      	ldrb	r2, [r7, #23]
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	429a      	cmp	r2, r3
 800988e:	d3d3      	bcc.n	8009838 <IntToUnicode+0x18>
  }
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	371c      	adds	r7, #28
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
	...

080098a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	; 0x28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098a8:	f107 0314 	add.w	r3, r7, #20
 80098ac:	2200      	movs	r2, #0
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	605a      	str	r2, [r3, #4]
 80098b2:	609a      	str	r2, [r3, #8]
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c0:	d13a      	bne.n	8009938 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098c2:	2300      	movs	r3, #0
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 80098c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ca:	4a1d      	ldr	r2, [pc, #116]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 80098cc:	f043 0301 	orr.w	r3, r3, #1
 80098d0:	6313      	str	r3, [r2, #48]	; 0x30
 80098d2:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	613b      	str	r3, [r7, #16]
 80098dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098e4:	2302      	movs	r3, #2
 80098e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098ec:	2303      	movs	r3, #3
 80098ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098f0:	230a      	movs	r3, #10
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098f4:	f107 0314 	add.w	r3, r7, #20
 80098f8:	4619      	mov	r1, r3
 80098fa:	4812      	ldr	r0, [pc, #72]	; (8009944 <HAL_PCD_MspInit+0xa4>)
 80098fc:	f7f8 ff88 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009900:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 8009902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009904:	4a0e      	ldr	r2, [pc, #56]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 8009906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990a:	6353      	str	r3, [r2, #52]	; 0x34
 800990c:	2300      	movs	r3, #0
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 8009912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009914:	4a0a      	ldr	r2, [pc, #40]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 8009916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800991a:	6453      	str	r3, [r2, #68]	; 0x44
 800991c:	4b08      	ldr	r3, [pc, #32]	; (8009940 <HAL_PCD_MspInit+0xa0>)
 800991e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	2043      	movs	r0, #67	; 0x43
 800992e:	f7f8 ff38 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009932:	2043      	movs	r0, #67	; 0x43
 8009934:	f7f8 ff51 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009938:	bf00      	nop
 800993a:	3728      	adds	r7, #40	; 0x28
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	40023800 	.word	0x40023800
 8009944:	40020000 	.word	0x40020000

08009948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	f7fe fb7f 	bl	8008062 <USBD_LL_SetupStage>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	4613      	mov	r3, r2
 8009984:	00db      	lsls	r3, r3, #3
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	4619      	mov	r1, r3
 8009996:	f7fe fbb9 	bl	800810c <USBD_LL_DataOutStage>
}
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4613      	mov	r3, r2
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	4413      	add	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	334c      	adds	r3, #76	; 0x4c
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	4619      	mov	r1, r3
 80099ca:	f7fe fc52 	bl	8008272 <USBD_LL_DataInStage>
}
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fd86 	bl	80084f6 <USBD_LL_SOF>
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099fa:	2301      	movs	r3, #1
 80099fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d001      	beq.n	8009a0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a06:	f7f8 f82f 	bl	8001a68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a10:	7bfa      	ldrb	r2, [r7, #15]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fd30 	bl	800847a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fcd8 	bl	80083d6 <USBD_LL_Reset>
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fd2b 	bl	800849a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	6812      	ldr	r2, [r2, #0]
 8009a52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a56:	f043 0301 	orr.w	r3, r3, #1
 8009a5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a64:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <HAL_PCD_SuspendCallback+0x48>)
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	4a03      	ldr	r2, [pc, #12]	; (8009a78 <HAL_PCD_SuspendCallback+0x48>)
 8009a6a:	f043 0306 	orr.w	r3, r3, #6
 8009a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed00 	.word	0xe000ed00

08009a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fd1b 	bl	80084c6 <USBD_LL_Resume>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fd73 	bl	800859a <USBD_LL_IsoOUTIncomplete>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fd2f 	bl	8008536 <USBD_LL_IsoINIncomplete>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fd85 	bl	80085fe <USBD_LL_DevConnected>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fd82 	bl	8008614 <USBD_LL_DevDisconnected>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d13c      	bne.n	8009ba2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b28:	4a20      	ldr	r2, [pc, #128]	; (8009bac <USBD_LL_Init+0x94>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a1e      	ldr	r2, [pc, #120]	; (8009bac <USBD_LL_Init+0x94>)
 8009b34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <USBD_LL_Init+0x94>)
 8009b3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <USBD_LL_Init+0x94>)
 8009b42:	2204      	movs	r2, #4
 8009b44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b46:	4b19      	ldr	r3, [pc, #100]	; (8009bac <USBD_LL_Init+0x94>)
 8009b48:	2202      	movs	r2, #2
 8009b4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b4c:	4b17      	ldr	r3, [pc, #92]	; (8009bac <USBD_LL_Init+0x94>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b52:	4b16      	ldr	r3, [pc, #88]	; (8009bac <USBD_LL_Init+0x94>)
 8009b54:	2202      	movs	r2, #2
 8009b56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b58:	4b14      	ldr	r3, [pc, #80]	; (8009bac <USBD_LL_Init+0x94>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <USBD_LL_Init+0x94>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b64:	4b11      	ldr	r3, [pc, #68]	; (8009bac <USBD_LL_Init+0x94>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b6a:	4b10      	ldr	r3, [pc, #64]	; (8009bac <USBD_LL_Init+0x94>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b70:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <USBD_LL_Init+0x94>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b76:	480d      	ldr	r0, [pc, #52]	; (8009bac <USBD_LL_Init+0x94>)
 8009b78:	f7f8 ffe7 	bl	8002b4a <HAL_PCD_Init>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b82:	f7f7 ff71 	bl	8001a68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b86:	2180      	movs	r1, #128	; 0x80
 8009b88:	4808      	ldr	r0, [pc, #32]	; (8009bac <USBD_LL_Init+0x94>)
 8009b8a:	f7fa fa3e 	bl	800400a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b8e:	2240      	movs	r2, #64	; 0x40
 8009b90:	2100      	movs	r1, #0
 8009b92:	4806      	ldr	r0, [pc, #24]	; (8009bac <USBD_LL_Init+0x94>)
 8009b94:	f7fa f9f2 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b98:	2280      	movs	r2, #128	; 0x80
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	4803      	ldr	r0, [pc, #12]	; (8009bac <USBD_LL_Init+0x94>)
 8009b9e:	f7fa f9ed 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	200019a4 	.word	0x200019a4

08009bb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7f9 f8dc 	bl	8002d84 <HAL_PCD_Start>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 f942 	bl	8009e5c <USBD_Get_USB_Status>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	70fb      	strb	r3, [r7, #3]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70bb      	strb	r3, [r7, #2]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c0e:	78bb      	ldrb	r3, [r7, #2]
 8009c10:	883a      	ldrh	r2, [r7, #0]
 8009c12:	78f9      	ldrb	r1, [r7, #3]
 8009c14:	f7f9 fdad 	bl	8003772 <HAL_PCD_EP_Open>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f91c 	bl	8009e5c <USBD_Get_USB_Status>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c4c:	78fa      	ldrb	r2, [r7, #3]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7f9 fdf6 	bl	8003842 <HAL_PCD_EP_Close>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 f8fd 	bl	8009e5c <USBD_Get_USB_Status>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c8a:	78fa      	ldrb	r2, [r7, #3]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f9 fece 	bl	8003a30 <HAL_PCD_EP_SetStall>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f8de 	bl	8009e5c <USBD_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f9 ff13 	bl	8003af8 <HAL_PCD_EP_ClrStall>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f8bf 	bl	8009e5c <USBD_Get_USB_Status>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	da0b      	bge.n	8009d20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	4613      	mov	r3, r2
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	440b      	add	r3, r1
 8009d1a:	333e      	adds	r3, #62	; 0x3e
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	e00b      	b.n	8009d38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	4611      	mov	r1, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7f9 fce0 	bl	8003728 <HAL_PCD_SetAddress>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 f874 	bl	8009e5c <USBD_Get_USB_Status>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b086      	sub	sp, #24
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009da0:	7af9      	ldrb	r1, [r7, #11]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	f7f9 fdf9 	bl	800399c <HAL_PCD_EP_Transmit>
 8009daa:	4603      	mov	r3, r0
 8009dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 f853 	bl	8009e5c <USBD_Get_USB_Status>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009de2:	7af9      	ldrb	r1, [r7, #11]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	f7f9 fd75 	bl	80038d6 <HAL_PCD_EP_Receive>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 f832 	bl	8009e5c <USBD_Get_USB_Status>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7f9 fda5 	bl	800396c <HAL_PCD_EP_GetRxCount>
 8009e22:	4603      	mov	r3, r0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e34:	4b03      	ldr	r3, [pc, #12]	; (8009e44 <USBD_static_malloc+0x18>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20001eb0 	.word	0x20001eb0

08009e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]

}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d817      	bhi.n	8009ea0 <USBD_Get_USB_Status+0x44>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <USBD_Get_USB_Status+0x1c>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e89 	.word	0x08009e89
 8009e7c:	08009e8f 	.word	0x08009e8f
 8009e80:	08009e95 	.word	0x08009e95
 8009e84:	08009e9b 	.word	0x08009e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8c:	e00b      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73fb      	strb	r3, [r7, #15]
    break;
 8009e92:	e008      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
    break;
 8009e98:	e005      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9e:	e002      	b.n	8009ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	bf00      	nop
  }
  return usb_status;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <__errno>:
 8009eb4:	4b01      	ldr	r3, [pc, #4]	; (8009ebc <__errno+0x8>)
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	200000fc 	.word	0x200000fc

08009ec0 <__libc_init_array>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	4d0d      	ldr	r5, [pc, #52]	; (8009ef8 <__libc_init_array+0x38>)
 8009ec4:	4c0d      	ldr	r4, [pc, #52]	; (8009efc <__libc_init_array+0x3c>)
 8009ec6:	1b64      	subs	r4, r4, r5
 8009ec8:	10a4      	asrs	r4, r4, #2
 8009eca:	2600      	movs	r6, #0
 8009ecc:	42a6      	cmp	r6, r4
 8009ece:	d109      	bne.n	8009ee4 <__libc_init_array+0x24>
 8009ed0:	4d0b      	ldr	r5, [pc, #44]	; (8009f00 <__libc_init_array+0x40>)
 8009ed2:	4c0c      	ldr	r4, [pc, #48]	; (8009f04 <__libc_init_array+0x44>)
 8009ed4:	f002 fd36 	bl	800c944 <_init>
 8009ed8:	1b64      	subs	r4, r4, r5
 8009eda:	10a4      	asrs	r4, r4, #2
 8009edc:	2600      	movs	r6, #0
 8009ede:	42a6      	cmp	r6, r4
 8009ee0:	d105      	bne.n	8009eee <__libc_init_array+0x2e>
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee8:	4798      	blx	r3
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7ee      	b.n	8009ecc <__libc_init_array+0xc>
 8009eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef2:	4798      	blx	r3
 8009ef4:	3601      	adds	r6, #1
 8009ef6:	e7f2      	b.n	8009ede <__libc_init_array+0x1e>
 8009ef8:	0800cd9c 	.word	0x0800cd9c
 8009efc:	0800cd9c 	.word	0x0800cd9c
 8009f00:	0800cd9c 	.word	0x0800cd9c
 8009f04:	0800cda0 	.word	0x0800cda0

08009f08 <memcpy>:
 8009f08:	440a      	add	r2, r1
 8009f0a:	4291      	cmp	r1, r2
 8009f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f10:	d100      	bne.n	8009f14 <memcpy+0xc>
 8009f12:	4770      	bx	lr
 8009f14:	b510      	push	{r4, lr}
 8009f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f1e:	4291      	cmp	r1, r2
 8009f20:	d1f9      	bne.n	8009f16 <memcpy+0xe>
 8009f22:	bd10      	pop	{r4, pc}

08009f24 <memset>:
 8009f24:	4402      	add	r2, r0
 8009f26:	4603      	mov	r3, r0
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d100      	bne.n	8009f2e <memset+0xa>
 8009f2c:	4770      	bx	lr
 8009f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f32:	e7f9      	b.n	8009f28 <memset+0x4>

08009f34 <__cvt>:
 8009f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	ec55 4b10 	vmov	r4, r5, d0
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	460e      	mov	r6, r1
 8009f40:	4619      	mov	r1, r3
 8009f42:	462b      	mov	r3, r5
 8009f44:	bfbb      	ittet	lt
 8009f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f4a:	461d      	movlt	r5, r3
 8009f4c:	2300      	movge	r3, #0
 8009f4e:	232d      	movlt	r3, #45	; 0x2d
 8009f50:	700b      	strb	r3, [r1, #0]
 8009f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f58:	4691      	mov	r9, r2
 8009f5a:	f023 0820 	bic.w	r8, r3, #32
 8009f5e:	bfbc      	itt	lt
 8009f60:	4622      	movlt	r2, r4
 8009f62:	4614      	movlt	r4, r2
 8009f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f68:	d005      	beq.n	8009f76 <__cvt+0x42>
 8009f6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f6e:	d100      	bne.n	8009f72 <__cvt+0x3e>
 8009f70:	3601      	adds	r6, #1
 8009f72:	2102      	movs	r1, #2
 8009f74:	e000      	b.n	8009f78 <__cvt+0x44>
 8009f76:	2103      	movs	r1, #3
 8009f78:	ab03      	add	r3, sp, #12
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	ab02      	add	r3, sp, #8
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	ec45 4b10 	vmov	d0, r4, r5
 8009f84:	4653      	mov	r3, sl
 8009f86:	4632      	mov	r2, r6
 8009f88:	f000 fcca 	bl	800a920 <_dtoa_r>
 8009f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f90:	4607      	mov	r7, r0
 8009f92:	d102      	bne.n	8009f9a <__cvt+0x66>
 8009f94:	f019 0f01 	tst.w	r9, #1
 8009f98:	d022      	beq.n	8009fe0 <__cvt+0xac>
 8009f9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f9e:	eb07 0906 	add.w	r9, r7, r6
 8009fa2:	d110      	bne.n	8009fc6 <__cvt+0x92>
 8009fa4:	783b      	ldrb	r3, [r7, #0]
 8009fa6:	2b30      	cmp	r3, #48	; 0x30
 8009fa8:	d10a      	bne.n	8009fc0 <__cvt+0x8c>
 8009faa:	2200      	movs	r2, #0
 8009fac:	2300      	movs	r3, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 fd91 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fb6:	b918      	cbnz	r0, 8009fc0 <__cvt+0x8c>
 8009fb8:	f1c6 0601 	rsb	r6, r6, #1
 8009fbc:	f8ca 6000 	str.w	r6, [sl]
 8009fc0:	f8da 3000 	ldr.w	r3, [sl]
 8009fc4:	4499      	add	r9, r3
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7f6 fd83 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fd2:	b108      	cbz	r0, 8009fd8 <__cvt+0xa4>
 8009fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fd8:	2230      	movs	r2, #48	; 0x30
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	454b      	cmp	r3, r9
 8009fde:	d307      	bcc.n	8009ff0 <__cvt+0xbc>
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe4:	1bdb      	subs	r3, r3, r7
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	b004      	add	sp, #16
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	1c59      	adds	r1, r3, #1
 8009ff2:	9103      	str	r1, [sp, #12]
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e7f0      	b.n	8009fda <__cvt+0xa6>

08009ff8 <__exponent>:
 8009ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	bfb8      	it	lt
 800a000:	4249      	neglt	r1, r1
 800a002:	f803 2b02 	strb.w	r2, [r3], #2
 800a006:	bfb4      	ite	lt
 800a008:	222d      	movlt	r2, #45	; 0x2d
 800a00a:	222b      	movge	r2, #43	; 0x2b
 800a00c:	2909      	cmp	r1, #9
 800a00e:	7042      	strb	r2, [r0, #1]
 800a010:	dd2a      	ble.n	800a068 <__exponent+0x70>
 800a012:	f10d 0407 	add.w	r4, sp, #7
 800a016:	46a4      	mov	ip, r4
 800a018:	270a      	movs	r7, #10
 800a01a:	46a6      	mov	lr, r4
 800a01c:	460a      	mov	r2, r1
 800a01e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a022:	fb07 1516 	mls	r5, r7, r6, r1
 800a026:	3530      	adds	r5, #48	; 0x30
 800a028:	2a63      	cmp	r2, #99	; 0x63
 800a02a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a02e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a032:	4631      	mov	r1, r6
 800a034:	dcf1      	bgt.n	800a01a <__exponent+0x22>
 800a036:	3130      	adds	r1, #48	; 0x30
 800a038:	f1ae 0502 	sub.w	r5, lr, #2
 800a03c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a040:	1c44      	adds	r4, r0, #1
 800a042:	4629      	mov	r1, r5
 800a044:	4561      	cmp	r1, ip
 800a046:	d30a      	bcc.n	800a05e <__exponent+0x66>
 800a048:	f10d 0209 	add.w	r2, sp, #9
 800a04c:	eba2 020e 	sub.w	r2, r2, lr
 800a050:	4565      	cmp	r5, ip
 800a052:	bf88      	it	hi
 800a054:	2200      	movhi	r2, #0
 800a056:	4413      	add	r3, r2
 800a058:	1a18      	subs	r0, r3, r0
 800a05a:	b003      	add	sp, #12
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a062:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a066:	e7ed      	b.n	800a044 <__exponent+0x4c>
 800a068:	2330      	movs	r3, #48	; 0x30
 800a06a:	3130      	adds	r1, #48	; 0x30
 800a06c:	7083      	strb	r3, [r0, #2]
 800a06e:	70c1      	strb	r1, [r0, #3]
 800a070:	1d03      	adds	r3, r0, #4
 800a072:	e7f1      	b.n	800a058 <__exponent+0x60>

0800a074 <_printf_float>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	ed2d 8b02 	vpush	{d8}
 800a07c:	b08d      	sub	sp, #52	; 0x34
 800a07e:	460c      	mov	r4, r1
 800a080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a084:	4616      	mov	r6, r2
 800a086:	461f      	mov	r7, r3
 800a088:	4605      	mov	r5, r0
 800a08a:	f001 fa37 	bl	800b4fc <_localeconv_r>
 800a08e:	f8d0 a000 	ldr.w	sl, [r0]
 800a092:	4650      	mov	r0, sl
 800a094:	f7f6 f8a4 	bl	80001e0 <strlen>
 800a098:	2300      	movs	r3, #0
 800a09a:	930a      	str	r3, [sp, #40]	; 0x28
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	9305      	str	r3, [sp, #20]
 800a0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a0a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0a8:	3307      	adds	r3, #7
 800a0aa:	f023 0307 	bic.w	r3, r3, #7
 800a0ae:	f103 0208 	add.w	r2, r3, #8
 800a0b2:	f8c8 2000 	str.w	r2, [r8]
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0cc:	ee08 0a10 	vmov	s16, r0
 800a0d0:	4b9f      	ldr	r3, [pc, #636]	; (800a350 <_printf_float+0x2dc>)
 800a0d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0da:	f7f6 fd2f 	bl	8000b3c <__aeabi_dcmpun>
 800a0de:	bb88      	cbnz	r0, 800a144 <_printf_float+0xd0>
 800a0e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0e4:	4b9a      	ldr	r3, [pc, #616]	; (800a350 <_printf_float+0x2dc>)
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0ea:	f7f6 fd09 	bl	8000b00 <__aeabi_dcmple>
 800a0ee:	bb48      	cbnz	r0, 800a144 <_printf_float+0xd0>
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	f7f6 fcf8 	bl	8000aec <__aeabi_dcmplt>
 800a0fc:	b110      	cbz	r0, 800a104 <_printf_float+0x90>
 800a0fe:	232d      	movs	r3, #45	; 0x2d
 800a100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a104:	4b93      	ldr	r3, [pc, #588]	; (800a354 <_printf_float+0x2e0>)
 800a106:	4894      	ldr	r0, [pc, #592]	; (800a358 <_printf_float+0x2e4>)
 800a108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a10c:	bf94      	ite	ls
 800a10e:	4698      	movls	r8, r3
 800a110:	4680      	movhi	r8, r0
 800a112:	2303      	movs	r3, #3
 800a114:	6123      	str	r3, [r4, #16]
 800a116:	9b05      	ldr	r3, [sp, #20]
 800a118:	f023 0204 	bic.w	r2, r3, #4
 800a11c:	6022      	str	r2, [r4, #0]
 800a11e:	f04f 0900 	mov.w	r9, #0
 800a122:	9700      	str	r7, [sp, #0]
 800a124:	4633      	mov	r3, r6
 800a126:	aa0b      	add	r2, sp, #44	; 0x2c
 800a128:	4621      	mov	r1, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 f9d8 	bl	800a4e0 <_printf_common>
 800a130:	3001      	adds	r0, #1
 800a132:	f040 8090 	bne.w	800a256 <_printf_float+0x1e2>
 800a136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13a:	b00d      	add	sp, #52	; 0x34
 800a13c:	ecbd 8b02 	vpop	{d8}
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	4642      	mov	r2, r8
 800a146:	464b      	mov	r3, r9
 800a148:	4640      	mov	r0, r8
 800a14a:	4649      	mov	r1, r9
 800a14c:	f7f6 fcf6 	bl	8000b3c <__aeabi_dcmpun>
 800a150:	b140      	cbz	r0, 800a164 <_printf_float+0xf0>
 800a152:	464b      	mov	r3, r9
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfbc      	itt	lt
 800a158:	232d      	movlt	r3, #45	; 0x2d
 800a15a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a15e:	487f      	ldr	r0, [pc, #508]	; (800a35c <_printf_float+0x2e8>)
 800a160:	4b7f      	ldr	r3, [pc, #508]	; (800a360 <_printf_float+0x2ec>)
 800a162:	e7d1      	b.n	800a108 <_printf_float+0x94>
 800a164:	6863      	ldr	r3, [r4, #4]
 800a166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a16a:	9206      	str	r2, [sp, #24]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	d13f      	bne.n	800a1f0 <_printf_float+0x17c>
 800a170:	2306      	movs	r3, #6
 800a172:	6063      	str	r3, [r4, #4]
 800a174:	9b05      	ldr	r3, [sp, #20]
 800a176:	6861      	ldr	r1, [r4, #4]
 800a178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a17c:	2300      	movs	r3, #0
 800a17e:	9303      	str	r3, [sp, #12]
 800a180:	ab0a      	add	r3, sp, #40	; 0x28
 800a182:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a186:	ab09      	add	r3, sp, #36	; 0x24
 800a188:	ec49 8b10 	vmov	d0, r8, r9
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a194:	4628      	mov	r0, r5
 800a196:	f7ff fecd 	bl	8009f34 <__cvt>
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a19e:	2b47      	cmp	r3, #71	; 0x47
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	d108      	bne.n	800a1b6 <_printf_float+0x142>
 800a1a4:	1cc8      	adds	r0, r1, #3
 800a1a6:	db02      	blt.n	800a1ae <_printf_float+0x13a>
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	dd41      	ble.n	800a232 <_printf_float+0x1be>
 800a1ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1b2:	fa5f fb8b 	uxtb.w	fp, fp
 800a1b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1ba:	d820      	bhi.n	800a1fe <_printf_float+0x18a>
 800a1bc:	3901      	subs	r1, #1
 800a1be:	465a      	mov	r2, fp
 800a1c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1c4:	9109      	str	r1, [sp, #36]	; 0x24
 800a1c6:	f7ff ff17 	bl	8009ff8 <__exponent>
 800a1ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1cc:	1813      	adds	r3, r2, r0
 800a1ce:	2a01      	cmp	r2, #1
 800a1d0:	4681      	mov	r9, r0
 800a1d2:	6123      	str	r3, [r4, #16]
 800a1d4:	dc02      	bgt.n	800a1dc <_printf_float+0x168>
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	07d2      	lsls	r2, r2, #31
 800a1da:	d501      	bpl.n	800a1e0 <_printf_float+0x16c>
 800a1dc:	3301      	adds	r3, #1
 800a1de:	6123      	str	r3, [r4, #16]
 800a1e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d09c      	beq.n	800a122 <_printf_float+0xae>
 800a1e8:	232d      	movs	r3, #45	; 0x2d
 800a1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ee:	e798      	b.n	800a122 <_printf_float+0xae>
 800a1f0:	9a06      	ldr	r2, [sp, #24]
 800a1f2:	2a47      	cmp	r2, #71	; 0x47
 800a1f4:	d1be      	bne.n	800a174 <_printf_float+0x100>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1bc      	bne.n	800a174 <_printf_float+0x100>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e7b9      	b.n	800a172 <_printf_float+0xfe>
 800a1fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a202:	d118      	bne.n	800a236 <_printf_float+0x1c2>
 800a204:	2900      	cmp	r1, #0
 800a206:	6863      	ldr	r3, [r4, #4]
 800a208:	dd0b      	ble.n	800a222 <_printf_float+0x1ae>
 800a20a:	6121      	str	r1, [r4, #16]
 800a20c:	b913      	cbnz	r3, 800a214 <_printf_float+0x1a0>
 800a20e:	6822      	ldr	r2, [r4, #0]
 800a210:	07d0      	lsls	r0, r2, #31
 800a212:	d502      	bpl.n	800a21a <_printf_float+0x1a6>
 800a214:	3301      	adds	r3, #1
 800a216:	440b      	add	r3, r1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a21c:	f04f 0900 	mov.w	r9, #0
 800a220:	e7de      	b.n	800a1e0 <_printf_float+0x16c>
 800a222:	b913      	cbnz	r3, 800a22a <_printf_float+0x1b6>
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	07d2      	lsls	r2, r2, #31
 800a228:	d501      	bpl.n	800a22e <_printf_float+0x1ba>
 800a22a:	3302      	adds	r3, #2
 800a22c:	e7f4      	b.n	800a218 <_printf_float+0x1a4>
 800a22e:	2301      	movs	r3, #1
 800a230:	e7f2      	b.n	800a218 <_printf_float+0x1a4>
 800a232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a238:	4299      	cmp	r1, r3
 800a23a:	db05      	blt.n	800a248 <_printf_float+0x1d4>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	6121      	str	r1, [r4, #16]
 800a240:	07d8      	lsls	r0, r3, #31
 800a242:	d5ea      	bpl.n	800a21a <_printf_float+0x1a6>
 800a244:	1c4b      	adds	r3, r1, #1
 800a246:	e7e7      	b.n	800a218 <_printf_float+0x1a4>
 800a248:	2900      	cmp	r1, #0
 800a24a:	bfd4      	ite	le
 800a24c:	f1c1 0202 	rsble	r2, r1, #2
 800a250:	2201      	movgt	r2, #1
 800a252:	4413      	add	r3, r2
 800a254:	e7e0      	b.n	800a218 <_printf_float+0x1a4>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	055a      	lsls	r2, r3, #21
 800a25a:	d407      	bmi.n	800a26c <_printf_float+0x1f8>
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	4642      	mov	r2, r8
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	d12c      	bne.n	800a2c4 <_printf_float+0x250>
 800a26a:	e764      	b.n	800a136 <_printf_float+0xc2>
 800a26c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a270:	f240 80e0 	bls.w	800a434 <_printf_float+0x3c0>
 800a274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a278:	2200      	movs	r2, #0
 800a27a:	2300      	movs	r3, #0
 800a27c:	f7f6 fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a280:	2800      	cmp	r0, #0
 800a282:	d034      	beq.n	800a2ee <_printf_float+0x27a>
 800a284:	4a37      	ldr	r2, [pc, #220]	; (800a364 <_printf_float+0x2f0>)
 800a286:	2301      	movs	r3, #1
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	f43f af51 	beq.w	800a136 <_printf_float+0xc2>
 800a294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a298:	429a      	cmp	r2, r3
 800a29a:	db02      	blt.n	800a2a2 <_printf_float+0x22e>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	07d8      	lsls	r0, r3, #31
 800a2a0:	d510      	bpl.n	800a2c4 <_printf_float+0x250>
 800a2a2:	ee18 3a10 	vmov	r3, s16
 800a2a6:	4652      	mov	r2, sl
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f af41 	beq.w	800a136 <_printf_float+0xc2>
 800a2b4:	f04f 0800 	mov.w	r8, #0
 800a2b8:	f104 091a 	add.w	r9, r4, #26
 800a2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	4543      	cmp	r3, r8
 800a2c2:	dc09      	bgt.n	800a2d8 <_printf_float+0x264>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	079b      	lsls	r3, r3, #30
 800a2c8:	f100 8105 	bmi.w	800a4d6 <_printf_float+0x462>
 800a2cc:	68e0      	ldr	r0, [r4, #12]
 800a2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d0:	4298      	cmp	r0, r3
 800a2d2:	bfb8      	it	lt
 800a2d4:	4618      	movlt	r0, r3
 800a2d6:	e730      	b.n	800a13a <_printf_float+0xc6>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	464a      	mov	r2, r9
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af27 	beq.w	800a136 <_printf_float+0xc2>
 800a2e8:	f108 0801 	add.w	r8, r8, #1
 800a2ec:	e7e6      	b.n	800a2bc <_printf_float+0x248>
 800a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dc39      	bgt.n	800a368 <_printf_float+0x2f4>
 800a2f4:	4a1b      	ldr	r2, [pc, #108]	; (800a364 <_printf_float+0x2f0>)
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f af19 	beq.w	800a136 <_printf_float+0xc2>
 800a304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a308:	4313      	orrs	r3, r2
 800a30a:	d102      	bne.n	800a312 <_printf_float+0x29e>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	07d9      	lsls	r1, r3, #31
 800a310:	d5d8      	bpl.n	800a2c4 <_printf_float+0x250>
 800a312:	ee18 3a10 	vmov	r3, s16
 800a316:	4652      	mov	r2, sl
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	f43f af09 	beq.w	800a136 <_printf_float+0xc2>
 800a324:	f04f 0900 	mov.w	r9, #0
 800a328:	f104 0a1a 	add.w	sl, r4, #26
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	425b      	negs	r3, r3
 800a330:	454b      	cmp	r3, r9
 800a332:	dc01      	bgt.n	800a338 <_printf_float+0x2c4>
 800a334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a336:	e792      	b.n	800a25e <_printf_float+0x1ea>
 800a338:	2301      	movs	r3, #1
 800a33a:	4652      	mov	r2, sl
 800a33c:	4631      	mov	r1, r6
 800a33e:	4628      	mov	r0, r5
 800a340:	47b8      	blx	r7
 800a342:	3001      	adds	r0, #1
 800a344:	f43f aef7 	beq.w	800a136 <_printf_float+0xc2>
 800a348:	f109 0901 	add.w	r9, r9, #1
 800a34c:	e7ee      	b.n	800a32c <_printf_float+0x2b8>
 800a34e:	bf00      	nop
 800a350:	7fefffff 	.word	0x7fefffff
 800a354:	0800c9bc 	.word	0x0800c9bc
 800a358:	0800c9c0 	.word	0x0800c9c0
 800a35c:	0800c9c8 	.word	0x0800c9c8
 800a360:	0800c9c4 	.word	0x0800c9c4
 800a364:	0800c9cc 	.word	0x0800c9cc
 800a368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a36a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a36c:	429a      	cmp	r2, r3
 800a36e:	bfa8      	it	ge
 800a370:	461a      	movge	r2, r3
 800a372:	2a00      	cmp	r2, #0
 800a374:	4691      	mov	r9, r2
 800a376:	dc37      	bgt.n	800a3e8 <_printf_float+0x374>
 800a378:	f04f 0b00 	mov.w	fp, #0
 800a37c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a380:	f104 021a 	add.w	r2, r4, #26
 800a384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a386:	9305      	str	r3, [sp, #20]
 800a388:	eba3 0309 	sub.w	r3, r3, r9
 800a38c:	455b      	cmp	r3, fp
 800a38e:	dc33      	bgt.n	800a3f8 <_printf_float+0x384>
 800a390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a394:	429a      	cmp	r2, r3
 800a396:	db3b      	blt.n	800a410 <_printf_float+0x39c>
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	07da      	lsls	r2, r3, #31
 800a39c:	d438      	bmi.n	800a410 <_printf_float+0x39c>
 800a39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a0:	9a05      	ldr	r2, [sp, #20]
 800a3a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3a4:	1a9a      	subs	r2, r3, r2
 800a3a6:	eba3 0901 	sub.w	r9, r3, r1
 800a3aa:	4591      	cmp	r9, r2
 800a3ac:	bfa8      	it	ge
 800a3ae:	4691      	movge	r9, r2
 800a3b0:	f1b9 0f00 	cmp.w	r9, #0
 800a3b4:	dc35      	bgt.n	800a422 <_printf_float+0x3ae>
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3be:	f104 0a1a 	add.w	sl, r4, #26
 800a3c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3c6:	1a9b      	subs	r3, r3, r2
 800a3c8:	eba3 0309 	sub.w	r3, r3, r9
 800a3cc:	4543      	cmp	r3, r8
 800a3ce:	f77f af79 	ble.w	800a2c4 <_printf_float+0x250>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f43f aeaa 	beq.w	800a136 <_printf_float+0xc2>
 800a3e2:	f108 0801 	add.w	r8, r8, #1
 800a3e6:	e7ec      	b.n	800a3c2 <_printf_float+0x34e>
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b8      	blx	r7
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d1c0      	bne.n	800a378 <_printf_float+0x304>
 800a3f6:	e69e      	b.n	800a136 <_printf_float+0xc2>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	9205      	str	r2, [sp, #20]
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f ae97 	beq.w	800a136 <_printf_float+0xc2>
 800a408:	9a05      	ldr	r2, [sp, #20]
 800a40a:	f10b 0b01 	add.w	fp, fp, #1
 800a40e:	e7b9      	b.n	800a384 <_printf_float+0x310>
 800a410:	ee18 3a10 	vmov	r3, s16
 800a414:	4652      	mov	r2, sl
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	d1be      	bne.n	800a39e <_printf_float+0x32a>
 800a420:	e689      	b.n	800a136 <_printf_float+0xc2>
 800a422:	9a05      	ldr	r2, [sp, #20]
 800a424:	464b      	mov	r3, r9
 800a426:	4442      	add	r2, r8
 800a428:	4631      	mov	r1, r6
 800a42a:	4628      	mov	r0, r5
 800a42c:	47b8      	blx	r7
 800a42e:	3001      	adds	r0, #1
 800a430:	d1c1      	bne.n	800a3b6 <_printf_float+0x342>
 800a432:	e680      	b.n	800a136 <_printf_float+0xc2>
 800a434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a436:	2a01      	cmp	r2, #1
 800a438:	dc01      	bgt.n	800a43e <_printf_float+0x3ca>
 800a43a:	07db      	lsls	r3, r3, #31
 800a43c:	d538      	bpl.n	800a4b0 <_printf_float+0x43c>
 800a43e:	2301      	movs	r3, #1
 800a440:	4642      	mov	r2, r8
 800a442:	4631      	mov	r1, r6
 800a444:	4628      	mov	r0, r5
 800a446:	47b8      	blx	r7
 800a448:	3001      	adds	r0, #1
 800a44a:	f43f ae74 	beq.w	800a136 <_printf_float+0xc2>
 800a44e:	ee18 3a10 	vmov	r3, s16
 800a452:	4652      	mov	r2, sl
 800a454:	4631      	mov	r1, r6
 800a456:	4628      	mov	r0, r5
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	f43f ae6b 	beq.w	800a136 <_printf_float+0xc2>
 800a460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a464:	2200      	movs	r2, #0
 800a466:	2300      	movs	r3, #0
 800a468:	f7f6 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800a46c:	b9d8      	cbnz	r0, 800a4a6 <_printf_float+0x432>
 800a46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a470:	f108 0201 	add.w	r2, r8, #1
 800a474:	3b01      	subs	r3, #1
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	47b8      	blx	r7
 800a47c:	3001      	adds	r0, #1
 800a47e:	d10e      	bne.n	800a49e <_printf_float+0x42a>
 800a480:	e659      	b.n	800a136 <_printf_float+0xc2>
 800a482:	2301      	movs	r3, #1
 800a484:	4652      	mov	r2, sl
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae52 	beq.w	800a136 <_printf_float+0xc2>
 800a492:	f108 0801 	add.w	r8, r8, #1
 800a496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a498:	3b01      	subs	r3, #1
 800a49a:	4543      	cmp	r3, r8
 800a49c:	dcf1      	bgt.n	800a482 <_printf_float+0x40e>
 800a49e:	464b      	mov	r3, r9
 800a4a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4a4:	e6dc      	b.n	800a260 <_printf_float+0x1ec>
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	f104 0a1a 	add.w	sl, r4, #26
 800a4ae:	e7f2      	b.n	800a496 <_printf_float+0x422>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4642      	mov	r2, r8
 800a4b4:	e7df      	b.n	800a476 <_printf_float+0x402>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	464a      	mov	r2, r9
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f ae38 	beq.w	800a136 <_printf_float+0xc2>
 800a4c6:	f108 0801 	add.w	r8, r8, #1
 800a4ca:	68e3      	ldr	r3, [r4, #12]
 800a4cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ce:	1a5b      	subs	r3, r3, r1
 800a4d0:	4543      	cmp	r3, r8
 800a4d2:	dcf0      	bgt.n	800a4b6 <_printf_float+0x442>
 800a4d4:	e6fa      	b.n	800a2cc <_printf_float+0x258>
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	f104 0919 	add.w	r9, r4, #25
 800a4de:	e7f4      	b.n	800a4ca <_printf_float+0x456>

0800a4e0 <_printf_common>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	4616      	mov	r6, r2
 800a4e6:	4699      	mov	r9, r3
 800a4e8:	688a      	ldr	r2, [r1, #8]
 800a4ea:	690b      	ldr	r3, [r1, #16]
 800a4ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	bfb8      	it	lt
 800a4f4:	4613      	movlt	r3, r2
 800a4f6:	6033      	str	r3, [r6, #0]
 800a4f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	b10a      	cbz	r2, 800a506 <_printf_common+0x26>
 800a502:	3301      	adds	r3, #1
 800a504:	6033      	str	r3, [r6, #0]
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	0699      	lsls	r1, r3, #26
 800a50a:	bf42      	ittt	mi
 800a50c:	6833      	ldrmi	r3, [r6, #0]
 800a50e:	3302      	addmi	r3, #2
 800a510:	6033      	strmi	r3, [r6, #0]
 800a512:	6825      	ldr	r5, [r4, #0]
 800a514:	f015 0506 	ands.w	r5, r5, #6
 800a518:	d106      	bne.n	800a528 <_printf_common+0x48>
 800a51a:	f104 0a19 	add.w	sl, r4, #25
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	6832      	ldr	r2, [r6, #0]
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	42ab      	cmp	r3, r5
 800a526:	dc26      	bgt.n	800a576 <_printf_common+0x96>
 800a528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a52c:	1e13      	subs	r3, r2, #0
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	bf18      	it	ne
 800a532:	2301      	movne	r3, #1
 800a534:	0692      	lsls	r2, r2, #26
 800a536:	d42b      	bmi.n	800a590 <_printf_common+0xb0>
 800a538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a53c:	4649      	mov	r1, r9
 800a53e:	4638      	mov	r0, r7
 800a540:	47c0      	blx	r8
 800a542:	3001      	adds	r0, #1
 800a544:	d01e      	beq.n	800a584 <_printf_common+0xa4>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	68e5      	ldr	r5, [r4, #12]
 800a54a:	6832      	ldr	r2, [r6, #0]
 800a54c:	f003 0306 	and.w	r3, r3, #6
 800a550:	2b04      	cmp	r3, #4
 800a552:	bf08      	it	eq
 800a554:	1aad      	subeq	r5, r5, r2
 800a556:	68a3      	ldr	r3, [r4, #8]
 800a558:	6922      	ldr	r2, [r4, #16]
 800a55a:	bf0c      	ite	eq
 800a55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a560:	2500      	movne	r5, #0
 800a562:	4293      	cmp	r3, r2
 800a564:	bfc4      	itt	gt
 800a566:	1a9b      	subgt	r3, r3, r2
 800a568:	18ed      	addgt	r5, r5, r3
 800a56a:	2600      	movs	r6, #0
 800a56c:	341a      	adds	r4, #26
 800a56e:	42b5      	cmp	r5, r6
 800a570:	d11a      	bne.n	800a5a8 <_printf_common+0xc8>
 800a572:	2000      	movs	r0, #0
 800a574:	e008      	b.n	800a588 <_printf_common+0xa8>
 800a576:	2301      	movs	r3, #1
 800a578:	4652      	mov	r2, sl
 800a57a:	4649      	mov	r1, r9
 800a57c:	4638      	mov	r0, r7
 800a57e:	47c0      	blx	r8
 800a580:	3001      	adds	r0, #1
 800a582:	d103      	bne.n	800a58c <_printf_common+0xac>
 800a584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58c:	3501      	adds	r5, #1
 800a58e:	e7c6      	b.n	800a51e <_printf_common+0x3e>
 800a590:	18e1      	adds	r1, r4, r3
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	2030      	movs	r0, #48	; 0x30
 800a596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a59a:	4422      	add	r2, r4
 800a59c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	e7c7      	b.n	800a538 <_printf_common+0x58>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	4622      	mov	r2, r4
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	47c0      	blx	r8
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d0e6      	beq.n	800a584 <_printf_common+0xa4>
 800a5b6:	3601      	adds	r6, #1
 800a5b8:	e7d9      	b.n	800a56e <_printf_common+0x8e>
	...

0800a5bc <_printf_i>:
 800a5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	7e0f      	ldrb	r7, [r1, #24]
 800a5c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5c4:	2f78      	cmp	r7, #120	; 0x78
 800a5c6:	4691      	mov	r9, r2
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	469a      	mov	sl, r3
 800a5ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5d2:	d807      	bhi.n	800a5e4 <_printf_i+0x28>
 800a5d4:	2f62      	cmp	r7, #98	; 0x62
 800a5d6:	d80a      	bhi.n	800a5ee <_printf_i+0x32>
 800a5d8:	2f00      	cmp	r7, #0
 800a5da:	f000 80d8 	beq.w	800a78e <_printf_i+0x1d2>
 800a5de:	2f58      	cmp	r7, #88	; 0x58
 800a5e0:	f000 80a3 	beq.w	800a72a <_printf_i+0x16e>
 800a5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5ec:	e03a      	b.n	800a664 <_printf_i+0xa8>
 800a5ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5f2:	2b15      	cmp	r3, #21
 800a5f4:	d8f6      	bhi.n	800a5e4 <_printf_i+0x28>
 800a5f6:	a101      	add	r1, pc, #4	; (adr r1, 800a5fc <_printf_i+0x40>)
 800a5f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5fc:	0800a655 	.word	0x0800a655
 800a600:	0800a669 	.word	0x0800a669
 800a604:	0800a5e5 	.word	0x0800a5e5
 800a608:	0800a5e5 	.word	0x0800a5e5
 800a60c:	0800a5e5 	.word	0x0800a5e5
 800a610:	0800a5e5 	.word	0x0800a5e5
 800a614:	0800a669 	.word	0x0800a669
 800a618:	0800a5e5 	.word	0x0800a5e5
 800a61c:	0800a5e5 	.word	0x0800a5e5
 800a620:	0800a5e5 	.word	0x0800a5e5
 800a624:	0800a5e5 	.word	0x0800a5e5
 800a628:	0800a775 	.word	0x0800a775
 800a62c:	0800a699 	.word	0x0800a699
 800a630:	0800a757 	.word	0x0800a757
 800a634:	0800a5e5 	.word	0x0800a5e5
 800a638:	0800a5e5 	.word	0x0800a5e5
 800a63c:	0800a797 	.word	0x0800a797
 800a640:	0800a5e5 	.word	0x0800a5e5
 800a644:	0800a699 	.word	0x0800a699
 800a648:	0800a5e5 	.word	0x0800a5e5
 800a64c:	0800a5e5 	.word	0x0800a5e5
 800a650:	0800a75f 	.word	0x0800a75f
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	602a      	str	r2, [r5, #0]
 800a65c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a664:	2301      	movs	r3, #1
 800a666:	e0a3      	b.n	800a7b0 <_printf_i+0x1f4>
 800a668:	6820      	ldr	r0, [r4, #0]
 800a66a:	6829      	ldr	r1, [r5, #0]
 800a66c:	0606      	lsls	r6, r0, #24
 800a66e:	f101 0304 	add.w	r3, r1, #4
 800a672:	d50a      	bpl.n	800a68a <_printf_i+0xce>
 800a674:	680e      	ldr	r6, [r1, #0]
 800a676:	602b      	str	r3, [r5, #0]
 800a678:	2e00      	cmp	r6, #0
 800a67a:	da03      	bge.n	800a684 <_printf_i+0xc8>
 800a67c:	232d      	movs	r3, #45	; 0x2d
 800a67e:	4276      	negs	r6, r6
 800a680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a684:	485e      	ldr	r0, [pc, #376]	; (800a800 <_printf_i+0x244>)
 800a686:	230a      	movs	r3, #10
 800a688:	e019      	b.n	800a6be <_printf_i+0x102>
 800a68a:	680e      	ldr	r6, [r1, #0]
 800a68c:	602b      	str	r3, [r5, #0]
 800a68e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a692:	bf18      	it	ne
 800a694:	b236      	sxthne	r6, r6
 800a696:	e7ef      	b.n	800a678 <_printf_i+0xbc>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	6820      	ldr	r0, [r4, #0]
 800a69c:	1d19      	adds	r1, r3, #4
 800a69e:	6029      	str	r1, [r5, #0]
 800a6a0:	0601      	lsls	r1, r0, #24
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_i+0xec>
 800a6a4:	681e      	ldr	r6, [r3, #0]
 800a6a6:	e002      	b.n	800a6ae <_printf_i+0xf2>
 800a6a8:	0646      	lsls	r6, r0, #25
 800a6aa:	d5fb      	bpl.n	800a6a4 <_printf_i+0xe8>
 800a6ac:	881e      	ldrh	r6, [r3, #0]
 800a6ae:	4854      	ldr	r0, [pc, #336]	; (800a800 <_printf_i+0x244>)
 800a6b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a6b2:	bf0c      	ite	eq
 800a6b4:	2308      	moveq	r3, #8
 800a6b6:	230a      	movne	r3, #10
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6be:	6865      	ldr	r5, [r4, #4]
 800a6c0:	60a5      	str	r5, [r4, #8]
 800a6c2:	2d00      	cmp	r5, #0
 800a6c4:	bfa2      	ittt	ge
 800a6c6:	6821      	ldrge	r1, [r4, #0]
 800a6c8:	f021 0104 	bicge.w	r1, r1, #4
 800a6cc:	6021      	strge	r1, [r4, #0]
 800a6ce:	b90e      	cbnz	r6, 800a6d4 <_printf_i+0x118>
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	d04d      	beq.n	800a770 <_printf_i+0x1b4>
 800a6d4:	4615      	mov	r5, r2
 800a6d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6da:	fb03 6711 	mls	r7, r3, r1, r6
 800a6de:	5dc7      	ldrb	r7, [r0, r7]
 800a6e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6e4:	4637      	mov	r7, r6
 800a6e6:	42bb      	cmp	r3, r7
 800a6e8:	460e      	mov	r6, r1
 800a6ea:	d9f4      	bls.n	800a6d6 <_printf_i+0x11a>
 800a6ec:	2b08      	cmp	r3, #8
 800a6ee:	d10b      	bne.n	800a708 <_printf_i+0x14c>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	07de      	lsls	r6, r3, #31
 800a6f4:	d508      	bpl.n	800a708 <_printf_i+0x14c>
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	6861      	ldr	r1, [r4, #4]
 800a6fa:	4299      	cmp	r1, r3
 800a6fc:	bfde      	ittt	le
 800a6fe:	2330      	movle	r3, #48	; 0x30
 800a700:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a704:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a708:	1b52      	subs	r2, r2, r5
 800a70a:	6122      	str	r2, [r4, #16]
 800a70c:	f8cd a000 	str.w	sl, [sp]
 800a710:	464b      	mov	r3, r9
 800a712:	aa03      	add	r2, sp, #12
 800a714:	4621      	mov	r1, r4
 800a716:	4640      	mov	r0, r8
 800a718:	f7ff fee2 	bl	800a4e0 <_printf_common>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d14c      	bne.n	800a7ba <_printf_i+0x1fe>
 800a720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a724:	b004      	add	sp, #16
 800a726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72a:	4835      	ldr	r0, [pc, #212]	; (800a800 <_printf_i+0x244>)
 800a72c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a730:	6829      	ldr	r1, [r5, #0]
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	f851 6b04 	ldr.w	r6, [r1], #4
 800a738:	6029      	str	r1, [r5, #0]
 800a73a:	061d      	lsls	r5, r3, #24
 800a73c:	d514      	bpl.n	800a768 <_printf_i+0x1ac>
 800a73e:	07df      	lsls	r7, r3, #31
 800a740:	bf44      	itt	mi
 800a742:	f043 0320 	orrmi.w	r3, r3, #32
 800a746:	6023      	strmi	r3, [r4, #0]
 800a748:	b91e      	cbnz	r6, 800a752 <_printf_i+0x196>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	f023 0320 	bic.w	r3, r3, #32
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	2310      	movs	r3, #16
 800a754:	e7b0      	b.n	800a6b8 <_printf_i+0xfc>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	f043 0320 	orr.w	r3, r3, #32
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	2378      	movs	r3, #120	; 0x78
 800a760:	4828      	ldr	r0, [pc, #160]	; (800a804 <_printf_i+0x248>)
 800a762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a766:	e7e3      	b.n	800a730 <_printf_i+0x174>
 800a768:	0659      	lsls	r1, r3, #25
 800a76a:	bf48      	it	mi
 800a76c:	b2b6      	uxthmi	r6, r6
 800a76e:	e7e6      	b.n	800a73e <_printf_i+0x182>
 800a770:	4615      	mov	r5, r2
 800a772:	e7bb      	b.n	800a6ec <_printf_i+0x130>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	6826      	ldr	r6, [r4, #0]
 800a778:	6961      	ldr	r1, [r4, #20]
 800a77a:	1d18      	adds	r0, r3, #4
 800a77c:	6028      	str	r0, [r5, #0]
 800a77e:	0635      	lsls	r5, r6, #24
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	d501      	bpl.n	800a788 <_printf_i+0x1cc>
 800a784:	6019      	str	r1, [r3, #0]
 800a786:	e002      	b.n	800a78e <_printf_i+0x1d2>
 800a788:	0670      	lsls	r0, r6, #25
 800a78a:	d5fb      	bpl.n	800a784 <_printf_i+0x1c8>
 800a78c:	8019      	strh	r1, [r3, #0]
 800a78e:	2300      	movs	r3, #0
 800a790:	6123      	str	r3, [r4, #16]
 800a792:	4615      	mov	r5, r2
 800a794:	e7ba      	b.n	800a70c <_printf_i+0x150>
 800a796:	682b      	ldr	r3, [r5, #0]
 800a798:	1d1a      	adds	r2, r3, #4
 800a79a:	602a      	str	r2, [r5, #0]
 800a79c:	681d      	ldr	r5, [r3, #0]
 800a79e:	6862      	ldr	r2, [r4, #4]
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f7f5 fd24 	bl	80001f0 <memchr>
 800a7a8:	b108      	cbz	r0, 800a7ae <_printf_i+0x1f2>
 800a7aa:	1b40      	subs	r0, r0, r5
 800a7ac:	6060      	str	r0, [r4, #4]
 800a7ae:	6863      	ldr	r3, [r4, #4]
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b8:	e7a8      	b.n	800a70c <_printf_i+0x150>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	462a      	mov	r2, r5
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	47d0      	blx	sl
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d0ab      	beq.n	800a720 <_printf_i+0x164>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	079b      	lsls	r3, r3, #30
 800a7cc:	d413      	bmi.n	800a7f6 <_printf_i+0x23a>
 800a7ce:	68e0      	ldr	r0, [r4, #12]
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	4298      	cmp	r0, r3
 800a7d4:	bfb8      	it	lt
 800a7d6:	4618      	movlt	r0, r3
 800a7d8:	e7a4      	b.n	800a724 <_printf_i+0x168>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4632      	mov	r2, r6
 800a7de:	4649      	mov	r1, r9
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	47d0      	blx	sl
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d09b      	beq.n	800a720 <_printf_i+0x164>
 800a7e8:	3501      	adds	r5, #1
 800a7ea:	68e3      	ldr	r3, [r4, #12]
 800a7ec:	9903      	ldr	r1, [sp, #12]
 800a7ee:	1a5b      	subs	r3, r3, r1
 800a7f0:	42ab      	cmp	r3, r5
 800a7f2:	dcf2      	bgt.n	800a7da <_printf_i+0x21e>
 800a7f4:	e7eb      	b.n	800a7ce <_printf_i+0x212>
 800a7f6:	2500      	movs	r5, #0
 800a7f8:	f104 0619 	add.w	r6, r4, #25
 800a7fc:	e7f5      	b.n	800a7ea <_printf_i+0x22e>
 800a7fe:	bf00      	nop
 800a800:	0800c9ce 	.word	0x0800c9ce
 800a804:	0800c9df 	.word	0x0800c9df

0800a808 <quorem>:
 800a808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	6903      	ldr	r3, [r0, #16]
 800a80e:	690c      	ldr	r4, [r1, #16]
 800a810:	42a3      	cmp	r3, r4
 800a812:	4607      	mov	r7, r0
 800a814:	f2c0 8081 	blt.w	800a91a <quorem+0x112>
 800a818:	3c01      	subs	r4, #1
 800a81a:	f101 0814 	add.w	r8, r1, #20
 800a81e:	f100 0514 	add.w	r5, r0, #20
 800a822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a82c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a830:	3301      	adds	r3, #1
 800a832:	429a      	cmp	r2, r3
 800a834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a83c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a840:	d331      	bcc.n	800a8a6 <quorem+0x9e>
 800a842:	f04f 0e00 	mov.w	lr, #0
 800a846:	4640      	mov	r0, r8
 800a848:	46ac      	mov	ip, r5
 800a84a:	46f2      	mov	sl, lr
 800a84c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a850:	b293      	uxth	r3, r2
 800a852:	fb06 e303 	mla	r3, r6, r3, lr
 800a856:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ebaa 0303 	sub.w	r3, sl, r3
 800a860:	f8dc a000 	ldr.w	sl, [ip]
 800a864:	0c12      	lsrs	r2, r2, #16
 800a866:	fa13 f38a 	uxtah	r3, r3, sl
 800a86a:	fb06 e202 	mla	r2, r6, r2, lr
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	9b00      	ldr	r3, [sp, #0]
 800a872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a876:	b292      	uxth	r2, r2
 800a878:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a87c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a880:	f8bd 3000 	ldrh.w	r3, [sp]
 800a884:	4581      	cmp	r9, r0
 800a886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a88a:	f84c 3b04 	str.w	r3, [ip], #4
 800a88e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a892:	d2db      	bcs.n	800a84c <quorem+0x44>
 800a894:	f855 300b 	ldr.w	r3, [r5, fp]
 800a898:	b92b      	cbnz	r3, 800a8a6 <quorem+0x9e>
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	429d      	cmp	r5, r3
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	d32e      	bcc.n	800a902 <quorem+0xfa>
 800a8a4:	613c      	str	r4, [r7, #16]
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f001 f8b6 	bl	800ba18 <__mcmp>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	db24      	blt.n	800a8fa <quorem+0xf2>
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f04f 0c00 	mov.w	ip, #0
 800a8b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a8c0:	b293      	uxth	r3, r2
 800a8c2:	ebac 0303 	sub.w	r3, ip, r3
 800a8c6:	0c12      	lsrs	r2, r2, #16
 800a8c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a8cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8da:	45c1      	cmp	r9, r8
 800a8dc:	f840 3b04 	str.w	r3, [r0], #4
 800a8e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8e4:	d2e8      	bcs.n	800a8b8 <quorem+0xb0>
 800a8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ee:	b922      	cbnz	r2, 800a8fa <quorem+0xf2>
 800a8f0:	3b04      	subs	r3, #4
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	d30a      	bcc.n	800a90e <quorem+0x106>
 800a8f8:	613c      	str	r4, [r7, #16]
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	b003      	add	sp, #12
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	3b04      	subs	r3, #4
 800a906:	2a00      	cmp	r2, #0
 800a908:	d1cc      	bne.n	800a8a4 <quorem+0x9c>
 800a90a:	3c01      	subs	r4, #1
 800a90c:	e7c7      	b.n	800a89e <quorem+0x96>
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	3b04      	subs	r3, #4
 800a912:	2a00      	cmp	r2, #0
 800a914:	d1f0      	bne.n	800a8f8 <quorem+0xf0>
 800a916:	3c01      	subs	r4, #1
 800a918:	e7eb      	b.n	800a8f2 <quorem+0xea>
 800a91a:	2000      	movs	r0, #0
 800a91c:	e7ee      	b.n	800a8fc <quorem+0xf4>
	...

0800a920 <_dtoa_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	ed2d 8b04 	vpush	{d8-d9}
 800a928:	ec57 6b10 	vmov	r6, r7, d0
 800a92c:	b093      	sub	sp, #76	; 0x4c
 800a92e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a934:	9106      	str	r1, [sp, #24]
 800a936:	ee10 aa10 	vmov	sl, s0
 800a93a:	4604      	mov	r4, r0
 800a93c:	9209      	str	r2, [sp, #36]	; 0x24
 800a93e:	930c      	str	r3, [sp, #48]	; 0x30
 800a940:	46bb      	mov	fp, r7
 800a942:	b975      	cbnz	r5, 800a962 <_dtoa_r+0x42>
 800a944:	2010      	movs	r0, #16
 800a946:	f000 fddd 	bl	800b504 <malloc>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6260      	str	r0, [r4, #36]	; 0x24
 800a94e:	b920      	cbnz	r0, 800a95a <_dtoa_r+0x3a>
 800a950:	4ba7      	ldr	r3, [pc, #668]	; (800abf0 <_dtoa_r+0x2d0>)
 800a952:	21ea      	movs	r1, #234	; 0xea
 800a954:	48a7      	ldr	r0, [pc, #668]	; (800abf4 <_dtoa_r+0x2d4>)
 800a956:	f001 fa67 	bl	800be28 <__assert_func>
 800a95a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a95e:	6005      	str	r5, [r0, #0]
 800a960:	60c5      	str	r5, [r0, #12]
 800a962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a964:	6819      	ldr	r1, [r3, #0]
 800a966:	b151      	cbz	r1, 800a97e <_dtoa_r+0x5e>
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	604a      	str	r2, [r1, #4]
 800a96c:	2301      	movs	r3, #1
 800a96e:	4093      	lsls	r3, r2
 800a970:	608b      	str	r3, [r1, #8]
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fe0e 	bl	800b594 <_Bfree>
 800a978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	1e3b      	subs	r3, r7, #0
 800a980:	bfaa      	itet	ge
 800a982:	2300      	movge	r3, #0
 800a984:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a988:	f8c8 3000 	strge.w	r3, [r8]
 800a98c:	4b9a      	ldr	r3, [pc, #616]	; (800abf8 <_dtoa_r+0x2d8>)
 800a98e:	bfbc      	itt	lt
 800a990:	2201      	movlt	r2, #1
 800a992:	f8c8 2000 	strlt.w	r2, [r8]
 800a996:	ea33 030b 	bics.w	r3, r3, fp
 800a99a:	d11b      	bne.n	800a9d4 <_dtoa_r+0xb4>
 800a99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a99e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9a8:	4333      	orrs	r3, r6
 800a9aa:	f000 8592 	beq.w	800b4d2 <_dtoa_r+0xbb2>
 800a9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b0:	b963      	cbnz	r3, 800a9cc <_dtoa_r+0xac>
 800a9b2:	4b92      	ldr	r3, [pc, #584]	; (800abfc <_dtoa_r+0x2dc>)
 800a9b4:	e022      	b.n	800a9fc <_dtoa_r+0xdc>
 800a9b6:	4b92      	ldr	r3, [pc, #584]	; (800ac00 <_dtoa_r+0x2e0>)
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	9801      	ldr	r0, [sp, #4]
 800a9c2:	b013      	add	sp, #76	; 0x4c
 800a9c4:	ecbd 8b04 	vpop	{d8-d9}
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	4b8b      	ldr	r3, [pc, #556]	; (800abfc <_dtoa_r+0x2dc>)
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	3303      	adds	r3, #3
 800a9d2:	e7f3      	b.n	800a9bc <_dtoa_r+0x9c>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4650      	mov	r0, sl
 800a9da:	4659      	mov	r1, fp
 800a9dc:	f7f6 f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9e0:	ec4b ab19 	vmov	d9, sl, fp
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	b158      	cbz	r0, 800aa00 <_dtoa_r+0xe0>
 800a9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 856b 	beq.w	800b4cc <_dtoa_r+0xbac>
 800a9f6:	4883      	ldr	r0, [pc, #524]	; (800ac04 <_dtoa_r+0x2e4>)
 800a9f8:	6018      	str	r0, [r3, #0]
 800a9fa:	1e43      	subs	r3, r0, #1
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	e7df      	b.n	800a9c0 <_dtoa_r+0xa0>
 800aa00:	ec4b ab10 	vmov	d0, sl, fp
 800aa04:	aa10      	add	r2, sp, #64	; 0x40
 800aa06:	a911      	add	r1, sp, #68	; 0x44
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f001 f8ab 	bl	800bb64 <__d2b>
 800aa0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aa12:	ee08 0a10 	vmov	s16, r0
 800aa16:	2d00      	cmp	r5, #0
 800aa18:	f000 8084 	beq.w	800ab24 <_dtoa_r+0x204>
 800aa1c:	ee19 3a90 	vmov	r3, s19
 800aa20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aa28:	4656      	mov	r6, sl
 800aa2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aa2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aa36:	4b74      	ldr	r3, [pc, #464]	; (800ac08 <_dtoa_r+0x2e8>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f5 fc2b 	bl	8000298 <__aeabi_dsub>
 800aa42:	a365      	add	r3, pc, #404	; (adr r3, 800abd8 <_dtoa_r+0x2b8>)
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f7f5 fdde 	bl	8000608 <__aeabi_dmul>
 800aa4c:	a364      	add	r3, pc, #400	; (adr r3, 800abe0 <_dtoa_r+0x2c0>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fc23 	bl	800029c <__adddf3>
 800aa56:	4606      	mov	r6, r0
 800aa58:	4628      	mov	r0, r5
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	f7f5 fd6a 	bl	8000534 <__aeabi_i2d>
 800aa60:	a361      	add	r3, pc, #388	; (adr r3, 800abe8 <_dtoa_r+0x2c8>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fdcf 	bl	8000608 <__aeabi_dmul>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f5 fc13 	bl	800029c <__adddf3>
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	f7f6 f875 	bl	8000b68 <__aeabi_d2iz>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	9000      	str	r0, [sp, #0]
 800aa82:	2300      	movs	r3, #0
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f6 f830 	bl	8000aec <__aeabi_dcmplt>
 800aa8c:	b150      	cbz	r0, 800aaa4 <_dtoa_r+0x184>
 800aa8e:	9800      	ldr	r0, [sp, #0]
 800aa90:	f7f5 fd50 	bl	8000534 <__aeabi_i2d>
 800aa94:	4632      	mov	r2, r6
 800aa96:	463b      	mov	r3, r7
 800aa98:	f7f6 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa9c:	b910      	cbnz	r0, 800aaa4 <_dtoa_r+0x184>
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	9b00      	ldr	r3, [sp, #0]
 800aaa6:	2b16      	cmp	r3, #22
 800aaa8:	d85a      	bhi.n	800ab60 <_dtoa_r+0x240>
 800aaaa:	9a00      	ldr	r2, [sp, #0]
 800aaac:	4b57      	ldr	r3, [pc, #348]	; (800ac0c <_dtoa_r+0x2ec>)
 800aaae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	ec51 0b19 	vmov	r0, r1, d9
 800aaba:	f7f6 f817 	bl	8000aec <__aeabi_dcmplt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d050      	beq.n	800ab64 <_dtoa_r+0x244>
 800aac2:	9b00      	ldr	r3, [sp, #0]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	2300      	movs	r3, #0
 800aaca:	930b      	str	r3, [sp, #44]	; 0x2c
 800aacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aace:	1b5d      	subs	r5, r3, r5
 800aad0:	1e6b      	subs	r3, r5, #1
 800aad2:	9305      	str	r3, [sp, #20]
 800aad4:	bf45      	ittet	mi
 800aad6:	f1c5 0301 	rsbmi	r3, r5, #1
 800aada:	9304      	strmi	r3, [sp, #16]
 800aadc:	2300      	movpl	r3, #0
 800aade:	2300      	movmi	r3, #0
 800aae0:	bf4c      	ite	mi
 800aae2:	9305      	strmi	r3, [sp, #20]
 800aae4:	9304      	strpl	r3, [sp, #16]
 800aae6:	9b00      	ldr	r3, [sp, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db3d      	blt.n	800ab68 <_dtoa_r+0x248>
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	9a00      	ldr	r2, [sp, #0]
 800aaf0:	920a      	str	r2, [sp, #40]	; 0x28
 800aaf2:	4413      	add	r3, r2
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9307      	str	r3, [sp, #28]
 800aafa:	9b06      	ldr	r3, [sp, #24]
 800aafc:	2b09      	cmp	r3, #9
 800aafe:	f200 8089 	bhi.w	800ac14 <_dtoa_r+0x2f4>
 800ab02:	2b05      	cmp	r3, #5
 800ab04:	bfc4      	itt	gt
 800ab06:	3b04      	subgt	r3, #4
 800ab08:	9306      	strgt	r3, [sp, #24]
 800ab0a:	9b06      	ldr	r3, [sp, #24]
 800ab0c:	f1a3 0302 	sub.w	r3, r3, #2
 800ab10:	bfcc      	ite	gt
 800ab12:	2500      	movgt	r5, #0
 800ab14:	2501      	movle	r5, #1
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	f200 8087 	bhi.w	800ac2a <_dtoa_r+0x30a>
 800ab1c:	e8df f003 	tbb	[pc, r3]
 800ab20:	59383a2d 	.word	0x59383a2d
 800ab24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab28:	441d      	add	r5, r3
 800ab2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	bfc1      	itttt	gt
 800ab32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ab3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ab3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab42:	bfda      	itte	le
 800ab44:	f1c3 0320 	rsble	r3, r3, #32
 800ab48:	fa06 f003 	lslle.w	r0, r6, r3
 800ab4c:	4318      	orrgt	r0, r3
 800ab4e:	f7f5 fce1 	bl	8000514 <__aeabi_ui2d>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4606      	mov	r6, r0
 800ab56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab5a:	3d01      	subs	r5, #1
 800ab5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab5e:	e76a      	b.n	800aa36 <_dtoa_r+0x116>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e7b2      	b.n	800aaca <_dtoa_r+0x1aa>
 800ab64:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab66:	e7b1      	b.n	800aacc <_dtoa_r+0x1ac>
 800ab68:	9b04      	ldr	r3, [sp, #16]
 800ab6a:	9a00      	ldr	r2, [sp, #0]
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	9304      	str	r3, [sp, #16]
 800ab70:	4253      	negs	r3, r2
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	2300      	movs	r3, #0
 800ab76:	930a      	str	r3, [sp, #40]	; 0x28
 800ab78:	e7bf      	b.n	800aafa <_dtoa_r+0x1da>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9308      	str	r3, [sp, #32]
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc55      	bgt.n	800ac30 <_dtoa_r+0x310>
 800ab84:	2301      	movs	r3, #1
 800ab86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab8e:	e00c      	b.n	800abaa <_dtoa_r+0x28a>
 800ab90:	2301      	movs	r3, #1
 800ab92:	e7f3      	b.n	800ab7c <_dtoa_r+0x25c>
 800ab94:	2300      	movs	r3, #0
 800ab96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab98:	9308      	str	r3, [sp, #32]
 800ab9a:	9b00      	ldr	r3, [sp, #0]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	9302      	str	r3, [sp, #8]
 800aba0:	3301      	adds	r3, #1
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	9303      	str	r3, [sp, #12]
 800aba6:	bfb8      	it	lt
 800aba8:	2301      	movlt	r3, #1
 800abaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800abac:	2200      	movs	r2, #0
 800abae:	6042      	str	r2, [r0, #4]
 800abb0:	2204      	movs	r2, #4
 800abb2:	f102 0614 	add.w	r6, r2, #20
 800abb6:	429e      	cmp	r6, r3
 800abb8:	6841      	ldr	r1, [r0, #4]
 800abba:	d93d      	bls.n	800ac38 <_dtoa_r+0x318>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fca9 	bl	800b514 <_Balloc>
 800abc2:	9001      	str	r0, [sp, #4]
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d13b      	bne.n	800ac40 <_dtoa_r+0x320>
 800abc8:	4b11      	ldr	r3, [pc, #68]	; (800ac10 <_dtoa_r+0x2f0>)
 800abca:	4602      	mov	r2, r0
 800abcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800abd0:	e6c0      	b.n	800a954 <_dtoa_r+0x34>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e7df      	b.n	800ab96 <_dtoa_r+0x276>
 800abd6:	bf00      	nop
 800abd8:	636f4361 	.word	0x636f4361
 800abdc:	3fd287a7 	.word	0x3fd287a7
 800abe0:	8b60c8b3 	.word	0x8b60c8b3
 800abe4:	3fc68a28 	.word	0x3fc68a28
 800abe8:	509f79fb 	.word	0x509f79fb
 800abec:	3fd34413 	.word	0x3fd34413
 800abf0:	0800c9fd 	.word	0x0800c9fd
 800abf4:	0800ca14 	.word	0x0800ca14
 800abf8:	7ff00000 	.word	0x7ff00000
 800abfc:	0800c9f9 	.word	0x0800c9f9
 800ac00:	0800c9f0 	.word	0x0800c9f0
 800ac04:	0800c9cd 	.word	0x0800c9cd
 800ac08:	3ff80000 	.word	0x3ff80000
 800ac0c:	0800cb08 	.word	0x0800cb08
 800ac10:	0800ca6f 	.word	0x0800ca6f
 800ac14:	2501      	movs	r5, #1
 800ac16:	2300      	movs	r3, #0
 800ac18:	9306      	str	r3, [sp, #24]
 800ac1a:	9508      	str	r5, [sp, #32]
 800ac1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac24:	2200      	movs	r2, #0
 800ac26:	2312      	movs	r3, #18
 800ac28:	e7b0      	b.n	800ab8c <_dtoa_r+0x26c>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	9308      	str	r3, [sp, #32]
 800ac2e:	e7f5      	b.n	800ac1c <_dtoa_r+0x2fc>
 800ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac36:	e7b8      	b.n	800abaa <_dtoa_r+0x28a>
 800ac38:	3101      	adds	r1, #1
 800ac3a:	6041      	str	r1, [r0, #4]
 800ac3c:	0052      	lsls	r2, r2, #1
 800ac3e:	e7b8      	b.n	800abb2 <_dtoa_r+0x292>
 800ac40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac42:	9a01      	ldr	r2, [sp, #4]
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	2b0e      	cmp	r3, #14
 800ac4a:	f200 809d 	bhi.w	800ad88 <_dtoa_r+0x468>
 800ac4e:	2d00      	cmp	r5, #0
 800ac50:	f000 809a 	beq.w	800ad88 <_dtoa_r+0x468>
 800ac54:	9b00      	ldr	r3, [sp, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dd32      	ble.n	800acc0 <_dtoa_r+0x3a0>
 800ac5a:	4ab7      	ldr	r2, [pc, #732]	; (800af38 <_dtoa_r+0x618>)
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	05d8      	lsls	r0, r3, #23
 800ac6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ac70:	d516      	bpl.n	800aca0 <_dtoa_r+0x380>
 800ac72:	4bb2      	ldr	r3, [pc, #712]	; (800af3c <_dtoa_r+0x61c>)
 800ac74:	ec51 0b19 	vmov	r0, r1, d9
 800ac78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac7c:	f7f5 fdee 	bl	800085c <__aeabi_ddiv>
 800ac80:	f007 070f 	and.w	r7, r7, #15
 800ac84:	4682      	mov	sl, r0
 800ac86:	468b      	mov	fp, r1
 800ac88:	2503      	movs	r5, #3
 800ac8a:	4eac      	ldr	r6, [pc, #688]	; (800af3c <_dtoa_r+0x61c>)
 800ac8c:	b957      	cbnz	r7, 800aca4 <_dtoa_r+0x384>
 800ac8e:	4642      	mov	r2, r8
 800ac90:	464b      	mov	r3, r9
 800ac92:	4650      	mov	r0, sl
 800ac94:	4659      	mov	r1, fp
 800ac96:	f7f5 fde1 	bl	800085c <__aeabi_ddiv>
 800ac9a:	4682      	mov	sl, r0
 800ac9c:	468b      	mov	fp, r1
 800ac9e:	e028      	b.n	800acf2 <_dtoa_r+0x3d2>
 800aca0:	2502      	movs	r5, #2
 800aca2:	e7f2      	b.n	800ac8a <_dtoa_r+0x36a>
 800aca4:	07f9      	lsls	r1, r7, #31
 800aca6:	d508      	bpl.n	800acba <_dtoa_r+0x39a>
 800aca8:	4640      	mov	r0, r8
 800acaa:	4649      	mov	r1, r9
 800acac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acb0:	f7f5 fcaa 	bl	8000608 <__aeabi_dmul>
 800acb4:	3501      	adds	r5, #1
 800acb6:	4680      	mov	r8, r0
 800acb8:	4689      	mov	r9, r1
 800acba:	107f      	asrs	r7, r7, #1
 800acbc:	3608      	adds	r6, #8
 800acbe:	e7e5      	b.n	800ac8c <_dtoa_r+0x36c>
 800acc0:	f000 809b 	beq.w	800adfa <_dtoa_r+0x4da>
 800acc4:	9b00      	ldr	r3, [sp, #0]
 800acc6:	4f9d      	ldr	r7, [pc, #628]	; (800af3c <_dtoa_r+0x61c>)
 800acc8:	425e      	negs	r6, r3
 800acca:	4b9b      	ldr	r3, [pc, #620]	; (800af38 <_dtoa_r+0x618>)
 800accc:	f006 020f 	and.w	r2, r6, #15
 800acd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	ec51 0b19 	vmov	r0, r1, d9
 800acdc:	f7f5 fc94 	bl	8000608 <__aeabi_dmul>
 800ace0:	1136      	asrs	r6, r6, #4
 800ace2:	4682      	mov	sl, r0
 800ace4:	468b      	mov	fp, r1
 800ace6:	2300      	movs	r3, #0
 800ace8:	2502      	movs	r5, #2
 800acea:	2e00      	cmp	r6, #0
 800acec:	d17a      	bne.n	800ade4 <_dtoa_r+0x4c4>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1d3      	bne.n	800ac9a <_dtoa_r+0x37a>
 800acf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8082 	beq.w	800adfe <_dtoa_r+0x4de>
 800acfa:	4b91      	ldr	r3, [pc, #580]	; (800af40 <_dtoa_r+0x620>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	4650      	mov	r0, sl
 800ad00:	4659      	mov	r1, fp
 800ad02:	f7f5 fef3 	bl	8000aec <__aeabi_dcmplt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d079      	beq.n	800adfe <_dtoa_r+0x4de>
 800ad0a:	9b03      	ldr	r3, [sp, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d076      	beq.n	800adfe <_dtoa_r+0x4de>
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dd36      	ble.n	800ad84 <_dtoa_r+0x464>
 800ad16:	9b00      	ldr	r3, [sp, #0]
 800ad18:	4650      	mov	r0, sl
 800ad1a:	4659      	mov	r1, fp
 800ad1c:	1e5f      	subs	r7, r3, #1
 800ad1e:	2200      	movs	r2, #0
 800ad20:	4b88      	ldr	r3, [pc, #544]	; (800af44 <_dtoa_r+0x624>)
 800ad22:	f7f5 fc71 	bl	8000608 <__aeabi_dmul>
 800ad26:	9e02      	ldr	r6, [sp, #8]
 800ad28:	4682      	mov	sl, r0
 800ad2a:	468b      	mov	fp, r1
 800ad2c:	3501      	adds	r5, #1
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f7f5 fc00 	bl	8000534 <__aeabi_i2d>
 800ad34:	4652      	mov	r2, sl
 800ad36:	465b      	mov	r3, fp
 800ad38:	f7f5 fc66 	bl	8000608 <__aeabi_dmul>
 800ad3c:	4b82      	ldr	r3, [pc, #520]	; (800af48 <_dtoa_r+0x628>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f7f5 faac 	bl	800029c <__adddf3>
 800ad44:	46d0      	mov	r8, sl
 800ad46:	46d9      	mov	r9, fp
 800ad48:	4682      	mov	sl, r0
 800ad4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d158      	bne.n	800ae04 <_dtoa_r+0x4e4>
 800ad52:	4b7e      	ldr	r3, [pc, #504]	; (800af4c <_dtoa_r+0x62c>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	4640      	mov	r0, r8
 800ad58:	4649      	mov	r1, r9
 800ad5a:	f7f5 fa9d 	bl	8000298 <__aeabi_dsub>
 800ad5e:	4652      	mov	r2, sl
 800ad60:	465b      	mov	r3, fp
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
 800ad66:	f7f5 fedf 	bl	8000b28 <__aeabi_dcmpgt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	f040 8295 	bne.w	800b29a <_dtoa_r+0x97a>
 800ad70:	4652      	mov	r2, sl
 800ad72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad76:	4640      	mov	r0, r8
 800ad78:	4649      	mov	r1, r9
 800ad7a:	f7f5 feb7 	bl	8000aec <__aeabi_dcmplt>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f040 8289 	bne.w	800b296 <_dtoa_r+0x976>
 800ad84:	ec5b ab19 	vmov	sl, fp, d9
 800ad88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f2c0 8148 	blt.w	800b020 <_dtoa_r+0x700>
 800ad90:	9a00      	ldr	r2, [sp, #0]
 800ad92:	2a0e      	cmp	r2, #14
 800ad94:	f300 8144 	bgt.w	800b020 <_dtoa_r+0x700>
 800ad98:	4b67      	ldr	r3, [pc, #412]	; (800af38 <_dtoa_r+0x618>)
 800ad9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ada2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f280 80d5 	bge.w	800af54 <_dtoa_r+0x634>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f300 80d1 	bgt.w	800af54 <_dtoa_r+0x634>
 800adb2:	f040 826f 	bne.w	800b294 <_dtoa_r+0x974>
 800adb6:	4b65      	ldr	r3, [pc, #404]	; (800af4c <_dtoa_r+0x62c>)
 800adb8:	2200      	movs	r2, #0
 800adba:	4640      	mov	r0, r8
 800adbc:	4649      	mov	r1, r9
 800adbe:	f7f5 fc23 	bl	8000608 <__aeabi_dmul>
 800adc2:	4652      	mov	r2, sl
 800adc4:	465b      	mov	r3, fp
 800adc6:	f7f5 fea5 	bl	8000b14 <__aeabi_dcmpge>
 800adca:	9e03      	ldr	r6, [sp, #12]
 800adcc:	4637      	mov	r7, r6
 800adce:	2800      	cmp	r0, #0
 800add0:	f040 8245 	bne.w	800b25e <_dtoa_r+0x93e>
 800add4:	9d01      	ldr	r5, [sp, #4]
 800add6:	2331      	movs	r3, #49	; 0x31
 800add8:	f805 3b01 	strb.w	r3, [r5], #1
 800addc:	9b00      	ldr	r3, [sp, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	e240      	b.n	800b266 <_dtoa_r+0x946>
 800ade4:	07f2      	lsls	r2, r6, #31
 800ade6:	d505      	bpl.n	800adf4 <_dtoa_r+0x4d4>
 800ade8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adec:	f7f5 fc0c 	bl	8000608 <__aeabi_dmul>
 800adf0:	3501      	adds	r5, #1
 800adf2:	2301      	movs	r3, #1
 800adf4:	1076      	asrs	r6, r6, #1
 800adf6:	3708      	adds	r7, #8
 800adf8:	e777      	b.n	800acea <_dtoa_r+0x3ca>
 800adfa:	2502      	movs	r5, #2
 800adfc:	e779      	b.n	800acf2 <_dtoa_r+0x3d2>
 800adfe:	9f00      	ldr	r7, [sp, #0]
 800ae00:	9e03      	ldr	r6, [sp, #12]
 800ae02:	e794      	b.n	800ad2e <_dtoa_r+0x40e>
 800ae04:	9901      	ldr	r1, [sp, #4]
 800ae06:	4b4c      	ldr	r3, [pc, #304]	; (800af38 <_dtoa_r+0x618>)
 800ae08:	4431      	add	r1, r6
 800ae0a:	910d      	str	r1, [sp, #52]	; 0x34
 800ae0c:	9908      	ldr	r1, [sp, #32]
 800ae0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae16:	2900      	cmp	r1, #0
 800ae18:	d043      	beq.n	800aea2 <_dtoa_r+0x582>
 800ae1a:	494d      	ldr	r1, [pc, #308]	; (800af50 <_dtoa_r+0x630>)
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f7f5 fd1d 	bl	800085c <__aeabi_ddiv>
 800ae22:	4652      	mov	r2, sl
 800ae24:	465b      	mov	r3, fp
 800ae26:	f7f5 fa37 	bl	8000298 <__aeabi_dsub>
 800ae2a:	9d01      	ldr	r5, [sp, #4]
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	468b      	mov	fp, r1
 800ae30:	4649      	mov	r1, r9
 800ae32:	4640      	mov	r0, r8
 800ae34:	f7f5 fe98 	bl	8000b68 <__aeabi_d2iz>
 800ae38:	4606      	mov	r6, r0
 800ae3a:	f7f5 fb7b 	bl	8000534 <__aeabi_i2d>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	4640      	mov	r0, r8
 800ae44:	4649      	mov	r1, r9
 800ae46:	f7f5 fa27 	bl	8000298 <__aeabi_dsub>
 800ae4a:	3630      	adds	r6, #48	; 0x30
 800ae4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae50:	4652      	mov	r2, sl
 800ae52:	465b      	mov	r3, fp
 800ae54:	4680      	mov	r8, r0
 800ae56:	4689      	mov	r9, r1
 800ae58:	f7f5 fe48 	bl	8000aec <__aeabi_dcmplt>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d163      	bne.n	800af28 <_dtoa_r+0x608>
 800ae60:	4642      	mov	r2, r8
 800ae62:	464b      	mov	r3, r9
 800ae64:	4936      	ldr	r1, [pc, #216]	; (800af40 <_dtoa_r+0x620>)
 800ae66:	2000      	movs	r0, #0
 800ae68:	f7f5 fa16 	bl	8000298 <__aeabi_dsub>
 800ae6c:	4652      	mov	r2, sl
 800ae6e:	465b      	mov	r3, fp
 800ae70:	f7f5 fe3c 	bl	8000aec <__aeabi_dcmplt>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f040 80b5 	bne.w	800afe4 <_dtoa_r+0x6c4>
 800ae7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae7c:	429d      	cmp	r5, r3
 800ae7e:	d081      	beq.n	800ad84 <_dtoa_r+0x464>
 800ae80:	4b30      	ldr	r3, [pc, #192]	; (800af44 <_dtoa_r+0x624>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	4650      	mov	r0, sl
 800ae86:	4659      	mov	r1, fp
 800ae88:	f7f5 fbbe 	bl	8000608 <__aeabi_dmul>
 800ae8c:	4b2d      	ldr	r3, [pc, #180]	; (800af44 <_dtoa_r+0x624>)
 800ae8e:	4682      	mov	sl, r0
 800ae90:	468b      	mov	fp, r1
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	2200      	movs	r2, #0
 800ae98:	f7f5 fbb6 	bl	8000608 <__aeabi_dmul>
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	4689      	mov	r9, r1
 800aea0:	e7c6      	b.n	800ae30 <_dtoa_r+0x510>
 800aea2:	4650      	mov	r0, sl
 800aea4:	4659      	mov	r1, fp
 800aea6:	f7f5 fbaf 	bl	8000608 <__aeabi_dmul>
 800aeaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeac:	9d01      	ldr	r5, [sp, #4]
 800aeae:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	468b      	mov	fp, r1
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f7f5 fe56 	bl	8000b68 <__aeabi_d2iz>
 800aebc:	4606      	mov	r6, r0
 800aebe:	f7f5 fb39 	bl	8000534 <__aeabi_i2d>
 800aec2:	3630      	adds	r6, #48	; 0x30
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4640      	mov	r0, r8
 800aeca:	4649      	mov	r1, r9
 800aecc:	f7f5 f9e4 	bl	8000298 <__aeabi_dsub>
 800aed0:	f805 6b01 	strb.w	r6, [r5], #1
 800aed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aed6:	429d      	cmp	r5, r3
 800aed8:	4680      	mov	r8, r0
 800aeda:	4689      	mov	r9, r1
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	d124      	bne.n	800af2c <_dtoa_r+0x60c>
 800aee2:	4b1b      	ldr	r3, [pc, #108]	; (800af50 <_dtoa_r+0x630>)
 800aee4:	4650      	mov	r0, sl
 800aee6:	4659      	mov	r1, fp
 800aee8:	f7f5 f9d8 	bl	800029c <__adddf3>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4640      	mov	r0, r8
 800aef2:	4649      	mov	r1, r9
 800aef4:	f7f5 fe18 	bl	8000b28 <__aeabi_dcmpgt>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d173      	bne.n	800afe4 <_dtoa_r+0x6c4>
 800aefc:	4652      	mov	r2, sl
 800aefe:	465b      	mov	r3, fp
 800af00:	4913      	ldr	r1, [pc, #76]	; (800af50 <_dtoa_r+0x630>)
 800af02:	2000      	movs	r0, #0
 800af04:	f7f5 f9c8 	bl	8000298 <__aeabi_dsub>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4640      	mov	r0, r8
 800af0e:	4649      	mov	r1, r9
 800af10:	f7f5 fdec 	bl	8000aec <__aeabi_dcmplt>
 800af14:	2800      	cmp	r0, #0
 800af16:	f43f af35 	beq.w	800ad84 <_dtoa_r+0x464>
 800af1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af1c:	1e6b      	subs	r3, r5, #1
 800af1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af24:	2b30      	cmp	r3, #48	; 0x30
 800af26:	d0f8      	beq.n	800af1a <_dtoa_r+0x5fa>
 800af28:	9700      	str	r7, [sp, #0]
 800af2a:	e049      	b.n	800afc0 <_dtoa_r+0x6a0>
 800af2c:	4b05      	ldr	r3, [pc, #20]	; (800af44 <_dtoa_r+0x624>)
 800af2e:	f7f5 fb6b 	bl	8000608 <__aeabi_dmul>
 800af32:	4680      	mov	r8, r0
 800af34:	4689      	mov	r9, r1
 800af36:	e7bd      	b.n	800aeb4 <_dtoa_r+0x594>
 800af38:	0800cb08 	.word	0x0800cb08
 800af3c:	0800cae0 	.word	0x0800cae0
 800af40:	3ff00000 	.word	0x3ff00000
 800af44:	40240000 	.word	0x40240000
 800af48:	401c0000 	.word	0x401c0000
 800af4c:	40140000 	.word	0x40140000
 800af50:	3fe00000 	.word	0x3fe00000
 800af54:	9d01      	ldr	r5, [sp, #4]
 800af56:	4656      	mov	r6, sl
 800af58:	465f      	mov	r7, fp
 800af5a:	4642      	mov	r2, r8
 800af5c:	464b      	mov	r3, r9
 800af5e:	4630      	mov	r0, r6
 800af60:	4639      	mov	r1, r7
 800af62:	f7f5 fc7b 	bl	800085c <__aeabi_ddiv>
 800af66:	f7f5 fdff 	bl	8000b68 <__aeabi_d2iz>
 800af6a:	4682      	mov	sl, r0
 800af6c:	f7f5 fae2 	bl	8000534 <__aeabi_i2d>
 800af70:	4642      	mov	r2, r8
 800af72:	464b      	mov	r3, r9
 800af74:	f7f5 fb48 	bl	8000608 <__aeabi_dmul>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800af84:	f7f5 f988 	bl	8000298 <__aeabi_dsub>
 800af88:	f805 6b01 	strb.w	r6, [r5], #1
 800af8c:	9e01      	ldr	r6, [sp, #4]
 800af8e:	9f03      	ldr	r7, [sp, #12]
 800af90:	1bae      	subs	r6, r5, r6
 800af92:	42b7      	cmp	r7, r6
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	d135      	bne.n	800b006 <_dtoa_r+0x6e6>
 800af9a:	f7f5 f97f 	bl	800029c <__adddf3>
 800af9e:	4642      	mov	r2, r8
 800afa0:	464b      	mov	r3, r9
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	f7f5 fdbf 	bl	8000b28 <__aeabi_dcmpgt>
 800afaa:	b9d0      	cbnz	r0, 800afe2 <_dtoa_r+0x6c2>
 800afac:	4642      	mov	r2, r8
 800afae:	464b      	mov	r3, r9
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 800afb8:	b110      	cbz	r0, 800afc0 <_dtoa_r+0x6a0>
 800afba:	f01a 0f01 	tst.w	sl, #1
 800afbe:	d110      	bne.n	800afe2 <_dtoa_r+0x6c2>
 800afc0:	4620      	mov	r0, r4
 800afc2:	ee18 1a10 	vmov	r1, s16
 800afc6:	f000 fae5 	bl	800b594 <_Bfree>
 800afca:	2300      	movs	r3, #0
 800afcc:	9800      	ldr	r0, [sp, #0]
 800afce:	702b      	strb	r3, [r5, #0]
 800afd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd2:	3001      	adds	r0, #1
 800afd4:	6018      	str	r0, [r3, #0]
 800afd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f43f acf1 	beq.w	800a9c0 <_dtoa_r+0xa0>
 800afde:	601d      	str	r5, [r3, #0]
 800afe0:	e4ee      	b.n	800a9c0 <_dtoa_r+0xa0>
 800afe2:	9f00      	ldr	r7, [sp, #0]
 800afe4:	462b      	mov	r3, r5
 800afe6:	461d      	mov	r5, r3
 800afe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afec:	2a39      	cmp	r2, #57	; 0x39
 800afee:	d106      	bne.n	800affe <_dtoa_r+0x6de>
 800aff0:	9a01      	ldr	r2, [sp, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d1f7      	bne.n	800afe6 <_dtoa_r+0x6c6>
 800aff6:	9901      	ldr	r1, [sp, #4]
 800aff8:	2230      	movs	r2, #48	; 0x30
 800affa:	3701      	adds	r7, #1
 800affc:	700a      	strb	r2, [r1, #0]
 800affe:	781a      	ldrb	r2, [r3, #0]
 800b000:	3201      	adds	r2, #1
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	e790      	b.n	800af28 <_dtoa_r+0x608>
 800b006:	4ba6      	ldr	r3, [pc, #664]	; (800b2a0 <_dtoa_r+0x980>)
 800b008:	2200      	movs	r2, #0
 800b00a:	f7f5 fafd 	bl	8000608 <__aeabi_dmul>
 800b00e:	2200      	movs	r2, #0
 800b010:	2300      	movs	r3, #0
 800b012:	4606      	mov	r6, r0
 800b014:	460f      	mov	r7, r1
 800b016:	f7f5 fd5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d09d      	beq.n	800af5a <_dtoa_r+0x63a>
 800b01e:	e7cf      	b.n	800afc0 <_dtoa_r+0x6a0>
 800b020:	9a08      	ldr	r2, [sp, #32]
 800b022:	2a00      	cmp	r2, #0
 800b024:	f000 80d7 	beq.w	800b1d6 <_dtoa_r+0x8b6>
 800b028:	9a06      	ldr	r2, [sp, #24]
 800b02a:	2a01      	cmp	r2, #1
 800b02c:	f300 80ba 	bgt.w	800b1a4 <_dtoa_r+0x884>
 800b030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b032:	2a00      	cmp	r2, #0
 800b034:	f000 80b2 	beq.w	800b19c <_dtoa_r+0x87c>
 800b038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b03c:	9e07      	ldr	r6, [sp, #28]
 800b03e:	9d04      	ldr	r5, [sp, #16]
 800b040:	9a04      	ldr	r2, [sp, #16]
 800b042:	441a      	add	r2, r3
 800b044:	9204      	str	r2, [sp, #16]
 800b046:	9a05      	ldr	r2, [sp, #20]
 800b048:	2101      	movs	r1, #1
 800b04a:	441a      	add	r2, r3
 800b04c:	4620      	mov	r0, r4
 800b04e:	9205      	str	r2, [sp, #20]
 800b050:	f000 fb58 	bl	800b704 <__i2b>
 800b054:	4607      	mov	r7, r0
 800b056:	2d00      	cmp	r5, #0
 800b058:	dd0c      	ble.n	800b074 <_dtoa_r+0x754>
 800b05a:	9b05      	ldr	r3, [sp, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dd09      	ble.n	800b074 <_dtoa_r+0x754>
 800b060:	42ab      	cmp	r3, r5
 800b062:	9a04      	ldr	r2, [sp, #16]
 800b064:	bfa8      	it	ge
 800b066:	462b      	movge	r3, r5
 800b068:	1ad2      	subs	r2, r2, r3
 800b06a:	9204      	str	r2, [sp, #16]
 800b06c:	9a05      	ldr	r2, [sp, #20]
 800b06e:	1aed      	subs	r5, r5, r3
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	9b07      	ldr	r3, [sp, #28]
 800b076:	b31b      	cbz	r3, 800b0c0 <_dtoa_r+0x7a0>
 800b078:	9b08      	ldr	r3, [sp, #32]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 80af 	beq.w	800b1de <_dtoa_r+0x8be>
 800b080:	2e00      	cmp	r6, #0
 800b082:	dd13      	ble.n	800b0ac <_dtoa_r+0x78c>
 800b084:	4639      	mov	r1, r7
 800b086:	4632      	mov	r2, r6
 800b088:	4620      	mov	r0, r4
 800b08a:	f000 fbfb 	bl	800b884 <__pow5mult>
 800b08e:	ee18 2a10 	vmov	r2, s16
 800b092:	4601      	mov	r1, r0
 800b094:	4607      	mov	r7, r0
 800b096:	4620      	mov	r0, r4
 800b098:	f000 fb4a 	bl	800b730 <__multiply>
 800b09c:	ee18 1a10 	vmov	r1, s16
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fa76 	bl	800b594 <_Bfree>
 800b0a8:	ee08 8a10 	vmov	s16, r8
 800b0ac:	9b07      	ldr	r3, [sp, #28]
 800b0ae:	1b9a      	subs	r2, r3, r6
 800b0b0:	d006      	beq.n	800b0c0 <_dtoa_r+0x7a0>
 800b0b2:	ee18 1a10 	vmov	r1, s16
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f000 fbe4 	bl	800b884 <__pow5mult>
 800b0bc:	ee08 0a10 	vmov	s16, r0
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fb1e 	bl	800b704 <__i2b>
 800b0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	f340 8088 	ble.w	800b1e2 <_dtoa_r+0x8c2>
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 fbd4 	bl	800b884 <__pow5mult>
 800b0dc:	9b06      	ldr	r3, [sp, #24]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	f340 8081 	ble.w	800b1e8 <_dtoa_r+0x8c8>
 800b0e6:	f04f 0800 	mov.w	r8, #0
 800b0ea:	6933      	ldr	r3, [r6, #16]
 800b0ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0f0:	6918      	ldr	r0, [r3, #16]
 800b0f2:	f000 fab7 	bl	800b664 <__hi0bits>
 800b0f6:	f1c0 0020 	rsb	r0, r0, #32
 800b0fa:	9b05      	ldr	r3, [sp, #20]
 800b0fc:	4418      	add	r0, r3
 800b0fe:	f010 001f 	ands.w	r0, r0, #31
 800b102:	f000 8092 	beq.w	800b22a <_dtoa_r+0x90a>
 800b106:	f1c0 0320 	rsb	r3, r0, #32
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	f340 808a 	ble.w	800b224 <_dtoa_r+0x904>
 800b110:	f1c0 001c 	rsb	r0, r0, #28
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	4403      	add	r3, r0
 800b118:	9304      	str	r3, [sp, #16]
 800b11a:	9b05      	ldr	r3, [sp, #20]
 800b11c:	4403      	add	r3, r0
 800b11e:	4405      	add	r5, r0
 800b120:	9305      	str	r3, [sp, #20]
 800b122:	9b04      	ldr	r3, [sp, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd07      	ble.n	800b138 <_dtoa_r+0x818>
 800b128:	ee18 1a10 	vmov	r1, s16
 800b12c:	461a      	mov	r2, r3
 800b12e:	4620      	mov	r0, r4
 800b130:	f000 fc02 	bl	800b938 <__lshift>
 800b134:	ee08 0a10 	vmov	s16, r0
 800b138:	9b05      	ldr	r3, [sp, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dd05      	ble.n	800b14a <_dtoa_r+0x82a>
 800b13e:	4631      	mov	r1, r6
 800b140:	461a      	mov	r2, r3
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fbf8 	bl	800b938 <__lshift>
 800b148:	4606      	mov	r6, r0
 800b14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d06e      	beq.n	800b22e <_dtoa_r+0x90e>
 800b150:	ee18 0a10 	vmov	r0, s16
 800b154:	4631      	mov	r1, r6
 800b156:	f000 fc5f 	bl	800ba18 <__mcmp>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	da67      	bge.n	800b22e <_dtoa_r+0x90e>
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	3b01      	subs	r3, #1
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	220a      	movs	r2, #10
 800b16a:	2300      	movs	r3, #0
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fa33 	bl	800b5d8 <__multadd>
 800b172:	9b08      	ldr	r3, [sp, #32]
 800b174:	ee08 0a10 	vmov	s16, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 81b1 	beq.w	800b4e0 <_dtoa_r+0xbc0>
 800b17e:	2300      	movs	r3, #0
 800b180:	4639      	mov	r1, r7
 800b182:	220a      	movs	r2, #10
 800b184:	4620      	mov	r0, r4
 800b186:	f000 fa27 	bl	800b5d8 <__multadd>
 800b18a:	9b02      	ldr	r3, [sp, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	4607      	mov	r7, r0
 800b190:	f300 808e 	bgt.w	800b2b0 <_dtoa_r+0x990>
 800b194:	9b06      	ldr	r3, [sp, #24]
 800b196:	2b02      	cmp	r3, #2
 800b198:	dc51      	bgt.n	800b23e <_dtoa_r+0x91e>
 800b19a:	e089      	b.n	800b2b0 <_dtoa_r+0x990>
 800b19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1a2:	e74b      	b.n	800b03c <_dtoa_r+0x71c>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	1e5e      	subs	r6, r3, #1
 800b1a8:	9b07      	ldr	r3, [sp, #28]
 800b1aa:	42b3      	cmp	r3, r6
 800b1ac:	bfbf      	itttt	lt
 800b1ae:	9b07      	ldrlt	r3, [sp, #28]
 800b1b0:	9607      	strlt	r6, [sp, #28]
 800b1b2:	1af2      	sublt	r2, r6, r3
 800b1b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b1b6:	bfb6      	itet	lt
 800b1b8:	189b      	addlt	r3, r3, r2
 800b1ba:	1b9e      	subge	r6, r3, r6
 800b1bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	bfb8      	it	lt
 800b1c2:	2600      	movlt	r6, #0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	bfb7      	itett	lt
 800b1c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b1cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b1d0:	1a9d      	sublt	r5, r3, r2
 800b1d2:	2300      	movlt	r3, #0
 800b1d4:	e734      	b.n	800b040 <_dtoa_r+0x720>
 800b1d6:	9e07      	ldr	r6, [sp, #28]
 800b1d8:	9d04      	ldr	r5, [sp, #16]
 800b1da:	9f08      	ldr	r7, [sp, #32]
 800b1dc:	e73b      	b.n	800b056 <_dtoa_r+0x736>
 800b1de:	9a07      	ldr	r2, [sp, #28]
 800b1e0:	e767      	b.n	800b0b2 <_dtoa_r+0x792>
 800b1e2:	9b06      	ldr	r3, [sp, #24]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	dc18      	bgt.n	800b21a <_dtoa_r+0x8fa>
 800b1e8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ec:	d115      	bne.n	800b21a <_dtoa_r+0x8fa>
 800b1ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1f2:	b993      	cbnz	r3, 800b21a <_dtoa_r+0x8fa>
 800b1f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1f8:	0d1b      	lsrs	r3, r3, #20
 800b1fa:	051b      	lsls	r3, r3, #20
 800b1fc:	b183      	cbz	r3, 800b220 <_dtoa_r+0x900>
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	3301      	adds	r3, #1
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	9b05      	ldr	r3, [sp, #20]
 800b206:	3301      	adds	r3, #1
 800b208:	9305      	str	r3, [sp, #20]
 800b20a:	f04f 0801 	mov.w	r8, #1
 800b20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b210:	2b00      	cmp	r3, #0
 800b212:	f47f af6a 	bne.w	800b0ea <_dtoa_r+0x7ca>
 800b216:	2001      	movs	r0, #1
 800b218:	e76f      	b.n	800b0fa <_dtoa_r+0x7da>
 800b21a:	f04f 0800 	mov.w	r8, #0
 800b21e:	e7f6      	b.n	800b20e <_dtoa_r+0x8ee>
 800b220:	4698      	mov	r8, r3
 800b222:	e7f4      	b.n	800b20e <_dtoa_r+0x8ee>
 800b224:	f43f af7d 	beq.w	800b122 <_dtoa_r+0x802>
 800b228:	4618      	mov	r0, r3
 800b22a:	301c      	adds	r0, #28
 800b22c:	e772      	b.n	800b114 <_dtoa_r+0x7f4>
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc37      	bgt.n	800b2a4 <_dtoa_r+0x984>
 800b234:	9b06      	ldr	r3, [sp, #24]
 800b236:	2b02      	cmp	r3, #2
 800b238:	dd34      	ble.n	800b2a4 <_dtoa_r+0x984>
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	9302      	str	r3, [sp, #8]
 800b23e:	9b02      	ldr	r3, [sp, #8]
 800b240:	b96b      	cbnz	r3, 800b25e <_dtoa_r+0x93e>
 800b242:	4631      	mov	r1, r6
 800b244:	2205      	movs	r2, #5
 800b246:	4620      	mov	r0, r4
 800b248:	f000 f9c6 	bl	800b5d8 <__multadd>
 800b24c:	4601      	mov	r1, r0
 800b24e:	4606      	mov	r6, r0
 800b250:	ee18 0a10 	vmov	r0, s16
 800b254:	f000 fbe0 	bl	800ba18 <__mcmp>
 800b258:	2800      	cmp	r0, #0
 800b25a:	f73f adbb 	bgt.w	800add4 <_dtoa_r+0x4b4>
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	9d01      	ldr	r5, [sp, #4]
 800b262:	43db      	mvns	r3, r3
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	f04f 0800 	mov.w	r8, #0
 800b26a:	4631      	mov	r1, r6
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 f991 	bl	800b594 <_Bfree>
 800b272:	2f00      	cmp	r7, #0
 800b274:	f43f aea4 	beq.w	800afc0 <_dtoa_r+0x6a0>
 800b278:	f1b8 0f00 	cmp.w	r8, #0
 800b27c:	d005      	beq.n	800b28a <_dtoa_r+0x96a>
 800b27e:	45b8      	cmp	r8, r7
 800b280:	d003      	beq.n	800b28a <_dtoa_r+0x96a>
 800b282:	4641      	mov	r1, r8
 800b284:	4620      	mov	r0, r4
 800b286:	f000 f985 	bl	800b594 <_Bfree>
 800b28a:	4639      	mov	r1, r7
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 f981 	bl	800b594 <_Bfree>
 800b292:	e695      	b.n	800afc0 <_dtoa_r+0x6a0>
 800b294:	2600      	movs	r6, #0
 800b296:	4637      	mov	r7, r6
 800b298:	e7e1      	b.n	800b25e <_dtoa_r+0x93e>
 800b29a:	9700      	str	r7, [sp, #0]
 800b29c:	4637      	mov	r7, r6
 800b29e:	e599      	b.n	800add4 <_dtoa_r+0x4b4>
 800b2a0:	40240000 	.word	0x40240000
 800b2a4:	9b08      	ldr	r3, [sp, #32]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 80ca 	beq.w	800b440 <_dtoa_r+0xb20>
 800b2ac:	9b03      	ldr	r3, [sp, #12]
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	2d00      	cmp	r5, #0
 800b2b2:	dd05      	ble.n	800b2c0 <_dtoa_r+0x9a0>
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fb3d 	bl	800b938 <__lshift>
 800b2be:	4607      	mov	r7, r0
 800b2c0:	f1b8 0f00 	cmp.w	r8, #0
 800b2c4:	d05b      	beq.n	800b37e <_dtoa_r+0xa5e>
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 f923 	bl	800b514 <_Balloc>
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	b928      	cbnz	r0, 800b2de <_dtoa_r+0x9be>
 800b2d2:	4b87      	ldr	r3, [pc, #540]	; (800b4f0 <_dtoa_r+0xbd0>)
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b2da:	f7ff bb3b 	b.w	800a954 <_dtoa_r+0x34>
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	3202      	adds	r2, #2
 800b2e2:	0092      	lsls	r2, r2, #2
 800b2e4:	f107 010c 	add.w	r1, r7, #12
 800b2e8:	300c      	adds	r0, #12
 800b2ea:	f7fe fe0d 	bl	8009f08 <memcpy>
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f000 fb20 	bl	800b938 <__lshift>
 800b2f8:	9b01      	ldr	r3, [sp, #4]
 800b2fa:	f103 0901 	add.w	r9, r3, #1
 800b2fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b302:	4413      	add	r3, r2
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	f00a 0301 	and.w	r3, sl, #1
 800b30a:	46b8      	mov	r8, r7
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	4607      	mov	r7, r0
 800b310:	4631      	mov	r1, r6
 800b312:	ee18 0a10 	vmov	r0, s16
 800b316:	f7ff fa77 	bl	800a808 <quorem>
 800b31a:	4641      	mov	r1, r8
 800b31c:	9002      	str	r0, [sp, #8]
 800b31e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b322:	ee18 0a10 	vmov	r0, s16
 800b326:	f000 fb77 	bl	800ba18 <__mcmp>
 800b32a:	463a      	mov	r2, r7
 800b32c:	9003      	str	r0, [sp, #12]
 800b32e:	4631      	mov	r1, r6
 800b330:	4620      	mov	r0, r4
 800b332:	f000 fb8d 	bl	800ba50 <__mdiff>
 800b336:	68c2      	ldr	r2, [r0, #12]
 800b338:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b33c:	4605      	mov	r5, r0
 800b33e:	bb02      	cbnz	r2, 800b382 <_dtoa_r+0xa62>
 800b340:	4601      	mov	r1, r0
 800b342:	ee18 0a10 	vmov	r0, s16
 800b346:	f000 fb67 	bl	800ba18 <__mcmp>
 800b34a:	4602      	mov	r2, r0
 800b34c:	4629      	mov	r1, r5
 800b34e:	4620      	mov	r0, r4
 800b350:	9207      	str	r2, [sp, #28]
 800b352:	f000 f91f 	bl	800b594 <_Bfree>
 800b356:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b35a:	ea43 0102 	orr.w	r1, r3, r2
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	430b      	orrs	r3, r1
 800b362:	464d      	mov	r5, r9
 800b364:	d10f      	bne.n	800b386 <_dtoa_r+0xa66>
 800b366:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b36a:	d02a      	beq.n	800b3c2 <_dtoa_r+0xaa2>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dd02      	ble.n	800b378 <_dtoa_r+0xa58>
 800b372:	9b02      	ldr	r3, [sp, #8]
 800b374:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b378:	f88b a000 	strb.w	sl, [fp]
 800b37c:	e775      	b.n	800b26a <_dtoa_r+0x94a>
 800b37e:	4638      	mov	r0, r7
 800b380:	e7ba      	b.n	800b2f8 <_dtoa_r+0x9d8>
 800b382:	2201      	movs	r2, #1
 800b384:	e7e2      	b.n	800b34c <_dtoa_r+0xa2c>
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	db04      	blt.n	800b396 <_dtoa_r+0xa76>
 800b38c:	9906      	ldr	r1, [sp, #24]
 800b38e:	430b      	orrs	r3, r1
 800b390:	9904      	ldr	r1, [sp, #16]
 800b392:	430b      	orrs	r3, r1
 800b394:	d122      	bne.n	800b3dc <_dtoa_r+0xabc>
 800b396:	2a00      	cmp	r2, #0
 800b398:	ddee      	ble.n	800b378 <_dtoa_r+0xa58>
 800b39a:	ee18 1a10 	vmov	r1, s16
 800b39e:	2201      	movs	r2, #1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fac9 	bl	800b938 <__lshift>
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	ee08 0a10 	vmov	s16, r0
 800b3ac:	f000 fb34 	bl	800ba18 <__mcmp>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	dc03      	bgt.n	800b3bc <_dtoa_r+0xa9c>
 800b3b4:	d1e0      	bne.n	800b378 <_dtoa_r+0xa58>
 800b3b6:	f01a 0f01 	tst.w	sl, #1
 800b3ba:	d0dd      	beq.n	800b378 <_dtoa_r+0xa58>
 800b3bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3c0:	d1d7      	bne.n	800b372 <_dtoa_r+0xa52>
 800b3c2:	2339      	movs	r3, #57	; 0x39
 800b3c4:	f88b 3000 	strb.w	r3, [fp]
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	461d      	mov	r5, r3
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3d2:	2a39      	cmp	r2, #57	; 0x39
 800b3d4:	d071      	beq.n	800b4ba <_dtoa_r+0xb9a>
 800b3d6:	3201      	adds	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	e746      	b.n	800b26a <_dtoa_r+0x94a>
 800b3dc:	2a00      	cmp	r2, #0
 800b3de:	dd07      	ble.n	800b3f0 <_dtoa_r+0xad0>
 800b3e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3e4:	d0ed      	beq.n	800b3c2 <_dtoa_r+0xaa2>
 800b3e6:	f10a 0301 	add.w	r3, sl, #1
 800b3ea:	f88b 3000 	strb.w	r3, [fp]
 800b3ee:	e73c      	b.n	800b26a <_dtoa_r+0x94a>
 800b3f0:	9b05      	ldr	r3, [sp, #20]
 800b3f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b3f6:	4599      	cmp	r9, r3
 800b3f8:	d047      	beq.n	800b48a <_dtoa_r+0xb6a>
 800b3fa:	ee18 1a10 	vmov	r1, s16
 800b3fe:	2300      	movs	r3, #0
 800b400:	220a      	movs	r2, #10
 800b402:	4620      	mov	r0, r4
 800b404:	f000 f8e8 	bl	800b5d8 <__multadd>
 800b408:	45b8      	cmp	r8, r7
 800b40a:	ee08 0a10 	vmov	s16, r0
 800b40e:	f04f 0300 	mov.w	r3, #0
 800b412:	f04f 020a 	mov.w	r2, #10
 800b416:	4641      	mov	r1, r8
 800b418:	4620      	mov	r0, r4
 800b41a:	d106      	bne.n	800b42a <_dtoa_r+0xb0a>
 800b41c:	f000 f8dc 	bl	800b5d8 <__multadd>
 800b420:	4680      	mov	r8, r0
 800b422:	4607      	mov	r7, r0
 800b424:	f109 0901 	add.w	r9, r9, #1
 800b428:	e772      	b.n	800b310 <_dtoa_r+0x9f0>
 800b42a:	f000 f8d5 	bl	800b5d8 <__multadd>
 800b42e:	4639      	mov	r1, r7
 800b430:	4680      	mov	r8, r0
 800b432:	2300      	movs	r3, #0
 800b434:	220a      	movs	r2, #10
 800b436:	4620      	mov	r0, r4
 800b438:	f000 f8ce 	bl	800b5d8 <__multadd>
 800b43c:	4607      	mov	r7, r0
 800b43e:	e7f1      	b.n	800b424 <_dtoa_r+0xb04>
 800b440:	9b03      	ldr	r3, [sp, #12]
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	9d01      	ldr	r5, [sp, #4]
 800b446:	ee18 0a10 	vmov	r0, s16
 800b44a:	4631      	mov	r1, r6
 800b44c:	f7ff f9dc 	bl	800a808 <quorem>
 800b450:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	f805 ab01 	strb.w	sl, [r5], #1
 800b45a:	1aea      	subs	r2, r5, r3
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	4293      	cmp	r3, r2
 800b460:	dd09      	ble.n	800b476 <_dtoa_r+0xb56>
 800b462:	ee18 1a10 	vmov	r1, s16
 800b466:	2300      	movs	r3, #0
 800b468:	220a      	movs	r2, #10
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 f8b4 	bl	800b5d8 <__multadd>
 800b470:	ee08 0a10 	vmov	s16, r0
 800b474:	e7e7      	b.n	800b446 <_dtoa_r+0xb26>
 800b476:	9b02      	ldr	r3, [sp, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bfc8      	it	gt
 800b47c:	461d      	movgt	r5, r3
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	bfd8      	it	le
 800b482:	2501      	movle	r5, #1
 800b484:	441d      	add	r5, r3
 800b486:	f04f 0800 	mov.w	r8, #0
 800b48a:	ee18 1a10 	vmov	r1, s16
 800b48e:	2201      	movs	r2, #1
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fa51 	bl	800b938 <__lshift>
 800b496:	4631      	mov	r1, r6
 800b498:	ee08 0a10 	vmov	s16, r0
 800b49c:	f000 fabc 	bl	800ba18 <__mcmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	dc91      	bgt.n	800b3c8 <_dtoa_r+0xaa8>
 800b4a4:	d102      	bne.n	800b4ac <_dtoa_r+0xb8c>
 800b4a6:	f01a 0f01 	tst.w	sl, #1
 800b4aa:	d18d      	bne.n	800b3c8 <_dtoa_r+0xaa8>
 800b4ac:	462b      	mov	r3, r5
 800b4ae:	461d      	mov	r5, r3
 800b4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4b4:	2a30      	cmp	r2, #48	; 0x30
 800b4b6:	d0fa      	beq.n	800b4ae <_dtoa_r+0xb8e>
 800b4b8:	e6d7      	b.n	800b26a <_dtoa_r+0x94a>
 800b4ba:	9a01      	ldr	r2, [sp, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d184      	bne.n	800b3ca <_dtoa_r+0xaaa>
 800b4c0:	9b00      	ldr	r3, [sp, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	2331      	movs	r3, #49	; 0x31
 800b4c8:	7013      	strb	r3, [r2, #0]
 800b4ca:	e6ce      	b.n	800b26a <_dtoa_r+0x94a>
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <_dtoa_r+0xbd4>)
 800b4ce:	f7ff ba95 	b.w	800a9fc <_dtoa_r+0xdc>
 800b4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f47f aa6e 	bne.w	800a9b6 <_dtoa_r+0x96>
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <_dtoa_r+0xbd8>)
 800b4dc:	f7ff ba8e 	b.w	800a9fc <_dtoa_r+0xdc>
 800b4e0:	9b02      	ldr	r3, [sp, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	dcae      	bgt.n	800b444 <_dtoa_r+0xb24>
 800b4e6:	9b06      	ldr	r3, [sp, #24]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	f73f aea8 	bgt.w	800b23e <_dtoa_r+0x91e>
 800b4ee:	e7a9      	b.n	800b444 <_dtoa_r+0xb24>
 800b4f0:	0800ca6f 	.word	0x0800ca6f
 800b4f4:	0800c9cc 	.word	0x0800c9cc
 800b4f8:	0800c9f0 	.word	0x0800c9f0

0800b4fc <_localeconv_r>:
 800b4fc:	4800      	ldr	r0, [pc, #0]	; (800b500 <_localeconv_r+0x4>)
 800b4fe:	4770      	bx	lr
 800b500:	20000250 	.word	0x20000250

0800b504 <malloc>:
 800b504:	4b02      	ldr	r3, [pc, #8]	; (800b510 <malloc+0xc>)
 800b506:	4601      	mov	r1, r0
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	f000 bc09 	b.w	800bd20 <_malloc_r>
 800b50e:	bf00      	nop
 800b510:	200000fc 	.word	0x200000fc

0800b514 <_Balloc>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	b976      	cbnz	r6, 800b53c <_Balloc+0x28>
 800b51e:	2010      	movs	r0, #16
 800b520:	f7ff fff0 	bl	800b504 <malloc>
 800b524:	4602      	mov	r2, r0
 800b526:	6260      	str	r0, [r4, #36]	; 0x24
 800b528:	b920      	cbnz	r0, 800b534 <_Balloc+0x20>
 800b52a:	4b18      	ldr	r3, [pc, #96]	; (800b58c <_Balloc+0x78>)
 800b52c:	4818      	ldr	r0, [pc, #96]	; (800b590 <_Balloc+0x7c>)
 800b52e:	2166      	movs	r1, #102	; 0x66
 800b530:	f000 fc7a 	bl	800be28 <__assert_func>
 800b534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b538:	6006      	str	r6, [r0, #0]
 800b53a:	60c6      	str	r6, [r0, #12]
 800b53c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b53e:	68f3      	ldr	r3, [r6, #12]
 800b540:	b183      	cbz	r3, 800b564 <_Balloc+0x50>
 800b542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b54a:	b9b8      	cbnz	r0, 800b57c <_Balloc+0x68>
 800b54c:	2101      	movs	r1, #1
 800b54e:	fa01 f605 	lsl.w	r6, r1, r5
 800b552:	1d72      	adds	r2, r6, #5
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	4620      	mov	r0, r4
 800b558:	f000 fb60 	bl	800bc1c <_calloc_r>
 800b55c:	b160      	cbz	r0, 800b578 <_Balloc+0x64>
 800b55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b562:	e00e      	b.n	800b582 <_Balloc+0x6e>
 800b564:	2221      	movs	r2, #33	; 0x21
 800b566:	2104      	movs	r1, #4
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fb57 	bl	800bc1c <_calloc_r>
 800b56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b570:	60f0      	str	r0, [r6, #12]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e4      	bne.n	800b542 <_Balloc+0x2e>
 800b578:	2000      	movs	r0, #0
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	6802      	ldr	r2, [r0, #0]
 800b57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b582:	2300      	movs	r3, #0
 800b584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b588:	e7f7      	b.n	800b57a <_Balloc+0x66>
 800b58a:	bf00      	nop
 800b58c:	0800c9fd 	.word	0x0800c9fd
 800b590:	0800ca80 	.word	0x0800ca80

0800b594 <_Bfree>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b598:	4605      	mov	r5, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b976      	cbnz	r6, 800b5bc <_Bfree+0x28>
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f7ff ffb0 	bl	800b504 <malloc>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	6268      	str	r0, [r5, #36]	; 0x24
 800b5a8:	b920      	cbnz	r0, 800b5b4 <_Bfree+0x20>
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <_Bfree+0x3c>)
 800b5ac:	4809      	ldr	r0, [pc, #36]	; (800b5d4 <_Bfree+0x40>)
 800b5ae:	218a      	movs	r1, #138	; 0x8a
 800b5b0:	f000 fc3a 	bl	800be28 <__assert_func>
 800b5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b8:	6006      	str	r6, [r0, #0]
 800b5ba:	60c6      	str	r6, [r0, #12]
 800b5bc:	b13c      	cbz	r4, 800b5ce <_Bfree+0x3a>
 800b5be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5c0:	6862      	ldr	r2, [r4, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5c8:	6021      	str	r1, [r4, #0]
 800b5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	0800c9fd 	.word	0x0800c9fd
 800b5d4:	0800ca80 	.word	0x0800ca80

0800b5d8 <__multadd>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	690d      	ldr	r5, [r1, #16]
 800b5de:	4607      	mov	r7, r0
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	f101 0c14 	add.w	ip, r1, #20
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b5ee:	b299      	uxth	r1, r3
 800b5f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b5f4:	0c1e      	lsrs	r6, r3, #16
 800b5f6:	0c0b      	lsrs	r3, r1, #16
 800b5f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b5fc:	b289      	uxth	r1, r1
 800b5fe:	3001      	adds	r0, #1
 800b600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b604:	4285      	cmp	r5, r0
 800b606:	f84c 1b04 	str.w	r1, [ip], #4
 800b60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b60e:	dcec      	bgt.n	800b5ea <__multadd+0x12>
 800b610:	b30e      	cbz	r6, 800b656 <__multadd+0x7e>
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	42ab      	cmp	r3, r5
 800b616:	dc19      	bgt.n	800b64c <__multadd+0x74>
 800b618:	6861      	ldr	r1, [r4, #4]
 800b61a:	4638      	mov	r0, r7
 800b61c:	3101      	adds	r1, #1
 800b61e:	f7ff ff79 	bl	800b514 <_Balloc>
 800b622:	4680      	mov	r8, r0
 800b624:	b928      	cbnz	r0, 800b632 <__multadd+0x5a>
 800b626:	4602      	mov	r2, r0
 800b628:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <__multadd+0x84>)
 800b62a:	480d      	ldr	r0, [pc, #52]	; (800b660 <__multadd+0x88>)
 800b62c:	21b5      	movs	r1, #181	; 0xb5
 800b62e:	f000 fbfb 	bl	800be28 <__assert_func>
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	3202      	adds	r2, #2
 800b636:	f104 010c 	add.w	r1, r4, #12
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	300c      	adds	r0, #12
 800b63e:	f7fe fc63 	bl	8009f08 <memcpy>
 800b642:	4621      	mov	r1, r4
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff ffa5 	bl	800b594 <_Bfree>
 800b64a:	4644      	mov	r4, r8
 800b64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b650:	3501      	adds	r5, #1
 800b652:	615e      	str	r6, [r3, #20]
 800b654:	6125      	str	r5, [r4, #16]
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	0800ca6f 	.word	0x0800ca6f
 800b660:	0800ca80 	.word	0x0800ca80

0800b664 <__hi0bits>:
 800b664:	0c03      	lsrs	r3, r0, #16
 800b666:	041b      	lsls	r3, r3, #16
 800b668:	b9d3      	cbnz	r3, 800b6a0 <__hi0bits+0x3c>
 800b66a:	0400      	lsls	r0, r0, #16
 800b66c:	2310      	movs	r3, #16
 800b66e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b672:	bf04      	itt	eq
 800b674:	0200      	lsleq	r0, r0, #8
 800b676:	3308      	addeq	r3, #8
 800b678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b67c:	bf04      	itt	eq
 800b67e:	0100      	lsleq	r0, r0, #4
 800b680:	3304      	addeq	r3, #4
 800b682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b686:	bf04      	itt	eq
 800b688:	0080      	lsleq	r0, r0, #2
 800b68a:	3302      	addeq	r3, #2
 800b68c:	2800      	cmp	r0, #0
 800b68e:	db05      	blt.n	800b69c <__hi0bits+0x38>
 800b690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b694:	f103 0301 	add.w	r3, r3, #1
 800b698:	bf08      	it	eq
 800b69a:	2320      	moveq	r3, #32
 800b69c:	4618      	mov	r0, r3
 800b69e:	4770      	bx	lr
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e7e4      	b.n	800b66e <__hi0bits+0xa>

0800b6a4 <__lo0bits>:
 800b6a4:	6803      	ldr	r3, [r0, #0]
 800b6a6:	f013 0207 	ands.w	r2, r3, #7
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	d00b      	beq.n	800b6c6 <__lo0bits+0x22>
 800b6ae:	07da      	lsls	r2, r3, #31
 800b6b0:	d423      	bmi.n	800b6fa <__lo0bits+0x56>
 800b6b2:	0798      	lsls	r0, r3, #30
 800b6b4:	bf49      	itett	mi
 800b6b6:	085b      	lsrmi	r3, r3, #1
 800b6b8:	089b      	lsrpl	r3, r3, #2
 800b6ba:	2001      	movmi	r0, #1
 800b6bc:	600b      	strmi	r3, [r1, #0]
 800b6be:	bf5c      	itt	pl
 800b6c0:	600b      	strpl	r3, [r1, #0]
 800b6c2:	2002      	movpl	r0, #2
 800b6c4:	4770      	bx	lr
 800b6c6:	b298      	uxth	r0, r3
 800b6c8:	b9a8      	cbnz	r0, 800b6f6 <__lo0bits+0x52>
 800b6ca:	0c1b      	lsrs	r3, r3, #16
 800b6cc:	2010      	movs	r0, #16
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	b90a      	cbnz	r2, 800b6d6 <__lo0bits+0x32>
 800b6d2:	3008      	adds	r0, #8
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	071a      	lsls	r2, r3, #28
 800b6d8:	bf04      	itt	eq
 800b6da:	091b      	lsreq	r3, r3, #4
 800b6dc:	3004      	addeq	r0, #4
 800b6de:	079a      	lsls	r2, r3, #30
 800b6e0:	bf04      	itt	eq
 800b6e2:	089b      	lsreq	r3, r3, #2
 800b6e4:	3002      	addeq	r0, #2
 800b6e6:	07da      	lsls	r2, r3, #31
 800b6e8:	d403      	bmi.n	800b6f2 <__lo0bits+0x4e>
 800b6ea:	085b      	lsrs	r3, r3, #1
 800b6ec:	f100 0001 	add.w	r0, r0, #1
 800b6f0:	d005      	beq.n	800b6fe <__lo0bits+0x5a>
 800b6f2:	600b      	str	r3, [r1, #0]
 800b6f4:	4770      	bx	lr
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	e7e9      	b.n	800b6ce <__lo0bits+0x2a>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	4770      	bx	lr
 800b6fe:	2020      	movs	r0, #32
 800b700:	4770      	bx	lr
	...

0800b704 <__i2b>:
 800b704:	b510      	push	{r4, lr}
 800b706:	460c      	mov	r4, r1
 800b708:	2101      	movs	r1, #1
 800b70a:	f7ff ff03 	bl	800b514 <_Balloc>
 800b70e:	4602      	mov	r2, r0
 800b710:	b928      	cbnz	r0, 800b71e <__i2b+0x1a>
 800b712:	4b05      	ldr	r3, [pc, #20]	; (800b728 <__i2b+0x24>)
 800b714:	4805      	ldr	r0, [pc, #20]	; (800b72c <__i2b+0x28>)
 800b716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b71a:	f000 fb85 	bl	800be28 <__assert_func>
 800b71e:	2301      	movs	r3, #1
 800b720:	6144      	str	r4, [r0, #20]
 800b722:	6103      	str	r3, [r0, #16]
 800b724:	bd10      	pop	{r4, pc}
 800b726:	bf00      	nop
 800b728:	0800ca6f 	.word	0x0800ca6f
 800b72c:	0800ca80 	.word	0x0800ca80

0800b730 <__multiply>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	4691      	mov	r9, r2
 800b736:	690a      	ldr	r2, [r1, #16]
 800b738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	bfb8      	it	lt
 800b740:	460b      	movlt	r3, r1
 800b742:	460c      	mov	r4, r1
 800b744:	bfbc      	itt	lt
 800b746:	464c      	movlt	r4, r9
 800b748:	4699      	movlt	r9, r3
 800b74a:	6927      	ldr	r7, [r4, #16]
 800b74c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	6861      	ldr	r1, [r4, #4]
 800b754:	eb07 060a 	add.w	r6, r7, sl
 800b758:	42b3      	cmp	r3, r6
 800b75a:	b085      	sub	sp, #20
 800b75c:	bfb8      	it	lt
 800b75e:	3101      	addlt	r1, #1
 800b760:	f7ff fed8 	bl	800b514 <_Balloc>
 800b764:	b930      	cbnz	r0, 800b774 <__multiply+0x44>
 800b766:	4602      	mov	r2, r0
 800b768:	4b44      	ldr	r3, [pc, #272]	; (800b87c <__multiply+0x14c>)
 800b76a:	4845      	ldr	r0, [pc, #276]	; (800b880 <__multiply+0x150>)
 800b76c:	f240 115d 	movw	r1, #349	; 0x15d
 800b770:	f000 fb5a 	bl	800be28 <__assert_func>
 800b774:	f100 0514 	add.w	r5, r0, #20
 800b778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b77c:	462b      	mov	r3, r5
 800b77e:	2200      	movs	r2, #0
 800b780:	4543      	cmp	r3, r8
 800b782:	d321      	bcc.n	800b7c8 <__multiply+0x98>
 800b784:	f104 0314 	add.w	r3, r4, #20
 800b788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b78c:	f109 0314 	add.w	r3, r9, #20
 800b790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b794:	9202      	str	r2, [sp, #8]
 800b796:	1b3a      	subs	r2, r7, r4
 800b798:	3a15      	subs	r2, #21
 800b79a:	f022 0203 	bic.w	r2, r2, #3
 800b79e:	3204      	adds	r2, #4
 800b7a0:	f104 0115 	add.w	r1, r4, #21
 800b7a4:	428f      	cmp	r7, r1
 800b7a6:	bf38      	it	cc
 800b7a8:	2204      	movcc	r2, #4
 800b7aa:	9201      	str	r2, [sp, #4]
 800b7ac:	9a02      	ldr	r2, [sp, #8]
 800b7ae:	9303      	str	r3, [sp, #12]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d80c      	bhi.n	800b7ce <__multiply+0x9e>
 800b7b4:	2e00      	cmp	r6, #0
 800b7b6:	dd03      	ble.n	800b7c0 <__multiply+0x90>
 800b7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d05a      	beq.n	800b876 <__multiply+0x146>
 800b7c0:	6106      	str	r6, [r0, #16]
 800b7c2:	b005      	add	sp, #20
 800b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	f843 2b04 	str.w	r2, [r3], #4
 800b7cc:	e7d8      	b.n	800b780 <__multiply+0x50>
 800b7ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7d2:	f1ba 0f00 	cmp.w	sl, #0
 800b7d6:	d024      	beq.n	800b822 <__multiply+0xf2>
 800b7d8:	f104 0e14 	add.w	lr, r4, #20
 800b7dc:	46a9      	mov	r9, r5
 800b7de:	f04f 0c00 	mov.w	ip, #0
 800b7e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7e6:	f8d9 1000 	ldr.w	r1, [r9]
 800b7ea:	fa1f fb82 	uxth.w	fp, r2
 800b7ee:	b289      	uxth	r1, r1
 800b7f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7f8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7fc:	4461      	add	r1, ip
 800b7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b802:	fb0a c20b 	mla	r2, sl, fp, ip
 800b806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b80a:	b289      	uxth	r1, r1
 800b80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b810:	4577      	cmp	r7, lr
 800b812:	f849 1b04 	str.w	r1, [r9], #4
 800b816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b81a:	d8e2      	bhi.n	800b7e2 <__multiply+0xb2>
 800b81c:	9a01      	ldr	r2, [sp, #4]
 800b81e:	f845 c002 	str.w	ip, [r5, r2]
 800b822:	9a03      	ldr	r2, [sp, #12]
 800b824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b828:	3304      	adds	r3, #4
 800b82a:	f1b9 0f00 	cmp.w	r9, #0
 800b82e:	d020      	beq.n	800b872 <__multiply+0x142>
 800b830:	6829      	ldr	r1, [r5, #0]
 800b832:	f104 0c14 	add.w	ip, r4, #20
 800b836:	46ae      	mov	lr, r5
 800b838:	f04f 0a00 	mov.w	sl, #0
 800b83c:	f8bc b000 	ldrh.w	fp, [ip]
 800b840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b844:	fb09 220b 	mla	r2, r9, fp, r2
 800b848:	4492      	add	sl, r2
 800b84a:	b289      	uxth	r1, r1
 800b84c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b850:	f84e 1b04 	str.w	r1, [lr], #4
 800b854:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b858:	f8be 1000 	ldrh.w	r1, [lr]
 800b85c:	0c12      	lsrs	r2, r2, #16
 800b85e:	fb09 1102 	mla	r1, r9, r2, r1
 800b862:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b866:	4567      	cmp	r7, ip
 800b868:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b86c:	d8e6      	bhi.n	800b83c <__multiply+0x10c>
 800b86e:	9a01      	ldr	r2, [sp, #4]
 800b870:	50a9      	str	r1, [r5, r2]
 800b872:	3504      	adds	r5, #4
 800b874:	e79a      	b.n	800b7ac <__multiply+0x7c>
 800b876:	3e01      	subs	r6, #1
 800b878:	e79c      	b.n	800b7b4 <__multiply+0x84>
 800b87a:	bf00      	nop
 800b87c:	0800ca6f 	.word	0x0800ca6f
 800b880:	0800ca80 	.word	0x0800ca80

0800b884 <__pow5mult>:
 800b884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b888:	4615      	mov	r5, r2
 800b88a:	f012 0203 	ands.w	r2, r2, #3
 800b88e:	4606      	mov	r6, r0
 800b890:	460f      	mov	r7, r1
 800b892:	d007      	beq.n	800b8a4 <__pow5mult+0x20>
 800b894:	4c25      	ldr	r4, [pc, #148]	; (800b92c <__pow5mult+0xa8>)
 800b896:	3a01      	subs	r2, #1
 800b898:	2300      	movs	r3, #0
 800b89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b89e:	f7ff fe9b 	bl	800b5d8 <__multadd>
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	10ad      	asrs	r5, r5, #2
 800b8a6:	d03d      	beq.n	800b924 <__pow5mult+0xa0>
 800b8a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8aa:	b97c      	cbnz	r4, 800b8cc <__pow5mult+0x48>
 800b8ac:	2010      	movs	r0, #16
 800b8ae:	f7ff fe29 	bl	800b504 <malloc>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b8b6:	b928      	cbnz	r0, 800b8c4 <__pow5mult+0x40>
 800b8b8:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <__pow5mult+0xac>)
 800b8ba:	481e      	ldr	r0, [pc, #120]	; (800b934 <__pow5mult+0xb0>)
 800b8bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b8c0:	f000 fab2 	bl	800be28 <__assert_func>
 800b8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8c8:	6004      	str	r4, [r0, #0]
 800b8ca:	60c4      	str	r4, [r0, #12]
 800b8cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8d4:	b94c      	cbnz	r4, 800b8ea <__pow5mult+0x66>
 800b8d6:	f240 2171 	movw	r1, #625	; 0x271
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f7ff ff12 	bl	800b704 <__i2b>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	6003      	str	r3, [r0, #0]
 800b8ea:	f04f 0900 	mov.w	r9, #0
 800b8ee:	07eb      	lsls	r3, r5, #31
 800b8f0:	d50a      	bpl.n	800b908 <__pow5mult+0x84>
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ff1a 	bl	800b730 <__multiply>
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	4680      	mov	r8, r0
 800b900:	4630      	mov	r0, r6
 800b902:	f7ff fe47 	bl	800b594 <_Bfree>
 800b906:	4647      	mov	r7, r8
 800b908:	106d      	asrs	r5, r5, #1
 800b90a:	d00b      	beq.n	800b924 <__pow5mult+0xa0>
 800b90c:	6820      	ldr	r0, [r4, #0]
 800b90e:	b938      	cbnz	r0, 800b920 <__pow5mult+0x9c>
 800b910:	4622      	mov	r2, r4
 800b912:	4621      	mov	r1, r4
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff ff0b 	bl	800b730 <__multiply>
 800b91a:	6020      	str	r0, [r4, #0]
 800b91c:	f8c0 9000 	str.w	r9, [r0]
 800b920:	4604      	mov	r4, r0
 800b922:	e7e4      	b.n	800b8ee <__pow5mult+0x6a>
 800b924:	4638      	mov	r0, r7
 800b926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b92a:	bf00      	nop
 800b92c:	0800cbd0 	.word	0x0800cbd0
 800b930:	0800c9fd 	.word	0x0800c9fd
 800b934:	0800ca80 	.word	0x0800ca80

0800b938 <__lshift>:
 800b938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b93c:	460c      	mov	r4, r1
 800b93e:	6849      	ldr	r1, [r1, #4]
 800b940:	6923      	ldr	r3, [r4, #16]
 800b942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b946:	68a3      	ldr	r3, [r4, #8]
 800b948:	4607      	mov	r7, r0
 800b94a:	4691      	mov	r9, r2
 800b94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b950:	f108 0601 	add.w	r6, r8, #1
 800b954:	42b3      	cmp	r3, r6
 800b956:	db0b      	blt.n	800b970 <__lshift+0x38>
 800b958:	4638      	mov	r0, r7
 800b95a:	f7ff fddb 	bl	800b514 <_Balloc>
 800b95e:	4605      	mov	r5, r0
 800b960:	b948      	cbnz	r0, 800b976 <__lshift+0x3e>
 800b962:	4602      	mov	r2, r0
 800b964:	4b2a      	ldr	r3, [pc, #168]	; (800ba10 <__lshift+0xd8>)
 800b966:	482b      	ldr	r0, [pc, #172]	; (800ba14 <__lshift+0xdc>)
 800b968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b96c:	f000 fa5c 	bl	800be28 <__assert_func>
 800b970:	3101      	adds	r1, #1
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	e7ee      	b.n	800b954 <__lshift+0x1c>
 800b976:	2300      	movs	r3, #0
 800b978:	f100 0114 	add.w	r1, r0, #20
 800b97c:	f100 0210 	add.w	r2, r0, #16
 800b980:	4618      	mov	r0, r3
 800b982:	4553      	cmp	r3, sl
 800b984:	db37      	blt.n	800b9f6 <__lshift+0xbe>
 800b986:	6920      	ldr	r0, [r4, #16]
 800b988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b98c:	f104 0314 	add.w	r3, r4, #20
 800b990:	f019 091f 	ands.w	r9, r9, #31
 800b994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b99c:	d02f      	beq.n	800b9fe <__lshift+0xc6>
 800b99e:	f1c9 0e20 	rsb	lr, r9, #32
 800b9a2:	468a      	mov	sl, r1
 800b9a4:	f04f 0c00 	mov.w	ip, #0
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	fa02 f209 	lsl.w	r2, r2, r9
 800b9ae:	ea42 020c 	orr.w	r2, r2, ip
 800b9b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b9c0:	d8f2      	bhi.n	800b9a8 <__lshift+0x70>
 800b9c2:	1b03      	subs	r3, r0, r4
 800b9c4:	3b15      	subs	r3, #21
 800b9c6:	f023 0303 	bic.w	r3, r3, #3
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	f104 0215 	add.w	r2, r4, #21
 800b9d0:	4290      	cmp	r0, r2
 800b9d2:	bf38      	it	cc
 800b9d4:	2304      	movcc	r3, #4
 800b9d6:	f841 c003 	str.w	ip, [r1, r3]
 800b9da:	f1bc 0f00 	cmp.w	ip, #0
 800b9de:	d001      	beq.n	800b9e4 <__lshift+0xac>
 800b9e0:	f108 0602 	add.w	r6, r8, #2
 800b9e4:	3e01      	subs	r6, #1
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	612e      	str	r6, [r5, #16]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	f7ff fdd2 	bl	800b594 <_Bfree>
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	e7c1      	b.n	800b982 <__lshift+0x4a>
 800b9fe:	3904      	subs	r1, #4
 800ba00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba08:	4298      	cmp	r0, r3
 800ba0a:	d8f9      	bhi.n	800ba00 <__lshift+0xc8>
 800ba0c:	e7ea      	b.n	800b9e4 <__lshift+0xac>
 800ba0e:	bf00      	nop
 800ba10:	0800ca6f 	.word	0x0800ca6f
 800ba14:	0800ca80 	.word	0x0800ca80

0800ba18 <__mcmp>:
 800ba18:	b530      	push	{r4, r5, lr}
 800ba1a:	6902      	ldr	r2, [r0, #16]
 800ba1c:	690c      	ldr	r4, [r1, #16]
 800ba1e:	1b12      	subs	r2, r2, r4
 800ba20:	d10e      	bne.n	800ba40 <__mcmp+0x28>
 800ba22:	f100 0314 	add.w	r3, r0, #20
 800ba26:	3114      	adds	r1, #20
 800ba28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba38:	42a5      	cmp	r5, r4
 800ba3a:	d003      	beq.n	800ba44 <__mcmp+0x2c>
 800ba3c:	d305      	bcc.n	800ba4a <__mcmp+0x32>
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4610      	mov	r0, r2
 800ba42:	bd30      	pop	{r4, r5, pc}
 800ba44:	4283      	cmp	r3, r0
 800ba46:	d3f3      	bcc.n	800ba30 <__mcmp+0x18>
 800ba48:	e7fa      	b.n	800ba40 <__mcmp+0x28>
 800ba4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba4e:	e7f7      	b.n	800ba40 <__mcmp+0x28>

0800ba50 <__mdiff>:
 800ba50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	460c      	mov	r4, r1
 800ba56:	4606      	mov	r6, r0
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4690      	mov	r8, r2
 800ba5e:	f7ff ffdb 	bl	800ba18 <__mcmp>
 800ba62:	1e05      	subs	r5, r0, #0
 800ba64:	d110      	bne.n	800ba88 <__mdiff+0x38>
 800ba66:	4629      	mov	r1, r5
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f7ff fd53 	bl	800b514 <_Balloc>
 800ba6e:	b930      	cbnz	r0, 800ba7e <__mdiff+0x2e>
 800ba70:	4b3a      	ldr	r3, [pc, #232]	; (800bb5c <__mdiff+0x10c>)
 800ba72:	4602      	mov	r2, r0
 800ba74:	f240 2132 	movw	r1, #562	; 0x232
 800ba78:	4839      	ldr	r0, [pc, #228]	; (800bb60 <__mdiff+0x110>)
 800ba7a:	f000 f9d5 	bl	800be28 <__assert_func>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba88:	bfa4      	itt	ge
 800ba8a:	4643      	movge	r3, r8
 800ba8c:	46a0      	movge	r8, r4
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba94:	bfa6      	itte	ge
 800ba96:	461c      	movge	r4, r3
 800ba98:	2500      	movge	r5, #0
 800ba9a:	2501      	movlt	r5, #1
 800ba9c:	f7ff fd3a 	bl	800b514 <_Balloc>
 800baa0:	b920      	cbnz	r0, 800baac <__mdiff+0x5c>
 800baa2:	4b2e      	ldr	r3, [pc, #184]	; (800bb5c <__mdiff+0x10c>)
 800baa4:	4602      	mov	r2, r0
 800baa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800baaa:	e7e5      	b.n	800ba78 <__mdiff+0x28>
 800baac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bab0:	6926      	ldr	r6, [r4, #16]
 800bab2:	60c5      	str	r5, [r0, #12]
 800bab4:	f104 0914 	add.w	r9, r4, #20
 800bab8:	f108 0514 	add.w	r5, r8, #20
 800babc:	f100 0e14 	add.w	lr, r0, #20
 800bac0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bac8:	f108 0210 	add.w	r2, r8, #16
 800bacc:	46f2      	mov	sl, lr
 800bace:	2100      	movs	r1, #0
 800bad0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bad8:	fa1f f883 	uxth.w	r8, r3
 800badc:	fa11 f18b 	uxtah	r1, r1, fp
 800bae0:	0c1b      	lsrs	r3, r3, #16
 800bae2:	eba1 0808 	sub.w	r8, r1, r8
 800bae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800baee:	fa1f f888 	uxth.w	r8, r8
 800baf2:	1419      	asrs	r1, r3, #16
 800baf4:	454e      	cmp	r6, r9
 800baf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bafa:	f84a 3b04 	str.w	r3, [sl], #4
 800bafe:	d8e7      	bhi.n	800bad0 <__mdiff+0x80>
 800bb00:	1b33      	subs	r3, r6, r4
 800bb02:	3b15      	subs	r3, #21
 800bb04:	f023 0303 	bic.w	r3, r3, #3
 800bb08:	3304      	adds	r3, #4
 800bb0a:	3415      	adds	r4, #21
 800bb0c:	42a6      	cmp	r6, r4
 800bb0e:	bf38      	it	cc
 800bb10:	2304      	movcc	r3, #4
 800bb12:	441d      	add	r5, r3
 800bb14:	4473      	add	r3, lr
 800bb16:	469e      	mov	lr, r3
 800bb18:	462e      	mov	r6, r5
 800bb1a:	4566      	cmp	r6, ip
 800bb1c:	d30e      	bcc.n	800bb3c <__mdiff+0xec>
 800bb1e:	f10c 0203 	add.w	r2, ip, #3
 800bb22:	1b52      	subs	r2, r2, r5
 800bb24:	f022 0203 	bic.w	r2, r2, #3
 800bb28:	3d03      	subs	r5, #3
 800bb2a:	45ac      	cmp	ip, r5
 800bb2c:	bf38      	it	cc
 800bb2e:	2200      	movcc	r2, #0
 800bb30:	441a      	add	r2, r3
 800bb32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb36:	b17b      	cbz	r3, 800bb58 <__mdiff+0x108>
 800bb38:	6107      	str	r7, [r0, #16]
 800bb3a:	e7a3      	b.n	800ba84 <__mdiff+0x34>
 800bb3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb40:	fa11 f288 	uxtah	r2, r1, r8
 800bb44:	1414      	asrs	r4, r2, #16
 800bb46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb4a:	b292      	uxth	r2, r2
 800bb4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb50:	f84e 2b04 	str.w	r2, [lr], #4
 800bb54:	1421      	asrs	r1, r4, #16
 800bb56:	e7e0      	b.n	800bb1a <__mdiff+0xca>
 800bb58:	3f01      	subs	r7, #1
 800bb5a:	e7ea      	b.n	800bb32 <__mdiff+0xe2>
 800bb5c:	0800ca6f 	.word	0x0800ca6f
 800bb60:	0800ca80 	.word	0x0800ca80

0800bb64 <__d2b>:
 800bb64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb68:	4689      	mov	r9, r1
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	ec57 6b10 	vmov	r6, r7, d0
 800bb70:	4690      	mov	r8, r2
 800bb72:	f7ff fccf 	bl	800b514 <_Balloc>
 800bb76:	4604      	mov	r4, r0
 800bb78:	b930      	cbnz	r0, 800bb88 <__d2b+0x24>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	4b25      	ldr	r3, [pc, #148]	; (800bc14 <__d2b+0xb0>)
 800bb7e:	4826      	ldr	r0, [pc, #152]	; (800bc18 <__d2b+0xb4>)
 800bb80:	f240 310a 	movw	r1, #778	; 0x30a
 800bb84:	f000 f950 	bl	800be28 <__assert_func>
 800bb88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb90:	bb35      	cbnz	r5, 800bbe0 <__d2b+0x7c>
 800bb92:	2e00      	cmp	r6, #0
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	d028      	beq.n	800bbea <__d2b+0x86>
 800bb98:	4668      	mov	r0, sp
 800bb9a:	9600      	str	r6, [sp, #0]
 800bb9c:	f7ff fd82 	bl	800b6a4 <__lo0bits>
 800bba0:	9900      	ldr	r1, [sp, #0]
 800bba2:	b300      	cbz	r0, 800bbe6 <__d2b+0x82>
 800bba4:	9a01      	ldr	r2, [sp, #4]
 800bba6:	f1c0 0320 	rsb	r3, r0, #32
 800bbaa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	40c2      	lsrs	r2, r0
 800bbb2:	6163      	str	r3, [r4, #20]
 800bbb4:	9201      	str	r2, [sp, #4]
 800bbb6:	9b01      	ldr	r3, [sp, #4]
 800bbb8:	61a3      	str	r3, [r4, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bf14      	ite	ne
 800bbbe:	2202      	movne	r2, #2
 800bbc0:	2201      	moveq	r2, #1
 800bbc2:	6122      	str	r2, [r4, #16]
 800bbc4:	b1d5      	cbz	r5, 800bbfc <__d2b+0x98>
 800bbc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbca:	4405      	add	r5, r0
 800bbcc:	f8c9 5000 	str.w	r5, [r9]
 800bbd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbd4:	f8c8 0000 	str.w	r0, [r8]
 800bbd8:	4620      	mov	r0, r4
 800bbda:	b003      	add	sp, #12
 800bbdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbe4:	e7d5      	b.n	800bb92 <__d2b+0x2e>
 800bbe6:	6161      	str	r1, [r4, #20]
 800bbe8:	e7e5      	b.n	800bbb6 <__d2b+0x52>
 800bbea:	a801      	add	r0, sp, #4
 800bbec:	f7ff fd5a 	bl	800b6a4 <__lo0bits>
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	6163      	str	r3, [r4, #20]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	6122      	str	r2, [r4, #16]
 800bbf8:	3020      	adds	r0, #32
 800bbfa:	e7e3      	b.n	800bbc4 <__d2b+0x60>
 800bbfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc04:	f8c9 0000 	str.w	r0, [r9]
 800bc08:	6918      	ldr	r0, [r3, #16]
 800bc0a:	f7ff fd2b 	bl	800b664 <__hi0bits>
 800bc0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc12:	e7df      	b.n	800bbd4 <__d2b+0x70>
 800bc14:	0800ca6f 	.word	0x0800ca6f
 800bc18:	0800ca80 	.word	0x0800ca80

0800bc1c <_calloc_r>:
 800bc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc1e:	fba1 2402 	umull	r2, r4, r1, r2
 800bc22:	b94c      	cbnz	r4, 800bc38 <_calloc_r+0x1c>
 800bc24:	4611      	mov	r1, r2
 800bc26:	9201      	str	r2, [sp, #4]
 800bc28:	f000 f87a 	bl	800bd20 <_malloc_r>
 800bc2c:	9a01      	ldr	r2, [sp, #4]
 800bc2e:	4605      	mov	r5, r0
 800bc30:	b930      	cbnz	r0, 800bc40 <_calloc_r+0x24>
 800bc32:	4628      	mov	r0, r5
 800bc34:	b003      	add	sp, #12
 800bc36:	bd30      	pop	{r4, r5, pc}
 800bc38:	220c      	movs	r2, #12
 800bc3a:	6002      	str	r2, [r0, #0]
 800bc3c:	2500      	movs	r5, #0
 800bc3e:	e7f8      	b.n	800bc32 <_calloc_r+0x16>
 800bc40:	4621      	mov	r1, r4
 800bc42:	f7fe f96f 	bl	8009f24 <memset>
 800bc46:	e7f4      	b.n	800bc32 <_calloc_r+0x16>

0800bc48 <_free_r>:
 800bc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc4a:	2900      	cmp	r1, #0
 800bc4c:	d044      	beq.n	800bcd8 <_free_r+0x90>
 800bc4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc52:	9001      	str	r0, [sp, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f1a1 0404 	sub.w	r4, r1, #4
 800bc5a:	bfb8      	it	lt
 800bc5c:	18e4      	addlt	r4, r4, r3
 800bc5e:	f000 f925 	bl	800beac <__malloc_lock>
 800bc62:	4a1e      	ldr	r2, [pc, #120]	; (800bcdc <_free_r+0x94>)
 800bc64:	9801      	ldr	r0, [sp, #4]
 800bc66:	6813      	ldr	r3, [r2, #0]
 800bc68:	b933      	cbnz	r3, 800bc78 <_free_r+0x30>
 800bc6a:	6063      	str	r3, [r4, #4]
 800bc6c:	6014      	str	r4, [r2, #0]
 800bc6e:	b003      	add	sp, #12
 800bc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc74:	f000 b920 	b.w	800beb8 <__malloc_unlock>
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	d908      	bls.n	800bc8e <_free_r+0x46>
 800bc7c:	6825      	ldr	r5, [r4, #0]
 800bc7e:	1961      	adds	r1, r4, r5
 800bc80:	428b      	cmp	r3, r1
 800bc82:	bf01      	itttt	eq
 800bc84:	6819      	ldreq	r1, [r3, #0]
 800bc86:	685b      	ldreq	r3, [r3, #4]
 800bc88:	1949      	addeq	r1, r1, r5
 800bc8a:	6021      	streq	r1, [r4, #0]
 800bc8c:	e7ed      	b.n	800bc6a <_free_r+0x22>
 800bc8e:	461a      	mov	r2, r3
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	b10b      	cbz	r3, 800bc98 <_free_r+0x50>
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	d9fa      	bls.n	800bc8e <_free_r+0x46>
 800bc98:	6811      	ldr	r1, [r2, #0]
 800bc9a:	1855      	adds	r5, r2, r1
 800bc9c:	42a5      	cmp	r5, r4
 800bc9e:	d10b      	bne.n	800bcb8 <_free_r+0x70>
 800bca0:	6824      	ldr	r4, [r4, #0]
 800bca2:	4421      	add	r1, r4
 800bca4:	1854      	adds	r4, r2, r1
 800bca6:	42a3      	cmp	r3, r4
 800bca8:	6011      	str	r1, [r2, #0]
 800bcaa:	d1e0      	bne.n	800bc6e <_free_r+0x26>
 800bcac:	681c      	ldr	r4, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	6053      	str	r3, [r2, #4]
 800bcb2:	4421      	add	r1, r4
 800bcb4:	6011      	str	r1, [r2, #0]
 800bcb6:	e7da      	b.n	800bc6e <_free_r+0x26>
 800bcb8:	d902      	bls.n	800bcc0 <_free_r+0x78>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	6003      	str	r3, [r0, #0]
 800bcbe:	e7d6      	b.n	800bc6e <_free_r+0x26>
 800bcc0:	6825      	ldr	r5, [r4, #0]
 800bcc2:	1961      	adds	r1, r4, r5
 800bcc4:	428b      	cmp	r3, r1
 800bcc6:	bf04      	itt	eq
 800bcc8:	6819      	ldreq	r1, [r3, #0]
 800bcca:	685b      	ldreq	r3, [r3, #4]
 800bccc:	6063      	str	r3, [r4, #4]
 800bcce:	bf04      	itt	eq
 800bcd0:	1949      	addeq	r1, r1, r5
 800bcd2:	6021      	streq	r1, [r4, #0]
 800bcd4:	6054      	str	r4, [r2, #4]
 800bcd6:	e7ca      	b.n	800bc6e <_free_r+0x26>
 800bcd8:	b003      	add	sp, #12
 800bcda:	bd30      	pop	{r4, r5, pc}
 800bcdc:	200020d0 	.word	0x200020d0

0800bce0 <sbrk_aligned>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	4e0e      	ldr	r6, [pc, #56]	; (800bd1c <sbrk_aligned+0x3c>)
 800bce4:	460c      	mov	r4, r1
 800bce6:	6831      	ldr	r1, [r6, #0]
 800bce8:	4605      	mov	r5, r0
 800bcea:	b911      	cbnz	r1, 800bcf2 <sbrk_aligned+0x12>
 800bcec:	f000 f88c 	bl	800be08 <_sbrk_r>
 800bcf0:	6030      	str	r0, [r6, #0]
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 f887 	bl	800be08 <_sbrk_r>
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	d00a      	beq.n	800bd14 <sbrk_aligned+0x34>
 800bcfe:	1cc4      	adds	r4, r0, #3
 800bd00:	f024 0403 	bic.w	r4, r4, #3
 800bd04:	42a0      	cmp	r0, r4
 800bd06:	d007      	beq.n	800bd18 <sbrk_aligned+0x38>
 800bd08:	1a21      	subs	r1, r4, r0
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f000 f87c 	bl	800be08 <_sbrk_r>
 800bd10:	3001      	adds	r0, #1
 800bd12:	d101      	bne.n	800bd18 <sbrk_aligned+0x38>
 800bd14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bd18:	4620      	mov	r0, r4
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	200020d4 	.word	0x200020d4

0800bd20 <_malloc_r>:
 800bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd24:	1ccd      	adds	r5, r1, #3
 800bd26:	f025 0503 	bic.w	r5, r5, #3
 800bd2a:	3508      	adds	r5, #8
 800bd2c:	2d0c      	cmp	r5, #12
 800bd2e:	bf38      	it	cc
 800bd30:	250c      	movcc	r5, #12
 800bd32:	2d00      	cmp	r5, #0
 800bd34:	4607      	mov	r7, r0
 800bd36:	db01      	blt.n	800bd3c <_malloc_r+0x1c>
 800bd38:	42a9      	cmp	r1, r5
 800bd3a:	d905      	bls.n	800bd48 <_malloc_r+0x28>
 800bd3c:	230c      	movs	r3, #12
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	2600      	movs	r6, #0
 800bd42:	4630      	mov	r0, r6
 800bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd48:	4e2e      	ldr	r6, [pc, #184]	; (800be04 <_malloc_r+0xe4>)
 800bd4a:	f000 f8af 	bl	800beac <__malloc_lock>
 800bd4e:	6833      	ldr	r3, [r6, #0]
 800bd50:	461c      	mov	r4, r3
 800bd52:	bb34      	cbnz	r4, 800bda2 <_malloc_r+0x82>
 800bd54:	4629      	mov	r1, r5
 800bd56:	4638      	mov	r0, r7
 800bd58:	f7ff ffc2 	bl	800bce0 <sbrk_aligned>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	4604      	mov	r4, r0
 800bd60:	d14d      	bne.n	800bdfe <_malloc_r+0xde>
 800bd62:	6834      	ldr	r4, [r6, #0]
 800bd64:	4626      	mov	r6, r4
 800bd66:	2e00      	cmp	r6, #0
 800bd68:	d140      	bne.n	800bdec <_malloc_r+0xcc>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4638      	mov	r0, r7
 800bd70:	eb04 0803 	add.w	r8, r4, r3
 800bd74:	f000 f848 	bl	800be08 <_sbrk_r>
 800bd78:	4580      	cmp	r8, r0
 800bd7a:	d13a      	bne.n	800bdf2 <_malloc_r+0xd2>
 800bd7c:	6821      	ldr	r1, [r4, #0]
 800bd7e:	3503      	adds	r5, #3
 800bd80:	1a6d      	subs	r5, r5, r1
 800bd82:	f025 0503 	bic.w	r5, r5, #3
 800bd86:	3508      	adds	r5, #8
 800bd88:	2d0c      	cmp	r5, #12
 800bd8a:	bf38      	it	cc
 800bd8c:	250c      	movcc	r5, #12
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff ffa5 	bl	800bce0 <sbrk_aligned>
 800bd96:	3001      	adds	r0, #1
 800bd98:	d02b      	beq.n	800bdf2 <_malloc_r+0xd2>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	442b      	add	r3, r5
 800bd9e:	6023      	str	r3, [r4, #0]
 800bda0:	e00e      	b.n	800bdc0 <_malloc_r+0xa0>
 800bda2:	6822      	ldr	r2, [r4, #0]
 800bda4:	1b52      	subs	r2, r2, r5
 800bda6:	d41e      	bmi.n	800bde6 <_malloc_r+0xc6>
 800bda8:	2a0b      	cmp	r2, #11
 800bdaa:	d916      	bls.n	800bdda <_malloc_r+0xba>
 800bdac:	1961      	adds	r1, r4, r5
 800bdae:	42a3      	cmp	r3, r4
 800bdb0:	6025      	str	r5, [r4, #0]
 800bdb2:	bf18      	it	ne
 800bdb4:	6059      	strne	r1, [r3, #4]
 800bdb6:	6863      	ldr	r3, [r4, #4]
 800bdb8:	bf08      	it	eq
 800bdba:	6031      	streq	r1, [r6, #0]
 800bdbc:	5162      	str	r2, [r4, r5]
 800bdbe:	604b      	str	r3, [r1, #4]
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f104 060b 	add.w	r6, r4, #11
 800bdc6:	f000 f877 	bl	800beb8 <__malloc_unlock>
 800bdca:	f026 0607 	bic.w	r6, r6, #7
 800bdce:	1d23      	adds	r3, r4, #4
 800bdd0:	1af2      	subs	r2, r6, r3
 800bdd2:	d0b6      	beq.n	800bd42 <_malloc_r+0x22>
 800bdd4:	1b9b      	subs	r3, r3, r6
 800bdd6:	50a3      	str	r3, [r4, r2]
 800bdd8:	e7b3      	b.n	800bd42 <_malloc_r+0x22>
 800bdda:	6862      	ldr	r2, [r4, #4]
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	bf0c      	ite	eq
 800bde0:	6032      	streq	r2, [r6, #0]
 800bde2:	605a      	strne	r2, [r3, #4]
 800bde4:	e7ec      	b.n	800bdc0 <_malloc_r+0xa0>
 800bde6:	4623      	mov	r3, r4
 800bde8:	6864      	ldr	r4, [r4, #4]
 800bdea:	e7b2      	b.n	800bd52 <_malloc_r+0x32>
 800bdec:	4634      	mov	r4, r6
 800bdee:	6876      	ldr	r6, [r6, #4]
 800bdf0:	e7b9      	b.n	800bd66 <_malloc_r+0x46>
 800bdf2:	230c      	movs	r3, #12
 800bdf4:	603b      	str	r3, [r7, #0]
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f000 f85e 	bl	800beb8 <__malloc_unlock>
 800bdfc:	e7a1      	b.n	800bd42 <_malloc_r+0x22>
 800bdfe:	6025      	str	r5, [r4, #0]
 800be00:	e7de      	b.n	800bdc0 <_malloc_r+0xa0>
 800be02:	bf00      	nop
 800be04:	200020d0 	.word	0x200020d0

0800be08 <_sbrk_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4d06      	ldr	r5, [pc, #24]	; (800be24 <_sbrk_r+0x1c>)
 800be0c:	2300      	movs	r3, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	602b      	str	r3, [r5, #0]
 800be14:	f7f6 f870 	bl	8001ef8 <_sbrk>
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	d102      	bne.n	800be22 <_sbrk_r+0x1a>
 800be1c:	682b      	ldr	r3, [r5, #0]
 800be1e:	b103      	cbz	r3, 800be22 <_sbrk_r+0x1a>
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	bd38      	pop	{r3, r4, r5, pc}
 800be24:	200020d8 	.word	0x200020d8

0800be28 <__assert_func>:
 800be28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be2a:	4614      	mov	r4, r2
 800be2c:	461a      	mov	r2, r3
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <__assert_func+0x2c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4605      	mov	r5, r0
 800be34:	68d8      	ldr	r0, [r3, #12]
 800be36:	b14c      	cbz	r4, 800be4c <__assert_func+0x24>
 800be38:	4b07      	ldr	r3, [pc, #28]	; (800be58 <__assert_func+0x30>)
 800be3a:	9100      	str	r1, [sp, #0]
 800be3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be40:	4906      	ldr	r1, [pc, #24]	; (800be5c <__assert_func+0x34>)
 800be42:	462b      	mov	r3, r5
 800be44:	f000 f80e 	bl	800be64 <fiprintf>
 800be48:	f000 fa64 	bl	800c314 <abort>
 800be4c:	4b04      	ldr	r3, [pc, #16]	; (800be60 <__assert_func+0x38>)
 800be4e:	461c      	mov	r4, r3
 800be50:	e7f3      	b.n	800be3a <__assert_func+0x12>
 800be52:	bf00      	nop
 800be54:	200000fc 	.word	0x200000fc
 800be58:	0800cbdc 	.word	0x0800cbdc
 800be5c:	0800cbe9 	.word	0x0800cbe9
 800be60:	0800cc17 	.word	0x0800cc17

0800be64 <fiprintf>:
 800be64:	b40e      	push	{r1, r2, r3}
 800be66:	b503      	push	{r0, r1, lr}
 800be68:	4601      	mov	r1, r0
 800be6a:	ab03      	add	r3, sp, #12
 800be6c:	4805      	ldr	r0, [pc, #20]	; (800be84 <fiprintf+0x20>)
 800be6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be72:	6800      	ldr	r0, [r0, #0]
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	f000 f84f 	bl	800bf18 <_vfiprintf_r>
 800be7a:	b002      	add	sp, #8
 800be7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be80:	b003      	add	sp, #12
 800be82:	4770      	bx	lr
 800be84:	200000fc 	.word	0x200000fc

0800be88 <__ascii_mbtowc>:
 800be88:	b082      	sub	sp, #8
 800be8a:	b901      	cbnz	r1, 800be8e <__ascii_mbtowc+0x6>
 800be8c:	a901      	add	r1, sp, #4
 800be8e:	b142      	cbz	r2, 800bea2 <__ascii_mbtowc+0x1a>
 800be90:	b14b      	cbz	r3, 800bea6 <__ascii_mbtowc+0x1e>
 800be92:	7813      	ldrb	r3, [r2, #0]
 800be94:	600b      	str	r3, [r1, #0]
 800be96:	7812      	ldrb	r2, [r2, #0]
 800be98:	1e10      	subs	r0, r2, #0
 800be9a:	bf18      	it	ne
 800be9c:	2001      	movne	r0, #1
 800be9e:	b002      	add	sp, #8
 800bea0:	4770      	bx	lr
 800bea2:	4610      	mov	r0, r2
 800bea4:	e7fb      	b.n	800be9e <__ascii_mbtowc+0x16>
 800bea6:	f06f 0001 	mvn.w	r0, #1
 800beaa:	e7f8      	b.n	800be9e <__ascii_mbtowc+0x16>

0800beac <__malloc_lock>:
 800beac:	4801      	ldr	r0, [pc, #4]	; (800beb4 <__malloc_lock+0x8>)
 800beae:	f000 bbf1 	b.w	800c694 <__retarget_lock_acquire_recursive>
 800beb2:	bf00      	nop
 800beb4:	200020dc 	.word	0x200020dc

0800beb8 <__malloc_unlock>:
 800beb8:	4801      	ldr	r0, [pc, #4]	; (800bec0 <__malloc_unlock+0x8>)
 800beba:	f000 bbec 	b.w	800c696 <__retarget_lock_release_recursive>
 800bebe:	bf00      	nop
 800bec0:	200020dc 	.word	0x200020dc

0800bec4 <__sfputc_r>:
 800bec4:	6893      	ldr	r3, [r2, #8]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	b410      	push	{r4}
 800becc:	6093      	str	r3, [r2, #8]
 800bece:	da08      	bge.n	800bee2 <__sfputc_r+0x1e>
 800bed0:	6994      	ldr	r4, [r2, #24]
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	db01      	blt.n	800beda <__sfputc_r+0x16>
 800bed6:	290a      	cmp	r1, #10
 800bed8:	d103      	bne.n	800bee2 <__sfputc_r+0x1e>
 800beda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bede:	f000 b94b 	b.w	800c178 <__swbuf_r>
 800bee2:	6813      	ldr	r3, [r2, #0]
 800bee4:	1c58      	adds	r0, r3, #1
 800bee6:	6010      	str	r0, [r2, #0]
 800bee8:	7019      	strb	r1, [r3, #0]
 800beea:	4608      	mov	r0, r1
 800beec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <__sfputs_r>:
 800bef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef4:	4606      	mov	r6, r0
 800bef6:	460f      	mov	r7, r1
 800bef8:	4614      	mov	r4, r2
 800befa:	18d5      	adds	r5, r2, r3
 800befc:	42ac      	cmp	r4, r5
 800befe:	d101      	bne.n	800bf04 <__sfputs_r+0x12>
 800bf00:	2000      	movs	r0, #0
 800bf02:	e007      	b.n	800bf14 <__sfputs_r+0x22>
 800bf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf08:	463a      	mov	r2, r7
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7ff ffda 	bl	800bec4 <__sfputc_r>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d1f3      	bne.n	800befc <__sfputs_r+0xa>
 800bf14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf18 <_vfiprintf_r>:
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	b09d      	sub	sp, #116	; 0x74
 800bf20:	4614      	mov	r4, r2
 800bf22:	4698      	mov	r8, r3
 800bf24:	4606      	mov	r6, r0
 800bf26:	b118      	cbz	r0, 800bf30 <_vfiprintf_r+0x18>
 800bf28:	6983      	ldr	r3, [r0, #24]
 800bf2a:	b90b      	cbnz	r3, 800bf30 <_vfiprintf_r+0x18>
 800bf2c:	f000 fb14 	bl	800c558 <__sinit>
 800bf30:	4b89      	ldr	r3, [pc, #548]	; (800c158 <_vfiprintf_r+0x240>)
 800bf32:	429d      	cmp	r5, r3
 800bf34:	d11b      	bne.n	800bf6e <_vfiprintf_r+0x56>
 800bf36:	6875      	ldr	r5, [r6, #4]
 800bf38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf3a:	07d9      	lsls	r1, r3, #31
 800bf3c:	d405      	bmi.n	800bf4a <_vfiprintf_r+0x32>
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	059a      	lsls	r2, r3, #22
 800bf42:	d402      	bmi.n	800bf4a <_vfiprintf_r+0x32>
 800bf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf46:	f000 fba5 	bl	800c694 <__retarget_lock_acquire_recursive>
 800bf4a:	89ab      	ldrh	r3, [r5, #12]
 800bf4c:	071b      	lsls	r3, r3, #28
 800bf4e:	d501      	bpl.n	800bf54 <_vfiprintf_r+0x3c>
 800bf50:	692b      	ldr	r3, [r5, #16]
 800bf52:	b9eb      	cbnz	r3, 800bf90 <_vfiprintf_r+0x78>
 800bf54:	4629      	mov	r1, r5
 800bf56:	4630      	mov	r0, r6
 800bf58:	f000 f96e 	bl	800c238 <__swsetup_r>
 800bf5c:	b1c0      	cbz	r0, 800bf90 <_vfiprintf_r+0x78>
 800bf5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf60:	07dc      	lsls	r4, r3, #31
 800bf62:	d50e      	bpl.n	800bf82 <_vfiprintf_r+0x6a>
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf68:	b01d      	add	sp, #116	; 0x74
 800bf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6e:	4b7b      	ldr	r3, [pc, #492]	; (800c15c <_vfiprintf_r+0x244>)
 800bf70:	429d      	cmp	r5, r3
 800bf72:	d101      	bne.n	800bf78 <_vfiprintf_r+0x60>
 800bf74:	68b5      	ldr	r5, [r6, #8]
 800bf76:	e7df      	b.n	800bf38 <_vfiprintf_r+0x20>
 800bf78:	4b79      	ldr	r3, [pc, #484]	; (800c160 <_vfiprintf_r+0x248>)
 800bf7a:	429d      	cmp	r5, r3
 800bf7c:	bf08      	it	eq
 800bf7e:	68f5      	ldreq	r5, [r6, #12]
 800bf80:	e7da      	b.n	800bf38 <_vfiprintf_r+0x20>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	0598      	lsls	r0, r3, #22
 800bf86:	d4ed      	bmi.n	800bf64 <_vfiprintf_r+0x4c>
 800bf88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf8a:	f000 fb84 	bl	800c696 <__retarget_lock_release_recursive>
 800bf8e:	e7e9      	b.n	800bf64 <_vfiprintf_r+0x4c>
 800bf90:	2300      	movs	r3, #0
 800bf92:	9309      	str	r3, [sp, #36]	; 0x24
 800bf94:	2320      	movs	r3, #32
 800bf96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf9e:	2330      	movs	r3, #48	; 0x30
 800bfa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c164 <_vfiprintf_r+0x24c>
 800bfa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfa8:	f04f 0901 	mov.w	r9, #1
 800bfac:	4623      	mov	r3, r4
 800bfae:	469a      	mov	sl, r3
 800bfb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb4:	b10a      	cbz	r2, 800bfba <_vfiprintf_r+0xa2>
 800bfb6:	2a25      	cmp	r2, #37	; 0x25
 800bfb8:	d1f9      	bne.n	800bfae <_vfiprintf_r+0x96>
 800bfba:	ebba 0b04 	subs.w	fp, sl, r4
 800bfbe:	d00b      	beq.n	800bfd8 <_vfiprintf_r+0xc0>
 800bfc0:	465b      	mov	r3, fp
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff ff93 	bl	800bef2 <__sfputs_r>
 800bfcc:	3001      	adds	r0, #1
 800bfce:	f000 80aa 	beq.w	800c126 <_vfiprintf_r+0x20e>
 800bfd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfd4:	445a      	add	r2, fp
 800bfd6:	9209      	str	r2, [sp, #36]	; 0x24
 800bfd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80a2 	beq.w	800c126 <_vfiprintf_r+0x20e>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfec:	f10a 0a01 	add.w	sl, sl, #1
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	9307      	str	r3, [sp, #28]
 800bff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bff8:	931a      	str	r3, [sp, #104]	; 0x68
 800bffa:	4654      	mov	r4, sl
 800bffc:	2205      	movs	r2, #5
 800bffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c002:	4858      	ldr	r0, [pc, #352]	; (800c164 <_vfiprintf_r+0x24c>)
 800c004:	f7f4 f8f4 	bl	80001f0 <memchr>
 800c008:	9a04      	ldr	r2, [sp, #16]
 800c00a:	b9d8      	cbnz	r0, 800c044 <_vfiprintf_r+0x12c>
 800c00c:	06d1      	lsls	r1, r2, #27
 800c00e:	bf44      	itt	mi
 800c010:	2320      	movmi	r3, #32
 800c012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c016:	0713      	lsls	r3, r2, #28
 800c018:	bf44      	itt	mi
 800c01a:	232b      	movmi	r3, #43	; 0x2b
 800c01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c020:	f89a 3000 	ldrb.w	r3, [sl]
 800c024:	2b2a      	cmp	r3, #42	; 0x2a
 800c026:	d015      	beq.n	800c054 <_vfiprintf_r+0x13c>
 800c028:	9a07      	ldr	r2, [sp, #28]
 800c02a:	4654      	mov	r4, sl
 800c02c:	2000      	movs	r0, #0
 800c02e:	f04f 0c0a 	mov.w	ip, #10
 800c032:	4621      	mov	r1, r4
 800c034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c038:	3b30      	subs	r3, #48	; 0x30
 800c03a:	2b09      	cmp	r3, #9
 800c03c:	d94e      	bls.n	800c0dc <_vfiprintf_r+0x1c4>
 800c03e:	b1b0      	cbz	r0, 800c06e <_vfiprintf_r+0x156>
 800c040:	9207      	str	r2, [sp, #28]
 800c042:	e014      	b.n	800c06e <_vfiprintf_r+0x156>
 800c044:	eba0 0308 	sub.w	r3, r0, r8
 800c048:	fa09 f303 	lsl.w	r3, r9, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	9304      	str	r3, [sp, #16]
 800c050:	46a2      	mov	sl, r4
 800c052:	e7d2      	b.n	800bffa <_vfiprintf_r+0xe2>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	1d19      	adds	r1, r3, #4
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	9103      	str	r1, [sp, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bfbb      	ittet	lt
 800c060:	425b      	neglt	r3, r3
 800c062:	f042 0202 	orrlt.w	r2, r2, #2
 800c066:	9307      	strge	r3, [sp, #28]
 800c068:	9307      	strlt	r3, [sp, #28]
 800c06a:	bfb8      	it	lt
 800c06c:	9204      	strlt	r2, [sp, #16]
 800c06e:	7823      	ldrb	r3, [r4, #0]
 800c070:	2b2e      	cmp	r3, #46	; 0x2e
 800c072:	d10c      	bne.n	800c08e <_vfiprintf_r+0x176>
 800c074:	7863      	ldrb	r3, [r4, #1]
 800c076:	2b2a      	cmp	r3, #42	; 0x2a
 800c078:	d135      	bne.n	800c0e6 <_vfiprintf_r+0x1ce>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	1d1a      	adds	r2, r3, #4
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	9203      	str	r2, [sp, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	bfb8      	it	lt
 800c086:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c08a:	3402      	adds	r4, #2
 800c08c:	9305      	str	r3, [sp, #20]
 800c08e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c174 <_vfiprintf_r+0x25c>
 800c092:	7821      	ldrb	r1, [r4, #0]
 800c094:	2203      	movs	r2, #3
 800c096:	4650      	mov	r0, sl
 800c098:	f7f4 f8aa 	bl	80001f0 <memchr>
 800c09c:	b140      	cbz	r0, 800c0b0 <_vfiprintf_r+0x198>
 800c09e:	2340      	movs	r3, #64	; 0x40
 800c0a0:	eba0 000a 	sub.w	r0, r0, sl
 800c0a4:	fa03 f000 	lsl.w	r0, r3, r0
 800c0a8:	9b04      	ldr	r3, [sp, #16]
 800c0aa:	4303      	orrs	r3, r0
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	482c      	ldr	r0, [pc, #176]	; (800c168 <_vfiprintf_r+0x250>)
 800c0b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ba:	2206      	movs	r2, #6
 800c0bc:	f7f4 f898 	bl	80001f0 <memchr>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d03f      	beq.n	800c144 <_vfiprintf_r+0x22c>
 800c0c4:	4b29      	ldr	r3, [pc, #164]	; (800c16c <_vfiprintf_r+0x254>)
 800c0c6:	bb1b      	cbnz	r3, 800c110 <_vfiprintf_r+0x1f8>
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	3307      	adds	r3, #7
 800c0cc:	f023 0307 	bic.w	r3, r3, #7
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d6:	443b      	add	r3, r7
 800c0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0da:	e767      	b.n	800bfac <_vfiprintf_r+0x94>
 800c0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7a5      	b.n	800c032 <_vfiprintf_r+0x11a>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f04f 0c0a 	mov.w	ip, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f8:	3a30      	subs	r2, #48	; 0x30
 800c0fa:	2a09      	cmp	r2, #9
 800c0fc:	d903      	bls.n	800c106 <_vfiprintf_r+0x1ee>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0c5      	beq.n	800c08e <_vfiprintf_r+0x176>
 800c102:	9105      	str	r1, [sp, #20]
 800c104:	e7c3      	b.n	800c08e <_vfiprintf_r+0x176>
 800c106:	fb0c 2101 	mla	r1, ip, r1, r2
 800c10a:	4604      	mov	r4, r0
 800c10c:	2301      	movs	r3, #1
 800c10e:	e7f0      	b.n	800c0f2 <_vfiprintf_r+0x1da>
 800c110:	ab03      	add	r3, sp, #12
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	462a      	mov	r2, r5
 800c116:	4b16      	ldr	r3, [pc, #88]	; (800c170 <_vfiprintf_r+0x258>)
 800c118:	a904      	add	r1, sp, #16
 800c11a:	4630      	mov	r0, r6
 800c11c:	f7fd ffaa 	bl	800a074 <_printf_float>
 800c120:	4607      	mov	r7, r0
 800c122:	1c78      	adds	r0, r7, #1
 800c124:	d1d6      	bne.n	800c0d4 <_vfiprintf_r+0x1bc>
 800c126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c128:	07d9      	lsls	r1, r3, #31
 800c12a:	d405      	bmi.n	800c138 <_vfiprintf_r+0x220>
 800c12c:	89ab      	ldrh	r3, [r5, #12]
 800c12e:	059a      	lsls	r2, r3, #22
 800c130:	d402      	bmi.n	800c138 <_vfiprintf_r+0x220>
 800c132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c134:	f000 faaf 	bl	800c696 <__retarget_lock_release_recursive>
 800c138:	89ab      	ldrh	r3, [r5, #12]
 800c13a:	065b      	lsls	r3, r3, #25
 800c13c:	f53f af12 	bmi.w	800bf64 <_vfiprintf_r+0x4c>
 800c140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c142:	e711      	b.n	800bf68 <_vfiprintf_r+0x50>
 800c144:	ab03      	add	r3, sp, #12
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	462a      	mov	r2, r5
 800c14a:	4b09      	ldr	r3, [pc, #36]	; (800c170 <_vfiprintf_r+0x258>)
 800c14c:	a904      	add	r1, sp, #16
 800c14e:	4630      	mov	r0, r6
 800c150:	f7fe fa34 	bl	800a5bc <_printf_i>
 800c154:	e7e4      	b.n	800c120 <_vfiprintf_r+0x208>
 800c156:	bf00      	nop
 800c158:	0800cd54 	.word	0x0800cd54
 800c15c:	0800cd74 	.word	0x0800cd74
 800c160:	0800cd34 	.word	0x0800cd34
 800c164:	0800cc22 	.word	0x0800cc22
 800c168:	0800cc2c 	.word	0x0800cc2c
 800c16c:	0800a075 	.word	0x0800a075
 800c170:	0800bef3 	.word	0x0800bef3
 800c174:	0800cc28 	.word	0x0800cc28

0800c178 <__swbuf_r>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	460e      	mov	r6, r1
 800c17c:	4614      	mov	r4, r2
 800c17e:	4605      	mov	r5, r0
 800c180:	b118      	cbz	r0, 800c18a <__swbuf_r+0x12>
 800c182:	6983      	ldr	r3, [r0, #24]
 800c184:	b90b      	cbnz	r3, 800c18a <__swbuf_r+0x12>
 800c186:	f000 f9e7 	bl	800c558 <__sinit>
 800c18a:	4b21      	ldr	r3, [pc, #132]	; (800c210 <__swbuf_r+0x98>)
 800c18c:	429c      	cmp	r4, r3
 800c18e:	d12b      	bne.n	800c1e8 <__swbuf_r+0x70>
 800c190:	686c      	ldr	r4, [r5, #4]
 800c192:	69a3      	ldr	r3, [r4, #24]
 800c194:	60a3      	str	r3, [r4, #8]
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	071a      	lsls	r2, r3, #28
 800c19a:	d52f      	bpl.n	800c1fc <__swbuf_r+0x84>
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	b36b      	cbz	r3, 800c1fc <__swbuf_r+0x84>
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	6820      	ldr	r0, [r4, #0]
 800c1a4:	1ac0      	subs	r0, r0, r3
 800c1a6:	6963      	ldr	r3, [r4, #20]
 800c1a8:	b2f6      	uxtb	r6, r6
 800c1aa:	4283      	cmp	r3, r0
 800c1ac:	4637      	mov	r7, r6
 800c1ae:	dc04      	bgt.n	800c1ba <__swbuf_r+0x42>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 f93c 	bl	800c430 <_fflush_r>
 800c1b8:	bb30      	cbnz	r0, 800c208 <__swbuf_r+0x90>
 800c1ba:	68a3      	ldr	r3, [r4, #8]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	60a3      	str	r3, [r4, #8]
 800c1c0:	6823      	ldr	r3, [r4, #0]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	6022      	str	r2, [r4, #0]
 800c1c6:	701e      	strb	r6, [r3, #0]
 800c1c8:	6963      	ldr	r3, [r4, #20]
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	4283      	cmp	r3, r0
 800c1ce:	d004      	beq.n	800c1da <__swbuf_r+0x62>
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	07db      	lsls	r3, r3, #31
 800c1d4:	d506      	bpl.n	800c1e4 <__swbuf_r+0x6c>
 800c1d6:	2e0a      	cmp	r6, #10
 800c1d8:	d104      	bne.n	800c1e4 <__swbuf_r+0x6c>
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f000 f927 	bl	800c430 <_fflush_r>
 800c1e2:	b988      	cbnz	r0, 800c208 <__swbuf_r+0x90>
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <__swbuf_r+0x9c>)
 800c1ea:	429c      	cmp	r4, r3
 800c1ec:	d101      	bne.n	800c1f2 <__swbuf_r+0x7a>
 800c1ee:	68ac      	ldr	r4, [r5, #8]
 800c1f0:	e7cf      	b.n	800c192 <__swbuf_r+0x1a>
 800c1f2:	4b09      	ldr	r3, [pc, #36]	; (800c218 <__swbuf_r+0xa0>)
 800c1f4:	429c      	cmp	r4, r3
 800c1f6:	bf08      	it	eq
 800c1f8:	68ec      	ldreq	r4, [r5, #12]
 800c1fa:	e7ca      	b.n	800c192 <__swbuf_r+0x1a>
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4628      	mov	r0, r5
 800c200:	f000 f81a 	bl	800c238 <__swsetup_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	d0cb      	beq.n	800c1a0 <__swbuf_r+0x28>
 800c208:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c20c:	e7ea      	b.n	800c1e4 <__swbuf_r+0x6c>
 800c20e:	bf00      	nop
 800c210:	0800cd54 	.word	0x0800cd54
 800c214:	0800cd74 	.word	0x0800cd74
 800c218:	0800cd34 	.word	0x0800cd34

0800c21c <__ascii_wctomb>:
 800c21c:	b149      	cbz	r1, 800c232 <__ascii_wctomb+0x16>
 800c21e:	2aff      	cmp	r2, #255	; 0xff
 800c220:	bf85      	ittet	hi
 800c222:	238a      	movhi	r3, #138	; 0x8a
 800c224:	6003      	strhi	r3, [r0, #0]
 800c226:	700a      	strbls	r2, [r1, #0]
 800c228:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c22c:	bf98      	it	ls
 800c22e:	2001      	movls	r0, #1
 800c230:	4770      	bx	lr
 800c232:	4608      	mov	r0, r1
 800c234:	4770      	bx	lr
	...

0800c238 <__swsetup_r>:
 800c238:	4b32      	ldr	r3, [pc, #200]	; (800c304 <__swsetup_r+0xcc>)
 800c23a:	b570      	push	{r4, r5, r6, lr}
 800c23c:	681d      	ldr	r5, [r3, #0]
 800c23e:	4606      	mov	r6, r0
 800c240:	460c      	mov	r4, r1
 800c242:	b125      	cbz	r5, 800c24e <__swsetup_r+0x16>
 800c244:	69ab      	ldr	r3, [r5, #24]
 800c246:	b913      	cbnz	r3, 800c24e <__swsetup_r+0x16>
 800c248:	4628      	mov	r0, r5
 800c24a:	f000 f985 	bl	800c558 <__sinit>
 800c24e:	4b2e      	ldr	r3, [pc, #184]	; (800c308 <__swsetup_r+0xd0>)
 800c250:	429c      	cmp	r4, r3
 800c252:	d10f      	bne.n	800c274 <__swsetup_r+0x3c>
 800c254:	686c      	ldr	r4, [r5, #4]
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c25c:	0719      	lsls	r1, r3, #28
 800c25e:	d42c      	bmi.n	800c2ba <__swsetup_r+0x82>
 800c260:	06dd      	lsls	r5, r3, #27
 800c262:	d411      	bmi.n	800c288 <__swsetup_r+0x50>
 800c264:	2309      	movs	r3, #9
 800c266:	6033      	str	r3, [r6, #0]
 800c268:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c272:	e03e      	b.n	800c2f2 <__swsetup_r+0xba>
 800c274:	4b25      	ldr	r3, [pc, #148]	; (800c30c <__swsetup_r+0xd4>)
 800c276:	429c      	cmp	r4, r3
 800c278:	d101      	bne.n	800c27e <__swsetup_r+0x46>
 800c27a:	68ac      	ldr	r4, [r5, #8]
 800c27c:	e7eb      	b.n	800c256 <__swsetup_r+0x1e>
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <__swsetup_r+0xd8>)
 800c280:	429c      	cmp	r4, r3
 800c282:	bf08      	it	eq
 800c284:	68ec      	ldreq	r4, [r5, #12]
 800c286:	e7e6      	b.n	800c256 <__swsetup_r+0x1e>
 800c288:	0758      	lsls	r0, r3, #29
 800c28a:	d512      	bpl.n	800c2b2 <__swsetup_r+0x7a>
 800c28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c28e:	b141      	cbz	r1, 800c2a2 <__swsetup_r+0x6a>
 800c290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c294:	4299      	cmp	r1, r3
 800c296:	d002      	beq.n	800c29e <__swsetup_r+0x66>
 800c298:	4630      	mov	r0, r6
 800c29a:	f7ff fcd5 	bl	800bc48 <_free_r>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	6363      	str	r3, [r4, #52]	; 0x34
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	6063      	str	r3, [r4, #4]
 800c2ae:	6923      	ldr	r3, [r4, #16]
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	f043 0308 	orr.w	r3, r3, #8
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	b94b      	cbnz	r3, 800c2d2 <__swsetup_r+0x9a>
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2c8:	d003      	beq.n	800c2d2 <__swsetup_r+0x9a>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f000 fa09 	bl	800c6e4 <__smakebuf_r>
 800c2d2:	89a0      	ldrh	r0, [r4, #12]
 800c2d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2d8:	f010 0301 	ands.w	r3, r0, #1
 800c2dc:	d00a      	beq.n	800c2f4 <__swsetup_r+0xbc>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60a3      	str	r3, [r4, #8]
 800c2e2:	6963      	ldr	r3, [r4, #20]
 800c2e4:	425b      	negs	r3, r3
 800c2e6:	61a3      	str	r3, [r4, #24]
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	b943      	cbnz	r3, 800c2fe <__swsetup_r+0xc6>
 800c2ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2f0:	d1ba      	bne.n	800c268 <__swsetup_r+0x30>
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}
 800c2f4:	0781      	lsls	r1, r0, #30
 800c2f6:	bf58      	it	pl
 800c2f8:	6963      	ldrpl	r3, [r4, #20]
 800c2fa:	60a3      	str	r3, [r4, #8]
 800c2fc:	e7f4      	b.n	800c2e8 <__swsetup_r+0xb0>
 800c2fe:	2000      	movs	r0, #0
 800c300:	e7f7      	b.n	800c2f2 <__swsetup_r+0xba>
 800c302:	bf00      	nop
 800c304:	200000fc 	.word	0x200000fc
 800c308:	0800cd54 	.word	0x0800cd54
 800c30c:	0800cd74 	.word	0x0800cd74
 800c310:	0800cd34 	.word	0x0800cd34

0800c314 <abort>:
 800c314:	b508      	push	{r3, lr}
 800c316:	2006      	movs	r0, #6
 800c318:	f000 fa4c 	bl	800c7b4 <raise>
 800c31c:	2001      	movs	r0, #1
 800c31e:	f7f5 fd73 	bl	8001e08 <_exit>
	...

0800c324 <__sflush_r>:
 800c324:	898a      	ldrh	r2, [r1, #12]
 800c326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c32a:	4605      	mov	r5, r0
 800c32c:	0710      	lsls	r0, r2, #28
 800c32e:	460c      	mov	r4, r1
 800c330:	d458      	bmi.n	800c3e4 <__sflush_r+0xc0>
 800c332:	684b      	ldr	r3, [r1, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	dc05      	bgt.n	800c344 <__sflush_r+0x20>
 800c338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	dc02      	bgt.n	800c344 <__sflush_r+0x20>
 800c33e:	2000      	movs	r0, #0
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c346:	2e00      	cmp	r6, #0
 800c348:	d0f9      	beq.n	800c33e <__sflush_r+0x1a>
 800c34a:	2300      	movs	r3, #0
 800c34c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c350:	682f      	ldr	r7, [r5, #0]
 800c352:	602b      	str	r3, [r5, #0]
 800c354:	d032      	beq.n	800c3bc <__sflush_r+0x98>
 800c356:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	075a      	lsls	r2, r3, #29
 800c35c:	d505      	bpl.n	800c36a <__sflush_r+0x46>
 800c35e:	6863      	ldr	r3, [r4, #4]
 800c360:	1ac0      	subs	r0, r0, r3
 800c362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c364:	b10b      	cbz	r3, 800c36a <__sflush_r+0x46>
 800c366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c368:	1ac0      	subs	r0, r0, r3
 800c36a:	2300      	movs	r3, #0
 800c36c:	4602      	mov	r2, r0
 800c36e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c370:	6a21      	ldr	r1, [r4, #32]
 800c372:	4628      	mov	r0, r5
 800c374:	47b0      	blx	r6
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	d106      	bne.n	800c38a <__sflush_r+0x66>
 800c37c:	6829      	ldr	r1, [r5, #0]
 800c37e:	291d      	cmp	r1, #29
 800c380:	d82c      	bhi.n	800c3dc <__sflush_r+0xb8>
 800c382:	4a2a      	ldr	r2, [pc, #168]	; (800c42c <__sflush_r+0x108>)
 800c384:	40ca      	lsrs	r2, r1
 800c386:	07d6      	lsls	r6, r2, #31
 800c388:	d528      	bpl.n	800c3dc <__sflush_r+0xb8>
 800c38a:	2200      	movs	r2, #0
 800c38c:	6062      	str	r2, [r4, #4]
 800c38e:	04d9      	lsls	r1, r3, #19
 800c390:	6922      	ldr	r2, [r4, #16]
 800c392:	6022      	str	r2, [r4, #0]
 800c394:	d504      	bpl.n	800c3a0 <__sflush_r+0x7c>
 800c396:	1c42      	adds	r2, r0, #1
 800c398:	d101      	bne.n	800c39e <__sflush_r+0x7a>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	b903      	cbnz	r3, 800c3a0 <__sflush_r+0x7c>
 800c39e:	6560      	str	r0, [r4, #84]	; 0x54
 800c3a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3a2:	602f      	str	r7, [r5, #0]
 800c3a4:	2900      	cmp	r1, #0
 800c3a6:	d0ca      	beq.n	800c33e <__sflush_r+0x1a>
 800c3a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ac:	4299      	cmp	r1, r3
 800c3ae:	d002      	beq.n	800c3b6 <__sflush_r+0x92>
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f7ff fc49 	bl	800bc48 <_free_r>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c3ba:	e7c1      	b.n	800c340 <__sflush_r+0x1c>
 800c3bc:	6a21      	ldr	r1, [r4, #32]
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	47b0      	blx	r6
 800c3c4:	1c41      	adds	r1, r0, #1
 800c3c6:	d1c7      	bne.n	800c358 <__sflush_r+0x34>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0c4      	beq.n	800c358 <__sflush_r+0x34>
 800c3ce:	2b1d      	cmp	r3, #29
 800c3d0:	d001      	beq.n	800c3d6 <__sflush_r+0xb2>
 800c3d2:	2b16      	cmp	r3, #22
 800c3d4:	d101      	bne.n	800c3da <__sflush_r+0xb6>
 800c3d6:	602f      	str	r7, [r5, #0]
 800c3d8:	e7b1      	b.n	800c33e <__sflush_r+0x1a>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	e7ad      	b.n	800c340 <__sflush_r+0x1c>
 800c3e4:	690f      	ldr	r7, [r1, #16]
 800c3e6:	2f00      	cmp	r7, #0
 800c3e8:	d0a9      	beq.n	800c33e <__sflush_r+0x1a>
 800c3ea:	0793      	lsls	r3, r2, #30
 800c3ec:	680e      	ldr	r6, [r1, #0]
 800c3ee:	bf08      	it	eq
 800c3f0:	694b      	ldreq	r3, [r1, #20]
 800c3f2:	600f      	str	r7, [r1, #0]
 800c3f4:	bf18      	it	ne
 800c3f6:	2300      	movne	r3, #0
 800c3f8:	eba6 0807 	sub.w	r8, r6, r7
 800c3fc:	608b      	str	r3, [r1, #8]
 800c3fe:	f1b8 0f00 	cmp.w	r8, #0
 800c402:	dd9c      	ble.n	800c33e <__sflush_r+0x1a>
 800c404:	6a21      	ldr	r1, [r4, #32]
 800c406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c408:	4643      	mov	r3, r8
 800c40a:	463a      	mov	r2, r7
 800c40c:	4628      	mov	r0, r5
 800c40e:	47b0      	blx	r6
 800c410:	2800      	cmp	r0, #0
 800c412:	dc06      	bgt.n	800c422 <__sflush_r+0xfe>
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c420:	e78e      	b.n	800c340 <__sflush_r+0x1c>
 800c422:	4407      	add	r7, r0
 800c424:	eba8 0800 	sub.w	r8, r8, r0
 800c428:	e7e9      	b.n	800c3fe <__sflush_r+0xda>
 800c42a:	bf00      	nop
 800c42c:	20400001 	.word	0x20400001

0800c430 <_fflush_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	690b      	ldr	r3, [r1, #16]
 800c434:	4605      	mov	r5, r0
 800c436:	460c      	mov	r4, r1
 800c438:	b913      	cbnz	r3, 800c440 <_fflush_r+0x10>
 800c43a:	2500      	movs	r5, #0
 800c43c:	4628      	mov	r0, r5
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	b118      	cbz	r0, 800c44a <_fflush_r+0x1a>
 800c442:	6983      	ldr	r3, [r0, #24]
 800c444:	b90b      	cbnz	r3, 800c44a <_fflush_r+0x1a>
 800c446:	f000 f887 	bl	800c558 <__sinit>
 800c44a:	4b14      	ldr	r3, [pc, #80]	; (800c49c <_fflush_r+0x6c>)
 800c44c:	429c      	cmp	r4, r3
 800c44e:	d11b      	bne.n	800c488 <_fflush_r+0x58>
 800c450:	686c      	ldr	r4, [r5, #4]
 800c452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0ef      	beq.n	800c43a <_fflush_r+0xa>
 800c45a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c45c:	07d0      	lsls	r0, r2, #31
 800c45e:	d404      	bmi.n	800c46a <_fflush_r+0x3a>
 800c460:	0599      	lsls	r1, r3, #22
 800c462:	d402      	bmi.n	800c46a <_fflush_r+0x3a>
 800c464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c466:	f000 f915 	bl	800c694 <__retarget_lock_acquire_recursive>
 800c46a:	4628      	mov	r0, r5
 800c46c:	4621      	mov	r1, r4
 800c46e:	f7ff ff59 	bl	800c324 <__sflush_r>
 800c472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c474:	07da      	lsls	r2, r3, #31
 800c476:	4605      	mov	r5, r0
 800c478:	d4e0      	bmi.n	800c43c <_fflush_r+0xc>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	059b      	lsls	r3, r3, #22
 800c47e:	d4dd      	bmi.n	800c43c <_fflush_r+0xc>
 800c480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c482:	f000 f908 	bl	800c696 <__retarget_lock_release_recursive>
 800c486:	e7d9      	b.n	800c43c <_fflush_r+0xc>
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <_fflush_r+0x70>)
 800c48a:	429c      	cmp	r4, r3
 800c48c:	d101      	bne.n	800c492 <_fflush_r+0x62>
 800c48e:	68ac      	ldr	r4, [r5, #8]
 800c490:	e7df      	b.n	800c452 <_fflush_r+0x22>
 800c492:	4b04      	ldr	r3, [pc, #16]	; (800c4a4 <_fflush_r+0x74>)
 800c494:	429c      	cmp	r4, r3
 800c496:	bf08      	it	eq
 800c498:	68ec      	ldreq	r4, [r5, #12]
 800c49a:	e7da      	b.n	800c452 <_fflush_r+0x22>
 800c49c:	0800cd54 	.word	0x0800cd54
 800c4a0:	0800cd74 	.word	0x0800cd74
 800c4a4:	0800cd34 	.word	0x0800cd34

0800c4a8 <std>:
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	b510      	push	{r4, lr}
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c4b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4b6:	6083      	str	r3, [r0, #8]
 800c4b8:	8181      	strh	r1, [r0, #12]
 800c4ba:	6643      	str	r3, [r0, #100]	; 0x64
 800c4bc:	81c2      	strh	r2, [r0, #14]
 800c4be:	6183      	str	r3, [r0, #24]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	2208      	movs	r2, #8
 800c4c4:	305c      	adds	r0, #92	; 0x5c
 800c4c6:	f7fd fd2d 	bl	8009f24 <memset>
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <std+0x38>)
 800c4cc:	6263      	str	r3, [r4, #36]	; 0x24
 800c4ce:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <std+0x3c>)
 800c4d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4d2:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <std+0x40>)
 800c4d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4d6:	4b05      	ldr	r3, [pc, #20]	; (800c4ec <std+0x44>)
 800c4d8:	6224      	str	r4, [r4, #32]
 800c4da:	6323      	str	r3, [r4, #48]	; 0x30
 800c4dc:	bd10      	pop	{r4, pc}
 800c4de:	bf00      	nop
 800c4e0:	0800c7ed 	.word	0x0800c7ed
 800c4e4:	0800c80f 	.word	0x0800c80f
 800c4e8:	0800c847 	.word	0x0800c847
 800c4ec:	0800c86b 	.word	0x0800c86b

0800c4f0 <_cleanup_r>:
 800c4f0:	4901      	ldr	r1, [pc, #4]	; (800c4f8 <_cleanup_r+0x8>)
 800c4f2:	f000 b8af 	b.w	800c654 <_fwalk_reent>
 800c4f6:	bf00      	nop
 800c4f8:	0800c431 	.word	0x0800c431

0800c4fc <__sfmoreglue>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	2268      	movs	r2, #104	; 0x68
 800c500:	1e4d      	subs	r5, r1, #1
 800c502:	4355      	muls	r5, r2
 800c504:	460e      	mov	r6, r1
 800c506:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c50a:	f7ff fc09 	bl	800bd20 <_malloc_r>
 800c50e:	4604      	mov	r4, r0
 800c510:	b140      	cbz	r0, 800c524 <__sfmoreglue+0x28>
 800c512:	2100      	movs	r1, #0
 800c514:	e9c0 1600 	strd	r1, r6, [r0]
 800c518:	300c      	adds	r0, #12
 800c51a:	60a0      	str	r0, [r4, #8]
 800c51c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c520:	f7fd fd00 	bl	8009f24 <memset>
 800c524:	4620      	mov	r0, r4
 800c526:	bd70      	pop	{r4, r5, r6, pc}

0800c528 <__sfp_lock_acquire>:
 800c528:	4801      	ldr	r0, [pc, #4]	; (800c530 <__sfp_lock_acquire+0x8>)
 800c52a:	f000 b8b3 	b.w	800c694 <__retarget_lock_acquire_recursive>
 800c52e:	bf00      	nop
 800c530:	200020dd 	.word	0x200020dd

0800c534 <__sfp_lock_release>:
 800c534:	4801      	ldr	r0, [pc, #4]	; (800c53c <__sfp_lock_release+0x8>)
 800c536:	f000 b8ae 	b.w	800c696 <__retarget_lock_release_recursive>
 800c53a:	bf00      	nop
 800c53c:	200020dd 	.word	0x200020dd

0800c540 <__sinit_lock_acquire>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__sinit_lock_acquire+0x8>)
 800c542:	f000 b8a7 	b.w	800c694 <__retarget_lock_acquire_recursive>
 800c546:	bf00      	nop
 800c548:	200020de 	.word	0x200020de

0800c54c <__sinit_lock_release>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__sinit_lock_release+0x8>)
 800c54e:	f000 b8a2 	b.w	800c696 <__retarget_lock_release_recursive>
 800c552:	bf00      	nop
 800c554:	200020de 	.word	0x200020de

0800c558 <__sinit>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	4604      	mov	r4, r0
 800c55c:	f7ff fff0 	bl	800c540 <__sinit_lock_acquire>
 800c560:	69a3      	ldr	r3, [r4, #24]
 800c562:	b11b      	cbz	r3, 800c56c <__sinit+0x14>
 800c564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c568:	f7ff bff0 	b.w	800c54c <__sinit_lock_release>
 800c56c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c570:	6523      	str	r3, [r4, #80]	; 0x50
 800c572:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <__sinit+0x68>)
 800c574:	4a13      	ldr	r2, [pc, #76]	; (800c5c4 <__sinit+0x6c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	62a2      	str	r2, [r4, #40]	; 0x28
 800c57a:	42a3      	cmp	r3, r4
 800c57c:	bf04      	itt	eq
 800c57e:	2301      	moveq	r3, #1
 800c580:	61a3      	streq	r3, [r4, #24]
 800c582:	4620      	mov	r0, r4
 800c584:	f000 f820 	bl	800c5c8 <__sfp>
 800c588:	6060      	str	r0, [r4, #4]
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 f81c 	bl	800c5c8 <__sfp>
 800c590:	60a0      	str	r0, [r4, #8]
 800c592:	4620      	mov	r0, r4
 800c594:	f000 f818 	bl	800c5c8 <__sfp>
 800c598:	2200      	movs	r2, #0
 800c59a:	60e0      	str	r0, [r4, #12]
 800c59c:	2104      	movs	r1, #4
 800c59e:	6860      	ldr	r0, [r4, #4]
 800c5a0:	f7ff ff82 	bl	800c4a8 <std>
 800c5a4:	68a0      	ldr	r0, [r4, #8]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	2109      	movs	r1, #9
 800c5aa:	f7ff ff7d 	bl	800c4a8 <std>
 800c5ae:	68e0      	ldr	r0, [r4, #12]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	2112      	movs	r1, #18
 800c5b4:	f7ff ff78 	bl	800c4a8 <std>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	61a3      	str	r3, [r4, #24]
 800c5bc:	e7d2      	b.n	800c564 <__sinit+0xc>
 800c5be:	bf00      	nop
 800c5c0:	0800c9b8 	.word	0x0800c9b8
 800c5c4:	0800c4f1 	.word	0x0800c4f1

0800c5c8 <__sfp>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	f7ff ffac 	bl	800c528 <__sfp_lock_acquire>
 800c5d0:	4b1e      	ldr	r3, [pc, #120]	; (800c64c <__sfp+0x84>)
 800c5d2:	681e      	ldr	r6, [r3, #0]
 800c5d4:	69b3      	ldr	r3, [r6, #24]
 800c5d6:	b913      	cbnz	r3, 800c5de <__sfp+0x16>
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f7ff ffbd 	bl	800c558 <__sinit>
 800c5de:	3648      	adds	r6, #72	; 0x48
 800c5e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	d503      	bpl.n	800c5f0 <__sfp+0x28>
 800c5e8:	6833      	ldr	r3, [r6, #0]
 800c5ea:	b30b      	cbz	r3, 800c630 <__sfp+0x68>
 800c5ec:	6836      	ldr	r6, [r6, #0]
 800c5ee:	e7f7      	b.n	800c5e0 <__sfp+0x18>
 800c5f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5f4:	b9d5      	cbnz	r5, 800c62c <__sfp+0x64>
 800c5f6:	4b16      	ldr	r3, [pc, #88]	; (800c650 <__sfp+0x88>)
 800c5f8:	60e3      	str	r3, [r4, #12]
 800c5fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5fe:	6665      	str	r5, [r4, #100]	; 0x64
 800c600:	f000 f847 	bl	800c692 <__retarget_lock_init_recursive>
 800c604:	f7ff ff96 	bl	800c534 <__sfp_lock_release>
 800c608:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c60c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c610:	6025      	str	r5, [r4, #0]
 800c612:	61a5      	str	r5, [r4, #24]
 800c614:	2208      	movs	r2, #8
 800c616:	4629      	mov	r1, r5
 800c618:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c61c:	f7fd fc82 	bl	8009f24 <memset>
 800c620:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c624:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c628:	4620      	mov	r0, r4
 800c62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c62c:	3468      	adds	r4, #104	; 0x68
 800c62e:	e7d9      	b.n	800c5e4 <__sfp+0x1c>
 800c630:	2104      	movs	r1, #4
 800c632:	4638      	mov	r0, r7
 800c634:	f7ff ff62 	bl	800c4fc <__sfmoreglue>
 800c638:	4604      	mov	r4, r0
 800c63a:	6030      	str	r0, [r6, #0]
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d1d5      	bne.n	800c5ec <__sfp+0x24>
 800c640:	f7ff ff78 	bl	800c534 <__sfp_lock_release>
 800c644:	230c      	movs	r3, #12
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	e7ee      	b.n	800c628 <__sfp+0x60>
 800c64a:	bf00      	nop
 800c64c:	0800c9b8 	.word	0x0800c9b8
 800c650:	ffff0001 	.word	0xffff0001

0800c654 <_fwalk_reent>:
 800c654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c658:	4606      	mov	r6, r0
 800c65a:	4688      	mov	r8, r1
 800c65c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c660:	2700      	movs	r7, #0
 800c662:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c666:	f1b9 0901 	subs.w	r9, r9, #1
 800c66a:	d505      	bpl.n	800c678 <_fwalk_reent+0x24>
 800c66c:	6824      	ldr	r4, [r4, #0]
 800c66e:	2c00      	cmp	r4, #0
 800c670:	d1f7      	bne.n	800c662 <_fwalk_reent+0xe>
 800c672:	4638      	mov	r0, r7
 800c674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c678:	89ab      	ldrh	r3, [r5, #12]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d907      	bls.n	800c68e <_fwalk_reent+0x3a>
 800c67e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c682:	3301      	adds	r3, #1
 800c684:	d003      	beq.n	800c68e <_fwalk_reent+0x3a>
 800c686:	4629      	mov	r1, r5
 800c688:	4630      	mov	r0, r6
 800c68a:	47c0      	blx	r8
 800c68c:	4307      	orrs	r7, r0
 800c68e:	3568      	adds	r5, #104	; 0x68
 800c690:	e7e9      	b.n	800c666 <_fwalk_reent+0x12>

0800c692 <__retarget_lock_init_recursive>:
 800c692:	4770      	bx	lr

0800c694 <__retarget_lock_acquire_recursive>:
 800c694:	4770      	bx	lr

0800c696 <__retarget_lock_release_recursive>:
 800c696:	4770      	bx	lr

0800c698 <__swhatbuf_r>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	460e      	mov	r6, r1
 800c69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a0:	2900      	cmp	r1, #0
 800c6a2:	b096      	sub	sp, #88	; 0x58
 800c6a4:	4614      	mov	r4, r2
 800c6a6:	461d      	mov	r5, r3
 800c6a8:	da08      	bge.n	800c6bc <__swhatbuf_r+0x24>
 800c6aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	061a      	lsls	r2, r3, #24
 800c6b4:	d410      	bmi.n	800c6d8 <__swhatbuf_r+0x40>
 800c6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ba:	e00e      	b.n	800c6da <__swhatbuf_r+0x42>
 800c6bc:	466a      	mov	r2, sp
 800c6be:	f000 f8fb 	bl	800c8b8 <_fstat_r>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	dbf1      	blt.n	800c6aa <__swhatbuf_r+0x12>
 800c6c6:	9a01      	ldr	r2, [sp, #4]
 800c6c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6d0:	425a      	negs	r2, r3
 800c6d2:	415a      	adcs	r2, r3
 800c6d4:	602a      	str	r2, [r5, #0]
 800c6d6:	e7ee      	b.n	800c6b6 <__swhatbuf_r+0x1e>
 800c6d8:	2340      	movs	r3, #64	; 0x40
 800c6da:	2000      	movs	r0, #0
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	b016      	add	sp, #88	; 0x58
 800c6e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6e4 <__smakebuf_r>:
 800c6e4:	898b      	ldrh	r3, [r1, #12]
 800c6e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6e8:	079d      	lsls	r5, r3, #30
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	d507      	bpl.n	800c700 <__smakebuf_r+0x1c>
 800c6f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6f4:	6023      	str	r3, [r4, #0]
 800c6f6:	6123      	str	r3, [r4, #16]
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	6163      	str	r3, [r4, #20]
 800c6fc:	b002      	add	sp, #8
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	ab01      	add	r3, sp, #4
 800c702:	466a      	mov	r2, sp
 800c704:	f7ff ffc8 	bl	800c698 <__swhatbuf_r>
 800c708:	9900      	ldr	r1, [sp, #0]
 800c70a:	4605      	mov	r5, r0
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7ff fb07 	bl	800bd20 <_malloc_r>
 800c712:	b948      	cbnz	r0, 800c728 <__smakebuf_r+0x44>
 800c714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c718:	059a      	lsls	r2, r3, #22
 800c71a:	d4ef      	bmi.n	800c6fc <__smakebuf_r+0x18>
 800c71c:	f023 0303 	bic.w	r3, r3, #3
 800c720:	f043 0302 	orr.w	r3, r3, #2
 800c724:	81a3      	strh	r3, [r4, #12]
 800c726:	e7e3      	b.n	800c6f0 <__smakebuf_r+0xc>
 800c728:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <__smakebuf_r+0x7c>)
 800c72a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	6020      	str	r0, [r4, #0]
 800c730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c734:	81a3      	strh	r3, [r4, #12]
 800c736:	9b00      	ldr	r3, [sp, #0]
 800c738:	6163      	str	r3, [r4, #20]
 800c73a:	9b01      	ldr	r3, [sp, #4]
 800c73c:	6120      	str	r0, [r4, #16]
 800c73e:	b15b      	cbz	r3, 800c758 <__smakebuf_r+0x74>
 800c740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c744:	4630      	mov	r0, r6
 800c746:	f000 f8c9 	bl	800c8dc <_isatty_r>
 800c74a:	b128      	cbz	r0, 800c758 <__smakebuf_r+0x74>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f023 0303 	bic.w	r3, r3, #3
 800c752:	f043 0301 	orr.w	r3, r3, #1
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	89a0      	ldrh	r0, [r4, #12]
 800c75a:	4305      	orrs	r5, r0
 800c75c:	81a5      	strh	r5, [r4, #12]
 800c75e:	e7cd      	b.n	800c6fc <__smakebuf_r+0x18>
 800c760:	0800c4f1 	.word	0x0800c4f1

0800c764 <_raise_r>:
 800c764:	291f      	cmp	r1, #31
 800c766:	b538      	push	{r3, r4, r5, lr}
 800c768:	4604      	mov	r4, r0
 800c76a:	460d      	mov	r5, r1
 800c76c:	d904      	bls.n	800c778 <_raise_r+0x14>
 800c76e:	2316      	movs	r3, #22
 800c770:	6003      	str	r3, [r0, #0]
 800c772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c77a:	b112      	cbz	r2, 800c782 <_raise_r+0x1e>
 800c77c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c780:	b94b      	cbnz	r3, 800c796 <_raise_r+0x32>
 800c782:	4620      	mov	r0, r4
 800c784:	f000 f830 	bl	800c7e8 <_getpid_r>
 800c788:	462a      	mov	r2, r5
 800c78a:	4601      	mov	r1, r0
 800c78c:	4620      	mov	r0, r4
 800c78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c792:	f000 b817 	b.w	800c7c4 <_kill_r>
 800c796:	2b01      	cmp	r3, #1
 800c798:	d00a      	beq.n	800c7b0 <_raise_r+0x4c>
 800c79a:	1c59      	adds	r1, r3, #1
 800c79c:	d103      	bne.n	800c7a6 <_raise_r+0x42>
 800c79e:	2316      	movs	r3, #22
 800c7a0:	6003      	str	r3, [r0, #0]
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	e7e7      	b.n	800c776 <_raise_r+0x12>
 800c7a6:	2400      	movs	r4, #0
 800c7a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	4798      	blx	r3
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	e7e0      	b.n	800c776 <_raise_r+0x12>

0800c7b4 <raise>:
 800c7b4:	4b02      	ldr	r3, [pc, #8]	; (800c7c0 <raise+0xc>)
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	f7ff bfd3 	b.w	800c764 <_raise_r>
 800c7be:	bf00      	nop
 800c7c0:	200000fc 	.word	0x200000fc

0800c7c4 <_kill_r>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	4d07      	ldr	r5, [pc, #28]	; (800c7e4 <_kill_r+0x20>)
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	4608      	mov	r0, r1
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	602b      	str	r3, [r5, #0]
 800c7d2:	f7f5 fb09 	bl	8001de8 <_kill>
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	d102      	bne.n	800c7e0 <_kill_r+0x1c>
 800c7da:	682b      	ldr	r3, [r5, #0]
 800c7dc:	b103      	cbz	r3, 800c7e0 <_kill_r+0x1c>
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	bd38      	pop	{r3, r4, r5, pc}
 800c7e2:	bf00      	nop
 800c7e4:	200020d8 	.word	0x200020d8

0800c7e8 <_getpid_r>:
 800c7e8:	f7f5 baf6 	b.w	8001dd8 <_getpid>

0800c7ec <__sread>:
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f4:	f000 f894 	bl	800c920 <_read_r>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	bfab      	itete	ge
 800c7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c800:	181b      	addge	r3, r3, r0
 800c802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c806:	bfac      	ite	ge
 800c808:	6563      	strge	r3, [r4, #84]	; 0x54
 800c80a:	81a3      	strhlt	r3, [r4, #12]
 800c80c:	bd10      	pop	{r4, pc}

0800c80e <__swrite>:
 800c80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c812:	461f      	mov	r7, r3
 800c814:	898b      	ldrh	r3, [r1, #12]
 800c816:	05db      	lsls	r3, r3, #23
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	4616      	mov	r6, r2
 800c81e:	d505      	bpl.n	800c82c <__swrite+0x1e>
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	2302      	movs	r3, #2
 800c826:	2200      	movs	r2, #0
 800c828:	f000 f868 	bl	800c8fc <_lseek_r>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	4632      	mov	r2, r6
 800c83a:	463b      	mov	r3, r7
 800c83c:	4628      	mov	r0, r5
 800c83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	f000 b817 	b.w	800c874 <_write_r>

0800c846 <__sseek>:
 800c846:	b510      	push	{r4, lr}
 800c848:	460c      	mov	r4, r1
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 f855 	bl	800c8fc <_lseek_r>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	bf15      	itete	ne
 800c858:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c862:	81a3      	strheq	r3, [r4, #12]
 800c864:	bf18      	it	ne
 800c866:	81a3      	strhne	r3, [r4, #12]
 800c868:	bd10      	pop	{r4, pc}

0800c86a <__sclose>:
 800c86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86e:	f000 b813 	b.w	800c898 <_close_r>
	...

0800c874 <_write_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d07      	ldr	r5, [pc, #28]	; (800c894 <_write_r+0x20>)
 800c878:	4604      	mov	r4, r0
 800c87a:	4608      	mov	r0, r1
 800c87c:	4611      	mov	r1, r2
 800c87e:	2200      	movs	r2, #0
 800c880:	602a      	str	r2, [r5, #0]
 800c882:	461a      	mov	r2, r3
 800c884:	f7f5 fae7 	bl	8001e56 <_write>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_write_r+0x1e>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_write_r+0x1e>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	200020d8 	.word	0x200020d8

0800c898 <_close_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d06      	ldr	r5, [pc, #24]	; (800c8b4 <_close_r+0x1c>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	f7f5 faf3 	bl	8001e8e <_close>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_close_r+0x1a>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_close_r+0x1a>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	200020d8 	.word	0x200020d8

0800c8b8 <_fstat_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	; (800c8d8 <_fstat_r+0x20>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	f7f5 faee 	bl	8001ea6 <_fstat>
 800c8ca:	1c43      	adds	r3, r0, #1
 800c8cc:	d102      	bne.n	800c8d4 <_fstat_r+0x1c>
 800c8ce:	682b      	ldr	r3, [r5, #0]
 800c8d0:	b103      	cbz	r3, 800c8d4 <_fstat_r+0x1c>
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	bd38      	pop	{r3, r4, r5, pc}
 800c8d6:	bf00      	nop
 800c8d8:	200020d8 	.word	0x200020d8

0800c8dc <_isatty_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d06      	ldr	r5, [pc, #24]	; (800c8f8 <_isatty_r+0x1c>)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	f7f5 faed 	bl	8001ec6 <_isatty>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_isatty_r+0x1a>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_isatty_r+0x1a>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	200020d8 	.word	0x200020d8

0800c8fc <_lseek_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d07      	ldr	r5, [pc, #28]	; (800c91c <_lseek_r+0x20>)
 800c900:	4604      	mov	r4, r0
 800c902:	4608      	mov	r0, r1
 800c904:	4611      	mov	r1, r2
 800c906:	2200      	movs	r2, #0
 800c908:	602a      	str	r2, [r5, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f7f5 fae6 	bl	8001edc <_lseek>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_lseek_r+0x1e>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_lseek_r+0x1e>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	200020d8 	.word	0x200020d8

0800c920 <_read_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d07      	ldr	r5, [pc, #28]	; (800c940 <_read_r+0x20>)
 800c924:	4604      	mov	r4, r0
 800c926:	4608      	mov	r0, r1
 800c928:	4611      	mov	r1, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	602a      	str	r2, [r5, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	f7f5 fa74 	bl	8001e1c <_read>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	d102      	bne.n	800c93e <_read_r+0x1e>
 800c938:	682b      	ldr	r3, [r5, #0]
 800c93a:	b103      	cbz	r3, 800c93e <_read_r+0x1e>
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	bd38      	pop	{r3, r4, r5, pc}
 800c940:	200020d8 	.word	0x200020d8

0800c944 <_init>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	bf00      	nop
 800c948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94a:	bc08      	pop	{r3}
 800c94c:	469e      	mov	lr, r3
 800c94e:	4770      	bx	lr

0800c950 <_fini>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	bf00      	nop
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr
