
neptune-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f40  080150f8  080150f8  000250f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016038  08016038  000303b8  2**0
                  CONTENTS
  4 .ARM          00000008  08016038  08016038  00026038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016040  08016040  000303b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016040  08016040  00026040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016044  08016044  00026044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  08016048  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a44  200003b8  08016400  000303b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006dfc  08016400  00036dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002820b  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f83  00000000  00000000  000585f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe8  00000000  00000000  0005e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  00060560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4fc  00000000  00000000  00062238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255db  00000000  00000000  00081734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acde6  00000000  00000000  000a6d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00153af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009860  00000000  00000000  00153bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001b61  00000000  00000000  0015d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003b8 	.word	0x200003b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080150dc 	.word	0x080150dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003bc 	.word	0x200003bc
 80001dc:	080150dc 	.word	0x080150dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <BMX055_init>:
/**
 @brief Begin Device
 @retval true normaly done
 @retval false device error
 */
bool BMX055_init(BMX055_Handle *bmx055) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	// Set CS pins HIGH
	HAL_GPIO_WritePin(bmx055->acc_CS_port, bmx055->acc_CS_pin, GPIO_PIN_SET);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6858      	ldr	r0, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	891b      	ldrh	r3, [r3, #8]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f004 fe86 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->gyro_CS_port, bmx055->gyro_CS_pin, GPIO_PIN_SET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6918      	ldr	r0, [r3, #16]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	8a9b      	ldrh	r3, [r3, #20]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f004 fe7e 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->mag_CS_port, bmx055->mag_CS_pin, GPIO_PIN_SET);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69d8      	ldr	r0, [r3, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8c1b      	ldrh	r3, [r3, #32]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f004 fe76 	bl	8005c80 <HAL_GPIO_WritePin>

	// Set accel scale factor and map to m/s^2
	// 12bit (4096) accelerometer maps to specified range. This is used to calculate scale factor.
	// Note: +-16g is range of 32g
	switch (bmx055->acc_range) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a9b      	ldrb	r3, [r3, #10]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d826      	bhi.n	8000fec <BMX055_init+0x90>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <BMX055_init+0x48>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fe5 	.word	0x08000fe5
 8000fa8:	08000fed 	.word	0x08000fed
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fed 	.word	0x08000fed
 8000fb4:	08000fed 	.word	0x08000fed
 8000fb8:	08000fd5 	.word	0x08000fd5
 8000fbc:	08000fed 	.word	0x08000fed
 8000fc0:	08000fed 	.word	0x08000fed
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08000fcd 	.word	0x08000fcd
	case BMX055_ACC_RANGE_16:
		// 16g
		bmx055->acc_rescale = (2.0 * 16.0 / 4096.0) * 9.81;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <BMX055_init+0x118>)
 8000fd0:	60da      	str	r2, [r3, #12]
		break;
 8000fd2:	e00b      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_8:
		// 8g
		bmx055->acc_rescale = (2.0 * 8.0 / 4096.0) * 9.81;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <BMX055_init+0x11c>)
 8000fd8:	60da      	str	r2, [r3, #12]
		break;
 8000fda:	e007      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_4:
		// 4g
		bmx055->acc_rescale = (2.0 * 4.0 / 4096.0) * 9.81;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <BMX055_init+0x120>)
 8000fe0:	60da      	str	r2, [r3, #12]
		break;
 8000fe2:	e003      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_2:
		// 2g
		bmx055->acc_rescale = (2.0 * 2.0 / 4096.0) * 9.81;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a26      	ldr	r2, [pc, #152]	; (8001080 <BMX055_init+0x124>)
 8000fe8:	60da      	str	r2, [r3, #12]
		break;
 8000fea:	bf00      	nop
	}

	// Set gyro scale factor for map to degrees and map from deg to rad
	// 16bit (65536) gyro maps to specified range. This is used to calculate scale factor.
	// Note: +-2000 deg/s is range of 4000 deg/s
	switch (bmx055->gyro_range) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7d9b      	ldrb	r3, [r3, #22]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d821      	bhi.n	8001038 <BMX055_init+0xdc>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <BMX055_init+0xa0>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	08001011 	.word	0x08001011
 8001000:	08001019 	.word	0x08001019
 8001004:	08001021 	.word	0x08001021
 8001008:	08001029 	.word	0x08001029
 800100c:	08001031 	.word	0x08001031
	case BMX055_GYRO_RANGE_16_4:
		// 2000
		bmx055->gyro_rescale = (2.0 * 2000.0 / 65536.0) * (M_PI / 180.0);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <BMX055_init+0x128>)
 8001014:	619a      	str	r2, [r3, #24]
		break;
 8001016:	e00f      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_32_8:
		// 1000
		bmx055->gyro_rescale = (2.0 * 1000.0 / 65536.0) * (M_PI / 180.0);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <BMX055_init+0x12c>)
 800101c:	619a      	str	r2, [r3, #24]
		break;
 800101e:	e00b      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_65_6:
		// 500
		bmx055->gyro_rescale = (2.0 * 500.0 / 65536.0) * (M_PI / 180.0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <BMX055_init+0x130>)
 8001024:	619a      	str	r2, [r3, #24]
		break;
 8001026:	e007      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_131_2:
		// 250
		bmx055->gyro_rescale = (2.0 * 250.0 / 65536.0) * (M_PI / 180.0);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <BMX055_init+0x134>)
 800102c:	619a      	str	r2, [r3, #24]
		break;
 800102e:	e003      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_262_4:
		// 125
		bmx055->gyro_rescale = (2.0 * 125.0 / 65536.0) * (M_PI / 180.0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <BMX055_init+0x138>)
 8001034:	619a      	str	r2, [r3, #24]
		break;
 8001036:	bf00      	nop
	}

	// Set mag scale factor to units of uT
	// XY axes are 12bit (4096) and Z axis is 15bit (32768).
	// XY axis maximum value is +-1300uT and Z axis maximum value is +-2500uT
	bmx055->mag_rescale_xy = (2.0*1300.0 / 4096.0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <BMX055_init+0x13c>)
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
	bmx055->mag_rescale_z = (2.0*2500.0 / 32768.0);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <BMX055_init+0x140>)
 8001042:	629a      	str	r2, [r3, #40]	; 0x28


	if (BMX055_searchDevice(bmx055)) {
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f82b 	bl	80010a0 <BMX055_searchDevice>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <BMX055_init+0x10e>
		BMX055_configuration(bmx055);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f878 	bl	8001146 <BMX055_configuration>
//		uint8_t res = perform_adv_self_test(bmx055);
		if (!perform_normal_self_test(bmx055))
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fd1b 	bl	8001a92 <perform_normal_self_test>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <BMX055_init+0x10a>
			return true;
 8001062:	2301      	movs	r3, #1
 8001064:	e002      	b.n	800106c <BMX055_init+0x110>
		else
			return false;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <BMX055_init+0x110>
	} else {
		return false;
 800106a:	2300      	movs	r3, #0
	}
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	3d9cf5c3 	.word	0x3d9cf5c3
 8001078:	3d1cf5c3 	.word	0x3d1cf5c3
 800107c:	3c9cf5c3 	.word	0x3c9cf5c3
 8001080:	3c1cf5c3 	.word	0x3c1cf5c3
 8001084:	3a8ba058 	.word	0x3a8ba058
 8001088:	3a0ba058 	.word	0x3a0ba058
 800108c:	398ba058 	.word	0x398ba058
 8001090:	390ba058 	.word	0x390ba058
 8001094:	388ba058 	.word	0x388ba058
 8001098:	3f228000 	.word	0x3f228000
 800109c:	3e1c4000 	.word	0x3e1c4000

080010a0 <BMX055_searchDevice>:
/**
 * @brief Search bmx055
 * @retval true  Found Device
 * @retval false : Not Found Device
 */
bool BMX055_searchDevice(BMX055_Handle *bmx055) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t acc_device = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	uint8_t mag_device = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

	// Mag SoftReset
	uint8_t data = 0x82;
 80010b0:	2382      	movs	r3, #130	; 0x82
 80010b2:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69d9      	ldr	r1, [r3, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8c1a      	ldrh	r2, [r3, #32]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030d 	add.w	r3, r7, #13
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	234b      	movs	r3, #75	; 0x4b
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fc80 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(2);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f004 f8aa 	bl	8005228 <HAL_Delay>

	/* Mag Setting */
	// set sleep mode
	data = BMX055_MAG_POW_CTL_SLEEP_MODE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69d9      	ldr	r1, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	8c1a      	ldrh	r2, [r3, #32]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f107 030d 	add.w	r3, r7, #13
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	234b      	movs	r3, #75	; 0x4b
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fc6e 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(3);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f004 f898 	bl	8005228 <HAL_Delay>

	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_WHO_AM_I_REG, &acc_device, 1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6859      	ldr	r1, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	891a      	ldrh	r2, [r3, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fc8a 	bl	8001a26 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_CHIP_ID, &mag_device, 1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69d9      	ldr	r1, [r3, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	8c1a      	ldrh	r2, [r3, #32]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f107 030e 	add.w	r3, r7, #14
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fc7d 	bl	8001a26 <BMX055_readSPI>

	if (acc_device == BMX055_ACC_DEVICE && mag_device == BMX055_MAG_DEVICE) {
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2bfa      	cmp	r3, #250	; 0xfa
 8001130:	d104      	bne.n	800113c <BMX055_searchDevice+0x9c>
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	2b32      	cmp	r3, #50	; 0x32
 8001136:	d101      	bne.n	800113c <BMX055_searchDevice+0x9c>
		return true;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <BMX055_searchDevice+0x9e>
	} else {
		return false;
 800113c:	2300      	movs	r3, #0
	}
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <BMX055_configuration>:

/**
 * @brief Set Config
 */
void BMX055_configuration(BMX055_Handle *bmx055) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af02      	add	r7, sp, #8
 800114c:	6078      	str	r0, [r7, #4]
	/* SoftReset */
	uint8_t data = BMX055_INITIATED_SOFT_RESET;
 800114e:	23b6      	movs	r3, #182	; 0xb6
 8001150:	73fb      	strb	r3, [r7, #15]
	// Accel SoftReset
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_RESET_REG, &data, 1);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6859      	ldr	r1, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	891a      	ldrh	r2, [r3, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2314      	movs	r3, #20
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fc31 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 800116c:	2002      	movs	r0, #2
 800116e:	f004 f85b 	bl	8005228 <HAL_Delay>
	// Gyro SoftReset
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_RESET_REG, &data, 1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8a9a      	ldrh	r2, [r3, #20]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2314      	movs	r3, #20
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fc21 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 800118c:	2002      	movs	r0, #2
 800118e:	f004 f84b 	bl	8005228 <HAL_Delay>

	// adv.st, DataRate, OperationMode, SelfTest (NomalMode)
	data = bmx055->mag_data_rate;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001198:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69d9      	ldr	r1, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	8c1a      	ldrh	r2, [r3, #32]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 030f 	add.w	r3, r7, #15
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	234c      	movs	r3, #76	; 0x4c
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fc0d 	bl	80019ce <BMX055_writeSPI>
	// Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
	data = 0x04;
 80011b4:	2304      	movs	r3, #4
 80011b6:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_XY_REG, &data, 1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8c1a      	ldrh	r2, [r3, #32]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2351      	movs	r3, #81	; 0x51
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fbfe 	bl	80019ce <BMX055_writeSPI>
	// Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
	data = 0x0F;
 80011d2:	230f      	movs	r3, #15
 80011d4:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_Z_REG, &data, 1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69d9      	ldr	r1, [r3, #28]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	8c1a      	ldrh	r2, [r3, #32]
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f107 030f 	add.w	r3, r7, #15
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2352      	movs	r3, #82	; 0x52
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fbef 	bl	80019ce <BMX055_writeSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69d9      	ldr	r1, [r3, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	8c1a      	ldrh	r2, [r3, #32]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	234c      	movs	r3, #76	; 0x4c
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fc0e 	bl	8001a26 <BMX055_readSPI>

	/* Accel Setting */
	// Select Accel PMU Range
	data = bmx055->acc_range;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_RANGE_REG, &data, 1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891a      	ldrh	r2, [r3, #8]
 8001218:	2301      	movs	r3, #1
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	f107 030f 	add.w	r3, r7, #15
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	230f      	movs	r3, #15
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fbd2 	bl	80019ce <BMX055_writeSPI>
	// Select Accel PMU_BW
	data = bmx055->acc_range;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a9b      	ldrb	r3, [r3, #10]
 800122e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_BW_REG, &data, 1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	891a      	ldrh	r2, [r3, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 030f 	add.w	r3, r7, #15
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2310      	movs	r3, #16
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fbc2 	bl	80019ce <BMX055_writeSPI>
	// Select Accel PMU_LPW  (NomalMode, SleepDuration 0.5ms)
	data = BMX055_ACC_PMU_LPW_MODE_NOMAL | BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_LPW_REG, &data, 1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6859      	ldr	r1, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891a      	ldrh	r2, [r3, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f107 030f 	add.w	r3, r7, #15
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2311      	movs	r3, #17
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fbb3 	bl	80019ce <BMX055_writeSPI>

	/* Gyro Setting */
	// Select Gyro Range
	data = bmx055->gyro_range;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7d9b      	ldrb	r3, [r3, #22]
 800126c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_RANGE_REG, &data, 1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	8a9a      	ldrh	r2, [r3, #20]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	230f      	movs	r3, #15
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fba3 	bl	80019ce <BMX055_writeSPI>
	// Select Gyro BW
	data = bmx055->gyro_bandwidth;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7ddb      	ldrb	r3, [r3, #23]
 800128c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_BW_REG, &data, 1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8a9a      	ldrh	r2, [r3, #20]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2310      	movs	r3, #16
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fb93 	bl	80019ce <BMX055_writeSPI>
	// Select Gyro LPM1 (NomalMode, SleepDuration 2ms)
	data = BMX055_GYRO_LPM1_MODE_NOMAL | BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_LPM1_REG, &data, 1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6919      	ldr	r1, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	8a9a      	ldrh	r2, [r3, #20]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 030f 	add.w	r3, r7, #15
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2311      	movs	r3, #17
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fb84 	bl	80019ce <BMX055_writeSPI>

	HAL_Delay(200);
 80012c6:	20c8      	movs	r0, #200	; 0xc8
 80012c8:	f003 ffae 	bl	8005228 <HAL_Delay>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <BMX055_readAccel>:

/**
 * @brief Read Accel
 * @param [out] *accl : accel value  (X-accel : accl[0], Y-accel : accl[1], Z-accel : accl[2])
 */
void BMX055_readAccel(BMX055_Handle *bmx055, float *accl) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b08d      	sub	sp, #52	; 0x34
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	uint16_t accl_data[6] = { 0 };
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
	int accel_read[3];

	// read accel value
	for (int i = 0; i < 6; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	e017      	b.n	8001320 <BMX055_readAccel+0x4c>
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8918      	ldrh	r0, [r3, #8]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3302      	adds	r3, #2
 80012fe:	b2dc      	uxtb	r4, r3
		BMX055_ACC_DATA_START_REG + i, &accl_data[i], 1);
 8001300:	f107 0218 	add.w	r2, r7, #24
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 800130a:	2201      	movs	r2, #1
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4623      	mov	r3, r4
 8001312:	4602      	mov	r2, r0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fb86 	bl	8001a26 <BMX055_readSPI>
	for (int i = 0; i < 6; i++) {
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b05      	cmp	r3, #5
 8001324:	dde4      	ble.n	80012f0 <BMX055_readAccel+0x1c>
	}

	// conv data  accel:12bit
	accel_read[0] = ((accl_data[1] << 4) | (accl_data[0] >> 4));
 8001326:	8b7b      	ldrh	r3, [r7, #26]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	8b3a      	ldrh	r2, [r7, #24]
 800132c:	0912      	lsrs	r2, r2, #4
 800132e:	b292      	uxth	r2, r2
 8001330:	4313      	orrs	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

	if (accel_read[0] > 2047) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133a:	db03      	blt.n	8001344 <BMX055_readAccel+0x70>
		accel_read[0] -= 4096;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001342:	60fb      	str	r3, [r7, #12]
	}
	accl[0] = accel_read[0] * bmx055->acc_rescale;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a03 	vldr	s15, [r3, #12]
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	edc3 7a00 	vstr	s15, [r3]

	accel_read[1] = ((accl_data[3] << 4) | (accl_data[2] >> 4));
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	8bba      	ldrh	r2, [r7, #28]
 8001364:	0912      	lsrs	r2, r2, #4
 8001366:	b292      	uxth	r2, r2
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
	if (accel_read[1] > 2047) {
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001372:	db03      	blt.n	800137c <BMX055_readAccel+0xa8>
		accel_read[1] -= 4096;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800137a:	613b      	str	r3, [r7, #16]
	}
	accl[1] = accel_read[1] * bmx055->acc_rescale;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edd3 7a03 	vldr	s15, [r3, #12]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	edc3 7a00 	vstr	s15, [r3]

	accel_read[2] = ((accl_data[5] << 4) | (accl_data[4] >> 4));
 8001398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	8c3a      	ldrh	r2, [r7, #32]
 800139e:	0912      	lsrs	r2, r2, #4
 80013a0:	b292      	uxth	r2, r2
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
	if (accel_read[2] > 2047) {
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013ac:	db03      	blt.n	80013b6 <BMX055_readAccel+0xe2>
		accel_read[2] -= 4096;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80013b4:	617b      	str	r3, [r7, #20]
	}
	accl[2] = accel_read[2] * bmx055->acc_rescale;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3308      	adds	r3, #8
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc3 7a00 	vstr	s15, [r3]
}
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <BMX055_readGyro>:

/**
 * @brief Read Gyro
 * @param [out] *gyro gyro value (X-gyro: gyro[0], Y-gyro: gyro[1], Z-gyro: gyro[2])
 */
void BMX055_readGyro(BMX055_Handle *bmx055, float *gyro) {
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b08b      	sub	sp, #44	; 0x2c
 80013de:	af02      	add	r7, sp, #8
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
	uint8_t gyro_data[6];
	int gyro_read[3];

	// read gyro value
	for (int i = 0; i < 6; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	e016      	b.n	8001418 <BMX055_readGyro+0x3e>
		BMX055_readSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6919      	ldr	r1, [r3, #16]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	8a98      	ldrh	r0, [r3, #20]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3302      	adds	r3, #2
 80013f8:	b2dc      	uxtb	r4, r3
 80013fa:	f107 0214 	add.w	r2, r7, #20
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	2201      	movs	r2, #1
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	4602      	mov	r2, r0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fb0a 	bl	8001a26 <BMX055_readSPI>
	for (int i = 0; i < 6; i++) {
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b05      	cmp	r3, #5
 800141c:	dde5      	ble.n	80013ea <BMX055_readGyro+0x10>
		BMX055_GYRO_DATA_START_REG + i, &gyro_data[i], 1);
	}

	// conv data  gyro:16bit
	gyro_read[0] = ((gyro_data[1] << 8) + gyro_data[0]);
 800141e:	7d7b      	ldrb	r3, [r7, #21]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	7d3a      	ldrb	r2, [r7, #20]
 8001424:	4413      	add	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
	if (gyro_read[0] > 32767) {
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800142e:	db03      	blt.n	8001438 <BMX055_readGyro+0x5e>
		gyro_read[0] -= 65536;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001436:	60bb      	str	r3, [r7, #8]
	}
	gyro[0] = gyro_read[0] * bmx055->gyro_rescale;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edd3 7a06 	vldr	s15, [r3, #24]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	edc3 7a00 	vstr	s15, [r3]

	gyro_read[1] = ((gyro_data[3] << 8) + gyro_data[2]);
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	7dba      	ldrb	r2, [r7, #22]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
	if (gyro_read[1] > 32767) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001462:	db03      	blt.n	800146c <BMX055_readGyro+0x92>
		gyro_read[1] -= 65536;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800146a:	60fb      	str	r3, [r7, #12]
	}
	gyro[1] = gyro_read[1] * bmx055->gyro_rescale;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a06 	vldr	s15, [r3, #24]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001484:	edc3 7a00 	vstr	s15, [r3]

	gyro_read[2] = ((gyro_data[5] << 8) + gyro_data[4]);
 8001488:	7e7b      	ldrb	r3, [r7, #25]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	7e3a      	ldrb	r2, [r7, #24]
 800148e:	4413      	add	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
	if (gyro_read[2] > 32767) {
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001498:	db03      	blt.n	80014a2 <BMX055_readGyro+0xc8>
		gyro_read[2] -= 65536;
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80014a0:	613b      	str	r3, [r7, #16]
	}
	gyro[2] = gyro_read[2] * bmx055->gyro_rescale;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3308      	adds	r3, #8
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	edc3 7a00 	vstr	s15, [r3]
}
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
	...

080014c8 <BMX055_readRawMag>:

/**
 * @brief Read Mag
 * @param [out] *mag mag value (X-mag: mag[0], Y-mag: mag[1], Z-mag: mag[2])
 */
void BMX055_readRawMag(BMX055_Handle *bmx055, float *mag) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	uint8_t mag_data[8];

	// read mag value
	for (int i = 0; i < 8; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e016      	b.n	8001506 <BMX055_readRawMag+0x3e>
		BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69d9      	ldr	r1, [r3, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8c18      	ldrh	r0, [r3, #32]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3342      	adds	r3, #66	; 0x42
 80014e6:	b2dc      	uxtb	r4, r3
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4413      	add	r3, r2
 80014f0:	2201      	movs	r2, #1
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	4602      	mov	r2, r0
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa93 	bl	8001a26 <BMX055_readSPI>
	for (int i = 0; i < 8; i++) {
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b07      	cmp	r3, #7
 800150a:	dde5      	ble.n	80014d8 <BMX055_readRawMag+0x10>
		BMX055_MAG_DATA_START_REG + i, &mag_data[i], 1);
	}

	// conv data  mag x:12bit
	mag[0] = ((int16_t) (mag_data[1] << 5) + (int16_t) (mag_data[0] >> 3));
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	015b      	lsls	r3, r3, #5
 8001510:	b21b      	sxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	7b3b      	ldrb	r3, [r7, #12]
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4413      	add	r3, r2
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	edc3 7a00 	vstr	s15, [r3]
	if (mag[0] > 4095) {
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80015f8 <BMX055_readRawMag+0x130>
 8001534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	dd09      	ble.n	8001552 <BMX055_readRawMag+0x8a>
		mag[0] -= 8192;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80015fc <BMX055_readRawMag+0x134>
 8001548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	edc3 7a00 	vstr	s15, [r3]
	}

	// conv data  mag y:12bit
	mag[1] = ((int16_t) (mag_data[3] << 5) + (int16_t) (mag_data[2] >> 3));
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	b21b      	sxth	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	441a      	add	r2, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3304      	adds	r3, #4
 8001566:	ee07 2a90 	vmov	s15, r2
 800156a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156e:	edc3 7a00 	vstr	s15, [r3]
	if (mag[1] > 4095) {
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3304      	adds	r3, #4
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015f8 <BMX055_readRawMag+0x130>
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	dd0b      	ble.n	80015a0 <BMX055_readRawMag+0xd8>
		mag[1] -= 8192;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3304      	adds	r3, #4
 8001594:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015fc <BMX055_readRawMag+0x134>
 8001598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800159c:	edc3 7a00 	vstr	s15, [r3]
	}

	// conv data  mag z:15bit
	mag[2] = ((int16_t) (mag_data[5] << 7) + (int16_t) (mag_data[4] >> 1));
 80015a0:	7c7b      	ldrb	r3, [r7, #17]
 80015a2:	01db      	lsls	r3, r3, #7
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	441a      	add	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3308      	adds	r3, #8
 80015b4:	ee07 2a90 	vmov	s15, r2
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	edc3 7a00 	vstr	s15, [r3]
	if (mag[2] > 16383) {
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3308      	adds	r3, #8
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001600 <BMX055_readRawMag+0x138>
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	dc00      	bgt.n	80015d8 <BMX055_readRawMag+0x110>
		mag[2] -= 32768;
	}
}
 80015d6:	e00b      	b.n	80015f0 <BMX055_readRawMag+0x128>
		mag[2] -= 32768;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3308      	adds	r3, #8
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3308      	adds	r3, #8
 80015e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001604 <BMX055_readRawMag+0x13c>
 80015e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ec:	edc3 7a00 	vstr	s15, [r3]
}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	457ff000 	.word	0x457ff000
 80015fc:	46000000 	.word	0x46000000
 8001600:	467ffc00 	.word	0x467ffc00
 8001604:	47000000 	.word	0x47000000

08001608 <BMX055_readCompensatedMag>:

arm_status BMX055_readCompensatedMag(BMX055_Handle *bmx055, float *mag) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b090      	sub	sp, #64	; 0x40
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	// Read raw mag data
	BMX055_readRawMag(bmx055, mag);
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff57 	bl	80014c8 <BMX055_readRawMag>

	// Apply scale factor to raw mag data
	mag[0] *= bmx055->mag_rescale_xy;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	edc3 7a00 	vstr	s15, [r3]
	mag[1] *= bmx055->mag_rescale_xy;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	edc3 7a00 	vstr	s15, [r3]
	mag[2] *= bmx055->mag_rescale_z;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3308      	adds	r3, #8
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3308      	adds	r3, #8
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc3 7a00 	vstr	s15, [r3]

	// Put data into dsp struct
	arm_matrix_instance_f32 raw_data;
	arm_mat_init_f32(&raw_data, 3, 1, mag);
 8001664:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	2103      	movs	r1, #3
 800166e:	f00f f823 	bl	80106b8 <arm_mat_init_f32>

	// Apply hard iron compensation
	arm_matrix_instance_f32 hard_iron_compensated;
	float hard_iron_compensated_buff[3];
	arm_mat_init_f32(&hard_iron_compensated, 3, 1, hard_iron_compensated_buff);
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800167a:	2201      	movs	r2, #1
 800167c:	2103      	movs	r1, #3
 800167e:	f00f f81b 	bl	80106b8 <arm_mat_init_f32>

	arm_status result = arm_mat_sub_f32(&raw_data, &bmx055->mag_hard_iron_offsets, &hard_iron_compensated);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001688:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800168c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001690:	4618      	mov	r0, r3
 8001692:	f00e fd8d 	bl	80101b0 <arm_mat_sub_f32>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (result)
 800169c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <BMX055_readCompensatedMag+0xa2>
		return result;
 80016a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016a8:	e01b      	b.n	80016e2 <BMX055_readCompensatedMag+0xda>

	// Apply soft iron compensation
	arm_matrix_instance_f32 soft_iron_compensated;
	float soft_iron_compensated_buff[3];
	arm_mat_init_f32(&soft_iron_compensated, 3, 1, soft_iron_compensated_buff);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	f107 0018 	add.w	r0, r7, #24
 80016b2:	2201      	movs	r2, #1
 80016b4:	2103      	movs	r1, #3
 80016b6:	f00e ffff 	bl	80106b8 <arm_mat_init_f32>
	result = arm_mat_mult_f32(&bmx055->mag_soft_iron_offsets, &hard_iron_compensated, &soft_iron_compensated);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3334      	adds	r3, #52	; 0x34
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00e fe14 	bl	80102f4 <arm_mat_mult_f32>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	// Return compensated data in uT
	memcpy(mag, &soft_iron_compensated.pData[0], 3 * sizeof(float));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f00f fa2a 	bl	8010b32 <memcpy>

	return result;
 80016de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3740      	adds	r7, #64	; 0x40
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <BMX055_setInterrupts>:

void BMX055_setInterrupts(BMX055_Handle *bmx055) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af02      	add	r7, sp, #8
 80016f0:	6078      	str	r0, [r7, #4]
	/* Disable interrupts, change configuration, wait 10ms, re-enable interrupts */
	uint8_t data;
	uint8_t read_data;

	// Disable INT1
	data = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_INT_1_EN, &data, 1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	891a      	ldrh	r2, [r3, #8]
 80016fe:	2301      	movs	r3, #1
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f107 030f 	add.w	r3, r7, #15
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2319      	movs	r3, #25
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f95f 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 8001710:	200a      	movs	r0, #10
 8001712:	f003 fd89 	bl	8005228 <HAL_Delay>
	// Map data ready interrupt to int 1
	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_INT_1_MAP, &read_data, 1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	891a      	ldrh	r2, [r3, #8]
 800171e:	2301      	movs	r3, #1
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	f107 030e 	add.w	r3, r7, #14
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	231a      	movs	r3, #26
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f97b 	bl	8001a26 <BMX055_readSPI>
	read_data |= 1;
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	73bb      	strb	r3, [r7, #14]
	// Set int1_data bit
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_INT_1_MAP, &read_data, 1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6859      	ldr	r1, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	891a      	ldrh	r2, [r3, #8]
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f107 030e 	add.w	r3, r7, #14
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	231a      	movs	r3, #26
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f93d 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 8001754:	200a      	movs	r0, #10
 8001756:	f003 fd67 	bl	8005228 <HAL_Delay>
	// Set INT1 to active low
	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_INT_ACTIVE_LEVEL, &read_data, 1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	891a      	ldrh	r2, [r3, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 030e 	add.w	r3, r7, #14
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2320      	movs	r3, #32
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f959 	bl	8001a26 <BMX055_readSPI>
	// Reset int1_lvl bit
	read_data &= 0b11111110;
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73bb      	strb	r3, [r7, #14]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_INT_ACTIVE_LEVEL, &read_data, 1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6859      	ldr	r1, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	891a      	ldrh	r2, [r3, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 030e 	add.w	r3, r7, #14
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2320      	movs	r3, #32
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f91b 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 8001798:	200a      	movs	r0, #10
 800179a:	f003 fd45 	bl	8005228 <HAL_Delay>
	// Set INT1 to data accelerometer data ready interrupt
	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_DATA_READY_INT_EN, &read_data, 1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	891a      	ldrh	r2, [r3, #8]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	f107 030e 	add.w	r3, r7, #14
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2317      	movs	r3, #23
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f937 	bl	8001a26 <BMX055_readSPI>
	// Set data_en bit
	read_data |= 0b00010000;
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	73bb      	strb	r3, [r7, #14]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_DATA_READY_INT_EN, &read_data, 1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	891a      	ldrh	r2, [r3, #8]
 80017ca:	2301      	movs	r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	f107 030e 	add.w	r3, r7, #14
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2317      	movs	r3, #23
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8f9 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 80017dc:	200a      	movs	r0, #10
 80017de:	f003 fd23 	bl	8005228 <HAL_Delay>
	// Remove interrupt latch
	data = 0b10000000;
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_INT_RST_LATCH, &data, 1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	891a      	ldrh	r2, [r3, #8]
 80017ee:	2301      	movs	r3, #1
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	f107 030f 	add.w	r3, r7, #15
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2321      	movs	r3, #33	; 0x21
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8e7 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 8001800:	200a      	movs	r0, #10
 8001802:	f003 fd11 	bl	8005228 <HAL_Delay>

	// Disable INT3
	data = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_INT_3_EN, &data, 1);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6919      	ldr	r1, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	8a9a      	ldrh	r2, [r3, #20]
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f107 030f 	add.w	r3, r7, #15
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2317      	movs	r3, #23
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f8d5 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f003 fcff 	bl	8005228 <HAL_Delay>
	// Map data ready interrupt to int 1
	read_data = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	73bb      	strb	r3, [r7, #14]
	// Set int1_data bit
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_INT_1_MAP, &read_data, 1);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8a9a      	ldrh	r2, [r3, #20]
 8001836:	2301      	movs	r3, #1
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f107 030e 	add.w	r3, r7, #14
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2318      	movs	r3, #24
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8c3 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 8001848:	200a      	movs	r0, #10
 800184a:	f003 fced 	bl	8005228 <HAL_Delay>
	// Set INT3 to active low
	data = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_INT_ACTIVE_LEVEL, &data, 1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6919      	ldr	r1, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8a9a      	ldrh	r2, [r3, #20]
 800185a:	2301      	movs	r3, #1
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	f107 030f 	add.w	r3, r7, #15
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2316      	movs	r3, #22
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f8b1 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f003 fcdb 	bl	8005228 <HAL_Delay>
	// Set INT3 to data gyroscope data ready interrupt
	data = 0b10000000;
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_DATA_READY_INT_EN, &data, 1);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6919      	ldr	r1, [r3, #16]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	8a9a      	ldrh	r2, [r3, #20]
 800187e:	2301      	movs	r3, #1
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	f107 030f 	add.w	r3, r7, #15
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2315      	movs	r3, #21
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f89f 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(100);
 8001890:	2064      	movs	r0, #100	; 0x64
 8001892:	f003 fcc9 	bl	8005228 <HAL_Delay>
	// Remove interrupt latch
	data = 0b10000000;
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_INT_RST_LATCH, &data, 1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6919      	ldr	r1, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	8a9a      	ldrh	r2, [r3, #20]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f107 030f 	add.w	r3, r7, #15
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2321      	movs	r3, #33	; 0x21
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f88d 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f003 fcb7 	bl	8005228 <HAL_Delay>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_AXES_REG, &read_data, 1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69d9      	ldr	r1, [r3, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	8c1a      	ldrh	r2, [r3, #32]
 80018c2:	2301      	movs	r3, #1
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f107 030e 	add.w	r3, r7, #14
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	234e      	movs	r3, #78	; 0x4e
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8a9 	bl	8001a26 <BMX055_readSPI>
	// Set Data Ready En, xyz axes, bit and reset DR Polarity, int en, latch bit
	data = (read_data | 0b10000000) & 0b10111000;
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f023 0347 	bic.w	r3, r3, #71	; 0x47
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_AXES_REG, &data, 1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69d9      	ldr	r1, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	8c1a      	ldrh	r2, [r3, #32]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	f107 030f 	add.w	r3, r7, #15
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	234e      	movs	r3, #78	; 0x4e
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f868 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f003 fc92 	bl	8005228 <HAL_Delay>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <BMX055_exp_filter>:

void BMX055_exp_filter(float *prev_data, float *current_data, float *result, size_t len, float alpha) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b094      	sub	sp, #80	; 0x50
 8001910:	af00      	add	r7, sp, #0
 8001912:	6178      	str	r0, [r7, #20]
 8001914:	6139      	str	r1, [r7, #16]
 8001916:	60fa      	str	r2, [r7, #12]
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	ed87 0a01 	vstr	s0, [r7, #4]
	arm_matrix_instance_f32 cur_dat;
	arm_matrix_instance_f32 prev_dat;
	arm_matrix_instance_f32 res;
	float current_data_float[3];
	float prev_data_float[3];
	arm_scale_f32((float*) current_data, alpha, (float*) current_data, len);
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	6939      	ldr	r1, [r7, #16]
 8001922:	ed97 0a01 	vldr	s0, [r7, #4]
 8001926:	6938      	ldr	r0, [r7, #16]
 8001928:	f00e ffaa 	bl	8010880 <arm_scale_f32>
	arm_scale_f32((float*) prev_data, (1 - alpha), (float*) prev_data, len);
 800192c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001930:	edd7 7a01 	vldr	s15, [r7, #4]
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	6978      	ldr	r0, [r7, #20]
 8001942:	f00e ff9d 	bl	8010880 <arm_scale_f32>
	// Copy and cast data into arrays. arm_mat_init requires float_32 arrays
	for (int i = 0; i < len; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800194a:	e018      	b.n	800197e <BMX055_exp_filter+0x72>
		current_data_float[i] = (float) current_data[i];
 800194c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	3350      	adds	r3, #80	; 0x50
 800195c:	443b      	add	r3, r7
 800195e:	3b28      	subs	r3, #40	; 0x28
 8001960:	601a      	str	r2, [r3, #0]
		prev_data_float[i] = (float) prev_data[i];
 8001962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4413      	add	r3, r2
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	3350      	adds	r3, #80	; 0x50
 8001972:	443b      	add	r3, r7
 8001974:	3b34      	subs	r3, #52	; 0x34
 8001976:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197a:	3301      	adds	r3, #1
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800197e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	429a      	cmp	r2, r3
 8001984:	d8e2      	bhi.n	800194c <BMX055_exp_filter+0x40>
	}
	arm_mat_init_f32(&cur_dat, 3, 1, current_data_float);
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800198e:	2201      	movs	r2, #1
 8001990:	2103      	movs	r1, #3
 8001992:	f00e fe91 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&prev_dat, 3, 1, prev_data_float);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800199e:	2201      	movs	r2, #1
 80019a0:	2103      	movs	r1, #3
 80019a2:	f00e fe89 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&res, 3, 1, result);
 80019a6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	2103      	movs	r1, #3
 80019b0:	f00e fe82 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_add_f32(&cur_dat, &prev_dat, &res);
 80019b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80019bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00e fe7d 	bl	80106c0 <arm_mat_add_f32>
}
 80019c6:	bf00      	nop
 80019c8:	3750      	adds	r7, #80	; 0x50
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <BMX055_writeSPI>:
 * @param [in] CS_Pin
 * @param [in] register_addr
 * @param [in] data
 * @param [in] len
 */
void BMX055_writeSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	4611      	mov	r1, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	460b      	mov	r3, r1
 80019de:	80fb      	strh	r3, [r7, #6]
 80019e0:	4613      	mov	r3, r2
 80019e2:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	2200      	movs	r2, #0
 80019e8:	4619      	mov	r1, r3
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	f004 f948 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(bmx055->hspi, &register_addr, 1, 1000);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	1d79      	adds	r1, r7, #5
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	2201      	movs	r2, #1
 80019fc:	f006 f88f 	bl	8007b1e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(bmx055->hspi, data, len, 1000);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	f006 f886 	bl	8007b1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f004 f931 	bl	8005c80 <HAL_GPIO_WritePin>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <BMX055_readSPI>:
 * @param [in] device Device type (gyro, accel or mag)
 * @param [in] register_addr Register Address
 * @param [in] num Data Length
 * @param [out] *buf Read Data
 */
void BMX055_readSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 8001a26:	b590      	push	{r4, r7, lr}
 8001a28:	b08d      	sub	sp, #52	; 0x34
 8001a2a:	af02      	add	r7, sp, #8
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	4611      	mov	r1, r2
 8001a32:	461a      	mov	r2, r3
 8001a34:	460b      	mov	r3, r1
 8001a36:	80fb      	strh	r3, [r7, #6]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	717b      	strb	r3, [r7, #5]
	// Add RW bit to start of register
	register_addr = register_addr | 0x80;
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	717b      	strb	r3, [r7, #5]
	uint8_t packet[20];

	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68b8      	ldr	r0, [r7, #8]
 8001a4e:	f004 f917 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmx055->hspi, &register_addr, packet, len + 1, 1000);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f107 0214 	add.w	r2, r7, #20
 8001a62:	1d79      	adds	r1, r7, #5
 8001a64:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001a68:	9400      	str	r4, [sp, #0]
 8001a6a:	f006 faa5 	bl	8007fb8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	68b8      	ldr	r0, [r7, #8]
 8001a76:	f004 f903 	bl	8005c80 <HAL_GPIO_WritePin>

	// Copy data into "data" spot in memory
	memcpy(data, &packet[1], len);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	3301      	adds	r3, #1
 8001a80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a82:	4619      	mov	r1, r3
 8001a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a86:	f00f f854 	bl	8010b32 <memcpy>
}
 8001a8a:	bf00      	nop
 8001a8c:	372c      	adds	r7, #44	; 0x2c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}

08001a92 <perform_normal_self_test>:
}

/*!
 * @brief This internal API is used to perform normal self test
 */
static int8_t perform_normal_self_test(BMX055_Handle *bmx055) {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af02      	add	r7, sp, #8
 8001a98:	6078      	str	r0, [r7, #4]
	uint8_t read_data;
	uint8_t data;
	// Set sleep mode
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &read_data, 1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69d9      	ldr	r1, [r3, #28]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8c1a      	ldrh	r2, [r3, #32]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f107 030e 	add.w	r3, r7, #14
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	234c      	movs	r3, #76	; 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb9 	bl	8001a26 <BMX055_readSPI>
	data = read_data | 0b00000110; // Set opMode to sleep
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	f043 0306 	orr.w	r3, r3, #6
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69d9      	ldr	r1, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	8c1a      	ldrh	r2, [r3, #32]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	f107 030d 	add.w	r3, r7, #13
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	234c      	movs	r3, #76	; 0x4c
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff7b 	bl	80019ce <BMX055_writeSPI>

	/* Set the Self Test bit(bit0) of the 0x4C register */
	data = read_data | 0b00000001; // Set opMode to sleep
 8001ad8:	7bbb      	ldrb	r3, [r7, #14]
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69d9      	ldr	r1, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	8c1a      	ldrh	r2, [r3, #32]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	f107 030d 	add.w	r3, r7, #13
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	234c      	movs	r3, #76	; 0x4c
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff69 	bl	80019ce <BMX055_writeSPI>
	HAL_Delay(2);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f003 fb93 	bl	8005228 <HAL_Delay>

	/* Validate normal self test */
	uint8_t self_test_rslt[3];
	uint8_t status;
	// Read the data from register 0x42, 0x44 and 0x46
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG, &self_test_rslt[0], 1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69d9      	ldr	r1, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8c1a      	ldrh	r2, [r3, #32]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2342      	movs	r3, #66	; 0x42
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff85 	bl	8001a26 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 2, &self_test_rslt[1], 1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69d9      	ldr	r1, [r3, #28]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8c1a      	ldrh	r2, [r3, #32]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2344      	movs	r3, #68	; 0x44
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff77 	bl	8001a26 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 4, &self_test_rslt[2], 1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69d9      	ldr	r1, [r3, #28]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	8c1a      	ldrh	r2, [r3, #32]
 8001b40:	2301      	movs	r3, #1
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	3302      	adds	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2346      	movs	r3, #70	; 0x46
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff69 	bl	8001a26 <BMX055_readSPI>

	/* Combine the self test status and store it in the first
	 * 3 bits of the status variable for processing
	 */
	status = (uint8_t) ((self_test_rslt[2] & 1) & (self_test_rslt[1] & 1) & (self_test_rslt[0] & 1));
 8001b54:	7aba      	ldrb	r2, [r7, #10]
 8001b56:	7a7b      	ldrb	r3, [r7, #9]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	7a3b      	ldrb	r3, [r7, #8]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]

	if (status)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <perform_normal_self_test+0xe0>
		return BMX055_MAG_SELF_TEST_SUCCESS;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <perform_normal_self_test+0xe2>
	else
		return BMX055_MAG_SELF_TEST_FAIL;
 8001b72:	2307      	movs	r3, #7
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <EKF_Init>:
#include "EKF.h"

void EKF_Init(EKF *ekf, float *initial_qu, float *inital_K, float *inital_P,
		float *inital_Q, float *inital_R, float Px) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6178      	str	r0, [r7, #20]
 8001b84:	6139      	str	r1, [r7, #16]
 8001b86:	60fa      	str	r2, [r7, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	ed87 0a01 	vstr	s0, [r7, #4]
	ekf->Px = Px;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	arm_status result;
	// Initialise state vector
	memcpy(ekf->qu_data, initial_qu, sizeof(ekf->qu_data) * sizeof(float));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3308      	adds	r3, #8
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00e ffc7 	bl	8010b32 <memcpy>
	arm_mat_init_f32(&ekf->qu, STATE_VECTOR_ROWS, 1, (float32_t*) ekf->qu_data);
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3308      	adds	r3, #8
 8001baa:	2201      	movs	r2, #1
 8001bac:	2104      	movs	r1, #4
 8001bae:	f00e fd83 	bl	80106b8 <arm_mat_init_f32>

	// Initialise Kalman gain
	memcpy(ekf->K_data, inital_K, sizeof(ekf->K_data) * sizeof(float));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3328      	adds	r3, #40	; 0x28
 8001bb6:	22c0      	movs	r2, #192	; 0xc0
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00e ffb9 	bl	8010b32 <memcpy>
	arm_mat_init_f32(&ekf->K, 4, 3, (float32_t*) ekf->K_data);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f103 0020 	add.w	r0, r3, #32
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3328      	adds	r3, #40	; 0x28
 8001bca:	2203      	movs	r2, #3
 8001bcc:	2104      	movs	r1, #4
 8001bce:	f00e fd73 	bl	80106b8 <arm_mat_init_f32>

	/* Initialise state covariance matrix */
	memcpy(&ekf->P_data, inital_P, sizeof(ekf->P_data) * sizeof(float));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3360      	adds	r3, #96	; 0x60
 8001bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00e ffa8 	bl	8010b32 <memcpy>
	arm_mat_init_f32(&ekf->P, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS,
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f103 0058 	add.w	r0, r3, #88	; 0x58
			(float32_t*) ekf->P_data);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3360      	adds	r3, #96	; 0x60
	arm_mat_init_f32(&ekf->P, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS,
 8001bec:	2204      	movs	r2, #4
 8001bee:	2104      	movs	r1, #4
 8001bf0:	f00e fd62 	bl	80106b8 <arm_mat_init_f32>

	/* Initialise process noise */
	memcpy(ekf->Q_data, inital_Q, sizeof(ekf->Q_data) * sizeof(float));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	33a8      	adds	r3, #168	; 0xa8
 8001bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfc:	6a39      	ldr	r1, [r7, #32]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00e ff97 	bl	8010b32 <memcpy>
	arm_mat_init_f32(&ekf->Q, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
			(float32_t*) ekf->Q_data);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	33a8      	adds	r3, #168	; 0xa8
	arm_mat_init_f32(&ekf->Q, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS,
 8001c0e:	2204      	movs	r2, #4
 8001c10:	2104      	movs	r1, #4
 8001c12:	f00e fd51 	bl	80106b8 <arm_mat_init_f32>

	/* Initialise measurement noise */
	memcpy(ekf->R_data, inital_R, sizeof(ekf->R_data) * sizeof(float));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	33f0      	adds	r3, #240	; 0xf0
 8001c1a:	2290      	movs	r2, #144	; 0x90
 8001c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00e ff87 	bl	8010b32 <memcpy>
	arm_mat_init_f32(&ekf->R, 3, 3, (float32_t*) ekf->R_data);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	33f0      	adds	r3, #240	; 0xf0
 8001c2e:	2203      	movs	r2, #3
 8001c30:	2103      	movs	r1, #3
 8001c32:	f00e fd41 	bl	80106b8 <arm_mat_init_f32>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <EKF_Predict>:

void EKF_Predict(EKF *ekf, float p_rps, float q_rps, float r_rps, float dt) {
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b0d0      	sub	sp, #320	; 0x140
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c4c:	6018      	str	r0, [r3, #0]
 8001c4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c56:	ed83 0a00 	vstr	s0, [r3]
 8001c5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c62:	edc3 0a00 	vstr	s1, [r3]
 8001c66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c6e:	ed83 1a00 	vstr	s2, [r3]
 8001c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c7a:	edc3 1a00 	vstr	s3, [r3]

	/******** Compute State Vector *********/
	// Init input vector
	arm_matrix_instance_f32 u_vector;
	float u_vector_data[3];
	u_vector_data[0] = p_rps;
 8001c7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	u_vector_data[1] = q_rps;
 8001c8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	u_vector_data[2] = r_rps;
 8001c9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	arm_mat_init_f32(&u_vector, 3, 1, u_vector_data);
 8001ca8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001cac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	f00e fd00 	bl	80106b8 <arm_mat_init_f32>
	// Calculate dq vector
	arm_matrix_instance_f32 dq;
	arm_matrix_instance_f32 temp_mat;
	float dq_data[4];
	float temp_mat_data[4];
	arm_mat_init_f32(&dq, STATE_VECTOR_ROWS, 1, dq_data);
 8001cb8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001cbc:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	f00e fcf8 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_mat, STATE_VECTOR_ROWS, 1, temp_mat_data);
 8001cc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ccc:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	f00e fcf0 	bl	80106b8 <arm_mat_init_f32>
	result = dEP(&ekf->qu, &u_vector, &dq);
 8001cd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001ce6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 f860 	bl	8002db0 <dEP>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	// Multiply dt by result in dq vector and store in dq vector
	for (int i = 0; i < STATE_VECTOR_ROWS; i++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001cfc:	e01c      	b.n	8001d38 <EKF_Predict+0xfa>
		dq.pData[i] *= dt;
 8001cfe:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001d02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	ed93 7a00 	vldr	s14, [r3]
 8001d0e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001d12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001d1e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001d22:	edd2 7a00 	vldr	s15, [r2]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < STATE_VECTOR_ROWS; i++) {
 8001d2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d32:	3301      	adds	r3, #1
 8001d34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001d38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	ddde      	ble.n	8001cfe <EKF_Predict+0xc0>
	}

	// Add qu to result in dq vector and store in qu vector (updating current state)
	result = arm_mat_add_f32(&ekf->qu, &dq, &temp_mat);
 8001d40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001d4e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00e fcb4 	bl	80106c0 <arm_mat_add_f32>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	arm_copy_f32(temp_mat_data, &ekf->qu_data, sizeof(temp_mat_data)/sizeof(float));
 8001d5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f103 0108 	add.w	r1, r3, #8
 8001d6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d70:	2204      	movs	r2, #4
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00e f97a 	bl	801006c <arm_copy_f32>

	/******** Calculate A Matrix *********/
	float A_data[SQUARE_MATRIX_SIZE];
	float A_temp_data[SQUARE_MATRIX_SIZE];
	float A_transpose_data[SQUARE_MATRIX_SIZE];
	A_data[0] = 1;
 8001d78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	A_data[1] = -1 * (dt * p_rps) / 2;
 8001d80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d84:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001d88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d90:	ed92 7a00 	vldr	s14, [r2]
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	eeb1 7a67 	vneg.f32	s14, s15
 8001da0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	A_data[2] = -1 * (dt * q_rps) / 2;
 8001dac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001db0:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001db4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001db8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dbc:	ed92 7a00 	vldr	s14, [r2]
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001dcc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	A_data[3] = -1 * (dt * r_rps) / 2;
 8001dd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ddc:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001de0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001de4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001de8:	ed92 7a00 	vldr	s14, [r2]
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	eeb1 7a67 	vneg.f32	s14, s15
 8001df8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e00:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	A_data[4] = (dt * p_rps) / 2;
 8001e04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e08:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e14:	ed92 7a00 	vldr	s14, [r2]
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e28:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	A_data[5] = 1;
 8001e2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	A_data[6] = (dt * r_rps) / 2;
 8001e34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e38:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001e3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e40:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e44:	ed92 7a00 	vldr	s14, [r2]
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e58:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	A_data[7] = -1 * (dt * q_rps) / 2;
 8001e5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e60:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001e64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e6c:	ed92 7a00 	vldr	s14, [r2]
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	eeb1 7a67 	vneg.f32	s14, s15
 8001e7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	A_data[8] = (dt * q_rps) / 2;
 8001e88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e8c:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001e90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e98:	ed92 7a00 	vldr	s14, [r2]
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	A_data[9] = -1 * (dt * r_rps) / 2;
 8001eb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001eb4:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001eb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ebc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ec0:	ed92 7a00 	vldr	s14, [r2]
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	eeb1 7a67 	vneg.f32	s14, s15
 8001ed0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	A_data[10] = 1;
 8001edc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	A_data[11] = (dt * p_rps) / 2;
 8001ee4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ee8:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001eec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ef4:	ed92 7a00 	vldr	s14, [r2]
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f08:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
	A_data[12] = (dt * r_rps) / 2;
 8001f0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f10:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001f14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f18:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f1c:	ed92 7a00 	vldr	s14, [r2]
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f30:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
	A_data[13] = (dt * q_rps) / 2;
 8001f34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f38:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001f3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f44:	ed92 7a00 	vldr	s14, [r2]
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f58:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
	A_data[14] = -1 * (dt * p_rps) / 2;
 8001f5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f60:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8001f64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f6c:	ed92 7a00 	vldr	s14, [r2]
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	eeb1 7a67 	vneg.f32	s14, s15
 8001f7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f84:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
	A_data[15] = 1;
 8001f88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	arm_matrix_instance_f32 A;
	arm_matrix_instance_f32 A_temp;
	arm_matrix_instance_f32 A_transpose;
	arm_mat_init_f32(&A, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS, A_data);
 8001f90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f94:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f98:	2204      	movs	r2, #4
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	f00e fb8c 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&A_temp, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS, A_temp_data);
 8001fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fa4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001fa8:	2204      	movs	r2, #4
 8001faa:	2104      	movs	r1, #4
 8001fac:	f00e fb84 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&A_transpose, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS,
 8001fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb4:	f107 001c 	add.w	r0, r7, #28
 8001fb8:	2204      	movs	r2, #4
 8001fba:	2104      	movs	r1, #4
 8001fbc:	f00e fb7c 	bl	80106b8 <arm_mat_init_f32>
			A_transpose_data);
	arm_mat_trans_f32(&A, &A_transpose);
 8001fc0:	f107 021c 	add.w	r2, r7, #28
 8001fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00e f87e 	bl	80100cc <arm_mat_trans_f32>

	/******** Calculate P Matrix *********/
	// Multiply A by P and store in A
	result = arm_mat_mult_f32(&A, &ekf->P, &A_temp);
 8001fd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001fde:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00e f984 	bl	80102f4 <arm_mat_mult_f32>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	arm_copy_f32(A_temp_data, A_data, sizeof(A_temp_data)/sizeof(float));
 8001ff2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001ff6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00e f835 	bl	801006c <arm_copy_f32>

	// Multiply new A by A transpose and store in A
	result = arm_mat_mult_f32(&A, &A_transpose, &A_temp);
 8002002:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002006:	f107 011c 	add.w	r1, r7, #28
 800200a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200e:	4618      	mov	r0, r3
 8002010:	f00e f970 	bl	80102f4 <arm_mat_mult_f32>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	arm_copy_f32(A_temp_data, A_data, sizeof(A_temp_data)/sizeof(float));
 800201a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800201e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002022:	2210      	movs	r2, #16
 8002024:	4618      	mov	r0, r3
 8002026:	f00e f821 	bl	801006c <arm_copy_f32>
	// Add new A to Q and store in P
	result = arm_mat_add_f32(&A, &ekf->Q, &ekf->P);
 800202a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800202e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8002038:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800203c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204a:	4618      	mov	r0, r3
 800204c:	f00e fb38 	bl	80106c0 <arm_mat_add_f32>
 8002050:	4603      	mov	r3, r0
 8002052:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
}
 8002056:	bf00      	nop
 8002058:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <EKF_Update>:

void EKF_Update(EKF *ekf, float ax_mps2, float ay_mps2, float az_mps2, float m,
		float pan, float tilt) {
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	ed2d 8b04 	vpush	{d8-d9}
 8002066:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800206a:	af00      	add	r7, sp, #0
 800206c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002070:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002074:	6018      	str	r0, [r3, #0]
 8002076:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800207a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800207e:	ed83 0a00 	vstr	s0, [r3]
 8002082:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002086:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800208a:	edc3 0a00 	vstr	s1, [r3]
 800208e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002092:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002096:	ed83 1a00 	vstr	s2, [r3]
 800209a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800209e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80020a2:	edc3 1a00 	vstr	s3, [r3]
 80020a6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80020aa:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80020ae:	ed83 2a00 	vstr	s4, [r3]
 80020b2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80020b6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80020ba:	edc3 2a00 	vstr	s5, [r3]
	ekf->m = m;
 80020be:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80020c2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80020cc:	f5a2 7221 	sub.w	r2, r2, #644	; 0x284
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	ekf->pan = pan;
 80020d6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80020da:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80020e4:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	619a      	str	r2, [r3, #24]
	ekf->tilt = tilt;
 80020ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80020f0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80020fa:	f5a2 7223 	sub.w	r2, r2, #652	; 0x28c
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	61da      	str	r2, [r3, #28]
	arm_matrix_instance_f32 temp_matrixinv3x3;
	float tmp_data[12];
	float tmp_data2[9];
	float tmp_data3[9];
	float tmp_inv_data[9];
	arm_mat_init_f32(&temp_matrix3x4, 3, 4, tmp_data);
 8002102:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002106:	f507 7021 	add.w	r0, r7, #644	; 0x284
 800210a:	2204      	movs	r2, #4
 800210c:	2103      	movs	r1, #3
 800210e:	f00e fad3 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrix3x3, 3, 3, tmp_data2);
 8002112:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002116:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 800211a:	2203      	movs	r2, #3
 800211c:	2103      	movs	r1, #3
 800211e:	f00e facb 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrix3x3_2, 3, 3, tmp_data3);
 8002122:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8002126:	f507 701d 	add.w	r0, r7, #628	; 0x274
 800212a:	2203      	movs	r2, #3
 800212c:	2103      	movs	r1, #3
 800212e:	f00e fac3 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrixinv3x3, 3, 3, tmp_inv_data);
 8002132:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002136:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 800213a:	2203      	movs	r2, #3
 800213c:	2103      	movs	r1, #3
 800213e:	f00e fabb 	bl	80106b8 <arm_mat_init_f32>

	/******** Calculate C Matrix *********/
	float C_data[3 * 4];
	C_data[0] = -2 * GRAVITY_MS2 * ekf->qu.pData[2];
 8002142:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002146:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	3308      	adds	r3, #8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fa00 	bl	8000558 <__aeabi_f2d>
 8002158:	f60f 0328 	addw	r3, pc, #2088	; 0x828
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa52 	bl	8000608 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fd24 	bl	8000bb8 <__aeabi_d2f>
 8002170:	4603      	mov	r3, r0
 8002172:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	C_data[1] = 2 * GRAVITY_MS2 * ekf->qu.pData[3];
 8002176:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800217a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	330c      	adds	r3, #12
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9e6 	bl	8000558 <__aeabi_f2d>
 800218c:	f20f 73fc 	addw	r3, pc, #2044	; 0x7fc
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe fa38 	bl	8000608 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fd0a 	bl	8000bb8 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	C_data[2] = -2 * GRAVITY_MS2 * ekf->qu.pData[0];
 80021aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021ae:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f9cd 	bl	8000558 <__aeabi_f2d>
 80021be:	f20f 73c4 	addw	r3, pc, #1988	; 0x7c4
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fa1f 	bl	8000608 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fcf1 	bl	8000bb8 <__aeabi_d2f>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	C_data[3] = 2 * GRAVITY_MS2 * ekf->qu.pData[1];
 80021dc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021e0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	3304      	adds	r3, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9b3 	bl	8000558 <__aeabi_f2d>
 80021f2:	f20f 7398 	addw	r3, pc, #1944	; 0x798
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fa05 	bl	8000608 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fcd7 	bl	8000bb8 <__aeabi_d2f>
 800220a:	4603      	mov	r3, r0
 800220c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	C_data[4] = 2 * GRAVITY_MS2 * ekf->qu.pData[1];
 8002210:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002214:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f999 	bl	8000558 <__aeabi_f2d>
 8002226:	f20f 7364 	addw	r3, pc, #1892	; 0x764
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe f9eb 	bl	8000608 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fcbd 	bl	8000bb8 <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
 8002240:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	C_data[5] = 2 * GRAVITY_MS2 * ekf->qu.pData[0];
 8002244:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002248:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f980 	bl	8000558 <__aeabi_f2d>
 8002258:	f20f 7330 	addw	r3, pc, #1840	; 0x730
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe f9d2 	bl	8000608 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fca4 	bl	8000bb8 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	C_data[6] = 2 * GRAVITY_MS2 * ekf->qu.pData[3];
 8002276:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800227a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	330c      	adds	r3, #12
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f966 	bl	8000558 <__aeabi_f2d>
 800228c:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f9b8 	bl	8000608 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc8a 	bl	8000bb8 <__aeabi_d2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	C_data[7] = 2 * GRAVITY_MS2 * ekf->qu.pData[2];
 80022aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80022ae:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	3308      	adds	r3, #8
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f94c 	bl	8000558 <__aeabi_f2d>
 80022c0:	f20f 63c8 	addw	r3, pc, #1736	; 0x6c8
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe f99e 	bl	8000608 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc70 	bl	8000bb8 <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	C_data[8] = 2 * GRAVITY_MS2 * ekf->qu.pData[0];
 80022de:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80022e2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f933 	bl	8000558 <__aeabi_f2d>
 80022f2:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f985 	bl	8000608 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc57 	bl	8000bb8 <__aeabi_d2f>
 800230a:	4603      	mov	r3, r0
 800230c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	C_data[9] = -2 * GRAVITY_MS2 * ekf->qu.pData[1];
 8002310:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002314:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f919 	bl	8000558 <__aeabi_f2d>
 8002326:	f20f 635c 	addw	r3, pc, #1628	; 0x65c
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f96b 	bl	8000608 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f7fe fc3d 	bl	8000bb8 <__aeabi_d2f>
 800233e:	4603      	mov	r3, r0
 8002340:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	C_data[10] = -2 * GRAVITY_MS2 * ekf->qu.pData[2];
 8002344:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002348:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	3308      	adds	r3, #8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8ff 	bl	8000558 <__aeabi_f2d>
 800235a:	f20f 6328 	addw	r3, pc, #1576	; 0x628
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f951 	bl	8000608 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc23 	bl	8000bb8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	C_data[11] = 2 * GRAVITY_MS2 * ekf->qu.pData[3];
 8002378:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800237c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	330c      	adds	r3, #12
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8e5 	bl	8000558 <__aeabi_f2d>
 800238e:	f20f 53fc 	addw	r3, pc, #1532	; 0x5fc
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe f937 	bl	8000608 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fc09 	bl	8000bb8 <__aeabi_d2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	float C_transpose_data[12];
	float tmp2_data[12];
	float mat_4x3_data[12];
	float mat_4x1_data[4];
	float mat_4x4_data[16];
	arm_mat_init_f32(&C, 3, 4, C_data);
 80023ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80023b0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80023b4:	2204      	movs	r2, #4
 80023b6:	2103      	movs	r1, #3
 80023b8:	f00e f97e 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&C_transpose, 4, 3, C_transpose_data);
 80023bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023c0:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80023c4:	2203      	movs	r2, #3
 80023c6:	2104      	movs	r1, #4
 80023c8:	f00e f976 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrix, 3, 4, tmp2_data);
 80023cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023d0:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80023d4:	2204      	movs	r2, #4
 80023d6:	2103      	movs	r1, #3
 80023d8:	f00e f96e 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrix4x3, 4, 3, mat_4x3_data);
 80023dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023e0:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80023e4:	2203      	movs	r2, #3
 80023e6:	2104      	movs	r1, #4
 80023e8:	f00e f966 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrix4x1, 4, 1, mat_4x1_data);
 80023ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023f0:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 80023f4:	2201      	movs	r2, #1
 80023f6:	2104      	movs	r1, #4
 80023f8:	f00e f95e 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_matrix4x4, 4, 4, mat_4x4_data);
 80023fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002400:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8002404:	2204      	movs	r2, #4
 8002406:	2104      	movs	r1, #4
 8002408:	f00e f956 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_trans_f32(&C, &C_transpose);
 800240c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002410:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f00d fe58 	bl	80100cc <arm_mat_trans_f32>

	/******** Calculate Kalman Gain *********/
	// Calculate C*P*C^T
	// Multiply C by P and store in temp_matrix
	result = arm_mat_mult_f32(&C, &ekf->P, &temp_matrix3x4);
 800241c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002420:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800242a:	f507 7221 	add.w	r2, r7, #644	; 0x284
 800242e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002432:	4618      	mov	r0, r3
 8002434:	f00d ff5e 	bl	80102f4 <arm_mat_mult_f32>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	// Multiply result in temp_matrix by C transpose and store in temp_matrix
	result = arm_mat_mult_f32(&temp_matrix3x4, &C_transpose, &temp_matrix3x3);
 800243e:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8002442:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8002446:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800244a:	4618      	mov	r0, r3
 800244c:	f00d ff52 	bl	80102f4 <arm_mat_mult_f32>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	// Add result in temp_matrix to R and store in temp_matrix
	result = arm_mat_add_f32(&temp_matrix3x3, &ekf->R, &temp_matrix3x3_2);
 8002456:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800245a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f103 01e8 	add.w	r1, r3, #232	; 0xe8
 8002464:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8002468:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800246c:	4618      	mov	r0, r3
 800246e:	f00e f927 	bl	80106c0 <arm_mat_add_f32>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	arm_copy_f32(tmp_data3, tmp_data2, sizeof(tmp_data3)/sizeof(float));
 8002478:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800247c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8002480:	2209      	movs	r2, #9
 8002482:	4618      	mov	r0, r3
 8002484:	f00d fdf2 	bl	801006c <arm_copy_f32>
	// Invert result and store in temp_matrix;
	result = arm_mat_inverse_f32(&temp_matrix3x3, &temp_matrixinv3x3);
 8002488:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800248c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f00d ffd2 	bl	801043c <arm_mat_inverse_f32>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f

	// Multiply P by C transpose and store in temp_matrix2
	result = arm_mat_mult_f32(&ekf->P, &C_transpose, &temp_matrix4x3);
 800249e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80024a2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3358      	adds	r3, #88	; 0x58
 80024aa:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80024ae:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00d ff1e 	bl	80102f4 <arm_mat_mult_f32>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	// Multiply result in temp_matrix2 by temp_matrix and store in K
	result = arm_mat_mult_f32(&temp_matrix4x3, &temp_matrixinv3x3, &ekf->K);
 80024be:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80024c2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f103 0220 	add.w	r2, r3, #32
 80024cc:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 80024d0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024d4:	4618      	mov	r0, r3
 80024d6:	f00d ff0d 	bl	80102f4 <arm_mat_mult_f32>
 80024da:	4603      	mov	r3, r0
 80024dc:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	/******** Update State Vector *********/
	// Calcualte K*(y-h(x,u))
	// Calcualte H vector
	float H_data[3];
	H_data[0] = -1 * GRAVITY_MS2
			* (2 * ekf->qu.pData[0] * ekf->qu.pData[2]
 80024e0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80024e4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024f4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80024f8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	3308      	adds	r3, #8
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee27 7a27 	vmul.f32	s14, s14, s15
					- 2 * ekf->qu.pData[1] * ekf->qu.pData[3])
 800250a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800250e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002520:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002524:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	330c      	adds	r3, #12
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253a:	ee17 0a90 	vmov	r0, s15
 800253e:	f7fe f80b 	bl	8000558 <__aeabi_f2d>
			* (2 * ekf->qu.pData[0] * ekf->qu.pData[2]
 8002542:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f85d 	bl	8000608 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4614      	mov	r4, r2
 8002554:	461d      	mov	r5, r3
			- (ekf->Px
 8002556:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800255a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	ed93 8a45 	vldr	s16, [r3, #276]	; 0x114
					* (arm_cos_f32(ekf->pan / 2) * arm_cos_f32(ekf->pan / 2)
 8002564:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002568:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002572:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800257a:	eeb0 0a47 	vmov.f32	s0, s14
 800257e:	f00e f93f 	bl	8010800 <arm_cos_f32>
 8002582:	eef0 8a40 	vmov.f32	s17, s0
 8002586:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800258a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	edd3 7a06 	vldr	s15, [r3, #24]
 8002594:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002598:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800259c:	eeb0 0a47 	vmov.f32	s0, s14
 80025a0:	f00e f92e 	bl	8010800 <arm_cos_f32>
 80025a4:	eef0 7a40 	vmov.f32	s15, s0
 80025a8:	ee68 8aa7 	vmul.f32	s17, s17, s15
							* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 80025ac:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80025b0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	ed93 7a07 	vldr	s14, [r3, #28]
 80025ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c2:	ed9f 7aef 	vldr	s14, [pc, #956]	; 8002980 <EKF_Update+0x920>
 80025c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ca:	eeb0 0a67 	vmov.f32	s0, s15
 80025ce:	f00e f917 	bl	8010800 <arm_cos_f32>
 80025d2:	eef0 7a40 	vmov.f32	s15, s0
 80025d6:	ee68 8aa7 	vmul.f32	s17, s17, s15
							* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 80025da:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80025de:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	ed93 7a07 	vldr	s14, [r3, #28]
 80025e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f0:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 8002980 <EKF_Update+0x920>
 80025f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	f00e f900 	bl	8010800 <arm_cos_f32>
 8002600:	eef0 7a40 	vmov.f32	s15, s0
 8002604:	ee68 8aa7 	vmul.f32	s17, s17, s15
							- arm_cos_f32(ekf->pan / 2)
 8002608:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800260c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	edd3 7a06 	vldr	s15, [r3, #24]
 8002616:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800261a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800261e:	eeb0 0a47 	vmov.f32	s0, s14
 8002622:	f00e f8ed 	bl	8010800 <arm_cos_f32>
 8002626:	eeb0 9a40 	vmov.f32	s18, s0
									* arm_cos_f32(ekf->pan / 2)
 800262a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800262e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	edd3 7a06 	vldr	s15, [r3, #24]
 8002638:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800263c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002640:	eeb0 0a47 	vmov.f32	s0, s14
 8002644:	f00e f8dc 	bl	8010800 <arm_cos_f32>
 8002648:	eef0 7a40 	vmov.f32	s15, s0
 800264c:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_sin_f32(ekf->tilt / 2 + PI / 2)
 8002650:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002654:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	ed93 7a07 	vldr	s14, [r3, #28]
 800265e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002666:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8002980 <EKF_Update+0x920>
 800266a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800266e:	eeb0 0a67 	vmov.f32	s0, s15
 8002672:	f00e f881 	bl	8010778 <arm_sin_f32>
 8002676:	eef0 7a40 	vmov.f32	s15, s0
 800267a:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_sin_f32(ekf->tilt / 2 + PI / 2)
 800267e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002682:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	ed93 7a07 	vldr	s14, [r3, #28]
 800268c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002694:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002980 <EKF_Update+0x920>
 8002698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800269c:	eeb0 0a67 	vmov.f32	s0, s15
 80026a0:	f00e f86a 	bl	8010778 <arm_sin_f32>
 80026a4:	eef0 7a40 	vmov.f32	s15, s0
 80026a8:	ee69 7a27 	vmul.f32	s15, s18, s15
							- arm_cos_f32(ekf->pan / 2)
 80026ac:	ee78 8ae7 	vsub.f32	s17, s17, s15
							+ arm_sin_f32(ekf->pan / 2)
 80026b0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80026b4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80026be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026c6:	eeb0 0a47 	vmov.f32	s0, s14
 80026ca:	f00e f855 	bl	8010778 <arm_sin_f32>
 80026ce:	eeb0 9a40 	vmov.f32	s18, s0
									* arm_sin_f32(ekf->pan / 2)
 80026d2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80026d6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80026e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026e8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ec:	f00e f844 	bl	8010778 <arm_sin_f32>
 80026f0:	eef0 7a40 	vmov.f32	s15, s0
 80026f4:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 80026f8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80026fc:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	ed93 7a07 	vldr	s14, [r3, #28]
 8002706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800270e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002980 <EKF_Update+0x920>
 8002712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	f00e f871 	bl	8010800 <arm_cos_f32>
 800271e:	eef0 7a40 	vmov.f32	s15, s0
 8002722:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 8002726:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800272a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	ed93 7a07 	vldr	s14, [r3, #28]
 8002734:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800273c:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002980 <EKF_Update+0x920>
 8002740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002744:	eeb0 0a67 	vmov.f32	s0, s15
 8002748:	f00e f85a 	bl	8010800 <arm_cos_f32>
 800274c:	eef0 7a40 	vmov.f32	s15, s0
 8002750:	ee69 7a27 	vmul.f32	s15, s18, s15
							+ arm_sin_f32(ekf->pan / 2)
 8002754:	ee78 8aa7 	vadd.f32	s17, s17, s15
							- arm_sin_f32(ekf->pan / 2)
 8002758:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800275c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	edd3 7a06 	vldr	s15, [r3, #24]
 8002766:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800276a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800276e:	eeb0 0a47 	vmov.f32	s0, s14
 8002772:	f00e f801 	bl	8010778 <arm_sin_f32>
 8002776:	eeb0 9a40 	vmov.f32	s18, s0
									* arm_sin_f32(ekf->pan / 2)
 800277a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800277e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	edd3 7a06 	vldr	s15, [r3, #24]
 8002788:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800278c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002790:	eeb0 0a47 	vmov.f32	s0, s14
 8002794:	f00d fff0 	bl	8010778 <arm_sin_f32>
 8002798:	eef0 7a40 	vmov.f32	s15, s0
 800279c:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_sin_f32(ekf->tilt / 2 + PI / 2)
 80027a0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80027a4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80027ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002980 <EKF_Update+0x920>
 80027ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027be:	eeb0 0a67 	vmov.f32	s0, s15
 80027c2:	f00d ffd9 	bl	8010778 <arm_sin_f32>
 80027c6:	eef0 7a40 	vmov.f32	s15, s0
 80027ca:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_sin_f32(ekf->tilt / 2 + PI / 2)))
 80027ce:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80027d2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80027dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e4:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002980 <EKF_Update+0x920>
 80027e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ec:	eeb0 0a67 	vmov.f32	s0, s15
 80027f0:	f00d ffc2 	bl	8010778 <arm_sin_f32>
 80027f4:	eef0 7a40 	vmov.f32	s15, s0
 80027f8:	ee69 7a27 	vmul.f32	s15, s18, s15
							- arm_sin_f32(ekf->pan / 2)
 80027fc:	ee78 7ae7 	vsub.f32	s15, s17, s15
					* (arm_cos_f32(ekf->pan / 2) * arm_cos_f32(ekf->pan / 2)
 8002800:	ee28 7a27 	vmul.f32	s14, s16, s15
					/ ekf->m;
 8002804:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002808:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8002812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002816:	ee16 0a90 	vmov	r0, s13
 800281a:	f7fd fe9d 	bl	8000558 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
			- (ekf->Px
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fd fd37 	bl	8000298 <__aeabi_dsub>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f7fe f9c1 	bl	8000bb8 <__aeabi_d2f>
 8002836:	4602      	mov	r2, r0
	H_data[0] = -1 * GRAVITY_MS2
 8002838:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800283c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002840:	601a      	str	r2, [r3, #0]
	H_data[1] = GRAVITY_MS2
			* (2 * ekf->qu.pData[0] * ekf->qu.pData[1]
 8002842:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002846:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002856:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800285a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ 2 * ekf->qu.pData[2] * ekf->qu.pData[3])
 800286c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002870:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	3308      	adds	r3, #8
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002882:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002886:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	330c      	adds	r3, #12
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289c:	ee17 0a90 	vmov	r0, s15
 80028a0:	f7fd fe5a 	bl	8000558 <__aeabi_f2d>
			* (2 * ekf->qu.pData[0] * ekf->qu.pData[1]
 80028a4:	a334      	add	r3, pc, #208	; (adr r3, 8002978 <EKF_Update+0x918>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fead 	bl	8000608 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4614      	mov	r4, r2
 80028b4:	461d      	mov	r5, r3
			- (4 * ekf->Px * arm_cos_f32(ekf->pan / 2)
 80028b6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80028ba:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80028c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028c8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80028cc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80028d0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80028da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028e2:	eeb0 0a47 	vmov.f32	s0, s14
 80028e6:	f00d ff8b 	bl	8010800 <arm_cos_f32>
 80028ea:	eef0 7a40 	vmov.f32	s15, s0
 80028ee:	ee28 8a27 	vmul.f32	s16, s16, s15
					* arm_sin_f32(ekf->pan / 2)
 80028f2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80028f6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002900:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002904:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002908:	eeb0 0a47 	vmov.f32	s0, s14
 800290c:	f00d ff34 	bl	8010778 <arm_sin_f32>
 8002910:	eef0 7a40 	vmov.f32	s15, s0
 8002914:	ee28 8a27 	vmul.f32	s16, s16, s15
					* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 8002918:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800291c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	ed93 7a07 	vldr	s14, [r3, #28]
 8002926:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800292a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002980 <EKF_Update+0x920>
 8002932:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	f00d ff61 	bl	8010800 <arm_cos_f32>
 800293e:	eef0 7a40 	vmov.f32	s15, s0
 8002942:	ee28 8a27 	vmul.f32	s16, s16, s15
					* arm_sin_f32(ekf->tilt / 2 + PI / 2)) / ekf->m;
 8002946:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800294a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	ed93 7a07 	vldr	s14, [r3, #28]
 8002954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800295c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002980 <EKF_Update+0x920>
 8002960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002964:	eeb0 0a67 	vmov.f32	s0, s15
 8002968:	f00d ff06 	bl	8010778 <arm_sin_f32>
 800296c:	eef0 7a40 	vmov.f32	s15, s0
 8002970:	e014      	b.n	800299c <EKF_Update+0x93c>
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	51eb851f 	.word	0x51eb851f
 800297c:	40239eb8 	.word	0x40239eb8
 8002980:	3fc90fdb 	.word	0x3fc90fdb
 8002984:	51eb851f 	.word	0x51eb851f
 8002988:	c0339eb8 	.word	0xc0339eb8
 800298c:	51eb851f 	.word	0x51eb851f
 8002990:	40339eb8 	.word	0x40339eb8
 8002994:	51eb851f 	.word	0x51eb851f
 8002998:	c0239eb8 	.word	0xc0239eb8
 800299c:	ee28 7a27 	vmul.f32	s14, s16, s15
 80029a0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80029a4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80029ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029b2:	ee16 0a90 	vmov	r0, s13
 80029b6:	f7fd fdcf 	bl	8000558 <__aeabi_f2d>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
			- (4 * ekf->Px * arm_cos_f32(ekf->pan / 2)
 80029be:	4620      	mov	r0, r4
 80029c0:	4629      	mov	r1, r5
 80029c2:	f7fd fc69 	bl	8000298 <__aeabi_dsub>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7fe f8f3 	bl	8000bb8 <__aeabi_d2f>
 80029d2:	4602      	mov	r2, r0
	H_data[1] = GRAVITY_MS2
 80029d4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80029d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80029dc:	605a      	str	r2, [r3, #4]
	H_data[2] = GRAVITY_MS2
			* (ekf->qu.pData[0] * ekf->qu.pData[0]
 80029de:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80029e2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80029f2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee27 7a27 	vmul.f32	s14, s14, s15
					- ekf->qu.pData[1] * ekf->qu.pData[1]
 8002a02:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a06:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	edd3 6a00 	vldr	s13, [r3]
 8002a14:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a18:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
					- ekf->qu.pData[2] * ekf->qu.pData[2]
 8002a2e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a32:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	edd3 6a00 	vldr	s13, [r3]
 8002a40:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a44:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a56:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ ekf->qu.pData[3] * ekf->qu.pData[3])
 8002a5a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a5e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	330c      	adds	r3, #12
 8002a68:	edd3 6a00 	vldr	s13, [r3]
 8002a6c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a70:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a86:	ee17 0a90 	vmov	r0, s15
 8002a8a:	f7fd fd65 	bl	8000558 <__aeabi_f2d>
			* (ekf->qu.pData[0] * ekf->qu.pData[0]
 8002a8e:	a3c6      	add	r3, pc, #792	; (adr r3, 8002da8 <EKF_Update+0xd48>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f7fd fdb8 	bl	8000608 <__aeabi_dmul>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	461d      	mov	r5, r3
			- (ekf->Px
 8002aa0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002aa4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	ed93 8a45 	vldr	s16, [r3, #276]	; 0x114
					* (2 * arm_cos_f32(ekf->pan / 2) * arm_cos_f32(ekf->pan / 2)
 8002aae:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002ab2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002abc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ac0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac8:	f00d fe9a 	bl	8010800 <arm_cos_f32>
 8002acc:	eef0 7a40 	vmov.f32	s15, s0
 8002ad0:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002ad4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002ad8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ae2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ae6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aea:	eeb0 0a47 	vmov.f32	s0, s14
 8002aee:	f00d fe87 	bl	8010800 <arm_cos_f32>
 8002af2:	eef0 7a40 	vmov.f32	s15, s0
 8002af6:	ee68 8aa7 	vmul.f32	s17, s17, s15
							* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 8002afa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002afe:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b10:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002da0 <EKF_Update+0xd40>
 8002b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	f00d fe70 	bl	8010800 <arm_cos_f32>
 8002b20:	eef0 7a40 	vmov.f32	s15, s0
 8002b24:	ee68 8aa7 	vmul.f32	s17, s17, s15
							* arm_sin_f32(ekf->tilt / 2 + PI / 2)
 8002b28:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002b2c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b3e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002da0 <EKF_Update+0xd40>
 8002b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b46:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4a:	f00d fe15 	bl	8010778 <arm_sin_f32>
 8002b4e:	eef0 7a40 	vmov.f32	s15, s0
 8002b52:	ee68 8aa7 	vmul.f32	s17, s17, s15
							- 2 * arm_sin_f32(ekf->pan / 2)
 8002b56:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002b5a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b70:	f00d fe02 	bl	8010778 <arm_sin_f32>
 8002b74:	eef0 7a40 	vmov.f32	s15, s0
 8002b78:	ee37 9aa7 	vadd.f32	s18, s15, s15
									* arm_sin_f32(ekf->pan / 2)
 8002b7c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002b80:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b92:	eeb0 0a47 	vmov.f32	s0, s14
 8002b96:	f00d fdef 	bl	8010778 <arm_sin_f32>
 8002b9a:	eef0 7a40 	vmov.f32	s15, s0
 8002b9e:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_cos_f32(ekf->tilt / 2 + PI / 2)
 8002ba2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002ba6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bb0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002da0 <EKF_Update+0xd40>
 8002bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc4:	f00d fe1c 	bl	8010800 <arm_cos_f32>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	ee29 9a27 	vmul.f32	s18, s18, s15
									* arm_sin_f32(ekf->tilt / 2 + PI / 2)))
 8002bd0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002bd4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bde:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002da0 <EKF_Update+0xd40>
 8002bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	f00d fdc1 	bl	8010778 <arm_sin_f32>
 8002bf6:	eef0 7a40 	vmov.f32	s15, s0
 8002bfa:	ee69 7a27 	vmul.f32	s15, s18, s15
							- 2 * arm_sin_f32(ekf->pan / 2)
 8002bfe:	ee78 7ae7 	vsub.f32	s15, s17, s15
					* (2 * arm_cos_f32(ekf->pan / 2) * arm_cos_f32(ekf->pan / 2)
 8002c02:	ee28 7a27 	vmul.f32	s14, s16, s15
					/ ekf->m;
 8002c06:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c0a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8002c14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c18:	ee16 0a90 	vmov	r0, s13
 8002c1c:	f7fd fc9c 	bl	8000558 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
			- (ekf->Px
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fb36 	bl	8000298 <__aeabi_dsub>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ffc0 	bl	8000bb8 <__aeabi_d2f>
 8002c38:	4602      	mov	r2, r0
	H_data[2] = GRAVITY_MS2
 8002c3a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002c42:	609a      	str	r2, [r3, #8]
	arm_matrix_instance_f32 H;
	arm_mat_init_f32(&H, 3, 1, H_data);
 8002c44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c48:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2103      	movs	r1, #3
 8002c50:	f00d fd32 	bl	80106b8 <arm_mat_init_f32>

	// Create vector of sensor readings from accelerometer
	float accel_data[3];
	accel_data[0] = ax_mps2;
 8002c54:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c58:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c5c:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8002c60:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	601a      	str	r2, [r3, #0]
	accel_data[1] = ay_mps2;
 8002c68:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c6c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c70:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8002c74:	f5a2 721f 	sub.w	r2, r2, #636	; 0x27c
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
	accel_data[2] = az_mps2;
 8002c7c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c80:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c84:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8002c88:	f5a2 7220 	sub.w	r2, r2, #640	; 0x280
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	609a      	str	r2, [r3, #8]
	arm_matrix_instance_f32 accel_vector;
	arm_mat_init_f32(&accel_vector, 3, 1, accel_data);
 8002c90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c94:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	f00d fd0c 	bl	80106b8 <arm_mat_init_f32>

	// Subtract accelerometer vector from H vector and store in accelerometer vector
	arm_mat_sub_f32(&accel_vector, &H, &accel_vector);
 8002ca0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002ca4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002ca8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cac:	4618      	mov	r0, r3
 8002cae:	f00d fa7f 	bl	80101b0 <arm_mat_sub_f32>
	// Multiply result in accel_vector by K and store in temp_matrix
	result = arm_mat_mult_f32(&ekf->K, &accel_vector, &temp_matrix4x1);
 8002cb2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002cb6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3320      	adds	r3, #32
 8002cbe:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8002cc2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f00d fb14 	bl	80102f4 <arm_mat_mult_f32>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f

	// Add current state vector to result in temp_matrix and store in current state vector
	result = arm_mat_add_f32(&ekf->qu, &temp_matrix4x1, &ekf->qu);
 8002cd2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002cd6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002ce0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002cea:	4619      	mov	r1, r3
 8002cec:	f00d fce8 	bl	80106c0 <arm_mat_add_f32>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f

	/******** Update P Matrix *********/
	// Create identity matrix
	float identity_matrix_data[SQUARE_MATRIX_SIZE] = { 1, 0, 0, 0, 0, 1, 0, 0,
 8002cf6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002cfa:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002cfe:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <EKF_Update+0xd44>)
 8002d00:	461c      	mov	r4, r3
 8002d02:	4615      	mov	r5, r2
 8002d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0, 0, 1, 0, 0, 0, 0, 1 };
	arm_matrix_instance_f32 I;
	arm_mat_init_f32(&I, SQUARE_MATRIX_ROWS, SQUARE_MATRIX_COLS,
 8002d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d1c:	f107 0020 	add.w	r0, r7, #32
 8002d20:	2204      	movs	r2, #4
 8002d22:	2104      	movs	r1, #4
 8002d24:	f00d fcc8 	bl	80106b8 <arm_mat_init_f32>
			identity_matrix_data);

	// Multiply K by C and store in temp_matrix
	result = arm_mat_mult_f32(&ekf->K, &C, &temp_matrix4x4);
 8002d28:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002d2c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3320      	adds	r3, #32
 8002d34:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002d38:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f00d fad9 	bl	80102f4 <arm_mat_mult_f32>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	// Subtract the result in temp_matrix from I and store in temp_matrix
	result = arm_mat_sub_f32(&I, &temp_matrix4x4, &temp_matrix4x4);
 8002d48:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002d4c:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	4618      	mov	r0, r3
 8002d56:	f00d fa2b 	bl	80101b0 <arm_mat_sub_f32>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	// Multiply the result in temp_result by P and store in P
	result = arm_mat_mult_f32(&temp_matrix4x4, &ekf->P, &ekf->P);
 8002d60:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002d64:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8002d6e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002d72:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002d7c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002d80:	4618      	mov	r0, r3
 8002d82:	f00d fab7 	bl	80102f4 <arm_mat_mult_f32>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
}
 8002d8c:	bf00      	nop
 8002d8e:	f507 7724 	add.w	r7, r7, #656	; 0x290
 8002d92:	46bd      	mov	sp, r7
 8002d94:	ecbd 8b04 	vpop	{d8-d9}
 8002d98:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w
 8002da0:	3fc90fdb 	.word	0x3fc90fdb
 8002da4:	080150f8 	.word	0x080150f8
 8002da8:	51eb851f 	.word	0x51eb851f
 8002dac:	40239eb8 	.word	0x40239eb8

08002db0 <dEP>:
/* dq = dEP(Q,W) returns the Euler parameter derivative
 * for a given Euler parameter vector Q and body
 * angular velocity vector w.
 */
arm_status dEP(arm_matrix_instance_f32 *qu, arm_matrix_instance_f32 *w,
		arm_matrix_instance_f32 *dq) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b094      	sub	sp, #80	; 0x50
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	/* Calculate B Matrix */
	arm_status result;
	arm_matrix_instance_f32 B;
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	eef1 7a67 	vneg.f32	s15, s15
 8002dca:	edc7 7a05 	vstr	s15, [r7, #20]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	eef1 7a67 	vneg.f32	s15, s15
 8002ddc:	edc7 7a06 	vstr	s15, [r7, #24]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	330c      	adds	r3, #12
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eef1 7a67 	vneg.f32	s15, s15
 8002dee:	edc7 7a07 	vstr	s15, [r7, #28]
			qu->pData[0], -1 * qu->pData[3], qu->pData[2], qu->pData[3],
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002df8:	623b      	str	r3, [r7, #32]
			qu->pData[0], -1 * qu->pData[3], qu->pData[2], qu->pData[3],
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eef1 7a67 	vneg.f32	s15, s15
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			qu->pData[0], -1 * qu->pData[3], qu->pData[2], qu->pData[3],
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
			qu->pData[0], -1 * qu->pData[3], qu->pData[2], qu->pData[3],
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			qu->pData[0], -1 * qu->pData[1], -1 * qu->pData[2], qu->pData[1],
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
			qu->pData[0], -1 * qu->pData[1], -1 * qu->pData[2], qu->pData[1],
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	eef1 7a67 	vneg.f32	s15, s15
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e32:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			qu->pData[0], -1 * qu->pData[1], -1 * qu->pData[2], qu->pData[1],
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	eef1 7a67 	vneg.f32	s15, s15
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			qu->pData[0], -1 * qu->pData[1], -1 * qu->pData[2], qu->pData[1],
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
			qu->pData[0] };
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
	float B_data[] = { -1 * qu->pData[1], -1 * qu->pData[2], -1 * qu->pData[3],
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
	arm_mat_init_f32(&B, 4, 3, B_data);
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002e60:	2203      	movs	r2, #3
 8002e62:	2104      	movs	r1, #4
 8002e64:	f00d fc28 	bl	80106b8 <arm_mat_init_f32>

	/* Multiply B by w and store in dq */
	result = arm_mat_mult_f32(&B, w, dq);
 8002e68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f00d fa3f 	bl	80102f4 <arm_mat_mult_f32>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (result)
 8002e7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <dEP+0xda>
		return result;
 8002e84:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e88:	e00c      	b.n	8002ea4 <dEP+0xf4>

	/* Multiply result in dq by 0.5 and store in dq */
	arm_mat_scale_f32(dq, 0.5, dq);
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f00d f9e9 	bl	8010268 <arm_mat_scale_f32>
	if (result)
 8002e96:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <dEP+0xf4>
		return result;
 8002e9e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002ea2:	e7ff      	b.n	8002ea4 <dEP+0xf4>
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3750      	adds	r7, #80	; 0x50
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	0000      	movs	r0, r0
	...

08002eb0 <EP2Euler321>:

/*
 * E = EP2Euler321(Q) translates the Euler parameter vector
 * Q into the corresponding (3-2-1) Euler angle set.
 */
void EP2Euler321(float *qu, float *euler) {
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
	float q0 = qu[0];
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61fb      	str	r3, [r7, #28]
	float q1 = qu[1];
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61bb      	str	r3, [r7, #24]
	float q2 = qu[2];
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	617b      	str	r3, [r7, #20]
	float q3 = qu[3];
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	613b      	str	r3, [r7, #16]
	// Normalise input quaternion
	float d = sqrt(pow(q0,2)+pow(q1,2)+pow(q2,2)+pow(q3,2));
 8002ed2:	69f8      	ldr	r0, [r7, #28]
 8002ed4:	f7fd fb40 	bl	8000558 <__aeabi_f2d>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8003120 <EP2Euler321+0x270>
 8002ee0:	ec43 2b10 	vmov	d0, r2, r3
 8002ee4:	f010 fd2c 	bl	8013940 <pow>
 8002ee8:	ec55 4b10 	vmov	r4, r5, d0
 8002eec:	69b8      	ldr	r0, [r7, #24]
 8002eee:	f7fd fb33 	bl	8000558 <__aeabi_f2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8003120 <EP2Euler321+0x270>
 8002efa:	ec43 2b10 	vmov	d0, r2, r3
 8002efe:	f010 fd1f 	bl	8013940 <pow>
 8002f02:	ec53 2b10 	vmov	r2, r3, d0
 8002f06:	4620      	mov	r0, r4
 8002f08:	4629      	mov	r1, r5
 8002f0a:	f7fd f9c7 	bl	800029c <__adddf3>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4614      	mov	r4, r2
 8002f14:	461d      	mov	r5, r3
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7fd fb1e 	bl	8000558 <__aeabi_f2d>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8003120 <EP2Euler321+0x270>
 8002f24:	ec43 2b10 	vmov	d0, r2, r3
 8002f28:	f010 fd0a 	bl	8013940 <pow>
 8002f2c:	ec53 2b10 	vmov	r2, r3, d0
 8002f30:	4620      	mov	r0, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	f7fd f9b2 	bl	800029c <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	461d      	mov	r5, r3
 8002f40:	6938      	ldr	r0, [r7, #16]
 8002f42:	f7fd fb09 	bl	8000558 <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8003120 <EP2Euler321+0x270>
 8002f4e:	ec43 2b10 	vmov	d0, r2, r3
 8002f52:	f010 fcf5 	bl	8013940 <pow>
 8002f56:	ec53 2b10 	vmov	r2, r3, d0
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f7fd f99d 	bl	800029c <__adddf3>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	ec43 2b17 	vmov	d7, r2, r3
 8002f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6e:	eef0 0a67 	vmov.f32	s1, s15
 8002f72:	f010 fd55 	bl	8013a20 <sqrt>
 8002f76:	ec53 2b10 	vmov	r2, r3, d0
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7fd fe1b 	bl	8000bb8 <__aeabi_d2f>
 8002f82:	4603      	mov	r3, r0
 8002f84:	60fb      	str	r3, [r7, #12]
	q0 /= d;
 8002f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f92:	edc7 7a07 	vstr	s15, [r7, #28]
	q1 /= d;
 8002f96:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa2:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 /= d;
 8002fa6:	edd7 6a05 	vldr	s13, [r7, #20]
 8002faa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb2:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 /= d;
 8002fb6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc2:	edc7 7a04 	vstr	s15, [r7, #16]
	euler[0] = atan2(2 * (q1 * q2 + q0 * q3),
 8002fc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002fca:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fe6:	ee17 0a90 	vmov	r0, s15
 8002fea:	f7fd fab5 	bl	8000558 <__aeabi_f2d>
 8002fee:	4604      	mov	r4, r0
 8002ff0:	460d      	mov	r5, r1
			q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8002ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ff6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ffa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ffe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003006:	edd7 7a05 	vldr	s15, [r7, #20]
 800300a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800300e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003012:	edd7 7a04 	vldr	s15, [r7, #16]
 8003016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
	euler[0] = atan2(2 * (q1 * q2 + q0 * q3),
 800301e:	ee17 0a90 	vmov	r0, s15
 8003022:	f7fd fa99 	bl	8000558 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ec43 2b11 	vmov	d1, r2, r3
 800302e:	ec45 4b10 	vmov	d0, r4, r5
 8003032:	f010 fc83 	bl	801393c <atan2>
 8003036:	ec53 2b10 	vmov	r2, r3, d0
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f7fd fdbb 	bl	8000bb8 <__aeabi_d2f>
 8003042:	4602      	mov	r2, r0
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	601a      	str	r2, [r3, #0]
	euler[1] = asin(-2 * (q1 * q3 - q0 * q2));
 8003048:	ed97 7a06 	vldr	s14, [r7, #24]
 800304c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003054:	edd7 6a07 	vldr	s13, [r7, #28]
 8003058:	edd7 7a05 	vldr	s15, [r7, #20]
 800305c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003064:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800306c:	ee17 0a90 	vmov	r0, s15
 8003070:	f7fd fa72 	bl	8000558 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	ec43 2b10 	vmov	d0, r2, r3
 800307c:	f010 fc2a 	bl	80138d4 <asin>
 8003080:	ec51 0b10 	vmov	r0, r1, d0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1d1c      	adds	r4, r3, #4
 8003088:	f7fd fd96 	bl	8000bb8 <__aeabi_d2f>
 800308c:	4603      	mov	r3, r0
 800308e:	6023      	str	r3, [r4, #0]
	euler[2] = atan2(2 * (q2 * q3 + q0 * q1),
 8003090:	ed97 7a05 	vldr	s14, [r7, #20]
 8003094:	edd7 7a04 	vldr	s15, [r7, #16]
 8003098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800309c:	edd7 6a07 	vldr	s13, [r7, #28]
 80030a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030b0:	ee17 0a90 	vmov	r0, s15
 80030b4:	f7fd fa50 	bl	8000558 <__aeabi_f2d>
 80030b8:	4604      	mov	r4, r0
 80030ba:	460d      	mov	r5, r1
			q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80030bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80030c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80030c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80030c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80030e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
	euler[2] = atan2(2 * (q2 * q3 + q0 * q1),
 80030e8:	ee17 0a90 	vmov	r0, s15
 80030ec:	f7fd fa34 	bl	8000558 <__aeabi_f2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	ec43 2b11 	vmov	d1, r2, r3
 80030f8:	ec45 4b10 	vmov	d0, r4, r5
 80030fc:	f010 fc1e 	bl	801393c <atan2>
 8003100:	ec51 0b10 	vmov	r0, r1, d0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f103 0408 	add.w	r4, r3, #8
 800310a:	f7fd fd55 	bl	8000bb8 <__aeabi_d2f>
 800310e:	4603      	mov	r3, r0
 8003110:	6023      	str	r3, [r4, #0]
}
 8003112:	bf00      	nop
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bdb0      	pop	{r4, r5, r7, pc}
 800311a:	bf00      	nop
 800311c:	f3af 8000 	nop.w
 8003120:	00000000 	.word	0x00000000
 8003124:	40000000 	.word	0x40000000

08003128 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8003128:	b4b0      	push	{r4, r5, r7}
 800312a:	b08f      	sub	sp, #60	; 0x3c
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8003130:	f240 13b1 	movw	r3, #433	; 0x1b1
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 8003136:	2307      	movs	r3, #7
 8003138:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 800313c:	2307      	movs	r3, #7
 800313e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 8003148:	23ff      	movs	r3, #255	; 0xff
 800314a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 800314e:	2364      	movs	r3, #100	; 0x64
 8003150:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 8003154:	2308      	movs	r3, #8
 8003156:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	461d      	mov	r5, r3
 800315c:	f107 0408 	add.w	r4, r7, #8
 8003160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003168:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800316c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	373c      	adds	r7, #60	; 0x3c
 8003174:	46bd      	mov	sp, r7
 8003176:	bcb0      	pop	{r4, r5, r7}
 8003178:	4770      	bx	lr

0800317a <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6898      	ldr	r0, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	899b      	ldrh	r3, [r3, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	4619      	mov	r1, r3
 800318e:	f002 fd77 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003192:	2001      	movs	r0, #1
 8003194:	f002 f848 	bl	8005228 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6898      	ldr	r0, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	899b      	ldrh	r3, [r3, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	4619      	mov	r1, r3
 80031a4:	f002 fd6c 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	f002 f83d 	bl	8005228 <HAL_Delay>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80031c0:	2101      	movs	r1, #1
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa64 	bl	8003690 <LoRa_read>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73bb      	strb	r3, [r7, #14]
	data = read;
 80031cc:	7bbb      	ldrb	r3, [r7, #14]
 80031ce:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	f023 0307 	bic.w	r3, r3, #7
 80031dc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
 80031e4:	e05e      	b.n	80032a4 <LoRa_gotoMode+0xee>
	}else if (mode == STNBY_MODE){
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10c      	bne.n	8003206 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80031ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031f0:	f023 0307 	bic.w	r3, r3, #7
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b25b      	sxtb	r3, r3
 80031fc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	61da      	str	r2, [r3, #28]
 8003204:	e04e      	b.n	80032a4 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_TX) {
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d10c      	bne.n	8003226 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x02;
 800320c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003210:	f023 0307 	bic.w	r3, r3, #7
 8003214:	b25b      	sxtb	r3, r3
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	b25b      	sxtb	r3, r3
 800321c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = FS_MODE_TX;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	e03e      	b.n	80032a4 <LoRa_gotoMode+0xee>
	}else if (mode == TRANSMIT_MODE){
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d10c      	bne.n	8003246 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x03;
 800322c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003230:	f023 0307 	bic.w	r3, r3, #7
 8003234:	b25b      	sxtb	r3, r3
 8003236:	f043 0303 	orr.w	r3, r3, #3
 800323a:	b25b      	sxtb	r3, r3
 800323c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	61da      	str	r2, [r3, #28]
 8003244:	e02e      	b.n	80032a4 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_RX){
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d10c      	bne.n	8003266 <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x04;
 800324c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003250:	f023 0307 	bic.w	r3, r3, #7
 8003254:	b25b      	sxtb	r3, r3
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	b25b      	sxtb	r3, r3
 800325c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	61da      	str	r2, [r3, #28]
 8003264:	e01e      	b.n	80032a4 <LoRa_gotoMode+0xee>
	}else if (mode == RXCONTIN_MODE){
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d10c      	bne.n	8003286 <LoRa_gotoMode+0xd0>
		data = (read & 0xF8) | 0x05;
 800326c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	b25b      	sxtb	r3, r3
 8003276:	f043 0305 	orr.w	r3, r3, #5
 800327a:	b25b      	sxtb	r3, r3
 800327c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2205      	movs	r2, #5
 8003282:	61da      	str	r2, [r3, #28]
 8003284:	e00e      	b.n	80032a4 <LoRa_gotoMode+0xee>
	}else if (mode == RXSINGLE_MODE){
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d10b      	bne.n	80032a4 <LoRa_gotoMode+0xee>
		data = (read & 0xF8) | 0x06;
 800328c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003290:	f023 0307 	bic.w	r3, r3, #7
 8003294:	b25b      	sxtb	r3, r3
 8003296:	f043 0306 	orr.w	r3, r3, #6
 800329a:	b25b      	sxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2206      	movs	r2, #6
 80032a2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	461a      	mov	r2, r3
 80032a8:	2101      	movs	r1, #1
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa0a 	bl	80036c4 <LoRa_write>
	HAL_Delay(10);
 80032b0:	200a      	movs	r0, #10
 80032b2:	f001 ffb9 	bl	8005228 <HAL_Delay>
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <LoRa_setModulation>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes. 0->FSK, 1->OOK, 2->LoRa
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setModulation(LoRa* _LoRa, int mode) {
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
	uint8_t read = LoRa_read(_LoRa, RegOpMode);
 80032c8:	2101      	movs	r1, #1
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f9e0 	bl	8003690 <LoRa_read>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
	uint8_t data = read;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	73bb      	strb	r3, [r7, #14]
//	uint8_t prev_mode = _LoRa->current_mode;

	// Set modem to sleep mode
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80032d8:	2100      	movs	r1, #0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ff6b 	bl	80031b6 <LoRa_gotoMode>

	// Toggle first RegOpMode bit
	if(mode == 2) {	// LoRa
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d116      	bne.n	8003314 <LoRa_setModulation+0x56>
		LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80032e6:	2100      	movs	r1, #0
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff64 	bl	80031b6 <LoRa_gotoMode>
		LoRa_write(_LoRa, RegOpMode, 0b10000000);
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	2101      	movs	r1, #1
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9e6 	bl	80036c4 <LoRa_write>
		HAL_Delay(100);
 80032f8:	2064      	movs	r0, #100	; 0x64
 80032fa:	f001 ff95 	bl	8005228 <HAL_Delay>
		read = LoRa_read(_LoRa, RegOpMode);
 80032fe:	2101      	movs	r1, #1
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f9c5 	bl	8003690 <LoRa_read>
 8003306:	4603      	mov	r3, r0
 8003308:	73fb      	strb	r3, [r7, #15]
		_LoRa->modulationMode = LORA_MODULATION;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003312:	e037      	b.n	8003384 <LoRa_setModulation+0xc6>
	}
	else if (mode == 1) {	// OOK
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d11b      	bne.n	8003352 <LoRa_setModulation+0x94>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	2101      	movs	r1, #1
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9cc 	bl	80036c4 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60) | 0x20);
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	b25b      	sxtb	r3, r3
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	b25b      	sxtb	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	2101      	movs	r1, #1
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9be 	bl	80036c4 <LoRa_write>
		_LoRa->modulationMode = OOK_MODULATION;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003350:	e018      	b.n	8003384 <LoRa_setModulation+0xc6>
	}
	else if (mode == 0) {	// FSK
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d115      	bne.n	8003384 <LoRa_setModulation+0xc6>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	2101      	movs	r1, #1
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f9ad 	bl	80036c4 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60));
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	2101      	movs	r1, #1
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9a4 	bl	80036c4 <LoRa_write>
		_LoRa->modulationMode = FSK_MODULATION;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	HAL_Delay(10);
 8003384:	200a      	movs	r0, #10
 8003386:	f001 ff4f 	bl	8005228 <HAL_Delay>
//	LoRa_gotoMode(_LoRa, prev_mode);
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	889b      	ldrh	r3, [r3, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	4619      	mov	r1, r3
 80033ae:	f002 fc67 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	f004 fbae 	bl	8007b1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80033c2:	bf00      	nop
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 ff97 	bl	80082fc <HAL_SPI_GetState>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d1f7      	bne.n	80033c4 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6998      	ldr	r0, [r3, #24]
 80033d8:	8b3a      	ldrh	r2, [r7, #24]
 80033da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	f004 fcd9 	bl	8007d96 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80033e4:	bf00      	nop
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 ff86 	bl	80082fc <HAL_SPI_GetState>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1f7      	bne.n	80033e6 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	889b      	ldrh	r3, [r3, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	4619      	mov	r1, r3
 8003402:	f002 fc3d 	bl	8005c80 <HAL_GPIO_WritePin>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	889b      	ldrh	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	4619      	mov	r1, r3
 800342a:	f002 fc29 	bl	8005c80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6998      	ldr	r0, [r3, #24]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	f004 fb70 	bl	8007b1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800343e:	bf00      	nop
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 ff59 	bl	80082fc <HAL_SPI_GetState>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d1f7      	bne.n	8003440 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6998      	ldr	r0, [r3, #24]
 8003454:	8b3a      	ldrh	r2, [r7, #24]
 8003456:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	f004 fb5f 	bl	8007b1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003460:	bf00      	nop
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 ff48 	bl	80082fc <HAL_SPI_GetState>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d1f7      	bne.n	8003462 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	889b      	ldrh	r3, [r3, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	4619      	mov	r1, r3
 800347e:	f002 fbff 	bl	8005c80 <HAL_GPIO_WritePin>
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	04db      	lsls	r3, r3, #19
 8003498:	115b      	asrs	r3, r3, #5
 800349a:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	0c1b      	lsrs	r3, r3, #16
 80034a0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80034a2:	7afb      	ldrb	r3, [r7, #11]
 80034a4:	461a      	mov	r2, r3
 80034a6:	2106      	movs	r1, #6
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f90b 	bl	80036c4 <LoRa_write>
	HAL_Delay(5);
 80034ae:	2005      	movs	r0, #5
 80034b0:	f001 feba 	bl	8005228 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	461a      	mov	r2, r3
 80034be:	2107      	movs	r1, #7
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8ff 	bl	80036c4 <LoRa_write>
	HAL_Delay(5);
 80034c6:	2005      	movs	r0, #5
 80034c8:	f001 feae 	bl	8005228 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	461a      	mov	r2, r3
 80034d4:	2108      	movs	r1, #8
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8f4 	bl	80036c4 <LoRa_write>
	HAL_Delay(5);
 80034dc:	2005      	movs	r0, #5
 80034de:	f001 fea3 	bl	8005228 <HAL_Delay>
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	dd01      	ble.n	80034fe <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80034fa:	230c      	movs	r3, #12
 80034fc:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b06      	cmp	r3, #6
 8003502:	dc01      	bgt.n	8003508 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8003504:	2307      	movs	r3, #7
 8003506:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8003508:	211e      	movs	r1, #30
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8c0 	bl	8003690 <LoRa_read>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8003514:	200a      	movs	r0, #10
 8003516:	f001 fe87 	bl	8005228 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	b2da      	uxtb	r2, r3
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4413      	add	r3, r2
 800352c:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800352e:	7bbb      	ldrb	r3, [r7, #14]
 8003530:	461a      	mov	r2, r3
 8003532:	211e      	movs	r1, #30
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8c5 	bl	80036c4 <LoRa_write>
	HAL_Delay(10);
 800353a:	200a      	movs	r0, #10
 800353c:	f001 fe74 	bl	8005228 <HAL_Delay>
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	461a      	mov	r2, r3
 8003558:	2109      	movs	r1, #9
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8b2 	bl	80036c4 <LoRa_write>
	HAL_Delay(10);
 8003560:	200a      	movs	r0, #10
 8003562:	f001 fe61 	bl	8005228 <HAL_Delay>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	2b2c      	cmp	r3, #44	; 0x2c
 8003584:	d801      	bhi.n	800358a <LoRa_setOCP+0x1a>
		current = 45;
 8003586:	232d      	movs	r3, #45	; 0x2d
 8003588:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	2bf0      	cmp	r3, #240	; 0xf0
 800358e:	d901      	bls.n	8003594 <LoRa_setOCP+0x24>
		current = 240;
 8003590:	23f0      	movs	r3, #240	; 0xf0
 8003592:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	2b78      	cmp	r3, #120	; 0x78
 8003598:	d809      	bhi.n	80035ae <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	3b2d      	subs	r3, #45	; 0x2d
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <LoRa_setOCP+0x78>)
 80035a0:	fb82 1203 	smull	r1, r2, r2, r3
 80035a4:	1052      	asrs	r2, r2, #1
 80035a6:	17db      	asrs	r3, r3, #31
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e00b      	b.n	80035c6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	2bf0      	cmp	r3, #240	; 0xf0
 80035b2:	d808      	bhi.n	80035c6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	331e      	adds	r3, #30
 80035b8:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <LoRa_setOCP+0x78>)
 80035ba:	fb82 1203 	smull	r1, r2, r2, r3
 80035be:	1092      	asrs	r2, r2, #2
 80035c0:	17db      	asrs	r3, r3, #31
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	3320      	adds	r3, #32
 80035ca:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	461a      	mov	r2, r3
 80035d0:	210b      	movs	r1, #11
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f876 	bl	80036c4 <LoRa_write>
	HAL_Delay(10);
 80035d8:	200a      	movs	r0, #10
 80035da:	f001 fe25 	bl	8005228 <HAL_Delay>
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	66666667 	.word	0x66666667

080035ec <LoRa_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setCRCon(LoRa* _LoRa) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d110      	bne.n	8003620 <LoRa_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 80035fe:	211e      	movs	r1, #30
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f845 	bl	8003690 <LoRa_read>
 8003606:	4603      	mov	r3, r0
 8003608:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xFB) | 0x04;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	461a      	mov	r2, r3
 8003616:	211e      	movs	r1, #30
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f853 	bl	80036c4 <LoRa_write>
	else {
		read = LoRa_read(_LoRa, RegPacketConfig1);
		data = (read & 0xEF) | 0x10;
		LoRa_write(_LoRa, RegModemConfig2, data);
	}
}
 800361e:	e00f      	b.n	8003640 <LoRa_setCRCon+0x54>
		read = LoRa_read(_LoRa, RegPacketConfig1);
 8003620:	2130      	movs	r1, #48	; 0x30
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f834 	bl	8003690 <LoRa_read>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xEF) | 0x10;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	f043 0310 	orr.w	r3, r3, #16
 8003632:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	461a      	mov	r2, r3
 8003638:	211e      	movs	r1, #30
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f842 	bl	80036c4 <LoRa_write>
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003656:	2b02      	cmp	r3, #2
 8003658:	d110      	bne.n	800367c <LoRa_setTOMsb_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 800365a:	211e      	movs	r1, #30
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f817 	bl	8003690 <LoRa_read>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
		data = read | 0x07;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	f043 0307 	orr.w	r3, r3, #7
 800366c:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	461a      	mov	r2, r3
 8003672:	211e      	movs	r1, #30
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f825 	bl	80036c4 <LoRa_write>
 800367a:	e002      	b.n	8003682 <LoRa_setTOMsb_setCRCon+0x3a>
	}
	else {
		LoRa_setCRCon(_LoRa);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffb5 	bl	80035ec <LoRa_setCRCon>
	}

	HAL_Delay(10);
 8003682:	200a      	movs	r0, #10
 8003684:	f001 fdd0 	bl	8005228 <HAL_Delay>
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80036a6:	f107 030f 	add.w	r3, r7, #15
 80036aa:	f107 010e 	add.w	r1, r7, #14
 80036ae:	2201      	movs	r2, #1
 80036b0:	9200      	str	r2, [sp, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fe6c 	bl	8003392 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
 80036d0:	4613      	mov	r3, r2
 80036d2:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	73bb      	strb	r3, [r7, #14]
	data = value;
 80036de:	78bb      	ldrb	r3, [r7, #2]
 80036e0:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80036e2:	f107 030f 	add.w	r3, r7, #15
 80036e6:	f107 010e 	add.w	r1, r7, #14
 80036ea:	2201      	movs	r2, #1
 80036ec:	9200      	str	r2, [sp, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fe8c 	bl	800340e <LoRa_writeReg>
	//HAL_Delay(5);
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	461a      	mov	r2, r3
 800370a:	460b      	mov	r3, r1
 800370c:	72fb      	strb	r3, [r7, #11]
 800370e:	4613      	mov	r3, r2
 8003710:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003718:	b2db      	uxtb	r3, r3
 800371a:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	889b      	ldrh	r3, [r3, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	4619      	mov	r1, r3
 8003728:	f002 faaa 	bl	8005c80 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6998      	ldr	r0, [r3, #24]
 8003730:	f107 0117 	add.w	r1, r7, #23
 8003734:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003738:	2201      	movs	r2, #1
 800373a:	f004 f9f0 	bl	8007b1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800373e:	bf00      	nop
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4618      	mov	r0, r3
 8003746:	f004 fdd9 	bl	80082fc <HAL_SPI_GetState>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d1f7      	bne.n	8003740 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6998      	ldr	r0, [r3, #24]
 8003754:	7abb      	ldrb	r3, [r7, #10]
 8003756:	b29a      	uxth	r2, r3
 8003758:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	f004 f9de 	bl	8007b1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003762:	bf00      	nop
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4618      	mov	r0, r3
 800376a:	f004 fdc7 	bl	80082fc <HAL_SPI_GetState>
 800376e:	4603      	mov	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d1f7      	bne.n	8003764 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	889b      	ldrh	r3, [r3, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	4619      	mov	r1, r3
 8003780:	f002 fa7e 	bl	8005c80 <HAL_GPIO_WritePin>
}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

	return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	4611      	mov	r1, r2
 80037ae:	461a      	mov	r2, r3
 80037b0:	460b      	mov	r3, r1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	4613      	mov	r3, r2
 80037b6:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80037be:	2101      	movs	r1, #1
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fcf8 	bl	80031b6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80037c6:	210e      	movs	r1, #14
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff61 	bl	8003690 <LoRa_read>
 80037ce:	4603      	mov	r3, r0
 80037d0:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	461a      	mov	r2, r3
 80037d6:	210d      	movs	r1, #13
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff ff73 	bl	80036c4 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	461a      	mov	r2, r3
 80037e2:	2132      	movs	r1, #50	; 0x32
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff6d 	bl	80036c4 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	2100      	movs	r1, #0
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff ff84 	bl	80036fe <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80037f6:	2103      	movs	r1, #3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff fcdc 	bl	80031b6 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80037fe:	2112      	movs	r1, #18
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff ff45 	bl	8003690 <LoRa_read>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	2112      	movs	r1, #18
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff ff53 	bl	80036c4 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff fcc8 	bl	80031b6 <LoRa_gotoMode>
			return 1;
 8003826:	2301      	movs	r3, #1
 8003828:	e00f      	b.n	800384a <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800382a:	88bb      	ldrh	r3, [r7, #4]
 800382c:	3b01      	subs	r3, #1
 800382e:	80bb      	strh	r3, [r7, #4]
 8003830:	88bb      	ldrh	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fcbc 	bl	80031b6 <LoRa_gotoMode>
				return 0;
 800383e:	2300      	movs	r3, #0
 8003840:	e003      	b.n	800384a <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f001 fcf0 	bl	8005228 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8003848:	e7d9      	b.n	80037fe <LoRa_transmit+0x5c>
	}

}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800385a:	2105      	movs	r1, #5
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fcaa 	bl	80031b6 <LoRa_gotoMode>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800386a:	b590      	push	{r4, r7, lr}
 800386c:	b089      	sub	sp, #36	; 0x24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	4613      	mov	r3, r2
 8003876:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e007      	b.n	8003892 <LoRa_receive+0x28>
		data[i]=0;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4413      	add	r3, r2
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3301      	adds	r3, #1
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	dbf3      	blt.n	8003882 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800389a:	2101      	movs	r1, #1
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff fc8a 	bl	80031b6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80038a2:	2112      	movs	r1, #18
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fef3 	bl	8003690 <LoRa_read>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02f      	beq.n	8003918 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	2112      	movs	r1, #18
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff ff01 	bl	80036c4 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80038c2:	2113      	movs	r1, #19
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fee3 	bl	8003690 <LoRa_read>
 80038ca:	4603      	mov	r3, r0
 80038cc:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80038ce:	2110      	movs	r1, #16
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff fedd 	bl	8003690 <LoRa_read>
 80038d6:	4603      	mov	r3, r0
 80038d8:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	461a      	mov	r2, r3
 80038de:	210d      	movs	r1, #13
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff feef 	bl	80036c4 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80038e6:	7cba      	ldrb	r2, [r7, #18]
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bf28      	it	cs
 80038ee:	4613      	movcs	r3, r2
 80038f0:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e00b      	b.n	8003910 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	18d4      	adds	r4, r2, r3
 80038fe:	2100      	movs	r1, #0
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fec5 	bl	8003690 <LoRa_read>
 8003906:	4603      	mov	r3, r0
 8003908:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3301      	adds	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	dbef      	blt.n	80038f8 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8003918:	2105      	movs	r1, #5
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fc4b 	bl	80031b6 <LoRa_gotoMode>
    return min;
 8003920:	7ffb      	ldrb	r3, [r7, #31]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}

0800392a <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	// Check modulation mode
	read = LoRa_read(_LoRa, RegOpMode);
 8003932:	2101      	movs	r1, #1
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff feab 	bl	8003690 <LoRa_read>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]
	if((read & 0x80) == 0x80) _LoRa->modulationMode = LORA_MODULATION;
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	da04      	bge.n	8003950 <LoRa_init+0x26>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800394e:	e012      	b.n	8003976 <LoRa_init+0x4c>
	else {
		if((read & 0x60) == 0x00) _LoRa->modulationMode = FSK_MODULATION;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <LoRa_init+0x3a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003962:	e008      	b.n	8003976 <LoRa_init+0x4c>
		else if((read & 0x60) == 0x20) _LoRa->modulationMode = OOK_MODULATION;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800396a:	2b20      	cmp	r3, #32
 800396c:	d103      	bne.n	8003976 <LoRa_init+0x4c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(LoRa_isvalid(_LoRa)){
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff08 	bl	800378c <LoRa_isvalid>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80c8 	beq.w	8003b14 <LoRa_init+0x1ea>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8003984:	2100      	movs	r1, #0
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fc15 	bl	80031b6 <LoRa_gotoMode>
			HAL_Delay(10);
 800398c:	200a      	movs	r0, #10
 800398e:	f001 fc4b 	bl	8005228 <HAL_Delay>
			if( _LoRa->modulationMode == LORA_MODULATION) {
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003998:	2b02      	cmp	r3, #2
 800399a:	d115      	bne.n	80039c8 <LoRa_init+0x9e>
				// turn on lora mode:
				read = LoRa_read(_LoRa, RegOpMode);
 800399c:	2101      	movs	r1, #1
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fe76 	bl	8003690 <LoRa_read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	73fb      	strb	r3, [r7, #15]
				HAL_Delay(10);
 80039a8:	200a      	movs	r0, #10
 80039aa:	f001 fc3d 	bl	8005228 <HAL_Delay>
				data = read | 0x80;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039b4:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 80039b6:	7bbb      	ldrb	r3, [r7, #14]
 80039b8:	461a      	mov	r2, r3
 80039ba:	2101      	movs	r1, #1
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fe81 	bl	80036c4 <LoRa_write>
				HAL_Delay(100);
 80039c2:	2064      	movs	r0, #100	; 0x64
 80039c4:	f001 fc30 	bl	8005228 <HAL_Delay>
			}

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fd5b 	bl	800348a <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fdb3 	bl	8003548 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fdc0 	bl	8003570 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80039f0:	2223      	movs	r2, #35	; 0x23
 80039f2:	210c      	movs	r1, #12
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fe65 	bl	80036c4 <LoRa_write>

		// Set Tx start condition
			if(_LoRa->modulationMode != LORA_MODULATION) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d004      	beq.n	8003a0e <LoRa_init+0xe4>
				LoRa_write(_LoRa, RegFifoThresh, 0x80);
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	2135      	movs	r1, #53	; 0x35
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fe5b 	bl	80036c4 <LoRa_write>
			}

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff fe1a 	bl	8003648 <LoRa_setTOMsb_setCRCon>
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d11f      	bne.n	8003a5e <LoRa_init+0x134>
				LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fd5f 	bl	80034ea <LoRa_setSpreadingFactor>
				// set Timeout Lsb:
				LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8003a2c:	22ff      	movs	r2, #255	; 0xff
 8003a2e:	211f      	movs	r1, #31
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe47 	bl	80036c4 <LoRa_write>
				// set bandwidth, coding rate and expilicit mode:
				// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
				//       bits represent --> |   bandwidth   |     CR    |I/E|
				data = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73bb      	strb	r3, [r7, #14]
				data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegModemConfig1, data);
 8003a52:	7bbb      	ldrb	r3, [r7, #14]
 8003a54:	461a      	mov	r2, r3
 8003a56:	211d      	movs	r1, #29
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fe33 	bl	80036c4 <LoRa_write>
			}

		// set preamble:
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d112      	bne.n	8003a8e <LoRa_init+0x164>
				LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	2120      	movs	r1, #32
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fe24 	bl	80036c4 <LoRa_write>
				LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	2121      	movs	r1, #33	; 0x21
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fe1c 	bl	80036c4 <LoRa_write>
 8003a8c:	e004      	b.n	8003a98 <LoRa_init+0x16e>
			}
			else {
				LoRa_write(_LoRa, RegPreambleDetect, 0xAA);		// Preamble detect ON, preable detect size 2 bytes, detector tolerance 0x0A (default)
 8003a8e:	22aa      	movs	r2, #170	; 0xaa
 8003a90:	211f      	movs	r1, #31
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fe16 	bl	80036c4 <LoRa_write>
			}

		// DIO mapping:   --> DIO: RxDone
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d110      	bne.n	8003ac4 <LoRa_init+0x19a>
				read = LoRa_read(_LoRa, RegDioMapping1);
 8003aa2:	2140      	movs	r1, #64	; 0x40
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fdf3 	bl	8003690 <LoRa_read>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003ab4:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8003ab6:	7bbb      	ldrb	r3, [r7, #14]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fe01 	bl	80036c4 <LoRa_write>
 8003ac2:	e00f      	b.n	8003ae4 <LoRa_init+0x1ba>
			}
			else {
				// DIO2: RxDone
				read = LoRa_read(_LoRa, RegDioMapping1);
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff fde2 	bl	8003690 <LoRa_read>
 8003acc:	4603      	mov	r3, r0
 8003ace:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003ad6:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	461a      	mov	r2, r3
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fdf0 	bl	80036c4 <LoRa_write>
			}


		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fb65 	bl	80031b6 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8003af2:	200a      	movs	r0, #10
 8003af4:	f001 fb98 	bl	8005228 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8003af8:	2142      	movs	r1, #66	; 0x42
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fdc8 	bl	8003690 <LoRa_read>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b12      	cmp	r3, #18
 8003b08:	d101      	bne.n	8003b0e <LoRa_init+0x1e4>
				return LORA_OK;
 8003b0a:	23c8      	movs	r3, #200	; 0xc8
 8003b0c:	e004      	b.n	8003b18 <LoRa_init+0x1ee>
			else
				return LORA_NOT_FOUND;
 8003b0e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003b12:	e001      	b.n	8003b18 <LoRa_init+0x1ee>
	}
	else {
		return LORA_UNAVAILABLE;
 8003b14:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <micros>:
float EKF_R[9] = { 496, 025, 271, 025, 379, 326, 271, 326, 998 }; // These are in units of 100*m/s^2
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros(TIM_HandleTypeDef *timer) {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(timer);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b42:	f001 faff 	bl	8005144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b46:	f000 f8df 	bl	8003d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b4a:	f000 fb09 	bl	8004160 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003b4e:	f000 f997 	bl	8003e80 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003b52:	f000 f9cb 	bl	8003eec <MX_SPI2_Init>
  MX_SPI3_Init();
 8003b56:	f000 f9ff 	bl	8003f58 <MX_SPI3_Init>
  MX_ADC1_Init();
 8003b5a:	f000 f93f 	bl	8003ddc <MX_ADC1_Init>
  MX_TIM3_Init();
 8003b5e:	f000 fa7d 	bl	800405c <MX_TIM3_Init>
  MX_TIM2_Init();
 8003b62:	f000 fa2f 	bl	8003fc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003b66:	2100      	movs	r1, #0
 8003b68:	4850      	ldr	r0, [pc, #320]	; (8003cac <main+0x170>)
 8003b6a:	f004 fdad 	bl	80086c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003b6e:	2104      	movs	r1, #4
 8003b70:	484e      	ldr	r0, [pc, #312]	; (8003cac <main+0x170>)
 8003b72:	f004 fda9 	bl	80086c8 <HAL_TIM_PWM_Start>

  /* LoRa configurations */
	LoRa_Handle = newLoRa();
 8003b76:	4c4e      	ldr	r4, [pc, #312]	; (8003cb0 <main+0x174>)
 8003b78:	463b      	mov	r3, r7
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fad4 	bl	8003128 <newLoRa>
 8003b80:	4625      	mov	r5, r4
 8003b82:	463c      	mov	r4, r7
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	LoRa_Handle.hSPIx = &hspi2;
 8003b94:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <main+0x174>)
 8003b96:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <main+0x178>)
 8003b98:	619a      	str	r2, [r3, #24]
	LoRa_Handle.CS_port = RF_CE_GPIO_Port;
 8003b9a:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <main+0x174>)
 8003b9c:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <main+0x17c>)
 8003b9e:	601a      	str	r2, [r3, #0]
	LoRa_Handle.CS_pin = RF_CE_Pin;
 8003ba0:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <main+0x174>)
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	809a      	strh	r2, [r3, #4]
	LoRa_Handle.reset_port = RF_RESET_GPIO_Port;
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <main+0x174>)
 8003ba8:	4a43      	ldr	r2, [pc, #268]	; (8003cb8 <main+0x17c>)
 8003baa:	609a      	str	r2, [r3, #8]
	LoRa_Handle.reset_pin = RF_RESET_Pin;
 8003bac:	4b40      	ldr	r3, [pc, #256]	; (8003cb0 <main+0x174>)
 8003bae:	2202      	movs	r2, #2
 8003bb0:	819a      	strh	r2, [r3, #12]
	LoRa_Handle.DIO0_port = RF_10O_GPIO_Port;
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <main+0x174>)
 8003bb4:	4a40      	ldr	r2, [pc, #256]	; (8003cb8 <main+0x17c>)
 8003bb6:	611a      	str	r2, [r3, #16]
	LoRa_Handle.DIO0_pin = RF_10O_Pin;
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <main+0x174>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	829a      	strh	r2, [r3, #20]

	LoRa_Handle.frequency = 915;
 8003bbe:	4b3c      	ldr	r3, [pc, #240]	; (8003cb0 <main+0x174>)
 8003bc0:	f240 3293 	movw	r2, #915	; 0x393
 8003bc4:	621a      	str	r2, [r3, #32]
	LoRa_Handle.spredingFactor = SF_7;						// default = SF_7
 8003bc6:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <main+0x174>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	LoRa_Handle.bandWidth = BW_125KHz;				  	// default = BW_125KHz
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <main+0x174>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	LoRa_Handle.crcRate = CR_4_5;						// default = CR_4_5
 8003bd6:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <main+0x174>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	LoRa_Handle.power = POWER_20db;					// default = 20db
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <main+0x174>)
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	LoRa_Handle.overCurrentProtection = 120; 				// default = 100 mA
 8003be6:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <main+0x174>)
 8003be8:	2278      	movs	r2, #120	; 0x78
 8003bea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	LoRa_Handle.preamble = 8;		  					// default = 8;
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <main+0x174>)
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28

	HAL_GPIO_WritePin(RF_CE_GPIO_Port, RF_CE_Pin, GPIO_PIN_SET);
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	482f      	ldr	r0, [pc, #188]	; (8003cb8 <main+0x17c>)
 8003bfa:	f002 f841 	bl	8005c80 <HAL_GPIO_WritePin>

  /* Assign magnetometer calibration constants */
	arm_mat_init_f32(&bmx055.mag_hard_iron_offsets, 3, 1, hard_iron_offset_data);
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <main+0x180>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	2103      	movs	r1, #3
 8003c04:	482e      	ldr	r0, [pc, #184]	; (8003cc0 <main+0x184>)
 8003c06:	f00c fd57 	bl	80106b8 <arm_mat_init_f32>
	arm_mat_init_f32(&bmx055.mag_soft_iron_offsets, 3, 3, soft_iron_offset_data);
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <main+0x188>)
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	2103      	movs	r1, #3
 8003c10:	482d      	ldr	r0, [pc, #180]	; (8003cc8 <main+0x18c>)
 8003c12:	f00c fd51 	bl	80106b8 <arm_mat_init_f32>

  /* BMX055 configurations */
	bmx055.hspi = &hspi1;
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <main+0x190>)
 8003c18:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <main+0x194>)
 8003c1a:	601a      	str	r2, [r3, #0]
	// Accelerometer parameters
	bmx055.acc_CS_port = ACC_CE_GPIO_Port;
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <main+0x190>)
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <main+0x198>)
 8003c20:	605a      	str	r2, [r3, #4]
	bmx055.acc_CS_pin = ACC_CE_Pin;
 8003c22:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <main+0x190>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	811a      	strh	r2, [r3, #8]
	bmx055.acc_range = BMX055_ACC_RANGE_4;
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <main+0x190>)
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	729a      	strb	r2, [r3, #10]
	bmx055.acc_bandwidth = BMX055_ACC_PMU_BW_7_81;
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <main+0x190>)
 8003c30:	2208      	movs	r2, #8
 8003c32:	72da      	strb	r2, [r3, #11]

	// Gyroscope parameters
	bmx055.gyro_CS_port = GYR_CE_GPIO_Port;
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <main+0x190>)
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <main+0x198>)
 8003c38:	611a      	str	r2, [r3, #16]
	bmx055.gyro_CS_pin = GYR_CE_Pin;
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <main+0x190>)
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	829a      	strh	r2, [r3, #20]
	bmx055.gyro_range = BMX055_GYRO_RANGE_65_6;		// 500 deg/s
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <main+0x190>)
 8003c42:	2202      	movs	r2, #2
 8003c44:	759a      	strb	r2, [r3, #22]
	bmx055.gyro_bandwidth = BMX055_GYRO_BW_64;
 8003c46:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <main+0x190>)
 8003c48:	2206      	movs	r2, #6
 8003c4a:	75da      	strb	r2, [r3, #23]

	// Magnetometer parameters
	bmx055.mag_CS_port = MAG_CE_GPIO_Port;
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <main+0x190>)
 8003c4e:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <main+0x198>)
 8003c50:	61da      	str	r2, [r3, #28]
	bmx055.mag_CS_pin = MAG_CE_Pin;
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <main+0x190>)
 8003c54:	2204      	movs	r2, #4
 8003c56:	841a      	strh	r2, [r3, #32]
	bmx055.mag_data_rate = BMX055_MAG_DATA_RATE_30;
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <main+0x190>)
 8003c5a:	2238      	movs	r2, #56	; 0x38
 8003c5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  /* Servo configurations */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003c60:	f008 fef0 	bl	800ca44 <osKernelInitialize>
  ******************************************************************************
  */
  
  	/* Create the thread(s) */
	/* creation of Sample_Sensors_ */
	SensorReadHandle = osThreadNew(start_sensor_reading, NULL, &SensorRead_attributes);
 8003c64:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <main+0x19c>)
 8003c66:	2100      	movs	r1, #0
 8003c68:	481c      	ldr	r0, [pc, #112]	; (8003cdc <main+0x1a0>)
 8003c6a:	f008 ff35 	bl	800cad8 <osThreadNew>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <main+0x1a4>)
 8003c72:	6013      	str	r3, [r2, #0]

	/* creation of LoRa */
	LoRaHandle = osThreadNew(start_LoRa_task, NULL, &LoRa_attributes);
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <main+0x1a8>)
 8003c76:	2100      	movs	r1, #0
 8003c78:	481b      	ldr	r0, [pc, #108]	; (8003ce8 <main+0x1ac>)
 8003c7a:	f008 ff2d 	bl	800cad8 <osThreadNew>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <main+0x1b0>)
 8003c82:	6013      	str	r3, [r2, #0]

	/* creation of Kalman_Filter */
	KalmanFilterHandle = osThreadNew(start_kalman_filter, NULL, &KalmanFilter_attributes);
 8003c84:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <main+0x1b4>)
 8003c86:	2100      	movs	r1, #0
 8003c88:	481a      	ldr	r0, [pc, #104]	; (8003cf4 <main+0x1b8>)
 8003c8a:	f008 ff25 	bl	800cad8 <osThreadNew>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <main+0x1bc>)
 8003c92:	6013      	str	r3, [r2, #0]
    ServoActuateHandle = osThreadNew(start_servo_control, NULL, &ServoActuate_attributes);
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <main+0x1c0>)
 8003c96:	2100      	movs	r1, #0
 8003c98:	4819      	ldr	r0, [pc, #100]	; (8003d00 <main+0x1c4>)
 8003c9a:	f008 ff1d 	bl	800cad8 <osThreadNew>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <main+0x1c8>)
 8003ca2:	6013      	str	r3, [r2, #0]
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8003ca4:	f008 fef2 	bl	800ca8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ca8:	e7fe      	b.n	8003ca8 <main+0x16c>
 8003caa:	bf00      	nop
 8003cac:	2000056c 	.word	0x2000056c
 8003cb0:	2000064c 	.word	0x2000064c
 8003cb4:	20000474 	.word	0x20000474
 8003cb8:	40020800 	.word	0x40020800
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	200005f4 	.word	0x200005f4
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	200005fc 	.word	0x200005fc
 8003ccc:	200005c8 	.word	0x200005c8
 8003cd0:	2000041c 	.word	0x2000041c
 8003cd4:	40020400 	.word	0x40020400
 8003cd8:	08015318 	.word	0x08015318
 8003cdc:	08004261 	.word	0x08004261
 8003ce0:	200005b4 	.word	0x200005b4
 8003ce4:	0801533c 	.word	0x0801533c
 8003ce8:	0800446d 	.word	0x0800446d
 8003cec:	200005b8 	.word	0x200005b8
 8003cf0:	08015384 	.word	0x08015384
 8003cf4:	08004721 	.word	0x08004721
 8003cf8:	200005c0 	.word	0x200005c0
 8003cfc:	08015360 	.word	0x08015360
 8003d00:	0800469d 	.word	0x0800469d
 8003d04:	200005bc 	.word	0x200005bc

08003d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b094      	sub	sp, #80	; 0x50
 8003d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d0e:	f107 0320 	add.w	r3, r7, #32
 8003d12:	2230      	movs	r2, #48	; 0x30
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f00c ff19 	bl	8010b4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <SystemClock_Config+0xcc>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <SystemClock_Config+0xcc>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <SystemClock_Config+0xcc>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <SystemClock_Config+0xd0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <SystemClock_Config+0xd0>)
 8003d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <SystemClock_Config+0xd0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003d78:	230c      	movs	r3, #12
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8003d7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d82:	2304      	movs	r3, #4
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003d86:	2308      	movs	r3, #8
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d8a:	f107 0320 	add.w	r3, r7, #32
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fa0c 	bl	80071ac <HAL_RCC_OscConfig>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003d9a:	f000 fd95 	bl	80048c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d9e:	230f      	movs	r3, #15
 8003da0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003da2:	2302      	movs	r3, #2
 8003da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	2103      	movs	r1, #3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 fc6e 	bl	800769c <HAL_RCC_ClockConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003dc6:	f000 fd7f 	bl	80048c8 <Error_Handler>
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3750      	adds	r7, #80	; 0x50
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40007000 	.word	0x40007000

08003ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003de2:	463b      	mov	r3, r7
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <MX_ADC1_Init+0x9c>)
 8003df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003e02:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e16:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <MX_ADC1_Init+0xa0>)
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e3c:	480d      	ldr	r0, [pc, #52]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e3e:	f001 fa17 	bl	8005270 <HAL_ADC_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003e48:	f000 fd3e 	bl	80048c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e50:	2301      	movs	r3, #1
 8003e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e58:	463b      	mov	r3, r7
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	; (8003e74 <MX_ADC1_Init+0x98>)
 8003e5e:	f001 fa4b 	bl	80052f8 <HAL_ADC_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e68:	f000 fd2e 	bl	80048c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200003d4 	.word	0x200003d4
 8003e78:	40012000 	.word	0x40012000
 8003e7c:	0f000001 	.word	0x0f000001

08003e80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <MX_SPI1_Init+0x68>)
 8003e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003eb4:	2218      	movs	r2, #24
 8003eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003ecc:	220a      	movs	r2, #10
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ed0:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <MX_SPI1_Init+0x64>)
 8003ed2:	f003 fd9b 	bl	8007a0c <HAL_SPI_Init>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003edc:	f000 fcf4 	bl	80048c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	2000041c 	.word	0x2000041c
 8003ee8:	40013000 	.word	0x40013000

08003eec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003ef2:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <MX_SPI2_Init+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003efc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f20:	2220      	movs	r2, #32
 8003f22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f38:	220a      	movs	r2, #10
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f3c:	4804      	ldr	r0, [pc, #16]	; (8003f50 <MX_SPI2_Init+0x64>)
 8003f3e:	f003 fd65 	bl	8007a0c <HAL_SPI_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f48:	f000 fcbe 	bl	80048c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000474 	.word	0x20000474
 8003f54:	40003800 	.word	0x40003800

08003f58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <MX_SPI3_Init+0x68>)
 8003f60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f88:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f8c:	2230      	movs	r2, #48	; 0x30
 8003f8e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <MX_SPI3_Init+0x64>)
 8003faa:	f003 fd2f 	bl	8007a0c <HAL_SPI_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003fb4:	f000 fc88 	bl	80048c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200004cc 	.word	0x200004cc
 8003fc0:	40003c00 	.word	0x40003c00

08003fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd8:	463b      	mov	r3, r7
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <MX_TIM2_Init+0x94>)
 8003fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 192-1;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <MX_TIM2_Init+0x94>)
 8003fea:	22bf      	movs	r2, #191	; 0xbf
 8003fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <MX_TIM2_Init+0x94>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <MX_TIM2_Init+0x94>)
 8003ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <MX_TIM2_Init+0x94>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <MX_TIM2_Init+0x94>)
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004008:	4813      	ldr	r0, [pc, #76]	; (8004058 <MX_TIM2_Init+0x94>)
 800400a:	f004 fab5 	bl	8008578 <HAL_TIM_Base_Init>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004014:	f000 fc58 	bl	80048c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800401c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	4619      	mov	r1, r3
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <MX_TIM2_Init+0x94>)
 8004026:	f004 fcc1 	bl	80089ac <HAL_TIM_ConfigClockSource>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004030:	f000 fc4a 	bl	80048c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004038:	2300      	movs	r3, #0
 800403a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800403c:	463b      	mov	r3, r7
 800403e:	4619      	mov	r1, r3
 8004040:	4805      	ldr	r0, [pc, #20]	; (8004058 <MX_TIM2_Init+0x94>)
 8004042:	f005 f847 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800404c:	f000 fc3c 	bl	80048c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004050:	bf00      	nop
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000524 	.word	0x20000524

0800405c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08e      	sub	sp, #56	; 0x38
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004070:	f107 0320 	add.w	r3, r7, #32
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
 8004088:	615a      	str	r2, [r3, #20]
 800408a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800408c:	4b32      	ldr	r3, [pc, #200]	; (8004158 <MX_TIM3_Init+0xfc>)
 800408e:	4a33      	ldr	r2, [pc, #204]	; (800415c <MX_TIM3_Init+0x100>)
 8004090:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <MX_TIM3_Init+0xfc>)
 8004094:	f242 527f 	movw	r2, #9599	; 0x257f
 8004098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409a:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <MX_TIM3_Init+0xfc>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80040a0:	4b2d      	ldr	r3, [pc, #180]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040a2:	22c7      	movs	r2, #199	; 0xc7
 80040a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ac:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040b2:	4829      	ldr	r0, [pc, #164]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040b4:	f004 fa60 	bl	8008578 <HAL_TIM_Base_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80040be:	f000 fc03 	bl	80048c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040cc:	4619      	mov	r1, r3
 80040ce:	4822      	ldr	r0, [pc, #136]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040d0:	f004 fc6c 	bl	80089ac <HAL_TIM_ConfigClockSource>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80040da:	f000 fbf5 	bl	80048c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040de:	481e      	ldr	r0, [pc, #120]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040e0:	f004 fa99 	bl	8008616 <HAL_TIM_PWM_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80040ea:	f000 fbed 	bl	80048c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040f6:	f107 0320 	add.w	r3, r7, #32
 80040fa:	4619      	mov	r1, r3
 80040fc:	4816      	ldr	r0, [pc, #88]	; (8004158 <MX_TIM3_Init+0xfc>)
 80040fe:	f004 ffe9 	bl	80090d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004108:	f000 fbde 	bl	80048c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800410c:	2360      	movs	r3, #96	; 0x60
 800410e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	2200      	movs	r2, #0
 8004120:	4619      	mov	r1, r3
 8004122:	480d      	ldr	r0, [pc, #52]	; (8004158 <MX_TIM3_Init+0xfc>)
 8004124:	f004 fb80 	bl	8008828 <HAL_TIM_PWM_ConfigChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800412e:	f000 fbcb 	bl	80048c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	2204      	movs	r2, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4807      	ldr	r0, [pc, #28]	; (8004158 <MX_TIM3_Init+0xfc>)
 800413a:	f004 fb75 	bl	8008828 <HAL_TIM_PWM_ConfigChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004144:	f000 fbc0 	bl	80048c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004148:	4803      	ldr	r0, [pc, #12]	; (8004158 <MX_TIM3_Init+0xfc>)
 800414a:	f000 fe91 	bl	8004e70 <HAL_TIM_MspPostInit>

}
 800414e:	bf00      	nop
 8004150:	3738      	adds	r7, #56	; 0x38
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000056c 	.word	0x2000056c
 800415c:	40000400 	.word	0x40000400

08004160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <MX_GPIO_Init+0xf4>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4a35      	ldr	r2, [pc, #212]	; (8004254 <MX_GPIO_Init+0xf4>)
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	6313      	str	r3, [r2, #48]	; 0x30
 8004186:	4b33      	ldr	r3, [pc, #204]	; (8004254 <MX_GPIO_Init+0xf4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <MX_GPIO_Init+0xf4>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a2e      	ldr	r2, [pc, #184]	; (8004254 <MX_GPIO_Init+0xf4>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	4b28      	ldr	r3, [pc, #160]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	60bb      	str	r3, [r7, #8]
 80041c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <MX_GPIO_Init+0xf4>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin, GPIO_PIN_RESET);
 80041e6:	2200      	movs	r2, #0
 80041e8:	210e      	movs	r1, #14
 80041ea:	481b      	ldr	r0, [pc, #108]	; (8004258 <MX_GPIO_Init+0xf8>)
 80041ec:	f001 fd48 	bl	8005c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin, GPIO_PIN_RESET);
 80041f0:	2200      	movs	r2, #0
 80041f2:	2107      	movs	r1, #7
 80041f4:	4819      	ldr	r0, [pc, #100]	; (800425c <MX_GPIO_Init+0xfc>)
 80041f6:	f001 fd43 	bl	8005c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_10O_Pin */
  GPIO_InitStruct.Pin = RF_10O_Pin;
 80041fa:	2301      	movs	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_10O_GPIO_Port, &GPIO_InitStruct);
 8004206:	f107 0314 	add.w	r3, r7, #20
 800420a:	4619      	mov	r1, r3
 800420c:	4812      	ldr	r0, [pc, #72]	; (8004258 <MX_GPIO_Init+0xf8>)
 800420e:	f001 fbb3 	bl	8005978 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_RESET_Pin RF_CE_Pin SD_CE_Pin */
  GPIO_InitStruct.Pin = RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin;
 8004212:	230e      	movs	r3, #14
 8004214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004216:	2301      	movs	r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	4619      	mov	r1, r3
 8004228:	480b      	ldr	r0, [pc, #44]	; (8004258 <MX_GPIO_Init+0xf8>)
 800422a:	f001 fba5 	bl	8005978 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CE_Pin GYR_CE_Pin MAG_CE_Pin */
  GPIO_InitStruct.Pin = ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin;
 800422e:	2307      	movs	r3, #7
 8004230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004232:	2301      	movs	r3, #1
 8004234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423a:	2300      	movs	r3, #0
 800423c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423e:	f107 0314 	add.w	r3, r7, #20
 8004242:	4619      	mov	r1, r3
 8004244:	4805      	ldr	r0, [pc, #20]	; (800425c <MX_GPIO_Init+0xfc>)
 8004246:	f001 fb97 	bl	8005978 <HAL_GPIO_Init>

}
 800424a:	bf00      	nop
 800424c:	3728      	adds	r7, #40	; 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	40020800 	.word	0x40020800
 800425c:	40020400 	.word	0x40020400

08004260 <start_sensor_reading>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_reading */
void start_sensor_reading(void *argument)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004268:	f00b f9f0 	bl	800f64c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	// Init BMX055
	if (!BMX055_init(&bmx055)) {
 800426c:	4878      	ldr	r0, [pc, #480]	; (8004450 <start_sensor_reading+0x1f0>)
 800426e:	f7fc fe75 	bl	8000f5c <BMX055_init>
 8004272:	4603      	mov	r3, r0
 8004274:	f083 0301 	eor.w	r3, r3, #1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <start_sensor_reading+0x24>
		printf("[main] BMX055 failed to start\r\n");
 800427e:	4875      	ldr	r0, [pc, #468]	; (8004454 <start_sensor_reading+0x1f4>)
 8004280:	f00d f9da 	bl	8011638 <puts>
	}
	BMX055_setInterrupts(&bmx055);
 8004284:	4872      	ldr	r0, [pc, #456]	; (8004450 <start_sensor_reading+0x1f0>)
 8004286:	f7fd fa30 	bl	80016ea <BMX055_setInterrupts>
//  gps_init_tpv(&tpv);
//	GNSS_Init(&GNSS_Handle, GPS_UART);
//	GNSS_LoadConfig(&GNSS_Handle);
	/* EXTI interrupt init*/
//	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800428a:	200a      	movs	r0, #10
 800428c:	f001 fb59 	bl	8005942 <HAL_NVIC_EnableIRQ>

//	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004290:	2017      	movs	r0, #23
 8004292:	f001 fb56 	bl	8005942 <HAL_NVIC_EnableIRQ>

//	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004296:	2028      	movs	r0, #40	; 0x28
 8004298:	f001 fb53 	bl	8005942 <HAL_NVIC_EnableIRQ>
	uint32_t sensor_type;

	/* Infinite loop */
	for (;;) {
		// Wait for sensors to be ready before running task
		xTaskNotifyWait(0, 0, &sensor_type, (TickType_t) portMAX_DELAY);
 800429c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	2100      	movs	r1, #0
 80042a6:	2000      	movs	r0, #0
 80042a8:	f00a f96c 	bl	800e584 <xTaskNotifyWait>

		/* Check each sensor each loop for new data */
		switch (sensor_type) {
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	3b01      	subs	r3, #1
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	f200 80ca 	bhi.w	800444a <start_sensor_reading+0x1ea>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <start_sensor_reading+0x5c>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042d9 	.word	0x080042d9
 80042c0:	08004305 	.word	0x08004305
 80042c4:	08004347 	.word	0x08004347
 80042c8:	08004331 	.word	0x08004331
 80042cc:	08004391 	.word	0x08004391
 80042d0:	080043c5 	.word	0x080043c5
 80042d4:	080043f9 	.word	0x080043f9
		case Accel_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle, Accel_Sensor);
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <start_sensor_reading+0x1f8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f00a f9b0 	bl	800e644 <ulTaskNotifyValueClear>
			float accel_data[3];
			BMX055_readAccel(&bmx055, accel_data);
 80042e4:	f107 0318 	add.w	r3, r7, #24
 80042e8:	4619      	mov	r1, r3
 80042ea:	4859      	ldr	r0, [pc, #356]	; (8004450 <start_sensor_reading+0x1f0>)
 80042ec:	f7fc fff2 	bl	80012d4 <BMX055_readAccel>
			BMX055_exp_filter(bmx055_data.accel, accel_data, bmx055_data.accel, sizeof(accel_data) / sizeof(int),
 80042f0:	f107 0118 	add.w	r1, r7, #24
 80042f4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800445c <start_sensor_reading+0x1fc>
 80042f8:	2303      	movs	r3, #3
 80042fa:	4a59      	ldr	r2, [pc, #356]	; (8004460 <start_sensor_reading+0x200>)
 80042fc:	4858      	ldr	r0, [pc, #352]	; (8004460 <start_sensor_reading+0x200>)
 80042fe:	f7fd fb05 	bl	800190c <BMX055_exp_filter>
			ACCEL_ALPHA);
			break;
 8004302:	e0a3      	b.n	800444c <start_sensor_reading+0x1ec>

		case Gyro_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle, Gyro_Sensor);
 8004304:	4b54      	ldr	r3, [pc, #336]	; (8004458 <start_sensor_reading+0x1f8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f00a f99a 	bl	800e644 <ulTaskNotifyValueClear>
			float gyro_data[3];
			BMX055_readGyro(&bmx055, gyro_data);
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	4619      	mov	r1, r3
 8004316:	484e      	ldr	r0, [pc, #312]	; (8004450 <start_sensor_reading+0x1f0>)
 8004318:	f7fd f85f 	bl	80013da <BMX055_readGyro>
			BMX055_exp_filter(bmx055_data.gyro, gyro_data, bmx055_data.gyro, sizeof(gyro_data) / sizeof(int),
 800431c:	f107 010c 	add.w	r1, r7, #12
 8004320:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004324:	2303      	movs	r3, #3
 8004326:	4a4f      	ldr	r2, [pc, #316]	; (8004464 <start_sensor_reading+0x204>)
 8004328:	484e      	ldr	r0, [pc, #312]	; (8004464 <start_sensor_reading+0x204>)
 800432a:	f7fd faef 	bl	800190c <BMX055_exp_filter>
			GYRO_ALPHA);
			break;
 800432e:	e08d      	b.n	800444c <start_sensor_reading+0x1ec>

		case Mag_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle, Mag_Sensor);
 8004330:	4b49      	ldr	r3, [pc, #292]	; (8004458 <start_sensor_reading+0x1f8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2104      	movs	r1, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f00a f984 	bl	800e644 <ulTaskNotifyValueClear>
			BMX055_readCompensatedMag(&bmx055, bmx055_data.mag);
 800433c:	494a      	ldr	r1, [pc, #296]	; (8004468 <start_sensor_reading+0x208>)
 800433e:	4844      	ldr	r0, [pc, #272]	; (8004450 <start_sensor_reading+0x1f0>)
 8004340:	f7fd f962 	bl	8001608 <BMX055_readCompensatedMag>
			break;
 8004344:	e082      	b.n	800444c <start_sensor_reading+0x1ec>

		case Accel_Sensor | Gyro_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle,
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <start_sensor_reading+0x1f8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2103      	movs	r1, #3
 800434c:	4618      	mov	r0, r3
 800434e:	f00a f979 	bl	800e644 <ulTaskNotifyValueClear>
			Accel_Sensor | Gyro_Sensor);
			BMX055_readAccel(&bmx055, accel_data);
 8004352:	f107 0318 	add.w	r3, r7, #24
 8004356:	4619      	mov	r1, r3
 8004358:	483d      	ldr	r0, [pc, #244]	; (8004450 <start_sensor_reading+0x1f0>)
 800435a:	f7fc ffbb 	bl	80012d4 <BMX055_readAccel>
			BMX055_exp_filter(bmx055_data.accel, accel_data, bmx055_data.accel, sizeof(accel_data) / sizeof(int),
 800435e:	f107 0118 	add.w	r1, r7, #24
 8004362:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800445c <start_sensor_reading+0x1fc>
 8004366:	2303      	movs	r3, #3
 8004368:	4a3d      	ldr	r2, [pc, #244]	; (8004460 <start_sensor_reading+0x200>)
 800436a:	483d      	ldr	r0, [pc, #244]	; (8004460 <start_sensor_reading+0x200>)
 800436c:	f7fd face 	bl	800190c <BMX055_exp_filter>
			ACCEL_ALPHA);
			BMX055_readGyro(&bmx055, gyro_data);
 8004370:	f107 030c 	add.w	r3, r7, #12
 8004374:	4619      	mov	r1, r3
 8004376:	4836      	ldr	r0, [pc, #216]	; (8004450 <start_sensor_reading+0x1f0>)
 8004378:	f7fd f82f 	bl	80013da <BMX055_readGyro>
			BMX055_exp_filter(bmx055_data.gyro, gyro_data, bmx055_data.gyro, sizeof(gyro_data) / sizeof(int),
 800437c:	f107 010c 	add.w	r1, r7, #12
 8004380:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004384:	2303      	movs	r3, #3
 8004386:	4a37      	ldr	r2, [pc, #220]	; (8004464 <start_sensor_reading+0x204>)
 8004388:	4836      	ldr	r0, [pc, #216]	; (8004464 <start_sensor_reading+0x204>)
 800438a:	f7fd fabf 	bl	800190c <BMX055_exp_filter>
			GYRO_ALPHA);

			break;
 800438e:	e05d      	b.n	800444c <start_sensor_reading+0x1ec>

		case Accel_Sensor | Mag_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle,
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <start_sensor_reading+0x1f8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2105      	movs	r1, #5
 8004396:	4618      	mov	r0, r3
 8004398:	f00a f954 	bl	800e644 <ulTaskNotifyValueClear>
			Accel_Sensor | Mag_Sensor);
			BMX055_readAccel(&bmx055, accel_data);
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	4619      	mov	r1, r3
 80043a2:	482b      	ldr	r0, [pc, #172]	; (8004450 <start_sensor_reading+0x1f0>)
 80043a4:	f7fc ff96 	bl	80012d4 <BMX055_readAccel>
			BMX055_exp_filter(bmx055_data.accel, accel_data, bmx055_data.accel, sizeof(accel_data) / sizeof(int),
 80043a8:	f107 0118 	add.w	r1, r7, #24
 80043ac:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800445c <start_sensor_reading+0x1fc>
 80043b0:	2303      	movs	r3, #3
 80043b2:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <start_sensor_reading+0x200>)
 80043b4:	482a      	ldr	r0, [pc, #168]	; (8004460 <start_sensor_reading+0x200>)
 80043b6:	f7fd faa9 	bl	800190c <BMX055_exp_filter>
			ACCEL_ALPHA);
			BMX055_readCompensatedMag(&bmx055, bmx055_data.mag);
 80043ba:	492b      	ldr	r1, [pc, #172]	; (8004468 <start_sensor_reading+0x208>)
 80043bc:	4824      	ldr	r0, [pc, #144]	; (8004450 <start_sensor_reading+0x1f0>)
 80043be:	f7fd f923 	bl	8001608 <BMX055_readCompensatedMag>
			break;
 80043c2:	e043      	b.n	800444c <start_sensor_reading+0x1ec>

		case Gyro_Sensor | Mag_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle,
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <start_sensor_reading+0x1f8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2106      	movs	r1, #6
 80043ca:	4618      	mov	r0, r3
 80043cc:	f00a f93a 	bl	800e644 <ulTaskNotifyValueClear>
			Gyro_Sensor | Mag_Sensor);
			BMX055_readGyro(&bmx055, gyro_data);
 80043d0:	f107 030c 	add.w	r3, r7, #12
 80043d4:	4619      	mov	r1, r3
 80043d6:	481e      	ldr	r0, [pc, #120]	; (8004450 <start_sensor_reading+0x1f0>)
 80043d8:	f7fc ffff 	bl	80013da <BMX055_readGyro>
			BMX055_exp_filter(bmx055_data.gyro, gyro_data, bmx055_data.gyro, sizeof(gyro_data) / sizeof(int),
 80043dc:	f107 010c 	add.w	r1, r7, #12
 80043e0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80043e4:	2303      	movs	r3, #3
 80043e6:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <start_sensor_reading+0x204>)
 80043e8:	481e      	ldr	r0, [pc, #120]	; (8004464 <start_sensor_reading+0x204>)
 80043ea:	f7fd fa8f 	bl	800190c <BMX055_exp_filter>
			GYRO_ALPHA);
			BMX055_readCompensatedMag(&bmx055, bmx055_data.mag);
 80043ee:	491e      	ldr	r1, [pc, #120]	; (8004468 <start_sensor_reading+0x208>)
 80043f0:	4817      	ldr	r0, [pc, #92]	; (8004450 <start_sensor_reading+0x1f0>)
 80043f2:	f7fd f909 	bl	8001608 <BMX055_readCompensatedMag>
			break;
 80043f6:	e029      	b.n	800444c <start_sensor_reading+0x1ec>

		case Accel_Sensor | Gyro_Sensor | Mag_Sensor:
			// Clear bits corresponding to this case
			ulTaskNotifyValueClear(SensorReadHandle,
 80043f8:	4b17      	ldr	r3, [pc, #92]	; (8004458 <start_sensor_reading+0x1f8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2107      	movs	r1, #7
 80043fe:	4618      	mov	r0, r3
 8004400:	f00a f920 	bl	800e644 <ulTaskNotifyValueClear>
			Accel_Sensor | Gyro_Sensor | Mag_Sensor);
			BMX055_readAccel(&bmx055, accel_data);
 8004404:	f107 0318 	add.w	r3, r7, #24
 8004408:	4619      	mov	r1, r3
 800440a:	4811      	ldr	r0, [pc, #68]	; (8004450 <start_sensor_reading+0x1f0>)
 800440c:	f7fc ff62 	bl	80012d4 <BMX055_readAccel>
			BMX055_exp_filter(bmx055_data.accel, accel_data, bmx055_data.accel, sizeof(accel_data) / sizeof(int),
 8004410:	f107 0118 	add.w	r1, r7, #24
 8004414:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800445c <start_sensor_reading+0x1fc>
 8004418:	2303      	movs	r3, #3
 800441a:	4a11      	ldr	r2, [pc, #68]	; (8004460 <start_sensor_reading+0x200>)
 800441c:	4810      	ldr	r0, [pc, #64]	; (8004460 <start_sensor_reading+0x200>)
 800441e:	f7fd fa75 	bl	800190c <BMX055_exp_filter>
			ACCEL_ALPHA);
			BMX055_readGyro(&bmx055, gyro_data);
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	4619      	mov	r1, r3
 8004428:	4809      	ldr	r0, [pc, #36]	; (8004450 <start_sensor_reading+0x1f0>)
 800442a:	f7fc ffd6 	bl	80013da <BMX055_readGyro>
			BMX055_exp_filter(bmx055_data.gyro, gyro_data, bmx055_data.gyro, sizeof(gyro_data) / sizeof(int),
 800442e:	f107 010c 	add.w	r1, r7, #12
 8004432:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004436:	2303      	movs	r3, #3
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <start_sensor_reading+0x204>)
 800443a:	480a      	ldr	r0, [pc, #40]	; (8004464 <start_sensor_reading+0x204>)
 800443c:	f7fd fa66 	bl	800190c <BMX055_exp_filter>
			GYRO_ALPHA);
			BMX055_readCompensatedMag(&bmx055, bmx055_data.mag);
 8004440:	4909      	ldr	r1, [pc, #36]	; (8004468 <start_sensor_reading+0x208>)
 8004442:	4803      	ldr	r0, [pc, #12]	; (8004450 <start_sensor_reading+0x1f0>)
 8004444:	f7fd f8e0 	bl	8001608 <BMX055_readCompensatedMag>
			break;
 8004448:	e000      	b.n	800444c <start_sensor_reading+0x1ec>

		default:
			break;
 800444a:	bf00      	nop
		xTaskNotifyWait(0, 0, &sensor_type, (TickType_t) portMAX_DELAY);
 800444c:	e726      	b.n	800429c <start_sensor_reading+0x3c>
 800444e:	bf00      	nop
 8004450:	200005c8 	.word	0x200005c8
 8004454:	0801516c 	.word	0x0801516c
 8004458:	200005b4 	.word	0x200005b4
 800445c:	3f666666 	.word	0x3f666666
 8004460:	20000604 	.word	0x20000604
 8004464:	20000618 	.word	0x20000618
 8004468:	2000062c 	.word	0x2000062c

0800446c <start_LoRa_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LoRa_task */
void start_LoRa_task(void *argument)
{
 800446c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446e:	b0d7      	sub	sp, #348	; 0x15c
 8004470:	af10      	add	r7, sp, #64	; 0x40
 8004472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800447a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_LoRa_task */
    LoRa_reset(&LoRa_Handle);
 800447c:	4884      	ldr	r0, [pc, #528]	; (8004690 <start_LoRa_task+0x224>)
 800447e:	f7fe fe7c 	bl	800317a <LoRa_reset>
	LoRa_setModulation(&LoRa_Handle, LORA_MODULATION);
 8004482:	2102      	movs	r1, #2
 8004484:	4882      	ldr	r0, [pc, #520]	; (8004690 <start_LoRa_task+0x224>)
 8004486:	f7fe ff1a 	bl	80032be <LoRa_setModulation>
	if (LoRa_init(&LoRa_Handle) != LORA_OK) {
 800448a:	4881      	ldr	r0, [pc, #516]	; (8004690 <start_LoRa_task+0x224>)
 800448c:	f7ff fa4d 	bl	800392a <LoRa_init>
 8004490:	4603      	mov	r3, r0
 8004492:	2bc8      	cmp	r3, #200	; 0xc8
 8004494:	d003      	beq.n	800449e <start_LoRa_task+0x32>
      CDC_Transmit_FS("LoRa connection failed\r\n", strlen("LoRa connection failed\r\n"));
 8004496:	2118      	movs	r1, #24
 8004498:	487e      	ldr	r0, [pc, #504]	; (8004694 <start_LoRa_task+0x228>)
 800449a:	f00b f995 	bl	800f7c8 <CDC_Transmit_FS>
	}

	LoRa_startReceiving(&LoRa_Handle);
 800449e:	487c      	ldr	r0, [pc, #496]	; (8004690 <start_LoRa_task+0x224>)
 80044a0:	f7ff f9d7 	bl	8003852 <LoRa_startReceiving>
  /* Infinite loop */
  for(;;)
  {
    // Wait for LoRa to be ready before running task
    xTaskNotifyWait(0, 0, NULL, (TickType_t) portMAX_DELAY);
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	2000      	movs	r0, #0
 80044ae:	f00a f869 	bl	800e584 <xTaskNotifyWait>

    // Read bytes in FIFO buffer
    uint8_t read_data[255];
    size_t bytes_read = LoRa_receive(&LoRa_Handle, read_data, sizeof(read_data));
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	4619      	mov	r1, r3
 80044ba:	4875      	ldr	r0, [pc, #468]	; (8004690 <start_LoRa_task+0x224>)
 80044bc:	f7ff f9d5 	bl	800386a <LoRa_receive>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    switch (read_data[0]) {
 80044c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	f000 80cf 	beq.w	8004674 <start_LoRa_task+0x208>
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	f300 80d8 	bgt.w	800468c <start_LoRa_task+0x220>
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d003      	beq.n	80044e8 <start_LoRa_task+0x7c>
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	f000 80b4 	beq.w	800464e <start_LoRa_task+0x1e2>
      case PONG: ;
        uint8_t resp = 1;
        LoRa_transmit(&LoRa_Handle, &resp, 1, 0xffff);
        break;
      default:
        break;
 80044e6:	e0d1      	b.n	800468c <start_LoRa_task+0x220>
        float x = read_data[1] << 24;
 80044e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fc:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
        x = ((unsigned long) x) | (read_data[2] << 16);
 8004500:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8004504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004508:	ee17 2a90 	vmov	r2, s15
 800450c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004514:	789b      	ldrb	r3, [r3, #2]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	4313      	orrs	r3, r2
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
        x = ((unsigned long) x) | (read_data[3] << 8);
 8004526:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 800452a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452e:	ee17 2a90 	vmov	r2, s15
 8004532:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004536:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800453a:	78db      	ldrb	r3, [r3, #3]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4313      	orrs	r3, r2
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004548:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
        x = ((unsigned long) x) | read_data[4];
 800454c:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8004550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004554:	ee17 2a90 	vmov	r2, s15
 8004558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800455c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004560:	791b      	ldrb	r3, [r3, #4]
 8004562:	4313      	orrs	r3, r2
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456c:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
        float y = read_data[5] << 24;
 8004570:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004574:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004578:	795b      	ldrb	r3, [r3, #5]
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004584:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
        y = ((unsigned long) y) | (read_data[6] << 16);
 8004588:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 800458c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004590:	ee17 2a90 	vmov	r2, s15
 8004594:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004598:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800459c:	799b      	ldrb	r3, [r3, #6]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	4313      	orrs	r3, r2
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
        y = ((unsigned long) y) | (read_data[7] << 8);
 80045ae:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	ee17 2a90 	vmov	r2, s15
 80045ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c2:	79db      	ldrb	r3, [r3, #7]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4313      	orrs	r3, r2
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
        y = ((unsigned long) y) | read_data[8];
 80045d4:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80045d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045dc:	ee17 2a90 	vmov	r2, s15
 80045e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045e8:	7a1b      	ldrb	r3, [r3, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f4:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
        set_motor(1, x, htim3);
 80045f8:	4e27      	ldr	r6, [pc, #156]	; (8004698 <start_LoRa_task+0x22c>)
 80045fa:	466d      	mov	r5, sp
 80045fc:	f106 040c 	add.w	r4, r6, #12
 8004600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800460a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800460c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004610:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004614:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004618:	ed97 0a44 	vldr	s0, [r7, #272]	; 0x110
 800461c:	2001      	movs	r0, #1
 800461e:	f000 f989 	bl	8004934 <set_motor>
        set_motor(2, y, htim3);
 8004622:	4e1d      	ldr	r6, [pc, #116]	; (8004698 <start_LoRa_task+0x22c>)
 8004624:	466d      	mov	r5, sp
 8004626:	f106 040c 	add.w	r4, r6, #12
 800462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004636:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800463a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800463e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004642:	ed97 0a43 	vldr	s0, [r7, #268]	; 0x10c
 8004646:	2002      	movs	r0, #2
 8004648:	f000 f974 	bl	8004934 <set_motor>
        break;
 800464c:	e01f      	b.n	800468e <start_LoRa_task+0x222>
        gimble_test(htim3);
 800464e:	4e12      	ldr	r6, [pc, #72]	; (8004698 <start_LoRa_task+0x22c>)
 8004650:	466d      	mov	r5, sp
 8004652:	f106 0410 	add.w	r4, r6, #16
 8004656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800465a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800465e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004666:	e885 0003 	stmia.w	r5, {r0, r1}
 800466a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800466e:	f000 f9b7 	bl	80049e0 <gimble_test>
        break;
 8004672:	e00c      	b.n	800468e <start_LoRa_task+0x222>
        uint8_t resp = 1;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        LoRa_transmit(&LoRa_Handle, &resp, 1, 0xffff);
 800467a:	f207 110b 	addw	r1, r7, #267	; 0x10b
 800467e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004682:	2201      	movs	r2, #1
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <start_LoRa_task+0x224>)
 8004686:	f7ff f88c 	bl	80037a2 <LoRa_transmit>
        break;
 800468a:	e000      	b.n	800468e <start_LoRa_task+0x222>
        break;
 800468c:	bf00      	nop
  {
 800468e:	e709      	b.n	80044a4 <start_LoRa_task+0x38>
 8004690:	2000064c 	.word	0x2000064c
 8004694:	0801518c 	.word	0x0801518c
 8004698:	2000056c 	.word	0x2000056c

0800469c <start_servo_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_servo_control */
void start_servo_control(void *argument)
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b093      	sub	sp, #76	; 0x4c
 80046a0:	af10      	add	r7, sp, #64	; 0x40
 80046a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_servo_control */
  /* Infinite loop */
  for(;;)
  {
    if (SERVO_ENABLED) {
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <start_servo_control+0x74>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0fb      	beq.n	80046a4 <start_servo_control+0x8>
        set_motor(1, motors.m1_angle, htim3);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <start_servo_control+0x78>)
 80046ae:	edd3 7a00 	vldr	s15, [r3]
 80046b2:	4e19      	ldr	r6, [pc, #100]	; (8004718 <start_servo_control+0x7c>)
 80046b4:	466d      	mov	r5, sp
 80046b6:	f106 040c 	add.w	r4, r6, #12
 80046ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80046ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80046ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80046d2:	eeb0 0a67 	vmov.f32	s0, s15
 80046d6:	2001      	movs	r0, #1
 80046d8:	f000 f92c 	bl	8004934 <set_motor>
        set_motor(2, motors.m2_angle, htim3);
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <start_servo_control+0x78>)
 80046de:	edd3 7a01 	vldr	s15, [r3, #4]
 80046e2:	4e0d      	ldr	r6, [pc, #52]	; (8004718 <start_servo_control+0x7c>)
 80046e4:	466d      	mov	r5, sp
 80046e6:	f106 040c 	add.w	r4, r6, #12
 80046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80046fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80046fe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004702:	eeb0 0a67 	vmov.f32	s0, s15
 8004706:	2002      	movs	r0, #2
 8004708:	f000 f914 	bl	8004934 <set_motor>
    if (SERVO_ENABLED) {
 800470c:	e7ca      	b.n	80046a4 <start_servo_control+0x8>
 800470e:	bf00      	nop
 8004710:	200005c4 	.word	0x200005c4
 8004714:	20000640 	.word	0x20000640
 8004718:	2000056c 	.word	0x2000056c
 800471c:	00000000 	.word	0x00000000

08004720 <start_kalman_filter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_kalman_filter */
void start_kalman_filter(void *argument)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8004726:	af02      	add	r7, sp, #8
 8004728:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800472c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8004730:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_kalman_filter */
	uint32_t currentSampleTime = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	uint32_t lastSampleTime = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	int correct_freq = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	int idx = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	EKF_Init(&ekf, qu, EKF_K, EKF_P, EKF_Q, EKF_R, 0.0);
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <start_kalman_filter+0x170>)
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	4b51      	ldr	r3, [pc, #324]	; (8004894 <start_kalman_filter+0x174>)
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8004898 <start_kalman_filter+0x178>
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <start_kalman_filter+0x17c>)
 8004758:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <start_kalman_filter+0x180>)
 800475a:	4952      	ldr	r1, [pc, #328]	; (80048a4 <start_kalman_filter+0x184>)
 800475c:	4852      	ldr	r0, [pc, #328]	; (80048a8 <start_kalman_filter+0x188>)
 800475e:	f7fd fa0d 	bl	8001b7c <EKF_Init>
	float fake_acc_dat[10][3] = { { 0, 0, -9.81 }, { 1.703, 0, 9.66 }, { 3.355, 0, 9.218 }, { 4.905, 0, 8.496 }, { 6.306, 0, 7.515 }, { 7.515, 0, 6.306 }, { 8.496, 0, 4.905 }, { 9.218, 0, 3.355 }, { 9.66, 0, 1.703 }, { -9.81, 0, 0 } };
 8004762:	4a52      	ldr	r2, [pc, #328]	; (80048ac <start_kalman_filter+0x18c>)
 8004764:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004768:	4611      	mov	r1, r2
 800476a:	2278      	movs	r2, #120	; 0x78
 800476c:	4618      	mov	r0, r3
 800476e:	f00c f9e0 	bl	8010b32 <memcpy>
	float fake_gyr_dat[10][3] = { { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 }, { 0, 0.175, 0 } };
 8004772:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8004776:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800477a:	4a4d      	ldr	r2, [pc, #308]	; (80048b0 <start_kalman_filter+0x190>)
 800477c:	4618      	mov	r0, r3
 800477e:	4611      	mov	r1, r2
 8004780:	2378      	movs	r3, #120	; 0x78
 8004782:	461a      	mov	r2, r3
 8004784:	f00c f9d5 	bl	8010b32 <memcpy>
//	osDelay(3000);

	/* Infinite loop */
	for (;;) {
		trace_counter++;
 8004788:	4b4a      	ldr	r3, [pc, #296]	; (80048b4 <start_kalman_filter+0x194>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a49      	ldr	r2, [pc, #292]	; (80048b4 <start_kalman_filter+0x194>)
 8004790:	6013      	str	r3, [r2, #0]
		currentSampleTime = micros(Micros_Timer);
 8004792:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <start_kalman_filter+0x198>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f9c2 	bl	8003b20 <micros>
 800479c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		float dt = (currentSampleTime - lastSampleTime) / 1E6;
 80047a0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80047a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fb feb2 	bl	8000514 <__aeabi_ui2d>
 80047b0:	a335      	add	r3, pc, #212	; (adr r3, 8004888 <start_kalman_filter+0x168>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fc f851 	bl	800085c <__aeabi_ddiv>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	f7fc f9f9 	bl	8000bb8 <__aeabi_d2f>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		lastSampleTime = currentSampleTime;
 80047cc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80047d0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

		float p = (float) (bmx055_data.gyro[0]);
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <start_kalman_filter+0x19c>)
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		float q = (float) (bmx055_data.gyro[1]);
 80047dc:	4b37      	ldr	r3, [pc, #220]	; (80048bc <start_kalman_filter+0x19c>)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		float r = (float) (bmx055_data.gyro[2]);
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <start_kalman_filter+0x19c>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		EKF_Predict(&ekf, p, q, r, dt);
 80047ec:	edd7 1a85 	vldr	s3, [r7, #532]	; 0x214
 80047f0:	ed97 1a82 	vldr	s2, [r7, #520]	; 0x208
 80047f4:	edd7 0a83 	vldr	s1, [r7, #524]	; 0x20c
 80047f8:	ed97 0a84 	vldr	s0, [r7, #528]	; 0x210
 80047fc:	482a      	ldr	r0, [pc, #168]	; (80048a8 <start_kalman_filter+0x188>)
 80047fe:	f7fd fa1e 	bl	8001c3e <EKF_Predict>
		if (idx % correct_freq == 0) {
 8004802:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004806:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800480a:	fb93 f2f2 	sdiv	r2, r3, r2
 800480e:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8004812:	fb01 f202 	mul.w	r2, r1, r2
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d126      	bne.n	800486a <start_kalman_filter+0x14a>
			EKF_Update(&ekf, (float) bmx055_data.accel[0] / 100, (float) bmx055_data.accel[1] / 100, (float) bmx055_data.accel[2] / 100, 1.5, 0, 0);
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <start_kalman_filter+0x19c>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	eddf 6a27 	vldr	s13, [pc, #156]	; 80048c0 <start_kalman_filter+0x1a0>
 8004826:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <start_kalman_filter+0x19c>)
 800482c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004830:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80048c0 <start_kalman_filter+0x1a0>
 8004834:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004838:	4b20      	ldr	r3, [pc, #128]	; (80048bc <start_kalman_filter+0x19c>)
 800483a:	edd3 7a02 	vldr	s15, [r3, #8]
 800483e:	eddf 5a20 	vldr	s11, [pc, #128]	; 80048c0 <start_kalman_filter+0x1a0>
 8004842:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8004846:	eddf 2a14 	vldr	s5, [pc, #80]	; 8004898 <start_kalman_filter+0x178>
 800484a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8004898 <start_kalman_filter+0x178>
 800484e:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 8004852:	eeb0 1a46 	vmov.f32	s2, s12
 8004856:	eef0 0a66 	vmov.f32	s1, s13
 800485a:	eeb0 0a47 	vmov.f32	s0, s14
 800485e:	4812      	ldr	r0, [pc, #72]	; (80048a8 <start_kalman_filter+0x188>)
 8004860:	f7fd fbfe 	bl	8002060 <EKF_Update>
			idx = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		}
		idx++;
 800486a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800486e:	3301      	adds	r3, #1
 8004870:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		float euler_result[3];
		EP2Euler321(ekf.qu_data, euler_result);
 8004874:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004878:	4619      	mov	r1, r3
 800487a:	4812      	ldr	r0, [pc, #72]	; (80048c4 <start_kalman_filter+0x1a4>)
 800487c:	f7fe fb18 	bl	8002eb0 <EP2Euler321>
//	sz = snprintf(printData, sizeof(printData), "%0.10f, %0.10f, %0.10f, %0.10f, %0.10f, %0.10f, %0.10f, %0.10f, %0.10f, %0.10f, %0.10f\r\n", p, q, r, dt, ekf.qu_data[0],
//				ekf.qu_data[1], ekf.qu_data[2], ekf.qu_data[3], euler_result[0], euler_result[1], euler_result[2]);
//		debug_print(printData, sz);
//		sz = snprintf(printData, sizeof(printData), "Orientation: %0.4f, %0.4f, %0.4f\r\n", euler_result[0] * 57.2958, euler_result[1] * 57.2958, euler_result[2] * 57.2958);
//		debug_print(printData, sz, dbg=DBG);
		osDelay(10);
 8004880:	200a      	movs	r0, #10
 8004882:	f008 f9bb 	bl	800cbfc <osDelay>
	for (;;) {
 8004886:	e77f      	b.n	8004788 <start_kalman_filter+0x68>
 8004888:	00000000 	.word	0x00000000
 800488c:	412e8480 	.word	0x412e8480
 8004890:	200000c4 	.word	0x200000c4
 8004894:	20000084 	.word	0x20000084
 8004898:	00000000 	.word	0x00000000
 800489c:	20000044 	.word	0x20000044
 80048a0:	20000798 	.word	0x20000798
 80048a4:	20000034 	.word	0x20000034
 80048a8:	2000067c 	.word	0x2000067c
 80048ac:	080151a8 	.word	0x080151a8
 80048b0:	08015220 	.word	0x08015220
 80048b4:	20000648 	.word	0x20000648
 80048b8:	20000030 	.word	0x20000030
 80048bc:	20000604 	.word	0x20000604
 80048c0:	42c80000 	.word	0x42c80000
 80048c4:	20000684 	.word	0x20000684

080048c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048cc:	b672      	cpsid	i
}
 80048ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048d0:	e7fe      	b.n	80048d0 <Error_Handler+0x8>
 80048d2:	0000      	movs	r0, r0
 80048d4:	0000      	movs	r0, r0
	...

080048d8 <_degrees_to_duty_cycle>:
 */

#include "servos.h"
#include "usbd_cdc_if.h"

float _degrees_to_duty_cycle(float degrees) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty_cycle = MIN_DUTY_CYCLE + ((MAX_DUTY_CYCLE - MIN_DUTY_CYCLE) / (MAX_ANGLE - MIN_ANGLE)) * (degrees - MIN_ANGLE);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fb fe38 	bl	8000558 <__aeabi_f2d>
 80048e8:	a310      	add	r3, pc, #64	; (adr r3, 800492c <_degrees_to_duty_cycle+0x54>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb fe8b 	bl	8000608 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <_degrees_to_duty_cycle+0x50>)
 8004900:	f7fb fccc 	bl	800029c <__adddf3>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f954 	bl	8000bb8 <__aeabi_d2f>
 8004910:	4603      	mov	r3, r0
 8004912:	60fb      	str	r3, [r7, #12]

	return duty_cycle;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	ee07 3a90 	vmov	s15, r3
}
 800491a:	eeb0 0a67 	vmov.f32	s0, s15
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	f3af 8000 	nop.w
 8004928:	40040000 	.word	0x40040000
 800492c:	16c16c17 	.word	0x16c16c17
 8004930:	3fa6c16c 	.word	0x3fa6c16c

08004934 <set_motor>:

void set_motor(int motor_id, float degrees, TIM_HandleTypeDef htim) {
 8004934:	b084      	sub	sp, #16
 8004936:	b580      	push	{r7, lr}
 8004938:	b08c      	sub	sp, #48	; 0x30
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	ed87 0a00 	vstr	s0, [r7]
 8004942:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float duty_cycle = _degrees_to_duty_cycle(degrees);
 800494a:	ed97 0a00 	vldr	s0, [r7]
 800494e:	f7ff ffc3 	bl	80048d8 <_degrees_to_duty_cycle>
 8004952:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	// duty cycle = ccr / arr * 100
	float normalised = duty_cycle * 200 / 100;
 8004956:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800495a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80049d4 <set_motor+0xa0>
 800495e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004962:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80049d8 <set_motor+0xa4>
 8004966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800496a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if (motor_id == 1) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d108      	bne.n	8004986 <set_motor+0x52>
		htim.Instance->CCR1 = normalised;
 8004974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004976:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497e:	ee17 2a90 	vmov	r2, s15
 8004982:	635a      	str	r2, [r3, #52]	; 0x34
		// log an error over USB
		char buff[30];
		sprintf(buff, "ERROR: Invalid motor ID: %d\n", motor_id);
		CDC_Transmit_FS(buff, strlen(buff));
	}
}
 8004984:	e01f      	b.n	80049c6 <set_motor+0x92>
	} else if (motor_id == 2) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d108      	bne.n	800499e <set_motor+0x6a>
		htim.Instance->CCR2 = normalised;
 800498c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004996:	ee17 2a90 	vmov	r2, s15
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800499c:	e013      	b.n	80049c6 <set_motor+0x92>
		sprintf(buff, "ERROR: Invalid motor ID: %d\n", motor_id);
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	490d      	ldr	r1, [pc, #52]	; (80049dc <set_motor+0xa8>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f00c fec8 	bl	801173c <siprintf>
		CDC_Transmit_FS(buff, strlen(buff));
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fb fc15 	bl	80001e0 <strlen>
 80049b6:	4603      	mov	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	f107 0308 	add.w	r3, r7, #8
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f00a ff01 	bl	800f7c8 <CDC_Transmit_FS>
}
 80049c6:	bf00      	nop
 80049c8:	3730      	adds	r7, #48	; 0x30
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d0:	b004      	add	sp, #16
 80049d2:	4770      	bx	lr
 80049d4:	43480000 	.word	0x43480000
 80049d8:	42c80000 	.word	0x42c80000
 80049dc:	08015298 	.word	0x08015298

080049e0 <gimble_test>:

void gimble_test(TIM_HandleTypeDef htim) {
 80049e0:	b084      	sub	sp, #16
 80049e2:	b5b0      	push	{r4, r5, r7, lr}
 80049e4:	b092      	sub	sp, #72	; 0x48
 80049e6:	af10      	add	r7, sp, #64	; 0x40
 80049e8:	f107 0418 	add.w	r4, r7, #24
 80049ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	set_motor(1, 0, htim);
 80049f0:	466d      	mov	r5, sp
 80049f2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80049f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a0a:	f107 0318 	add.w	r3, r7, #24
 8004a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a10:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8004bac <gimble_test+0x1cc>
 8004a14:	2001      	movs	r0, #1
 8004a16:	f7ff ff8d 	bl	8004934 <set_motor>
	HAL_Delay(1000);
 8004a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a1e:	f000 fc03 	bl	8005228 <HAL_Delay>
	set_motor(1, 180, htim);
 8004a22:	466d      	mov	r5, sp
 8004a24:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a3c:	f107 0318 	add.w	r3, r7, #24
 8004a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a42:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004bb0 <gimble_test+0x1d0>
 8004a46:	2001      	movs	r0, #1
 8004a48:	f7ff ff74 	bl	8004934 <set_motor>
	HAL_Delay(1000);
 8004a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a50:	f000 fbea 	bl	8005228 <HAL_Delay>
	set_motor(1, 90, htim);
 8004a54:	466d      	mov	r5, sp
 8004a56:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004a6e:	f107 0318 	add.w	r3, r7, #24
 8004a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a74:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8004bb4 <gimble_test+0x1d4>
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7ff ff5b 	bl	8004934 <set_motor>
	HAL_Delay(1000);
 8004a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a82:	f000 fbd1 	bl	8005228 <HAL_Delay>
	set_motor(2, 0, htim);
 8004a86:	466d      	mov	r5, sp
 8004a88:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004aa0:	f107 0318 	add.w	r3, r7, #24
 8004aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aa6:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004bac <gimble_test+0x1cc>
 8004aaa:	2002      	movs	r0, #2
 8004aac:	f7ff ff42 	bl	8004934 <set_motor>
	HAL_Delay(1000);
 8004ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ab4:	f000 fbb8 	bl	8005228 <HAL_Delay>
	set_motor(2, 180, htim);
 8004ab8:	466d      	mov	r5, sp
 8004aba:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ace:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004ad2:	f107 0318 	add.w	r3, r7, #24
 8004ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad8:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004bb0 <gimble_test+0x1d0>
 8004adc:	2002      	movs	r0, #2
 8004ade:	f7ff ff29 	bl	8004934 <set_motor>
	HAL_Delay(1000);
 8004ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae6:	f000 fb9f 	bl	8005228 <HAL_Delay>
	set_motor(2, 90, htim);
 8004aea:	466d      	mov	r5, sp
 8004aec:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b04:	f107 0318 	add.w	r3, r7, #24
 8004b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0a:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8004bb4 <gimble_test+0x1d4>
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f7ff ff10 	bl	8004934 <set_motor>
	HAL_Delay(1000);
 8004b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b18:	f000 fb86 	bl	8005228 <HAL_Delay>

	for (int angle=0; angle < 180; angle++) {
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e039      	b.n	8004b96 <gimble_test+0x1b6>
		set_motor(1, angle, htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2c:	466d      	mov	r5, sp
 8004b2e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b46:	f107 0318 	add.w	r3, r7, #24
 8004b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7ff feef 	bl	8004934 <set_motor>
		set_motor(2, angle, htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	466d      	mov	r5, sp
 8004b62:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004b76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004b7a:	f107 0318 	add.w	r3, r7, #24
 8004b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b80:	eeb0 0a67 	vmov.f32	s0, s15
 8004b84:	2002      	movs	r0, #2
 8004b86:	f7ff fed5 	bl	8004934 <set_motor>
		HAL_Delay(10);
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	f000 fb4c 	bl	8005228 <HAL_Delay>
	for (int angle=0; angle < 180; angle++) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3301      	adds	r3, #1
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2bb3      	cmp	r3, #179	; 0xb3
 8004b9a:	ddc2      	ble.n	8004b22 <gimble_test+0x142>
	}
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004ba8:	b004      	add	sp, #16
 8004baa:	4770      	bx	lr
 8004bac:	00000000 	.word	0x00000000
 8004bb0:	43340000 	.word	0x43340000
 8004bb4:	42b40000 	.word	0x42b40000

08004bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_MspInit+0x54>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <HAL_MspInit+0x54>)
 8004bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_MspInit+0x54>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_MspInit+0x54>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_MspInit+0x54>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_MspInit+0x54>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	210f      	movs	r1, #15
 8004bfa:	f06f 0001 	mvn.w	r0, #1
 8004bfe:	f000 fe84 	bl	800590a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800

08004c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <HAL_ADC_MspInit+0x7c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d127      	bne.n	8004c82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <HAL_ADC_MspInit+0x80>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <HAL_ADC_MspInit+0x80>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	6453      	str	r3, [r2, #68]	; 0x44
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <HAL_ADC_MspInit+0x80>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_ADC_MspInit+0x80>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_ADC_MspInit+0x80>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_ADC_MspInit+0x80>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = S1_FBK_Pin|S2_FBK_Pin;
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4805      	ldr	r0, [pc, #20]	; (8004c94 <HAL_ADC_MspInit+0x84>)
 8004c7e:	f000 fe7b 	bl	8005978 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40012000 	.word	0x40012000
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40020000 	.word	0x40020000

08004c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	; 0x38
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <HAL_SPI_MspInit+0x150>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d12c      	bne.n	8004d14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	4a4a      	ldr	r2, [pc, #296]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cca:	4b48      	ldr	r3, [pc, #288]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4a43      	ldr	r2, [pc, #268]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8004cf2:	23e0      	movs	r3, #224	; 0xe0
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d02:	2305      	movs	r3, #5
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4838      	ldr	r0, [pc, #224]	; (8004df0 <HAL_SPI_MspInit+0x158>)
 8004d0e:	f000 fe33 	bl	8005978 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004d12:	e064      	b.n	8004dde <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a36      	ldr	r2, [pc, #216]	; (8004df4 <HAL_SPI_MspInit+0x15c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d12d      	bne.n	8004d7a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4a31      	ldr	r2, [pc, #196]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d44:	f043 0302 	orr.w	r3, r3, #2
 8004d48:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8004d56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d64:	2303      	movs	r3, #3
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d68:	2305      	movs	r3, #5
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d70:	4619      	mov	r1, r3
 8004d72:	4821      	ldr	r0, [pc, #132]	; (8004df8 <HAL_SPI_MspInit+0x160>)
 8004d74:	f000 fe00 	bl	8005978 <HAL_GPIO_Init>
}
 8004d78:	e031      	b.n	8004dde <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_SPI_MspInit+0x164>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d12c      	bne.n	8004dde <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	4a17      	ldr	r2, [pc, #92]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	4a10      	ldr	r2, [pc, #64]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	6313      	str	r3, [r2, #48]	; 0x30
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <HAL_SPI_MspInit+0x154>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004dbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004dce:	2306      	movs	r3, #6
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4809      	ldr	r0, [pc, #36]	; (8004e00 <HAL_SPI_MspInit+0x168>)
 8004dda:	f000 fdcd 	bl	8005978 <HAL_GPIO_Init>
}
 8004dde:	bf00      	nop
 8004de0:	3738      	adds	r7, #56	; 0x38
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40013000 	.word	0x40013000
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40020000 	.word	0x40020000
 8004df4:	40003800 	.word	0x40003800
 8004df8:	40020400 	.word	0x40020400
 8004dfc:	40003c00 	.word	0x40003c00
 8004e00:	40020800 	.word	0x40020800

08004e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d10e      	bne.n	8004e34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <HAL_TIM_Base_MspInit+0x64>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <HAL_TIM_Base_MspInit+0x64>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_TIM_Base_MspInit+0x64>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e32:	e012      	b.n	8004e5a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_TIM_Base_MspInit+0x68>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10d      	bne.n	8004e5a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_TIM_Base_MspInit+0x64>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <HAL_TIM_Base_MspInit+0x64>)
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_TIM_Base_MspInit+0x64>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40000400 	.word	0x40000400

08004e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <HAL_TIM_MspPostInit+0x68>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d11d      	bne.n	8004ece <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_TIM_MspPostInit+0x6c>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_TIM_MspPostInit+0x6c>)
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_TIM_MspPostInit+0x6c>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = S1_CTRL_Pin|S2_CTRL_Pin;
 8004eae:	2330      	movs	r3, #48	; 0x30
 8004eb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4805      	ldr	r0, [pc, #20]	; (8004ee0 <HAL_TIM_MspPostInit+0x70>)
 8004eca:	f000 fd55 	bl	8005978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004ece:	bf00      	nop
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40020400 	.word	0x40020400

08004ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ee8:	e7fe      	b.n	8004ee8 <NMI_Handler+0x4>

08004eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eee:	e7fe      	b.n	8004eee <HardFault_Handler+0x4>

08004ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ef4:	e7fe      	b.n	8004ef4 <MemManage_Handler+0x4>

08004ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004efa:	e7fe      	b.n	8004efa <BusFault_Handler+0x4>

08004efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f00:	e7fe      	b.n	8004f00 <UsageFault_Handler+0x4>

08004f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f14:	f000 f968 	bl	80051e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f18:	f009 faa8 	bl	800e46c <xTaskGetSchedulerState>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f22:	f00a f919 	bl	800f158 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f30:	4802      	ldr	r0, [pc, #8]	; (8004f3c <OTG_FS_IRQHandler+0x10>)
 8004f32:	f001 f80e 	bl	8005f52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200066c0 	.word	0x200066c0

08004f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return 1;
 8004f44:	2301      	movs	r3, #1
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <_kill>:

int _kill(int pid, int sig)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f5a:	f00b fcc7 	bl	80108ec <__errno>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2216      	movs	r2, #22
 8004f62:	601a      	str	r2, [r3, #0]
  return -1;
 8004f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_exit>:

void _exit (int status)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f78:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffe7 	bl	8004f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f82:	e7fe      	b.n	8004f82 <_exit+0x12>

08004f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e00a      	b.n	8004fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f96:	f3af 8000 	nop.w
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	60ba      	str	r2, [r7, #8]
 8004fa2:	b2ca      	uxtb	r2, r1
 8004fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dbf0      	blt.n	8004f96 <_read+0x12>
  }

  return len;
 8004fb4:	687b      	ldr	r3, [r7, #4]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e009      	b.n	8004fe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	60ba      	str	r2, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	dbf1      	blt.n	8004fd0 <_write+0x12>
  }
  return len;
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_close>:

int _close(int file)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800501e:	605a      	str	r2, [r3, #4]
  return 0;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <_isatty>:

int _isatty(int file)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005036:	2301      	movs	r3, #1
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <_sbrk+0x5c>)
 800506a:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <_sbrk+0x60>)
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <_sbrk+0x64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <_sbrk+0x64>)
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <_sbrk+0x68>)
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005082:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <_sbrk+0x64>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d207      	bcs.n	80050a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005090:	f00b fc2c 	bl	80108ec <__errno>
 8005094:	4603      	mov	r3, r0
 8005096:	220c      	movs	r2, #12
 8005098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	e009      	b.n	80050b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <_sbrk+0x64>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <_sbrk+0x64>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <_sbrk+0x64>)
 80050b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20020000 	.word	0x20020000
 80050c0:	00000400 	.word	0x00000400
 80050c4:	200007c8 	.word	0x200007c8
 80050c8:	20006e00 	.word	0x20006e00

080050cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <SystemInit+0x20>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	4a05      	ldr	r2, [pc, #20]	; (80050ec <SystemInit+0x20>)
 80050d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80050f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050f6:	490e      	ldr	r1, [pc, #56]	; (8005130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050f8:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050fc:	e002      	b.n	8005104 <LoopCopyDataInit>

080050fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005102:	3304      	adds	r3, #4

08005104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005108:	d3f9      	bcc.n	80050fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800510a:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800510c:	4c0b      	ldr	r4, [pc, #44]	; (800513c <LoopFillZerobss+0x26>)
  movs r3, #0
 800510e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005110:	e001      	b.n	8005116 <LoopFillZerobss>

08005112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005114:	3204      	adds	r2, #4

08005116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005118:	d3fb      	bcc.n	8005112 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800511a:	f7ff ffd7 	bl	80050cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800511e:	f00b fce1 	bl	8010ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005122:	f7fe fd0b 	bl	8003b3c <main>
  bx  lr    
 8005126:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800512c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005130:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8005134:	08016048 	.word	0x08016048
  ldr r2, =_sbss
 8005138:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 800513c:	20006dfc 	.word	0x20006dfc

08005140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005140:	e7fe      	b.n	8005140 <ADC_IRQHandler>
	...

08005144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_Init+0x40>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <HAL_Init+0x40>)
 800514e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_Init+0x40>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <HAL_Init+0x40>)
 800515a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800515e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005160:	4b08      	ldr	r3, [pc, #32]	; (8005184 <HAL_Init+0x40>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a07      	ldr	r2, [pc, #28]	; (8005184 <HAL_Init+0x40>)
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800516c:	2003      	movs	r0, #3
 800516e:	f000 fbc1 	bl	80058f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005172:	200f      	movs	r0, #15
 8005174:	f000 f808 	bl	8005188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005178:	f7ff fd1e 	bl	8004bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023c00 	.word	0x40023c00

08005188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005190:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_InitTick+0x54>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HAL_InitTick+0x58>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	4619      	mov	r1, r3
 800519a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800519e:	fbb3 f3f1 	udiv	r3, r3, r1
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fbd9 	bl	800595e <HAL_SYSTICK_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e00e      	b.n	80051d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d80a      	bhi.n	80051d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051bc:	2200      	movs	r2, #0
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	f000 fba1 	bl	800590a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <HAL_InitTick+0x5c>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	200000e8 	.word	0x200000e8
 80051e0:	200000f0 	.word	0x200000f0
 80051e4:	200000ec 	.word	0x200000ec

080051e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_IncTick+0x20>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_IncTick+0x24>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	4a04      	ldr	r2, [pc, #16]	; (800520c <HAL_IncTick+0x24>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	200000f0 	.word	0x200000f0
 800520c:	200007cc 	.word	0x200007cc

08005210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return uwTick;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_GetTick+0x14>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	200007cc 	.word	0x200007cc

08005228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005230:	f7ff ffee 	bl	8005210 <HAL_GetTick>
 8005234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d005      	beq.n	800524e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <HAL_Delay+0x44>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800524e:	bf00      	nop
 8005250:	f7ff ffde 	bl	8005210 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	429a      	cmp	r2, r3
 800525e:	d8f7      	bhi.n	8005250 <HAL_Delay+0x28>
  {
  }
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	200000f0 	.word	0x200000f0

08005270 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e033      	b.n	80052ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fcbe 	bl	8004c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052b6:	f023 0302 	bic.w	r3, r3, #2
 80052ba:	f043 0202 	orr.w	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f94a 	bl	800555c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	f043 0201 	orr.w	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
 80052de:	e001      	b.n	80052e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x1c>
 8005310:	2302      	movs	r3, #2
 8005312:	e113      	b.n	800553c <HAL_ADC_ConfigChannel+0x244>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b09      	cmp	r3, #9
 8005322:	d925      	bls.n	8005370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68d9      	ldr	r1, [r3, #12]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	3b1e      	subs	r3, #30
 800533a:	2207      	movs	r2, #7
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43da      	mvns	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	400a      	ands	r2, r1
 8005348:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68d9      	ldr	r1, [r3, #12]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	4618      	mov	r0, r3
 800535c:	4603      	mov	r3, r0
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4403      	add	r3, r0
 8005362:	3b1e      	subs	r3, #30
 8005364:	409a      	lsls	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e022      	b.n	80053b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6919      	ldr	r1, [r3, #16]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	2207      	movs	r2, #7
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	400a      	ands	r2, r1
 8005392:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6919      	ldr	r1, [r3, #16]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4618      	mov	r0, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4403      	add	r3, r0
 80053ac:	409a      	lsls	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b06      	cmp	r3, #6
 80053bc:	d824      	bhi.n	8005408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	3b05      	subs	r3, #5
 80053d0:	221f      	movs	r2, #31
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43da      	mvns	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	400a      	ands	r2, r1
 80053de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4618      	mov	r0, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	3b05      	subs	r3, #5
 80053fa:	fa00 f203 	lsl.w	r2, r0, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	635a      	str	r2, [r3, #52]	; 0x34
 8005406:	e04c      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b0c      	cmp	r3, #12
 800540e:	d824      	bhi.n	800545a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	3b23      	subs	r3, #35	; 0x23
 8005422:	221f      	movs	r2, #31
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	43da      	mvns	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	400a      	ands	r2, r1
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	4618      	mov	r0, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	3b23      	subs	r3, #35	; 0x23
 800544c:	fa00 f203 	lsl.w	r2, r0, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
 8005458:	e023      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	3b41      	subs	r3, #65	; 0x41
 800546c:	221f      	movs	r2, #31
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43da      	mvns	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	400a      	ands	r2, r1
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	4618      	mov	r0, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	3b41      	subs	r3, #65	; 0x41
 8005496:	fa00 f203 	lsl.w	r2, r0, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054a2:	4b29      	ldr	r3, [pc, #164]	; (8005548 <HAL_ADC_ConfigChannel+0x250>)
 80054a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a28      	ldr	r2, [pc, #160]	; (800554c <HAL_ADC_ConfigChannel+0x254>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10f      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x1d8>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b12      	cmp	r3, #18
 80054b6:	d10b      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <HAL_ADC_ConfigChannel+0x254>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d12b      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x23a>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <HAL_ADC_ConfigChannel+0x258>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <HAL_ADC_ConfigChannel+0x1f4>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b11      	cmp	r3, #17
 80054ea:	d122      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_ADC_ConfigChannel+0x258>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_ADC_ConfigChannel+0x25c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a11      	ldr	r2, [pc, #68]	; (8005558 <HAL_ADC_ConfigChannel+0x260>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	0c9a      	lsrs	r2, r3, #18
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005524:	e002      	b.n	800552c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	3b01      	subs	r3, #1
 800552a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f9      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40012300 	.word	0x40012300
 800554c:	40012000 	.word	0x40012000
 8005550:	10000012 	.word	0x10000012
 8005554:	200000e8 	.word	0x200000e8
 8005558:	431bde83 	.word	0x431bde83

0800555c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005564:	4b79      	ldr	r3, [pc, #484]	; (800574c <ADC_Init+0x1f0>)
 8005566:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6859      	ldr	r1, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80055b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6899      	ldr	r1, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	4a58      	ldr	r2, [pc, #352]	; (8005750 <ADC_Init+0x1f4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d022      	beq.n	800563a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	e00f      	b.n	800565a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005658:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0202 	bic.w	r2, r2, #2
 8005668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6899      	ldr	r1, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7e1b      	ldrb	r3, [r3, #24]
 8005674:	005a      	lsls	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01b      	beq.n	80056c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005696:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80056a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	3b01      	subs	r3, #1
 80056b4:	035a      	lsls	r2, r3, #13
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	e007      	b.n	80056d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	051a      	lsls	r2, r3, #20
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6899      	ldr	r1, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005712:	025a      	lsls	r2, r3, #9
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6899      	ldr	r1, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	029a      	lsls	r2, r3, #10
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012300 	.word	0x40012300
 8005750:	0f000001 	.word	0x0f000001

08005754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <__NVIC_SetPriorityGrouping+0x44>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005770:	4013      	ands	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800577c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005786:	4a04      	ldr	r2, [pc, #16]	; (8005798 <__NVIC_SetPriorityGrouping+0x44>)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	60d3      	str	r3, [r2, #12]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	e000ed00 	.word	0xe000ed00

0800579c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <__NVIC_GetPriorityGrouping+0x18>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	f003 0307 	and.w	r3, r3, #7
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db0b      	blt.n	80057e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	f003 021f 	and.w	r2, r3, #31
 80057d0:	4907      	ldr	r1, [pc, #28]	; (80057f0 <__NVIC_EnableIRQ+0x38>)
 80057d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2001      	movs	r0, #1
 80057da:	fa00 f202 	lsl.w	r2, r0, r2
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000e100 	.word	0xe000e100

080057f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	6039      	str	r1, [r7, #0]
 80057fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005804:	2b00      	cmp	r3, #0
 8005806:	db0a      	blt.n	800581e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	490c      	ldr	r1, [pc, #48]	; (8005840 <__NVIC_SetPriority+0x4c>)
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	440b      	add	r3, r1
 8005818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800581c:	e00a      	b.n	8005834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4908      	ldr	r1, [pc, #32]	; (8005844 <__NVIC_SetPriority+0x50>)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	3b04      	subs	r3, #4
 800582c:	0112      	lsls	r2, r2, #4
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	440b      	add	r3, r1
 8005832:	761a      	strb	r2, [r3, #24]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000e100 	.word	0xe000e100
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	; 0x24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	2b04      	cmp	r3, #4
 8005864:	bf28      	it	cs
 8005866:	2304      	movcs	r3, #4
 8005868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3304      	adds	r3, #4
 800586e:	2b06      	cmp	r3, #6
 8005870:	d902      	bls.n	8005878 <NVIC_EncodePriority+0x30>
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3b03      	subs	r3, #3
 8005876:	e000      	b.n	800587a <NVIC_EncodePriority+0x32>
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800587c:	f04f 32ff 	mov.w	r2, #4294967295
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43da      	mvns	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	401a      	ands	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005890:	f04f 31ff 	mov.w	r1, #4294967295
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43d9      	mvns	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a0:	4313      	orrs	r3, r2
         );
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3724      	adds	r7, #36	; 0x24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c0:	d301      	bcc.n	80058c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058c2:	2301      	movs	r3, #1
 80058c4:	e00f      	b.n	80058e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <SysTick_Config+0x40>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ce:	210f      	movs	r1, #15
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	f7ff ff8e 	bl	80057f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <SysTick_Config+0x40>)
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <SysTick_Config+0x40>)
 80058e0:	2207      	movs	r2, #7
 80058e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000e010 	.word	0xe000e010

080058f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff29 	bl	8005754 <__NVIC_SetPriorityGrouping>
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	4603      	mov	r3, r0
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800591c:	f7ff ff3e 	bl	800579c <__NVIC_GetPriorityGrouping>
 8005920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f7ff ff8e 	bl	8005848 <NVIC_EncodePriority>
 800592c:	4602      	mov	r2, r0
 800592e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff ff5d 	bl	80057f4 <__NVIC_SetPriority>
}
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	4603      	mov	r3, r0
 800594a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800594c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff31 	bl	80057b8 <__NVIC_EnableIRQ>
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff ffa2 	bl	80058b0 <SysTick_Config>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005978:	b480      	push	{r7}
 800597a:	b089      	sub	sp, #36	; 0x24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e159      	b.n	8005c48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005994:	2201      	movs	r2, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4013      	ands	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	f040 8148 	bne.w	8005c42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d005      	beq.n	80059ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d130      	bne.n	8005a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	2203      	movs	r2, #3
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a00:	2201      	movs	r2, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 0201 	and.w	r2, r3, #1
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d017      	beq.n	8005a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2203      	movs	r2, #3
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d123      	bne.n	8005abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	08da      	lsrs	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3208      	adds	r2, #8
 8005a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	220f      	movs	r2, #15
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	08da      	lsrs	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3208      	adds	r2, #8
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0203 	and.w	r2, r3, #3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80a2 	beq.w	8005c42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	4b57      	ldr	r3, [pc, #348]	; (8005c60 <HAL_GPIO_Init+0x2e8>)
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	4a56      	ldr	r2, [pc, #344]	; (8005c60 <HAL_GPIO_Init+0x2e8>)
 8005b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b0e:	4b54      	ldr	r3, [pc, #336]	; (8005c60 <HAL_GPIO_Init+0x2e8>)
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b1a:	4a52      	ldr	r2, [pc, #328]	; (8005c64 <HAL_GPIO_Init+0x2ec>)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	3302      	adds	r3, #2
 8005b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	220f      	movs	r2, #15
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a49      	ldr	r2, [pc, #292]	; (8005c68 <HAL_GPIO_Init+0x2f0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d019      	beq.n	8005b7a <HAL_GPIO_Init+0x202>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a48      	ldr	r2, [pc, #288]	; (8005c6c <HAL_GPIO_Init+0x2f4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_GPIO_Init+0x1fe>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a47      	ldr	r2, [pc, #284]	; (8005c70 <HAL_GPIO_Init+0x2f8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00d      	beq.n	8005b72 <HAL_GPIO_Init+0x1fa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a46      	ldr	r2, [pc, #280]	; (8005c74 <HAL_GPIO_Init+0x2fc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <HAL_GPIO_Init+0x1f6>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a45      	ldr	r2, [pc, #276]	; (8005c78 <HAL_GPIO_Init+0x300>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <HAL_GPIO_Init+0x1f2>
 8005b66:	2304      	movs	r3, #4
 8005b68:	e008      	b.n	8005b7c <HAL_GPIO_Init+0x204>
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x204>
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x204>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x204>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x204>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	f002 0203 	and.w	r2, r2, #3
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	4093      	lsls	r3, r2
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b8c:	4935      	ldr	r1, [pc, #212]	; (8005c64 <HAL_GPIO_Init+0x2ec>)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b9a:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bee:	4b23      	ldr	r3, [pc, #140]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c12:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c18:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c3c:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	f67f aea2 	bls.w	8005994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3724      	adds	r7, #36	; 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40013800 	.word	0x40013800
 8005c68:	40020000 	.word	0x40020000
 8005c6c:	40020400 	.word	0x40020400
 8005c70:	40020800 	.word	0x40020800
 8005c74:	40020c00 	.word	0x40020c00
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40013c00 	.word	0x40013c00

08005c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	807b      	strh	r3, [r7, #2]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c90:	787b      	ldrb	r3, [r7, #1]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c96:	887a      	ldrh	r2, [r7, #2]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c9c:	e003      	b.n	8005ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c9e:	887b      	ldrh	r3, [r7, #2]
 8005ca0:	041a      	lsls	r2, r3, #16
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	619a      	str	r2, [r3, #24]
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb4:	b08f      	sub	sp, #60	; 0x3c
 8005cb6:	af0a      	add	r7, sp, #40	; 0x28
 8005cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e10f      	b.n	8005ee4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f009 feba 	bl	800fa58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f003 fb69 	bl	80093da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	687e      	ldr	r6, [r7, #4]
 8005d10:	466d      	mov	r5, sp
 8005d12:	f106 0410 	add.w	r4, r6, #16
 8005d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d26:	1d33      	adds	r3, r6, #4
 8005d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d2a:	6838      	ldr	r0, [r7, #0]
 8005d2c:	f003 fa40 	bl	80091b0 <USB_CoreInit>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0d0      	b.n	8005ee4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f003 fb57 	bl	80093fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e04a      	b.n	8005dea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d54:	7bfa      	ldrb	r2, [r7, #15]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	333d      	adds	r3, #61	; 0x3d
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	333c      	adds	r3, #60	; 0x3c
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	b298      	uxth	r0, r3
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3344      	adds	r3, #68	; 0x44
 8005d90:	4602      	mov	r2, r0
 8005d92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d94:	7bfa      	ldrb	r2, [r7, #15]
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3340      	adds	r3, #64	; 0x40
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005da8:	7bfa      	ldrb	r2, [r7, #15]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	3348      	adds	r3, #72	; 0x48
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dbc:	7bfa      	ldrb	r2, [r7, #15]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	334c      	adds	r3, #76	; 0x4c
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005dd0:	7bfa      	ldrb	r2, [r7, #15]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	3354      	adds	r3, #84	; 0x54
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	3301      	adds	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	7bfa      	ldrb	r2, [r7, #15]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d3af      	bcc.n	8005d54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e044      	b.n	8005e84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005dfa:	7bfa      	ldrb	r2, [r7, #15]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e10:	7bfa      	ldrb	r2, [r7, #15]
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e26:	7bfa      	ldrb	r2, [r7, #15]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e3c:	7bfa      	ldrb	r2, [r7, #15]
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e52:	7bfa      	ldrb	r2, [r7, #15]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e68:	7bfa      	ldrb	r2, [r7, #15]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3301      	adds	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3b5      	bcc.n	8005dfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	687e      	ldr	r6, [r7, #4]
 8005e96:	466d      	mov	r5, sp
 8005e98:	f106 0410 	add.w	r4, r6, #16
 8005e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ea8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005eac:	1d33      	adds	r3, r6, #4
 8005eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f003 faef 	bl	8009494 <USB_DevInit>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e00d      	b.n	8005ee4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f004 fc3e 	bl	800a75e <USB_DevDisconnect>

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_PCD_Start+0x1c>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e020      	b.n	8005f4a <HAL_PCD_Start+0x5e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d109      	bne.n	8005f2c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d005      	beq.n	8005f2c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f003 fa41 	bl	80093b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f004 fbee 	bl	800a71c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f52:	b590      	push	{r4, r7, lr}
 8005f54:	b08d      	sub	sp, #52	; 0x34
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f004 fcac 	bl	800a8c6 <USB_GetMode>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 848a 	bne.w	800688a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f004 fc10 	bl	800a7a0 <USB_ReadInterrupts>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8480 	beq.w	8006888 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	0a1b      	lsrs	r3, r3, #8
 8005f92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f004 fbfd 	bl	800a7a0 <USB_ReadInterrupts>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d107      	bne.n	8005fc0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f002 0202 	and.w	r2, r2, #2
 8005fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f004 fbeb 	bl	800a7a0 <USB_ReadInterrupts>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d161      	bne.n	8006098 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0210 	bic.w	r2, r2, #16
 8005fe2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f003 020f 	and.w	r2, r3, #15
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4413      	add	r3, r2
 8006000:	3304      	adds	r3, #4
 8006002:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	0c5b      	lsrs	r3, r3, #17
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2b02      	cmp	r3, #2
 800600e:	d124      	bne.n	800605a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d035      	beq.n	8006088 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6a38      	ldr	r0, [r7, #32]
 8006030:	f004 fa22 	bl	800a478 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006040:	441a      	add	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a1a      	ldr	r2, [r3, #32]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006052:	441a      	add	r2, r3
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	621a      	str	r2, [r3, #32]
 8006058:	e016      	b.n	8006088 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	0c5b      	lsrs	r3, r3, #17
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	2b06      	cmp	r3, #6
 8006064:	d110      	bne.n	8006088 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800606c:	2208      	movs	r2, #8
 800606e:	4619      	mov	r1, r3
 8006070:	6a38      	ldr	r0, [r7, #32]
 8006072:	f004 fa01 	bl	800a478 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006082:	441a      	add	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0210 	orr.w	r2, r2, #16
 8006096:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f004 fb7f 	bl	800a7a0 <USB_ReadInterrupts>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060ac:	f040 80a7 	bne.w	80061fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f004 fb84 	bl	800a7c6 <USB_ReadDevAllOutEpInterrupt>
 80060be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80060c0:	e099      	b.n	80061f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 808e 	beq.w	80061ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f004 fba8 	bl	800a82e <USB_ReadDevOutEPInterrupt>
 80060de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	461a      	mov	r2, r3
 80060f8:	2301      	movs	r3, #1
 80060fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80060fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fec2 	bl	8006e88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00c      	beq.n	8006128 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	461a      	mov	r2, r3
 800611c:	2308      	movs	r3, #8
 800611e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 ff98 	bl	8007058 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b00      	cmp	r3, #0
 8006130:	d008      	beq.n	8006144 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	461a      	mov	r2, r3
 8006140:	2310      	movs	r3, #16
 8006142:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d030      	beq.n	80061b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d109      	bne.n	800616e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800616c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800616e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	4413      	add	r3, r2
 8006180:	3304      	adds	r3, #4
 8006182:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	78db      	ldrb	r3, [r3, #3]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d108      	bne.n	800619e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2200      	movs	r2, #0
 8006190:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	b2db      	uxtb	r3, r3
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f009 fd59 	bl	800fc50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	461a      	mov	r2, r3
 80061ac:	2302      	movs	r3, #2
 80061ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	461a      	mov	r2, r3
 80061c8:	2320      	movs	r3, #32
 80061ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	461a      	mov	r2, r3
 80061e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af62 	bne.w	80060c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f004 facc 	bl	800a7a0 <USB_ReadInterrupts>
 8006208:	4603      	mov	r3, r0
 800620a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800620e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006212:	f040 80db 	bne.w	80063cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f004 faed 	bl	800a7fa <USB_ReadDevAllInEpInterrupt>
 8006220:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006226:	e0cd      	b.n	80063c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80c2 	beq.w	80063b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	4611      	mov	r1, r2
 800623e:	4618      	mov	r0, r3
 8006240:	f004 fb13 	bl	800a86a <USB_ReadDevInEPInterrupt>
 8006244:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d057      	beq.n	8006300 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	2201      	movs	r2, #1
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	43db      	mvns	r3, r3
 800626a:	69f9      	ldr	r1, [r7, #28]
 800626c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006270:	4013      	ands	r3, r2
 8006272:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	461a      	mov	r2, r3
 8006282:	2301      	movs	r3, #1
 8006284:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d132      	bne.n	80062f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	334c      	adds	r3, #76	; 0x4c
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4403      	add	r3, r0
 80062ae:	3348      	adds	r3, #72	; 0x48
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4419      	add	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4403      	add	r3, r0
 80062c2:	334c      	adds	r3, #76	; 0x4c
 80062c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d113      	bne.n	80062f4 <HAL_PCD_IRQHandler+0x3a2>
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	4613      	mov	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	3354      	adds	r3, #84	; 0x54
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062ec:	461a      	mov	r2, r3
 80062ee:	2101      	movs	r1, #1
 80062f0:	f004 fb1a 	bl	800a928 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f009 fc2d 	bl	800fb5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006316:	461a      	mov	r2, r3
 8006318:	2308      	movs	r3, #8
 800631a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	2310      	movs	r3, #16
 8006336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d008      	beq.n	8006354 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634e:	461a      	mov	r2, r3
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d023      	beq.n	80063a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800635e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006360:	6a38      	ldr	r0, [r7, #32]
 8006362:	f003 f9fb 	bl	800975c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	3338      	adds	r3, #56	; 0x38
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4413      	add	r3, r2
 8006376:	3304      	adds	r3, #4
 8006378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	78db      	ldrb	r3, [r3, #3]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d108      	bne.n	8006394 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	b2db      	uxtb	r3, r3
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f009 fc70 	bl	800fc74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	461a      	mov	r2, r3
 80063a2:	2302      	movs	r3, #2
 80063a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fcdb 	bl	8006d6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	3301      	adds	r3, #1
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f47f af2e 	bne.w	8006228 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f004 f9e5 	bl	800a7a0 <USB_ReadInterrupts>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e0:	d122      	bne.n	8006428 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d108      	bne.n	8006412 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006408:	2100      	movs	r1, #0
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fec2 	bl	8007194 <HAL_PCDEx_LPM_Callback>
 8006410:	e002      	b.n	8006418 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f009 fc0e 	bl	800fc34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f004 f9b7 	bl	800a7a0 <USB_ReadInterrupts>
 8006432:	4603      	mov	r3, r0
 8006434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643c:	d112      	bne.n	8006464 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d102      	bne.n	8006454 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f009 fbca 	bl	800fbe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006462:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f004 f999 	bl	800a7a0 <USB_ReadInterrupts>
 800646e:	4603      	mov	r3, r0
 8006470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	f040 80b7 	bne.w	80065ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2110      	movs	r1, #16
 8006496:	4618      	mov	r0, r3
 8006498:	f003 f960 	bl	800975c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a0:	e046      	b.n	8006530 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	461a      	mov	r2, r3
 80064b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	461a      	mov	r2, r3
 80064e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006508:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006524:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006528:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	3301      	adds	r3, #1
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d3b3      	bcc.n	80064a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006548:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800654c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	2b00      	cmp	r3, #0
 8006554:	d016      	beq.n	8006584 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006566:	f043 030b 	orr.w	r3, r3, #11
 800656a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657c:	f043 030b 	orr.w	r3, r3, #11
 8006580:	6453      	str	r3, [r2, #68]	; 0x44
 8006582:	e015      	b.n	80065b0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006596:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800659a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065aa:	f043 030b 	orr.w	r3, r3, #11
 80065ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065d4:	461a      	mov	r2, r3
 80065d6:	f004 f9a7 	bl	800a928 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80065e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f004 f8d6 	bl	800a7a0 <USB_ReadInterrupts>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	d124      	bne.n	800664a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f004 f96c 	bl	800a8e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f003 f921 	bl	8009856 <USB_GetDevSpeed>
 8006614:	4603      	mov	r3, r0
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681c      	ldr	r4, [r3, #0]
 8006620:	f001 f9e8 	bl	80079f4 <HAL_RCC_GetHCLKFreq>
 8006624:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800662a:	b2db      	uxtb	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	4620      	mov	r0, r4
 8006630:	f002 fe20 	bl	8009274 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f009 fab8 	bl	800fbaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006648:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f004 f8a6 	bl	800a7a0 <USB_ReadInterrupts>
 8006654:	4603      	mov	r3, r0
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b08      	cmp	r3, #8
 800665c:	d10a      	bne.n	8006674 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f009 fa95 	bl	800fb8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f002 0208 	and.w	r2, r2, #8
 8006672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f004 f891 	bl	800a7a0 <USB_ReadInterrupts>
 800667e:	4603      	mov	r3, r0
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d122      	bne.n	80066ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006694:	2301      	movs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
 8006698:	e014      	b.n	80066c4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d105      	bne.n	80066be <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fb27 	bl	8006d0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	3301      	adds	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d3e5      	bcc.n	800669a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f004 f864 	bl	800a7a0 <USB_ReadInterrupts>
 80066d8:	4603      	mov	r3, r0
 80066da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e2:	d13b      	bne.n	800675c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066e4:	2301      	movs	r3, #1
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
 80066e8:	e02b      	b.n	8006742 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3340      	adds	r3, #64	; 0x40
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d115      	bne.n	800673c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006710:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006712:	2b00      	cmp	r3, #0
 8006714:	da12      	bge.n	800673c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	4613      	mov	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	333f      	adds	r3, #63	; 0x3f
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fae8 	bl	8006d0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006748:	429a      	cmp	r2, r3
 800674a:	d3ce      	bcc.n	80066ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800675a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f004 f81d 	bl	800a7a0 <USB_ReadInterrupts>
 8006766:	4603      	mov	r3, r0
 8006768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800676c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006770:	d155      	bne.n	800681e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006772:	2301      	movs	r3, #1
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
 8006776:	e045      	b.n	8006804 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d12e      	bne.n	80067fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da2b      	bge.n	80067fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80067b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d121      	bne.n	80067fe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	4613      	mov	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067fa:	6053      	str	r3, [r2, #4]
            break;
 80067fc:	e007      	b.n	800680e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	429a      	cmp	r2, r3
 800680c:	d3b4      	bcc.n	8006778 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800681c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f003 ffbc 	bl	800a7a0 <USB_ReadInterrupts>
 8006828:	4603      	mov	r3, r0
 800682a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d10a      	bne.n	800684a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f009 fa2f 	bl	800fc98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f003 ffa6 	bl	800a7a0 <USB_ReadInterrupts>
 8006854:	4603      	mov	r3, r0
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d115      	bne.n	800688a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f009 fa1f 	bl	800fcb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	e000      	b.n	800688a <HAL_PCD_IRQHandler+0x938>
      return;
 8006888:	bf00      	nop
    }
  }
}
 800688a:	3734      	adds	r7, #52	; 0x34
 800688c:	46bd      	mov	sp, r7
 800688e:	bd90      	pop	{r4, r7, pc}

08006890 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_PCD_SetAddress+0x1a>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e013      	b.n	80068d2 <HAL_PCD_SetAddress+0x42>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f003 ff04 	bl	800a6d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	4608      	mov	r0, r1
 80068e4:	4611      	mov	r1, r2
 80068e6:	461a      	mov	r2, r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	70fb      	strb	r3, [r7, #3]
 80068ec:	460b      	mov	r3, r1
 80068ee:	803b      	strh	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da0f      	bge.n	8006920 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	3338      	adds	r3, #56	; 0x38
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	3304      	adds	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	705a      	strb	r2, [r3, #1]
 800691e:	e00f      	b.n	8006940 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	f003 020f 	and.w	r2, r3, #15
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	3304      	adds	r3, #4
 8006938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800694c:	883a      	ldrh	r2, [r7, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	78ba      	ldrb	r2, [r7, #2]
 8006956:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800696a:	78bb      	ldrb	r3, [r7, #2]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d102      	bne.n	8006976 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_PCD_EP_Open+0xaa>
 8006980:	2302      	movs	r3, #2
 8006982:	e00e      	b.n	80069a2 <HAL_PCD_EP_Open+0xc8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	4618      	mov	r0, r3
 8006994:	f002 ff84 	bl	80098a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80069a0:	7afb      	ldrb	r3, [r7, #11]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	da0f      	bge.n	80069de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	4613      	mov	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	3338      	adds	r3, #56	; 0x38
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	3304      	adds	r3, #4
 80069d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	705a      	strb	r2, [r3, #1]
 80069dc:	e00f      	b.n	80069fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	3304      	adds	r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_PCD_EP_Close+0x6e>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e00e      	b.n	8006a36 <HAL_PCD_EP_Close+0x8c>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f002 ffc2 	bl	80099b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	3304      	adds	r3, #4
 8006a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2200      	movs	r2, #0
 8006a78:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d102      	bne.n	8006a9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	f003 faa1 	bl	8009ff8 <USB_EP0StartXfer>
 8006ab6:	e008      	b.n	8006aca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	f003 f84f 	bl	8009b68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006af6:	681b      	ldr	r3, [r3, #0]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	460b      	mov	r3, r1
 8006b12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	f003 020f 	and.w	r2, r3, #15
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	3338      	adds	r3, #56	; 0x38
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	3304      	adds	r3, #4
 8006b2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2201      	movs	r2, #1
 8006b42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d102      	bne.n	8006b5e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	f003 fa3f 	bl	8009ff8 <USB_EP0StartXfer>
 8006b7a:	e008      	b.n	8006b8e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	6979      	ldr	r1, [r7, #20]
 8006b8a:	f002 ffed 	bl	8009b68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d901      	bls.n	8006bb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e050      	b.n	8006c58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da0f      	bge.n	8006bde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	f003 020f 	and.w	r2, r3, #15
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3338      	adds	r3, #56	; 0x38
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	705a      	strb	r2, [r3, #1]
 8006bdc:	e00d      	b.n	8006bfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	4413      	add	r3, r2
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_PCD_EP_SetStall+0x82>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e01e      	b.n	8006c58 <HAL_PCD_EP_SetStall+0xc0>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f003 fc7d 	bl	800a528 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	b2d9      	uxtb	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f003 fe6d 	bl	800a928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d901      	bls.n	8006c7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e042      	b.n	8006d04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da0f      	bge.n	8006ca6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	3338      	adds	r3, #56	; 0x38
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4413      	add	r3, r2
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	705a      	strb	r2, [r3, #1]
 8006ca4:	e00f      	b.n	8006cc6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_PCD_EP_ClrStall+0x86>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e00e      	b.n	8006d04 <HAL_PCD_EP_ClrStall+0xa4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f003 fc85 	bl	800a604 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da0c      	bge.n	8006d3a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	f003 020f 	and.w	r2, r3, #15
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	3338      	adds	r3, #56	; 0x38
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	3304      	adds	r3, #4
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e00c      	b.n	8006d54 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	4613      	mov	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	3304      	adds	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68f9      	ldr	r1, [r7, #12]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f003 faa4 	bl	800a2a8 <USB_EPStopXfer>
 8006d60:	4603      	mov	r3, r0
 8006d62:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006d64:	7afb      	ldrb	r3, [r7, #11]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b08a      	sub	sp, #40	; 0x28
 8006d72:	af02      	add	r7, sp, #8
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	3338      	adds	r3, #56	; 0x38
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	3304      	adds	r3, #4
 8006d94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d901      	bls.n	8006da6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e06c      	b.n	8006e80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d902      	bls.n	8006dc2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3303      	adds	r3, #3
 8006dc6:	089b      	lsrs	r3, r3, #2
 8006dc8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dca:	e02b      	b.n	8006e24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d902      	bls.n	8006de8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3303      	adds	r3, #3
 8006dec:	089b      	lsrs	r3, r3, #2
 8006dee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6919      	ldr	r1, [r3, #16]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4603      	mov	r3, r0
 8006e06:	6978      	ldr	r0, [r7, #20]
 8006e08:	f003 faf8 	bl	800a3fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	441a      	add	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	441a      	add	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d809      	bhi.n	8006e4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d203      	bcs.n	8006e4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1be      	bne.n	8006dcc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d811      	bhi.n	8006e7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	2201      	movs	r2, #1
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	43db      	mvns	r3, r3
 8006e74:	6939      	ldr	r1, [r7, #16]
 8006e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	333c      	adds	r3, #60	; 0x3c
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d17b      	bne.n	8006fb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d015      	beq.n	8006ef4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4a61      	ldr	r2, [pc, #388]	; (8007050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	f240 80b9 	bls.w	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80b3 	beq.w	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ef0:	6093      	str	r3, [r2, #8]
 8006ef2:	e0a7      	b.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2320      	movs	r3, #32
 8006f0e:	6093      	str	r3, [r2, #8]
 8006f10:	e098      	b.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 8093 	bne.w	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	4a4b      	ldr	r2, [pc, #300]	; (8007050 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d90f      	bls.n	8006f46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	6093      	str	r3, [r2, #8]
 8006f44:	e07e      	b.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	3304      	adds	r3, #4
 8006f5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	0159      	lsls	r1, r3, #5
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	440b      	add	r3, r1
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d114      	bne.n	8006fa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f90:	461a      	mov	r2, r3
 8006f92:	2101      	movs	r1, #1
 8006f94:	f003 fcc8 	bl	800a928 <USB_EP0_OutStart>
 8006f98:	e006      	b.n	8006fa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f008 fdb8 	bl	800fb24 <HAL_PCD_DataOutStageCallback>
 8006fb4:	e046      	b.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	4a26      	ldr	r2, [pc, #152]	; (8007054 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d124      	bne.n	8007008 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fda:	6093      	str	r3, [r2, #8]
 8006fdc:	e032      	b.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f008 fd8f 	bl	800fb24 <HAL_PCD_DataOutStageCallback>
 8007006:	e01d      	b.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d114      	bne.n	8007038 <PCD_EP_OutXfrComplete_int+0x1b0>
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d108      	bne.n	8007038 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007030:	461a      	mov	r2, r3
 8007032:	2100      	movs	r1, #0
 8007034:	f003 fc78 	bl	800a928 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f008 fd70 	bl	800fb24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	4f54300a 	.word	0x4f54300a
 8007054:	4f54310a 	.word	0x4f54310a

08007058 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	333c      	adds	r3, #60	; 0x3c
 8007070:	3304      	adds	r3, #4
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d90e      	bls.n	80070ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007094:	2b00      	cmp	r3, #0
 8007096:	d009      	beq.n	80070ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f008 fd27 	bl	800fb00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d90c      	bls.n	80070d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d108      	bne.n	80070d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070cc:	461a      	mov	r2, r3
 80070ce:	2101      	movs	r1, #1
 80070d0:	f003 fc2a 	bl	800a928 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	4f54300a 	.word	0x4f54300a

080070e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
 80070f0:	4613      	mov	r3, r2
 80070f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007102:	883b      	ldrh	r3, [r7, #0]
 8007104:	0419      	lsls	r1, r3, #16
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	430a      	orrs	r2, r1
 800710e:	629a      	str	r2, [r3, #40]	; 0x28
 8007110:	e028      	b.n	8007164 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4413      	add	r3, r2
 800711e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	e00d      	b.n	8007142 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	3340      	adds	r3, #64	; 0x40
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	4413      	add	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	3301      	adds	r3, #1
 8007140:	73fb      	strb	r3, [r7, #15]
 8007142:	7bfa      	ldrb	r2, [r7, #15]
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	3b01      	subs	r3, #1
 8007148:	429a      	cmp	r2, r3
 800714a:	d3ec      	bcc.n	8007126 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800714c:	883b      	ldrh	r3, [r7, #0]
 800714e:	0418      	lsls	r0, r3, #16
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	3b01      	subs	r3, #1
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	4302      	orrs	r2, r0
 800715c:	3340      	adds	r3, #64	; 0x40
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	887a      	ldrh	r2, [r7, #2]
 8007184:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e267      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d075      	beq.n	80072b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ca:	4b88      	ldr	r3, [pc, #544]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d00c      	beq.n	80071f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071d6:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d112      	bne.n	8007208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e2:	4b82      	ldr	r3, [pc, #520]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ee:	d10b      	bne.n	8007208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	4b7e      	ldr	r3, [pc, #504]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <HAL_RCC_OscConfig+0x108>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d157      	bne.n	80072b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e242      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d106      	bne.n	8007220 <HAL_RCC_OscConfig+0x74>
 8007212:	4b76      	ldr	r3, [pc, #472]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a75      	ldr	r2, [pc, #468]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e01d      	b.n	800725c <HAL_RCC_OscConfig+0xb0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x98>
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a6f      	ldr	r2, [pc, #444]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a6c      	ldr	r2, [pc, #432]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e00b      	b.n	800725c <HAL_RCC_OscConfig+0xb0>
 8007244:	4b69      	ldr	r3, [pc, #420]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a68      	ldr	r2, [pc, #416]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	4b66      	ldr	r3, [pc, #408]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a65      	ldr	r2, [pc, #404]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007264:	f7fd ffd4 	bl	8005210 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800726c:	f7fd ffd0 	bl	8005210 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e207      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	4b5b      	ldr	r3, [pc, #364]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCC_OscConfig+0xc0>
 800728a:	e014      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800728c:	f7fd ffc0 	bl	8005210 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007294:	f7fd ffbc 	bl	8005210 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e1f3      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072a6:	4b51      	ldr	r3, [pc, #324]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0xe8>
 80072b2:	e000      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d063      	beq.n	800738a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ce:	4b47      	ldr	r3, [pc, #284]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d11c      	bne.n	8007314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072da:	4b44      	ldr	r3, [pc, #272]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d116      	bne.n	8007314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e6:	4b41      	ldr	r3, [pc, #260]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <HAL_RCC_OscConfig+0x152>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d001      	beq.n	80072fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e1c7      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072fe:	4b3b      	ldr	r3, [pc, #236]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4937      	ldr	r1, [pc, #220]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800730e:	4313      	orrs	r3, r2
 8007310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007312:	e03a      	b.n	800738a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d020      	beq.n	800735e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800731c:	4b34      	ldr	r3, [pc, #208]	; (80073f0 <HAL_RCC_OscConfig+0x244>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007322:	f7fd ff75 	bl	8005210 <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007328:	e008      	b.n	800733c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800732a:	f7fd ff71 	bl	8005210 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e1a8      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733c:	4b2b      	ldr	r3, [pc, #172]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f0      	beq.n	800732a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007348:	4b28      	ldr	r3, [pc, #160]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	4925      	ldr	r1, [pc, #148]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007358:	4313      	orrs	r3, r2
 800735a:	600b      	str	r3, [r1, #0]
 800735c:	e015      	b.n	800738a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <HAL_RCC_OscConfig+0x244>)
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fd ff54 	bl	8005210 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800736c:	f7fd ff50 	bl	8005210 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e187      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800737e:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d036      	beq.n	8007404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d016      	beq.n	80073cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800739e:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <HAL_RCC_OscConfig+0x248>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a4:	f7fd ff34 	bl	8005210 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073ac:	f7fd ff30 	bl	8005210 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e167      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80073c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x200>
 80073ca:	e01b      	b.n	8007404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <HAL_RCC_OscConfig+0x248>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d2:	f7fd ff1d 	bl	8005210 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073d8:	e00e      	b.n	80073f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073da:	f7fd ff19 	bl	8005210 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d907      	bls.n	80073f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e150      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
 80073ec:	40023800 	.word	0x40023800
 80073f0:	42470000 	.word	0x42470000
 80073f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073f8:	4b88      	ldr	r3, [pc, #544]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80073fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1ea      	bne.n	80073da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8097 	beq.w	8007540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007416:	4b81      	ldr	r3, [pc, #516]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10f      	bne.n	8007442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	4b7d      	ldr	r3, [pc, #500]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a7c      	ldr	r2, [pc, #496]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
 8007432:	4b7a      	ldr	r3, [pc, #488]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007442:	4b77      	ldr	r3, [pc, #476]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744a:	2b00      	cmp	r3, #0
 800744c:	d118      	bne.n	8007480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800744e:	4b74      	ldr	r3, [pc, #464]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a73      	ldr	r2, [pc, #460]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800745a:	f7fd fed9 	bl	8005210 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007462:	f7fd fed5 	bl	8005210 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e10c      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007474:	4b6a      	ldr	r3, [pc, #424]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f0      	beq.n	8007462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <HAL_RCC_OscConfig+0x2ea>
 8007488:	4b64      	ldr	r3, [pc, #400]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	4a63      	ldr	r2, [pc, #396]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	6713      	str	r3, [r2, #112]	; 0x70
 8007494:	e01c      	b.n	80074d0 <HAL_RCC_OscConfig+0x324>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b05      	cmp	r3, #5
 800749c:	d10c      	bne.n	80074b8 <HAL_RCC_OscConfig+0x30c>
 800749e:	4b5f      	ldr	r3, [pc, #380]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	4a5e      	ldr	r2, [pc, #376]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074a4:	f043 0304 	orr.w	r3, r3, #4
 80074a8:	6713      	str	r3, [r2, #112]	; 0x70
 80074aa:	4b5c      	ldr	r3, [pc, #368]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	4a5b      	ldr	r2, [pc, #364]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	6713      	str	r3, [r2, #112]	; 0x70
 80074b6:	e00b      	b.n	80074d0 <HAL_RCC_OscConfig+0x324>
 80074b8:	4b58      	ldr	r3, [pc, #352]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	4a57      	ldr	r2, [pc, #348]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	6713      	str	r3, [r2, #112]	; 0x70
 80074c4:	4b55      	ldr	r3, [pc, #340]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c8:	4a54      	ldr	r2, [pc, #336]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074ca:	f023 0304 	bic.w	r3, r3, #4
 80074ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d015      	beq.n	8007504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fd fe9a 	bl	8005210 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fd fe96 	bl	8005210 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0cb      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f6:	4b49      	ldr	r3, [pc, #292]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0ee      	beq.n	80074e0 <HAL_RCC_OscConfig+0x334>
 8007502:	e014      	b.n	800752e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007504:	f7fd fe84 	bl	8005210 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800750a:	e00a      	b.n	8007522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fd fe80 	bl	8005210 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0b5      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1ee      	bne.n	800750c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d105      	bne.n	8007540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007534:	4b39      	ldr	r3, [pc, #228]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	4a38      	ldr	r2, [pc, #224]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800753a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800753e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80a1 	beq.w	800768c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800754a:	4b34      	ldr	r3, [pc, #208]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
 8007552:	2b08      	cmp	r3, #8
 8007554:	d05c      	beq.n	8007610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d141      	bne.n	80075e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <HAL_RCC_OscConfig+0x478>)
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fd fe54 	bl	8005210 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800756c:	f7fd fe50 	bl	8005210 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b02      	cmp	r3, #2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e087      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757e:	4b27      	ldr	r3, [pc, #156]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f0      	bne.n	800756c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69da      	ldr	r2, [r3, #28]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	3b01      	subs	r3, #1
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	061b      	lsls	r3, r3, #24
 80075ae:	491b      	ldr	r1, [pc, #108]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <HAL_RCC_OscConfig+0x478>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ba:	f7fd fe29 	bl	8005210 <HAL_GetTick>
 80075be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c0:	e008      	b.n	80075d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c2:	f7fd fe25 	bl	8005210 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e05c      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d4:	4b11      	ldr	r3, [pc, #68]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f0      	beq.n	80075c2 <HAL_RCC_OscConfig+0x416>
 80075e0:	e054      	b.n	800768c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <HAL_RCC_OscConfig+0x478>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e8:	f7fd fe12 	bl	8005210 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f0:	f7fd fe0e 	bl	8005210 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e045      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x444>
 800760e:	e03d      	b.n	800768c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d107      	bne.n	8007628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e038      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
 800761c:	40023800 	.word	0x40023800
 8007620:	40007000 	.word	0x40007000
 8007624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007628:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <HAL_RCC_OscConfig+0x4ec>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d028      	beq.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007640:	429a      	cmp	r2, r3
 8007642:	d121      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d11a      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007658:	4013      	ands	r3, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800765e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007660:	4293      	cmp	r3, r2
 8007662:	d111      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	3b01      	subs	r3, #1
 8007672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007674:	429a      	cmp	r2, r3
 8007676:	d107      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007684:	429a      	cmp	r2, r3
 8007686:	d001      	beq.n	800768c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	40023800 	.word	0x40023800

0800769c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0cc      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076b0:	4b68      	ldr	r3, [pc, #416]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d90c      	bls.n	80076d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b65      	ldr	r3, [pc, #404]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c6:	4b63      	ldr	r3, [pc, #396]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0b8      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d020      	beq.n	8007726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076f0:	4b59      	ldr	r3, [pc, #356]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a58      	ldr	r2, [pc, #352]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007708:	4b53      	ldr	r3, [pc, #332]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a52      	ldr	r2, [pc, #328]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007714:	4b50      	ldr	r3, [pc, #320]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	494d      	ldr	r1, [pc, #308]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d044      	beq.n	80077bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d107      	bne.n	800774a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773a:	4b47      	ldr	r3, [pc, #284]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d119      	bne.n	800777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e07f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d003      	beq.n	800775a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007756:	2b03      	cmp	r3, #3
 8007758:	d107      	bne.n	800776a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800775a:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e06f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800776a:	4b3b      	ldr	r3, [pc, #236]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e067      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800777a:	4b37      	ldr	r3, [pc, #220]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f023 0203 	bic.w	r2, r3, #3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	4934      	ldr	r1, [pc, #208]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007788:	4313      	orrs	r3, r2
 800778a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800778c:	f7fd fd40 	bl	8005210 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007792:	e00a      	b.n	80077aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007794:	f7fd fd3c 	bl	8005210 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e04f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077aa:	4b2b      	ldr	r3, [pc, #172]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 020c 	and.w	r2, r3, #12
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d1eb      	bne.n	8007794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077bc:	4b25      	ldr	r3, [pc, #148]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d20c      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b22      	ldr	r3, [pc, #136]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d2:	4b20      	ldr	r3, [pc, #128]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d001      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e032      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	4916      	ldr	r1, [pc, #88]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	490e      	ldr	r1, [pc, #56]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007822:	f000 f821 	bl	8007868 <HAL_RCC_GetSysClockFreq>
 8007826:	4602      	mov	r2, r0
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	490a      	ldr	r1, [pc, #40]	; (800785c <HAL_RCC_ClockConfig+0x1c0>)
 8007834:	5ccb      	ldrb	r3, [r1, r3]
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <HAL_RCC_ClockConfig+0x1c4>)
 800783c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <HAL_RCC_ClockConfig+0x1c8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd fca0 	bl	8005188 <HAL_InitTick>

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40023c00 	.word	0x40023c00
 8007858:	40023800 	.word	0x40023800
 800785c:	080153a8 	.word	0x080153a8
 8007860:	200000e8 	.word	0x200000e8
 8007864:	200000ec 	.word	0x200000ec

08007868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800786c:	b090      	sub	sp, #64	; 0x40
 800786e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007878:	2300      	movs	r3, #0
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007880:	4b59      	ldr	r3, [pc, #356]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 030c 	and.w	r3, r3, #12
 8007888:	2b08      	cmp	r3, #8
 800788a:	d00d      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x40>
 800788c:	2b08      	cmp	r3, #8
 800788e:	f200 80a1 	bhi.w	80079d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_RCC_GetSysClockFreq+0x34>
 8007896:	2b04      	cmp	r3, #4
 8007898:	d003      	beq.n	80078a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800789a:	e09b      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800789c:	4b53      	ldr	r3, [pc, #332]	; (80079ec <HAL_RCC_GetSysClockFreq+0x184>)
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80078a0:	e09b      	b.n	80079da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078a2:	4b53      	ldr	r3, [pc, #332]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80078a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80078a6:	e098      	b.n	80079da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078a8:	4b4f      	ldr	r3, [pc, #316]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078b2:	4b4d      	ldr	r3, [pc, #308]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d028      	beq.n	8007910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078be:	4b4a      	ldr	r3, [pc, #296]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	2200      	movs	r2, #0
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	627a      	str	r2, [r7, #36]	; 0x24
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80078d0:	2100      	movs	r1, #0
 80078d2:	4b47      	ldr	r3, [pc, #284]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80078d4:	fb03 f201 	mul.w	r2, r3, r1
 80078d8:	2300      	movs	r3, #0
 80078da:	fb00 f303 	mul.w	r3, r0, r3
 80078de:	4413      	add	r3, r2
 80078e0:	4a43      	ldr	r2, [pc, #268]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80078e2:	fba0 1202 	umull	r1, r2, r0, r2
 80078e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078e8:	460a      	mov	r2, r1
 80078ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80078ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ee:	4413      	add	r3, r2
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2200      	movs	r2, #0
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	61fa      	str	r2, [r7, #28]
 80078fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007902:	f7f9 f9a9 	bl	8000c58 <__aeabi_uldivmod>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4613      	mov	r3, r2
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790e:	e053      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007910:	4b35      	ldr	r3, [pc, #212]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	099b      	lsrs	r3, r3, #6
 8007916:	2200      	movs	r2, #0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	617a      	str	r2, [r7, #20]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007922:	f04f 0b00 	mov.w	fp, #0
 8007926:	4652      	mov	r2, sl
 8007928:	465b      	mov	r3, fp
 800792a:	f04f 0000 	mov.w	r0, #0
 800792e:	f04f 0100 	mov.w	r1, #0
 8007932:	0159      	lsls	r1, r3, #5
 8007934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007938:	0150      	lsls	r0, r2, #5
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	ebb2 080a 	subs.w	r8, r2, sl
 8007942:	eb63 090b 	sbc.w	r9, r3, fp
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800795a:	ebb2 0408 	subs.w	r4, r2, r8
 800795e:	eb63 0509 	sbc.w	r5, r3, r9
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	00eb      	lsls	r3, r5, #3
 800796c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007970:	00e2      	lsls	r2, r4, #3
 8007972:	4614      	mov	r4, r2
 8007974:	461d      	mov	r5, r3
 8007976:	eb14 030a 	adds.w	r3, r4, sl
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	eb45 030b 	adc.w	r3, r5, fp
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800798e:	4629      	mov	r1, r5
 8007990:	028b      	lsls	r3, r1, #10
 8007992:	4621      	mov	r1, r4
 8007994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007998:	4621      	mov	r1, r4
 800799a:	028a      	lsls	r2, r1, #10
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a2:	2200      	movs	r2, #0
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	60fa      	str	r2, [r7, #12]
 80079a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079ac:	f7f9 f954 	bl	8000c58 <__aeabi_uldivmod>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4613      	mov	r3, r2
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079b8:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	0c1b      	lsrs	r3, r3, #16
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	3301      	adds	r3, #1
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80079c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079d2:	e002      	b.n	80079da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <HAL_RCC_GetSysClockFreq+0x184>)
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3740      	adds	r7, #64	; 0x40
 80079e0:	46bd      	mov	sp, r7
 80079e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079e6:	bf00      	nop
 80079e8:	40023800 	.word	0x40023800
 80079ec:	00f42400 	.word	0x00f42400
 80079f0:	00b71b00 	.word	0x00b71b00

080079f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80079fa:	681b      	ldr	r3, [r3, #0]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	200000e8 	.word	0x200000e8

08007a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e07b      	b.n	8007b16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d108      	bne.n	8007a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2e:	d009      	beq.n	8007a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	61da      	str	r2, [r3, #28]
 8007a36:	e005      	b.n	8007a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fd f91a 	bl	8004c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac8:	ea42 0103 	orr.w	r1, r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	f003 0104 	and.w	r1, r3, #4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	f003 0210 	and.w	r2, r3, #16
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b088      	sub	sp, #32
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_SPI_Transmit+0x22>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e126      	b.n	8007d8e <HAL_SPI_Transmit+0x270>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b48:	f7fd fb62 	bl	8005210 <HAL_GetTick>
 8007b4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d002      	beq.n	8007b64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b62:	e10b      	b.n	8007d7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_SPI_Transmit+0x52>
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b74:	e102      	b.n	8007d7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2203      	movs	r2, #3
 8007b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bbc:	d10f      	bne.n	8007bde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d007      	beq.n	8007bfc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c04:	d14b      	bne.n	8007c9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <HAL_SPI_Transmit+0xf6>
 8007c0e:	8afb      	ldrh	r3, [r7, #22]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d13e      	bne.n	8007c92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	881a      	ldrh	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	1c9a      	adds	r2, r3, #2
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c38:	e02b      	b.n	8007c92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d112      	bne.n	8007c6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	881a      	ldrh	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	1c9a      	adds	r2, r3, #2
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c6c:	e011      	b.n	8007c92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c6e:	f7fd facf 	bl	8005210 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d803      	bhi.n	8007c86 <HAL_SPI_Transmit+0x168>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d102      	bne.n	8007c8c <HAL_SPI_Transmit+0x16e>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d102      	bne.n	8007c92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c90:	e074      	b.n	8007d7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ce      	bne.n	8007c3a <HAL_SPI_Transmit+0x11c>
 8007c9c:	e04c      	b.n	8007d38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <HAL_SPI_Transmit+0x18e>
 8007ca6:	8afb      	ldrh	r3, [r7, #22]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d140      	bne.n	8007d2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	7812      	ldrb	r2, [r2, #0]
 8007cb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007cd2:	e02c      	b.n	8007d2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d113      	bne.n	8007d0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330c      	adds	r3, #12
 8007cec:	7812      	ldrb	r2, [r2, #0]
 8007cee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d08:	e011      	b.n	8007d2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d0a:	f7fd fa81 	bl	8005210 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d803      	bhi.n	8007d22 <HAL_SPI_Transmit+0x204>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d20:	d102      	bne.n	8007d28 <HAL_SPI_Transmit+0x20a>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d2c:	e026      	b.n	8007d7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1cd      	bne.n	8007cd4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fbd9 	bl	80084f4 <SPI_EndRxTxTransaction>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d56:	2300      	movs	r3, #0
 8007d58:	613b      	str	r3, [r7, #16]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e000      	b.n	8007d7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8007d7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b088      	sub	sp, #32
 8007d9a:	af02      	add	r7, sp, #8
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	603b      	str	r3, [r7, #0]
 8007da2:	4613      	mov	r3, r2
 8007da4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db2:	d112      	bne.n	8007dda <HAL_SPI_Receive+0x44>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10e      	bne.n	8007dda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007dc4:	88fa      	ldrh	r2, [r7, #6]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f8f1 	bl	8007fb8 <HAL_SPI_TransmitReceive>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	e0ea      	b.n	8007fb0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_SPI_Receive+0x52>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e0e3      	b.n	8007fb0 <HAL_SPI_Receive+0x21a>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df0:	f7fd fa0e 	bl	8005210 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d002      	beq.n	8007e08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
 8007e04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e06:	e0ca      	b.n	8007f9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_SPI_Receive+0x7e>
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e18:	e0c1      	b.n	8007f9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2204      	movs	r2, #4
 8007e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e60:	d10f      	bne.n	8007e82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d007      	beq.n	8007ea0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d162      	bne.n	8007f6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ea8:	e02e      	b.n	8007f08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d115      	bne.n	8007ee4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f103 020c 	add.w	r2, r3, #12
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	7812      	ldrb	r2, [r2, #0]
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ee2:	e011      	b.n	8007f08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee4:	f7fd f994 	bl	8005210 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d803      	bhi.n	8007efc <HAL_SPI_Receive+0x166>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d102      	bne.n	8007f02 <HAL_SPI_Receive+0x16c>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007f06:	e04a      	b.n	8007f9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1cb      	bne.n	8007eaa <HAL_SPI_Receive+0x114>
 8007f12:	e031      	b.n	8007f78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d113      	bne.n	8007f4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	b292      	uxth	r2, r2
 8007f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	1c9a      	adds	r2, r3, #2
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f48:	e011      	b.n	8007f6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f4a:	f7fd f961 	bl	8005210 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d803      	bhi.n	8007f62 <HAL_SPI_Receive+0x1cc>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f60:	d102      	bne.n	8007f68 <HAL_SPI_Receive+0x1d2>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d102      	bne.n	8007f6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007f6c:	e017      	b.n	8007f9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1cd      	bne.n	8007f14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fa53 	bl	8008428 <SPI_EndRxTransaction>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	75fb      	strb	r3, [r7, #23]
 8007f9a:	e000      	b.n	8007f9e <HAL_SPI_Receive+0x208>
  }

error :
 8007f9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08c      	sub	sp, #48	; 0x30
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_SPI_TransmitReceive+0x26>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e18a      	b.n	80082f4 <HAL_SPI_TransmitReceive+0x33c>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fe6:	f7fd f913 	bl	8005210 <HAL_GetTick>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008004:	2b01      	cmp	r3, #1
 8008006:	d00f      	beq.n	8008028 <HAL_SPI_TransmitReceive+0x70>
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800e:	d107      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d103      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x68>
 8008018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800801c:	2b04      	cmp	r3, #4
 800801e:	d003      	beq.n	8008028 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008020:	2302      	movs	r3, #2
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008026:	e15b      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <HAL_SPI_TransmitReceive+0x82>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <HAL_SPI_TransmitReceive+0x82>
 8008034:	887b      	ldrh	r3, [r7, #2]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008040:	e14e      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b04      	cmp	r3, #4
 800804c:	d003      	beq.n	8008056 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2205      	movs	r2, #5
 8008052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	887a      	ldrh	r2, [r7, #2]
 8008066:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	887a      	ldrh	r2, [r7, #2]
 800806c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	887a      	ldrh	r2, [r7, #2]
 800807e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008096:	2b40      	cmp	r3, #64	; 0x40
 8008098:	d007      	beq.n	80080aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b2:	d178      	bne.n	80081a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <HAL_SPI_TransmitReceive+0x10a>
 80080bc:	8b7b      	ldrh	r3, [r7, #26]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d166      	bne.n	8008190 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	881a      	ldrh	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080e6:	e053      	b.n	8008190 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d11b      	bne.n	800812e <HAL_SPI_TransmitReceive+0x176>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d016      	beq.n	800812e <HAL_SPI_TransmitReceive+0x176>
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d113      	bne.n	800812e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	881a      	ldrh	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	1c9a      	adds	r2, r3, #2
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d119      	bne.n	8008170 <HAL_SPI_TransmitReceive+0x1b8>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d014      	beq.n	8008170 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	b292      	uxth	r2, r2
 8008152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	1c9a      	adds	r2, r3, #2
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800816c:	2301      	movs	r3, #1
 800816e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008170:	f7fd f84e 	bl	8005210 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800817c:	429a      	cmp	r2, r3
 800817e:	d807      	bhi.n	8008190 <HAL_SPI_TransmitReceive+0x1d8>
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d003      	beq.n	8008190 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800818e:	e0a7      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008194:	b29b      	uxth	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1a6      	bne.n	80080e8 <HAL_SPI_TransmitReceive+0x130>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800819e:	b29b      	uxth	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1a1      	bne.n	80080e8 <HAL_SPI_TransmitReceive+0x130>
 80081a4:	e07c      	b.n	80082a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_SPI_TransmitReceive+0x1fc>
 80081ae:	8b7b      	ldrh	r3, [r7, #26]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d16b      	bne.n	800828c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	7812      	ldrb	r2, [r2, #0]
 80081c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081da:	e057      	b.n	800828c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d11c      	bne.n	8008224 <HAL_SPI_TransmitReceive+0x26c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d017      	beq.n	8008224 <HAL_SPI_TransmitReceive+0x26c>
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d114      	bne.n	8008224 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d119      	bne.n	8008266 <HAL_SPI_TransmitReceive+0x2ae>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d014      	beq.n	8008266 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008262:	2301      	movs	r3, #1
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008266:	f7fc ffd3 	bl	8005210 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008272:	429a      	cmp	r2, r3
 8008274:	d803      	bhi.n	800827e <HAL_SPI_TransmitReceive+0x2c6>
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d102      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x2cc>
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d103      	bne.n	800828c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800828a:	e029      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1a2      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x224>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829a:	b29b      	uxth	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d19d      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 f925 	bl	80084f4 <SPI_EndRxTxTransaction>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80082bc:	e010      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	e000      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80082de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3730      	adds	r7, #48	; 0x30
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800830a:	b2db      	uxtb	r3, r3
}
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	4613      	mov	r3, r2
 8008326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008328:	f7fc ff72 	bl	8005210 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4413      	add	r3, r2
 8008336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008338:	f7fc ff6a 	bl	8005210 <HAL_GetTick>
 800833c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800833e:	4b39      	ldr	r3, [pc, #228]	; (8008424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	015b      	lsls	r3, r3, #5
 8008344:	0d1b      	lsrs	r3, r3, #20
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800834e:	e054      	b.n	80083fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d050      	beq.n	80083fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008358:	f7fc ff5a 	bl	8005210 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	429a      	cmp	r2, r3
 8008366:	d902      	bls.n	800836e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d13d      	bne.n	80083ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800837c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008386:	d111      	bne.n	80083ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008390:	d004      	beq.n	800839c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839a:	d107      	bne.n	80083ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b4:	d10f      	bne.n	80083d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e017      	b.n	800841a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4013      	ands	r3, r2
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	429a      	cmp	r2, r3
 8008408:	bf0c      	ite	eq
 800840a:	2301      	moveq	r3, #1
 800840c:	2300      	movne	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	429a      	cmp	r2, r3
 8008416:	d19b      	bne.n	8008350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200000e8 	.word	0x200000e8

08008428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af02      	add	r7, sp, #8
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843c:	d111      	bne.n	8008462 <SPI_EndRxTransaction+0x3a>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008446:	d004      	beq.n	8008452 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008450:	d107      	bne.n	8008462 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008460:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846a:	d12a      	bne.n	80084c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008474:	d012      	beq.n	800849c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2200      	movs	r2, #0
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff ff49 	bl	8008318 <SPI_WaitFlagStateUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d02d      	beq.n	80084e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008490:	f043 0220 	orr.w	r2, r3, #32
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e026      	b.n	80084ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2200      	movs	r2, #0
 80084a4:	2101      	movs	r1, #1
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff ff36 	bl	8008318 <SPI_WaitFlagStateUntilTimeout>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01a      	beq.n	80084e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e013      	b.n	80084ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2200      	movs	r2, #0
 80084ca:	2101      	movs	r1, #1
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff ff23 	bl	8008318 <SPI_WaitFlagStateUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084dc:	f043 0220 	orr.w	r2, r3, #32
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e000      	b.n	80084ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008500:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <SPI_EndRxTxTransaction+0x7c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <SPI_EndRxTxTransaction+0x80>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	0d5b      	lsrs	r3, r3, #21
 800850c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008510:	fb02 f303 	mul.w	r3, r2, r3
 8008514:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800851e:	d112      	bne.n	8008546 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fef4 	bl	8008318 <SPI_WaitFlagStateUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d016      	beq.n	8008564 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	f043 0220 	orr.w	r2, r3, #32
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e00f      	b.n	8008566 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	3b01      	subs	r3, #1
 8008550:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d0f2      	beq.n	8008546 <SPI_EndRxTxTransaction+0x52>
 8008560:	e000      	b.n	8008564 <SPI_EndRxTxTransaction+0x70>
        break;
 8008562:	bf00      	nop
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200000e8 	.word	0x200000e8
 8008574:	165e9f81 	.word	0x165e9f81

08008578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e041      	b.n	800860e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fc fc30 	bl	8004e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f000 fac0 	bl	8008b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e041      	b.n	80086ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f839 	bl	80086b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f000 fa71 	bl	8008b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d109      	bne.n	80086ec <HAL_TIM_PWM_Start+0x24>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	bf14      	ite	ne
 80086e4:	2301      	movne	r3, #1
 80086e6:	2300      	moveq	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	e022      	b.n	8008732 <HAL_TIM_PWM_Start+0x6a>
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d109      	bne.n	8008706 <HAL_TIM_PWM_Start+0x3e>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	bf14      	ite	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	2300      	moveq	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	e015      	b.n	8008732 <HAL_TIM_PWM_Start+0x6a>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b08      	cmp	r3, #8
 800870a:	d109      	bne.n	8008720 <HAL_TIM_PWM_Start+0x58>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b01      	cmp	r3, #1
 8008716:	bf14      	ite	ne
 8008718:	2301      	movne	r3, #1
 800871a:	2300      	moveq	r3, #0
 800871c:	b2db      	uxtb	r3, r3
 800871e:	e008      	b.n	8008732 <HAL_TIM_PWM_Start+0x6a>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b01      	cmp	r3, #1
 800872a:	bf14      	ite	ne
 800872c:	2301      	movne	r3, #1
 800872e:	2300      	moveq	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e068      	b.n	800880c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d104      	bne.n	800874a <HAL_TIM_PWM_Start+0x82>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008748:	e013      	b.n	8008772 <HAL_TIM_PWM_Start+0xaa>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b04      	cmp	r3, #4
 800874e:	d104      	bne.n	800875a <HAL_TIM_PWM_Start+0x92>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008758:	e00b      	b.n	8008772 <HAL_TIM_PWM_Start+0xaa>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b08      	cmp	r3, #8
 800875e:	d104      	bne.n	800876a <HAL_TIM_PWM_Start+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008768:	e003      	b.n	8008772 <HAL_TIM_PWM_Start+0xaa>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2201      	movs	r2, #1
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fc84 	bl	8009088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a23      	ldr	r2, [pc, #140]	; (8008814 <HAL_TIM_PWM_Start+0x14c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d107      	bne.n	800879a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <HAL_TIM_PWM_Start+0x14c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <HAL_TIM_PWM_Start+0x10e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d013      	beq.n	80087d6 <HAL_TIM_PWM_Start+0x10e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a19      	ldr	r2, [pc, #100]	; (8008818 <HAL_TIM_PWM_Start+0x150>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <HAL_TIM_PWM_Start+0x10e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a17      	ldr	r2, [pc, #92]	; (800881c <HAL_TIM_PWM_Start+0x154>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_TIM_PWM_Start+0x10e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a16      	ldr	r2, [pc, #88]	; (8008820 <HAL_TIM_PWM_Start+0x158>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_TIM_PWM_Start+0x10e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a14      	ldr	r2, [pc, #80]	; (8008824 <HAL_TIM_PWM_Start+0x15c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d111      	bne.n	80087fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b06      	cmp	r3, #6
 80087e6:	d010      	beq.n	800880a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0201 	orr.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f8:	e007      	b.n	800880a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f042 0201 	orr.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	40010000 	.word	0x40010000
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40000c00 	.word	0x40000c00
 8008824:	40014000 	.word	0x40014000

08008828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008842:	2302      	movs	r3, #2
 8008844:	e0ae      	b.n	80089a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	f200 809f 	bhi.w	8008994 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008891 	.word	0x08008891
 8008860:	08008995 	.word	0x08008995
 8008864:	08008995 	.word	0x08008995
 8008868:	08008995 	.word	0x08008995
 800886c:	080088d1 	.word	0x080088d1
 8008870:	08008995 	.word	0x08008995
 8008874:	08008995 	.word	0x08008995
 8008878:	08008995 	.word	0x08008995
 800887c:	08008913 	.word	0x08008913
 8008880:	08008995 	.word	0x08008995
 8008884:	08008995 	.word	0x08008995
 8008888:	08008995 	.word	0x08008995
 800888c:	08008953 	.word	0x08008953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 f9d0 	bl	8008c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0204 	bic.w	r2, r2, #4
 80088ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6999      	ldr	r1, [r3, #24]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	619a      	str	r2, [r3, #24]
      break;
 80088ce:	e064      	b.n	800899a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa16 	bl	8008d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6999      	ldr	r1, [r3, #24]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	619a      	str	r2, [r3, #24]
      break;
 8008910:	e043      	b.n	800899a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fa61 	bl	8008de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0208 	orr.w	r2, r2, #8
 800892c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0204 	bic.w	r2, r2, #4
 800893c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69d9      	ldr	r1, [r3, #28]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	61da      	str	r2, [r3, #28]
      break;
 8008950:	e023      	b.n	800899a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 faab 	bl	8008eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800896c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69da      	ldr	r2, [r3, #28]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69d9      	ldr	r1, [r3, #28]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	021a      	lsls	r2, r3, #8
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	61da      	str	r2, [r3, #28]
      break;
 8008992:	e002      	b.n	800899a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	75fb      	strb	r3, [r7, #23]
      break;
 8008998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_TIM_ConfigClockSource+0x1c>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e0b4      	b.n	8008b32 <HAL_TIM_ConfigClockSource+0x186>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a00:	d03e      	beq.n	8008a80 <HAL_TIM_ConfigClockSource+0xd4>
 8008a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a06:	f200 8087 	bhi.w	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	f000 8086 	beq.w	8008b1e <HAL_TIM_ConfigClockSource+0x172>
 8008a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a16:	d87f      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a18:	2b70      	cmp	r3, #112	; 0x70
 8008a1a:	d01a      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0xa6>
 8008a1c:	2b70      	cmp	r3, #112	; 0x70
 8008a1e:	d87b      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a20:	2b60      	cmp	r3, #96	; 0x60
 8008a22:	d050      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x11a>
 8008a24:	2b60      	cmp	r3, #96	; 0x60
 8008a26:	d877      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a28:	2b50      	cmp	r3, #80	; 0x50
 8008a2a:	d03c      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0xfa>
 8008a2c:	2b50      	cmp	r3, #80	; 0x50
 8008a2e:	d873      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d058      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0x13a>
 8008a34:	2b40      	cmp	r3, #64	; 0x40
 8008a36:	d86f      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a38:	2b30      	cmp	r3, #48	; 0x30
 8008a3a:	d064      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x15a>
 8008a3c:	2b30      	cmp	r3, #48	; 0x30
 8008a3e:	d86b      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a40:	2b20      	cmp	r3, #32
 8008a42:	d060      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x15a>
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d867      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d05c      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x15a>
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d05a      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x15a>
 8008a50:	e062      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6899      	ldr	r1, [r3, #8]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f000 faf1 	bl	8009048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	609a      	str	r2, [r3, #8]
      break;
 8008a7e:	e04f      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	6899      	ldr	r1, [r3, #8]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f000 fada 	bl	8009048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aa2:	609a      	str	r2, [r3, #8]
      break;
 8008aa4:	e03c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	6859      	ldr	r1, [r3, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f000 fa4e 	bl	8008f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2150      	movs	r1, #80	; 0x50
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 faa7 	bl	8009012 <TIM_ITRx_SetConfig>
      break;
 8008ac4:	e02c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	6859      	ldr	r1, [r3, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f000 fa6d 	bl	8008fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2160      	movs	r1, #96	; 0x60
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fa97 	bl	8009012 <TIM_ITRx_SetConfig>
      break;
 8008ae4:	e01c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	6859      	ldr	r1, [r3, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f000 fa2e 	bl	8008f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2140      	movs	r1, #64	; 0x40
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fa87 	bl	8009012 <TIM_ITRx_SetConfig>
      break;
 8008b04:	e00c      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f000 fa7e 	bl	8009012 <TIM_ITRx_SetConfig>
      break;
 8008b16:	e003      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1c:	e000      	b.n	8008b20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a34      	ldr	r2, [pc, #208]	; (8008c20 <TIM_Base_SetConfig+0xe4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00f      	beq.n	8008b74 <TIM_Base_SetConfig+0x38>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5a:	d00b      	beq.n	8008b74 <TIM_Base_SetConfig+0x38>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a31      	ldr	r2, [pc, #196]	; (8008c24 <TIM_Base_SetConfig+0xe8>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d007      	beq.n	8008b74 <TIM_Base_SetConfig+0x38>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a30      	ldr	r2, [pc, #192]	; (8008c28 <TIM_Base_SetConfig+0xec>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d003      	beq.n	8008b74 <TIM_Base_SetConfig+0x38>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a2f      	ldr	r2, [pc, #188]	; (8008c2c <TIM_Base_SetConfig+0xf0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d108      	bne.n	8008b86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a25      	ldr	r2, [pc, #148]	; (8008c20 <TIM_Base_SetConfig+0xe4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d01b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b94:	d017      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a22      	ldr	r2, [pc, #136]	; (8008c24 <TIM_Base_SetConfig+0xe8>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <TIM_Base_SetConfig+0xec>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <TIM_Base_SetConfig+0xf0>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a1f      	ldr	r2, [pc, #124]	; (8008c30 <TIM_Base_SetConfig+0xf4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a1e      	ldr	r2, [pc, #120]	; (8008c34 <TIM_Base_SetConfig+0xf8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_Base_SetConfig+0x8a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a1d      	ldr	r2, [pc, #116]	; (8008c38 <TIM_Base_SetConfig+0xfc>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d108      	bne.n	8008bd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <TIM_Base_SetConfig+0xe4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d103      	bne.n	8008c0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	691a      	ldr	r2, [r3, #16]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	615a      	str	r2, [r3, #20]
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40014000 	.word	0x40014000
 8008c34:	40014400 	.word	0x40014400
 8008c38:	40014800 	.word	0x40014800

08008c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f023 0201 	bic.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 0302 	bic.w	r3, r3, #2
 8008c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <TIM_OC1_SetConfig+0xc8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d10c      	bne.n	8008cb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0308 	bic.w	r3, r3, #8
 8008c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f023 0304 	bic.w	r3, r3, #4
 8008cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a13      	ldr	r2, [pc, #76]	; (8008d04 <TIM_OC1_SetConfig+0xc8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d111      	bne.n	8008cde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	621a      	str	r2, [r3, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	40010000 	.word	0x40010000

08008d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0210 	bic.w	r2, r3, #16
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f023 0320 	bic.w	r3, r3, #32
 8008d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a1e      	ldr	r2, [pc, #120]	; (8008ddc <TIM_OC2_SetConfig+0xd4>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d10d      	bne.n	8008d84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a15      	ldr	r2, [pc, #84]	; (8008ddc <TIM_OC2_SetConfig+0xd4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d113      	bne.n	8008db4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40010000 	.word	0x40010000

08008de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a1d      	ldr	r2, [pc, #116]	; (8008eb0 <TIM_OC3_SetConfig+0xd0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d10d      	bne.n	8008e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a14      	ldr	r2, [pc, #80]	; (8008eb0 <TIM_OC3_SetConfig+0xd0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d113      	bne.n	8008e8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	621a      	str	r2, [r3, #32]
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	40010000 	.word	0x40010000

08008eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	031b      	lsls	r3, r3, #12
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a10      	ldr	r2, [pc, #64]	; (8008f50 <TIM_OC4_SetConfig+0x9c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d109      	bne.n	8008f28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	019b      	lsls	r3, r3, #6
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	621a      	str	r2, [r3, #32]
}
 8008f42:	bf00      	nop
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	40010000 	.word	0x40010000

08008f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f023 0201 	bic.w	r2, r3, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f023 030a 	bic.w	r3, r3, #10
 8008f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b087      	sub	sp, #28
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	f023 0210 	bic.w	r2, r3, #16
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	031b      	lsls	r3, r3, #12
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	621a      	str	r2, [r3, #32]
}
 8009006:	bf00      	nop
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	f043 0307 	orr.w	r3, r3, #7
 8009034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	609a      	str	r2, [r3, #8]
}
 800903c:	bf00      	nop
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	021a      	lsls	r2, r3, #8
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	431a      	orrs	r2, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4313      	orrs	r3, r2
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	4313      	orrs	r3, r2
 8009074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	609a      	str	r2, [r3, #8]
}
 800907c:	bf00      	nop
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	2201      	movs	r2, #1
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	43db      	mvns	r3, r3
 80090aa:	401a      	ands	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1a      	ldr	r2, [r3, #32]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 031f 	and.w	r3, r3, #31
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	431a      	orrs	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
	...

080090d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e050      	b.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a1c      	ldr	r2, [pc, #112]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d018      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009138:	d013      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a18      	ldr	r2, [pc, #96]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00e      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a16      	ldr	r2, [pc, #88]	; (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d009      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a15      	ldr	r2, [pc, #84]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d004      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a13      	ldr	r2, [pc, #76]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d10c      	bne.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4313      	orrs	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	40010000 	.word	0x40010000
 80091a0:	40000400 	.word	0x40000400
 80091a4:	40000800 	.word	0x40000800
 80091a8:	40000c00 	.word	0x40000c00
 80091ac:	40014000 	.word	0x40014000

080091b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091b0:	b084      	sub	sp, #16
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	f107 001c 	add.w	r0, r7, #28
 80091be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d122      	bne.n	800920e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80091dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d105      	bne.n	8009202 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fbee 	bl	800a9e4 <USB_CoreReset>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
 800920c:	e01a      	b.n	8009244 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fbe2 	bl	800a9e4 <USB_CoreReset>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d106      	bne.n	8009238 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	639a      	str	r2, [r3, #56]	; 0x38
 8009236:	e005      	b.n	8009244 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	2b01      	cmp	r3, #1
 8009248:	d10b      	bne.n	8009262 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f043 0206 	orr.w	r2, r3, #6
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f043 0220 	orr.w	r2, r3, #32
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009262:	7bfb      	ldrb	r3, [r7, #15]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800926e:	b004      	add	sp, #16
 8009270:	4770      	bx	lr
	...

08009274 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d165      	bne.n	8009354 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4a41      	ldr	r2, [pc, #260]	; (8009390 <USB_SetTurnaroundTime+0x11c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d906      	bls.n	800929e <USB_SetTurnaroundTime+0x2a>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4a40      	ldr	r2, [pc, #256]	; (8009394 <USB_SetTurnaroundTime+0x120>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d202      	bcs.n	800929e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009298:	230f      	movs	r3, #15
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e062      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4a3c      	ldr	r2, [pc, #240]	; (8009394 <USB_SetTurnaroundTime+0x120>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d306      	bcc.n	80092b4 <USB_SetTurnaroundTime+0x40>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4a3b      	ldr	r2, [pc, #236]	; (8009398 <USB_SetTurnaroundTime+0x124>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d202      	bcs.n	80092b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80092ae:	230e      	movs	r3, #14
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	e057      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4a38      	ldr	r2, [pc, #224]	; (8009398 <USB_SetTurnaroundTime+0x124>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d306      	bcc.n	80092ca <USB_SetTurnaroundTime+0x56>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4a37      	ldr	r2, [pc, #220]	; (800939c <USB_SetTurnaroundTime+0x128>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d202      	bcs.n	80092ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80092c4:	230d      	movs	r3, #13
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e04c      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4a33      	ldr	r2, [pc, #204]	; (800939c <USB_SetTurnaroundTime+0x128>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d306      	bcc.n	80092e0 <USB_SetTurnaroundTime+0x6c>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	4a32      	ldr	r2, [pc, #200]	; (80093a0 <USB_SetTurnaroundTime+0x12c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d802      	bhi.n	80092e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80092da:	230c      	movs	r3, #12
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	e041      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4a2f      	ldr	r2, [pc, #188]	; (80093a0 <USB_SetTurnaroundTime+0x12c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d906      	bls.n	80092f6 <USB_SetTurnaroundTime+0x82>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4a2e      	ldr	r2, [pc, #184]	; (80093a4 <USB_SetTurnaroundTime+0x130>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d802      	bhi.n	80092f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80092f0:	230b      	movs	r3, #11
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	e036      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	4a2a      	ldr	r2, [pc, #168]	; (80093a4 <USB_SetTurnaroundTime+0x130>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d906      	bls.n	800930c <USB_SetTurnaroundTime+0x98>
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	4a29      	ldr	r2, [pc, #164]	; (80093a8 <USB_SetTurnaroundTime+0x134>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d802      	bhi.n	800930c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009306:	230a      	movs	r3, #10
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e02b      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4a26      	ldr	r2, [pc, #152]	; (80093a8 <USB_SetTurnaroundTime+0x134>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d906      	bls.n	8009322 <USB_SetTurnaroundTime+0xae>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4a25      	ldr	r2, [pc, #148]	; (80093ac <USB_SetTurnaroundTime+0x138>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d202      	bcs.n	8009322 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800931c:	2309      	movs	r3, #9
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	e020      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4a21      	ldr	r2, [pc, #132]	; (80093ac <USB_SetTurnaroundTime+0x138>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d306      	bcc.n	8009338 <USB_SetTurnaroundTime+0xc4>
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <USB_SetTurnaroundTime+0x13c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d802      	bhi.n	8009338 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009332:	2308      	movs	r3, #8
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e015      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4a1d      	ldr	r2, [pc, #116]	; (80093b0 <USB_SetTurnaroundTime+0x13c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d906      	bls.n	800934e <USB_SetTurnaroundTime+0xda>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4a1c      	ldr	r2, [pc, #112]	; (80093b4 <USB_SetTurnaroundTime+0x140>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d202      	bcs.n	800934e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009348:	2307      	movs	r3, #7
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e00a      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800934e:	2306      	movs	r3, #6
 8009350:	617b      	str	r3, [r7, #20]
 8009352:	e007      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800935a:	2309      	movs	r3, #9
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	e001      	b.n	8009364 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009360:	2309      	movs	r3, #9
 8009362:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	029b      	lsls	r3, r3, #10
 8009378:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800937c:	431a      	orrs	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	00d8acbf 	.word	0x00d8acbf
 8009394:	00e4e1c0 	.word	0x00e4e1c0
 8009398:	00f42400 	.word	0x00f42400
 800939c:	01067380 	.word	0x01067380
 80093a0:	011a499f 	.word	0x011a499f
 80093a4:	01312cff 	.word	0x01312cff
 80093a8:	014ca43f 	.word	0x014ca43f
 80093ac:	016e3600 	.word	0x016e3600
 80093b0:	01a6ab1f 	.word	0x01a6ab1f
 80093b4:	01e84800 	.word	0x01e84800

080093b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f043 0201 	orr.w	r2, r3, #1
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f023 0201 	bic.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d115      	bne.n	800944a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800942a:	2001      	movs	r0, #1
 800942c:	f7fb fefc 	bl	8005228 <HAL_Delay>
      ms++;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 fa45 	bl	800a8c6 <USB_GetMode>
 800943c:	4603      	mov	r3, r0
 800943e:	2b01      	cmp	r3, #1
 8009440:	d01e      	beq.n	8009480 <USB_SetCurrentMode+0x84>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b31      	cmp	r3, #49	; 0x31
 8009446:	d9f0      	bls.n	800942a <USB_SetCurrentMode+0x2e>
 8009448:	e01a      	b.n	8009480 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d115      	bne.n	800947c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800945c:	2001      	movs	r0, #1
 800945e:	f7fb fee3 	bl	8005228 <HAL_Delay>
      ms++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fa2c 	bl	800a8c6 <USB_GetMode>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <USB_SetCurrentMode+0x84>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b31      	cmp	r3, #49	; 0x31
 8009478:	d9f0      	bls.n	800945c <USB_SetCurrentMode+0x60>
 800947a:	e001      	b.n	8009480 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e005      	b.n	800948c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b32      	cmp	r3, #50	; 0x32
 8009484:	d101      	bne.n	800948a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009494:	b084      	sub	sp, #16
 8009496:	b580      	push	{r7, lr}
 8009498:	b086      	sub	sp, #24
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	e009      	b.n	80094c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	3340      	adds	r3, #64	; 0x40
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	2200      	movs	r2, #0
 80094c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	3301      	adds	r3, #1
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2b0e      	cmp	r3, #14
 80094cc:	d9f2      	bls.n	80094b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11c      	bne.n	800950e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094e2:	f043 0302 	orr.w	r3, r3, #2
 80094e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
 800950c:	e00b      	b.n	8009526 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800952c:	461a      	mov	r2, r3
 800952e:	2300      	movs	r3, #0
 8009530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009538:	4619      	mov	r1, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009540:	461a      	mov	r2, r3
 8009542:	680b      	ldr	r3, [r1, #0]
 8009544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	2b01      	cmp	r3, #1
 800954a:	d10c      	bne.n	8009566 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	2b00      	cmp	r3, #0
 8009550:	d104      	bne.n	800955c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009552:	2100      	movs	r1, #0
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f965 	bl	8009824 <USB_SetDevSpeed>
 800955a:	e008      	b.n	800956e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800955c:	2101      	movs	r1, #1
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f960 	bl	8009824 <USB_SetDevSpeed>
 8009564:	e003      	b.n	800956e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009566:	2103      	movs	r1, #3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f95b 	bl	8009824 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800956e:	2110      	movs	r1, #16
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f8f3 	bl	800975c <USB_FlushTxFifo>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f91f 	bl	80097c4 <USB_FlushRxFifo>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009596:	461a      	mov	r2, r3
 8009598:	2300      	movs	r3, #0
 800959a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a2:	461a      	mov	r2, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	461a      	mov	r2, r3
 80095b0:	2300      	movs	r3, #0
 80095b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095b4:	2300      	movs	r3, #0
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	e043      	b.n	8009642 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d0:	d118      	bne.n	8009604 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e4:	461a      	mov	r2, r3
 80095e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	e013      	b.n	8009616 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fa:	461a      	mov	r2, r3
 80095fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	e008      	b.n	8009616 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	461a      	mov	r2, r3
 8009612:	2300      	movs	r3, #0
 8009614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009622:	461a      	mov	r2, r3
 8009624:	2300      	movs	r3, #0
 8009626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	461a      	mov	r2, r3
 8009636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800963a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	3301      	adds	r3, #1
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	429a      	cmp	r2, r3
 8009648:	d3b7      	bcc.n	80095ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800964a:	2300      	movs	r3, #0
 800964c:	613b      	str	r3, [r7, #16]
 800964e:	e043      	b.n	80096d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009666:	d118      	bne.n	800969a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967a:	461a      	mov	r2, r3
 800967c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	e013      	b.n	80096ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009690:	461a      	mov	r2, r3
 8009692:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	e008      	b.n	80096ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a6:	461a      	mov	r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	461a      	mov	r2, r3
 80096ba:	2300      	movs	r3, #0
 80096bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	461a      	mov	r2, r3
 80096cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	3301      	adds	r3, #1
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d3b7      	bcc.n	8009650 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009700:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	2b00      	cmp	r3, #0
 8009706:	d105      	bne.n	8009714 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	f043 0210 	orr.w	r2, r3, #16
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699a      	ldr	r2, [r3, #24]
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <USB_DevInit+0x2c4>)
 800971a:	4313      	orrs	r3, r2
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d005      	beq.n	8009732 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f043 0208 	orr.w	r2, r3, #8
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d107      	bne.n	8009748 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009740:	f043 0304 	orr.w	r3, r3, #4
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3718      	adds	r7, #24
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009754:	b004      	add	sp, #16
 8009756:	4770      	bx	lr
 8009758:	803c3800 	.word	0x803c3800

0800975c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a13      	ldr	r2, [pc, #76]	; (80097c0 <USB_FlushTxFifo+0x64>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d901      	bls.n	800977c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e01b      	b.n	80097b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	daf2      	bge.n	800976a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	019b      	lsls	r3, r3, #6
 800978c:	f043 0220 	orr.w	r2, r3, #32
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <USB_FlushTxFifo+0x64>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d901      	bls.n	80097a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e006      	b.n	80097b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b20      	cmp	r3, #32
 80097b0:	d0f0      	beq.n	8009794 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	00030d40 	.word	0x00030d40

080097c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4a11      	ldr	r2, [pc, #68]	; (8009820 <USB_FlushRxFifo+0x5c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e018      	b.n	8009814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	daf2      	bge.n	80097d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2210      	movs	r2, #16
 80097f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3301      	adds	r3, #1
 80097f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4a08      	ldr	r2, [pc, #32]	; (8009820 <USB_FlushRxFifo+0x5c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d901      	bls.n	8009806 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e006      	b.n	8009814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b10      	cmp	r3, #16
 8009810:	d0f0      	beq.n	80097f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	00030d40 	.word	0x00030d40

08009824 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009844:	4313      	orrs	r3, r2
 8009846:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009856:	b480      	push	{r7}
 8009858:	b087      	sub	sp, #28
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 0306 	and.w	r3, r3, #6
 800986e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d102      	bne.n	800987c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]
 800987a:	e00a      	b.n	8009892 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d002      	beq.n	8009888 <USB_GetDevSpeed+0x32>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b06      	cmp	r3, #6
 8009886:	d102      	bne.n	800988e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009888:	2302      	movs	r3, #2
 800988a:	75fb      	strb	r3, [r7, #23]
 800988c:	e001      	b.n	8009892 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800988e:	230f      	movs	r3, #15
 8009890:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d13a      	bne.n	8009932 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	2101      	movs	r1, #1
 80098ce:	fa01 f303 	lsl.w	r3, r1, r3
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	68f9      	ldr	r1, [r7, #12]
 80098d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098da:	4313      	orrs	r3, r2
 80098dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d155      	bne.n	80099a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	791b      	ldrb	r3, [r3, #4]
 800990e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009910:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	059b      	lsls	r3, r3, #22
 8009916:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009918:	4313      	orrs	r3, r2
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e036      	b.n	80099a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009938:	69da      	ldr	r2, [r3, #28]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	f003 030f 	and.w	r3, r3, #15
 8009942:	2101      	movs	r1, #1
 8009944:	fa01 f303 	lsl.w	r3, r1, r3
 8009948:	041b      	lsls	r3, r3, #16
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009950:	4313      	orrs	r3, r2
 8009952:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d11a      	bne.n	80099a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	791b      	ldrb	r3, [r3, #4]
 8009984:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009986:	430b      	orrs	r3, r1
 8009988:	4313      	orrs	r3, r2
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	440a      	add	r2, r1
 8009992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800999a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
	...

080099b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d161      	bne.n	8009a90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099e2:	d11f      	bne.n	8009a24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	0151      	lsls	r1, r2, #5
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	440a      	add	r2, r1
 8009a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	f003 030f 	and.w	r3, r3, #15
 8009a34:	2101      	movs	r1, #1
 8009a36:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	43db      	mvns	r3, r3
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a44:	4013      	ands	r3, r2
 8009a46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a4e:	69da      	ldr	r2, [r3, #28]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	2101      	movs	r1, #1
 8009a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	43db      	mvns	r3, r3
 8009a62:	68f9      	ldr	r1, [r7, #12]
 8009a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a68:	4013      	ands	r3, r2
 8009a6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	0159      	lsls	r1, r3, #5
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	440b      	add	r3, r1
 8009a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a86:	4619      	mov	r1, r3
 8009a88:	4b35      	ldr	r3, [pc, #212]	; (8009b60 <USB_DeactivateEndpoint+0x1b0>)
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	600b      	str	r3, [r1, #0]
 8009a8e:	e060      	b.n	8009b52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aa6:	d11f      	bne.n	8009ae8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	0151      	lsls	r1, r2, #5
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	440a      	add	r2, r1
 8009abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ac6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	2101      	movs	r1, #1
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	041b      	lsls	r3, r3, #16
 8009b00:	43db      	mvns	r3, r3
 8009b02:	68f9      	ldr	r1, [r7, #12]
 8009b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b08:	4013      	ands	r3, r2
 8009b0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	f003 030f 	and.w	r3, r3, #15
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b22:	041b      	lsls	r3, r3, #16
 8009b24:	43db      	mvns	r3, r3
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	0159      	lsls	r1, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	440b      	add	r3, r1
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <USB_DeactivateEndpoint+0x1b4>)
 8009b4e:	4013      	ands	r3, r2
 8009b50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	ec337800 	.word	0xec337800
 8009b64:	eff37800 	.word	0xeff37800

08009b68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	785b      	ldrb	r3, [r3, #1]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	f040 815c 	bne.w	8009e42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d132      	bne.n	8009bf8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	0151      	lsls	r1, r2, #5
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	440a      	add	r2, r1
 8009ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	0151      	lsls	r1, r2, #5
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	440a      	add	r2, r1
 8009bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	69fa      	ldr	r2, [r7, #28]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf0:	0cdb      	lsrs	r3, r3, #19
 8009bf2:	04db      	lsls	r3, r3, #19
 8009bf4:	6113      	str	r3, [r2, #16]
 8009bf6:	e074      	b.n	8009ce2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	0151      	lsls	r1, r2, #5
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	440a      	add	r2, r1
 8009c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c12:	0cdb      	lsrs	r3, r3, #19
 8009c14:	04db      	lsls	r3, r3, #19
 8009c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	0151      	lsls	r1, r2, #5
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	440a      	add	r2, r1
 8009c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6999      	ldr	r1, [r3, #24]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	440b      	add	r3, r1
 8009c54:	1e59      	subs	r1, r3, #1
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c60:	4b9d      	ldr	r3, [pc, #628]	; (8009ed8 <USB_EPStartXfer+0x370>)
 8009c62:	400b      	ands	r3, r1
 8009c64:	69b9      	ldr	r1, [r7, #24]
 8009c66:	0148      	lsls	r0, r1, #5
 8009c68:	69f9      	ldr	r1, [r7, #28]
 8009c6a:	4401      	add	r1, r0
 8009c6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c70:	4313      	orrs	r3, r2
 8009c72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c8a:	69b9      	ldr	r1, [r7, #24]
 8009c8c:	0148      	lsls	r0, r1, #5
 8009c8e:	69f9      	ldr	r1, [r7, #28]
 8009c90:	4401      	add	r1, r0
 8009c92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c96:	4313      	orrs	r3, r2
 8009c98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	791b      	ldrb	r3, [r3, #4]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d11f      	bne.n	8009ce2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	0151      	lsls	r1, r2, #5
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009cc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ce0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d14b      	bne.n	8009d80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d009      	beq.n	8009d04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d128      	bne.n	8009d5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d110      	bne.n	8009d3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	0151      	lsls	r1, r2, #5
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	440a      	add	r2, r1
 8009d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	e00f      	b.n	8009d5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	0151      	lsls	r1, r2, #5
 8009d50:	69fa      	ldr	r2, [r7, #28]
 8009d52:	440a      	add	r2, r1
 8009d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	0151      	lsls	r1, r2, #5
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	440a      	add	r2, r1
 8009d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	e133      	b.n	8009fe8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	791b      	ldrb	r3, [r3, #4]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d015      	beq.n	8009dd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 811b 	beq.w	8009fe8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	f003 030f 	and.w	r3, r3, #15
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc8:	69f9      	ldr	r1, [r7, #28]
 8009dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	634b      	str	r3, [r1, #52]	; 0x34
 8009dd2:	e109      	b.n	8009fe8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d110      	bne.n	8009e06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	e00f      	b.n	8009e26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6919      	ldr	r1, [r3, #16]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	781a      	ldrb	r2, [r3, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	b298      	uxth	r0, r3
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4603      	mov	r3, r0
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fade 	bl	800a3fc <USB_WritePacket>
 8009e40:	e0d2      	b.n	8009fe8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	0151      	lsls	r1, r2, #5
 8009e54:	69fa      	ldr	r2, [r7, #28]
 8009e56:	440a      	add	r2, r1
 8009e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5c:	0cdb      	lsrs	r3, r3, #19
 8009e5e:	04db      	lsls	r3, r3, #19
 8009e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	015a      	lsls	r2, r3, #5
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	69ba      	ldr	r2, [r7, #24]
 8009e72:	0151      	lsls	r1, r2, #5
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	440a      	add	r2, r1
 8009e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d126      	bne.n	8009edc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea4:	69b9      	ldr	r1, [r7, #24]
 8009ea6:	0148      	lsls	r0, r1, #5
 8009ea8:	69f9      	ldr	r1, [r7, #28]
 8009eaa:	4401      	add	r1, r0
 8009eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	0151      	lsls	r1, r2, #5
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	440a      	add	r2, r1
 8009eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ed2:	6113      	str	r3, [r2, #16]
 8009ed4:	e03a      	b.n	8009f4c <USB_EPStartXfer+0x3e4>
 8009ed6:	bf00      	nop
 8009ed8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	699a      	ldr	r2, [r3, #24]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	1e5a      	subs	r2, r3, #1
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	8afa      	ldrh	r2, [r7, #22]
 8009ef8:	fb03 f202 	mul.w	r2, r3, r2
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	8afb      	ldrh	r3, [r7, #22]
 8009f10:	04d9      	lsls	r1, r3, #19
 8009f12:	4b38      	ldr	r3, [pc, #224]	; (8009ff4 <USB_EPStartXfer+0x48c>)
 8009f14:	400b      	ands	r3, r1
 8009f16:	69b9      	ldr	r1, [r7, #24]
 8009f18:	0148      	lsls	r0, r1, #5
 8009f1a:	69f9      	ldr	r1, [r7, #28]
 8009f1c:	4401      	add	r1, r0
 8009f1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f22:	4313      	orrs	r3, r2
 8009f24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f32:	691a      	ldr	r2, [r3, #16]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f3c:	69b9      	ldr	r1, [r7, #24]
 8009f3e:	0148      	lsls	r0, r1, #5
 8009f40:	69f9      	ldr	r1, [r7, #28]
 8009f42:	4401      	add	r1, r0
 8009f44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f4c:	79fb      	ldrb	r3, [r7, #7]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d10d      	bne.n	8009f6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6919      	ldr	r1, [r3, #16]
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6a:	460a      	mov	r2, r1
 8009f6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	791b      	ldrb	r3, [r3, #4]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d128      	bne.n	8009fc8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d110      	bne.n	8009fa8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	e00f      	b.n	8009fc8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	0151      	lsls	r1, r2, #5
 8009fba:	69fa      	ldr	r2, [r7, #28]
 8009fbc:	440a      	add	r2, r1
 8009fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	0151      	lsls	r1, r2, #5
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	440a      	add	r2, r1
 8009fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	1ff80000 	.word	0x1ff80000

08009ff8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	4613      	mov	r3, r2
 800a004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b01      	cmp	r3, #1
 800a016:	f040 80ce 	bne.w	800a1b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d132      	bne.n	800a088 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	0151      	lsls	r1, r2, #5
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	440a      	add	r2, r1
 800a038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a03c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a040:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	0151      	lsls	r1, r2, #5
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	440a      	add	r2, r1
 800a05c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a080:	0cdb      	lsrs	r3, r3, #19
 800a082:	04db      	lsls	r3, r3, #19
 800a084:	6113      	str	r3, [r2, #16]
 800a086:	e04e      	b.n	800a126 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a2:	0cdb      	lsrs	r3, r3, #19
 800a0a4:	04db      	lsls	r3, r3, #19
 800a0a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d903      	bls.n	800a0e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	0151      	lsls	r1, r2, #5
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	440a      	add	r2, r1
 800a0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a116:	6939      	ldr	r1, [r7, #16]
 800a118:	0148      	lsls	r0, r1, #5
 800a11a:	6979      	ldr	r1, [r7, #20]
 800a11c:	4401      	add	r1, r0
 800a11e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a122:	4313      	orrs	r3, r2
 800a124:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a126:	79fb      	ldrb	r3, [r7, #7]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d11e      	bne.n	800a16a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d009      	beq.n	800a148 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a140:	461a      	mov	r2, r3
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	0151      	lsls	r1, r2, #5
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	440a      	add	r2, r1
 800a15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	e097      	b.n	800a29a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	0151      	lsls	r1, r2, #5
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	440a      	add	r2, r1
 800a180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a188:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 8083 	beq.w	800a29a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	f003 030f 	and.w	r3, r3, #15
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1aa:	6979      	ldr	r1, [r7, #20]
 800a1ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	634b      	str	r3, [r1, #52]	; 0x34
 800a1b4:	e071      	b.n	800a29a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	0151      	lsls	r1, r2, #5
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d0:	0cdb      	lsrs	r3, r3, #19
 800a1d2:	04db      	lsls	r3, r3, #19
 800a1d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	0151      	lsls	r1, r2, #5
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	440a      	add	r2, r1
 800a1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	0151      	lsls	r1, r2, #5
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	440a      	add	r2, r1
 800a228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a22c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	69db      	ldr	r3, [r3, #28]
 800a244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a248:	6939      	ldr	r1, [r7, #16]
 800a24a:	0148      	lsls	r0, r1, #5
 800a24c:	6979      	ldr	r1, [r7, #20]
 800a24e:	4401      	add	r1, r0
 800a250:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a254:	4313      	orrs	r3, r2
 800a256:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a258:	79fb      	ldrb	r3, [r7, #7]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d10d      	bne.n	800a27a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d009      	beq.n	800a27a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6919      	ldr	r1, [r3, #16]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a276:	460a      	mov	r2, r1
 800a278:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	0151      	lsls	r1, r2, #5
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	440a      	add	r2, r1
 800a290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	785b      	ldrb	r3, [r3, #1]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d14a      	bne.n	800a35c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2de:	f040 8086 	bne.w	800a3ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	7812      	ldrb	r2, [r2, #0]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a300:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a304:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a328:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3301      	adds	r3, #1
 800a32e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f242 7210 	movw	r2, #10000	; 0x2710
 800a336:	4293      	cmp	r3, r2
 800a338:	d902      	bls.n	800a340 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	75fb      	strb	r3, [r7, #23]
          break;
 800a33e:	e056      	b.n	800a3ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a358:	d0e7      	beq.n	800a32a <USB_EPStopXfer+0x82>
 800a35a:	e048      	b.n	800a3ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a374:	d13b      	bne.n	800a3ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	7812      	ldrb	r2, [r2, #0]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a394:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a398:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d902      	bls.n	800a3d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3d2:	e00c      	b.n	800a3ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3ec:	d0e7      	beq.n	800a3be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b089      	sub	sp, #36	; 0x24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4611      	mov	r1, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	460b      	mov	r3, r1
 800a40c:	71fb      	strb	r3, [r7, #7]
 800a40e:	4613      	mov	r3, r2
 800a410:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a41a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d123      	bne.n	800a46a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a422:	88bb      	ldrh	r3, [r7, #4]
 800a424:	3303      	adds	r3, #3
 800a426:	089b      	lsrs	r3, r3, #2
 800a428:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	e018      	b.n	800a462 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	031a      	lsls	r2, r3, #12
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	4413      	add	r3, r2
 800a438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43c:	461a      	mov	r2, r3
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	3301      	adds	r3, #1
 800a448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	3301      	adds	r3, #1
 800a44e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	3301      	adds	r3, #1
 800a454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	3301      	adds	r3, #1
 800a45a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	3301      	adds	r3, #1
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	429a      	cmp	r2, r3
 800a468:	d3e2      	bcc.n	800a430 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3724      	adds	r7, #36	; 0x24
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a478:	b480      	push	{r7}
 800a47a:	b08b      	sub	sp, #44	; 0x2c
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	4613      	mov	r3, r2
 800a484:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	089b      	lsrs	r3, r3, #2
 800a492:	b29b      	uxth	r3, r3
 800a494:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a496:	88fb      	ldrh	r3, [r7, #6]
 800a498:	f003 0303 	and.w	r3, r3, #3
 800a49c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	623b      	str	r3, [r7, #32]
 800a4a2:	e014      	b.n	800a4ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	3301      	adds	r3, #1
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	623b      	str	r3, [r7, #32]
 800a4ce:	6a3a      	ldr	r2, [r7, #32]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d3e6      	bcc.n	800a4a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4d6:	8bfb      	ldrh	r3, [r7, #30]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d01e      	beq.n	800a51a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f107 0310 	add.w	r3, r7, #16
 800a4ec:	6812      	ldr	r2, [r2, #0]
 800a4ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	701a      	strb	r2, [r3, #0]
      i++;
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	3301      	adds	r3, #1
 800a506:	623b      	str	r3, [r7, #32]
      pDest++;
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	3301      	adds	r3, #1
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a50e:	8bfb      	ldrh	r3, [r7, #30]
 800a510:	3b01      	subs	r3, #1
 800a512:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a514:	8bfb      	ldrh	r3, [r7, #30]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1ea      	bne.n	800a4f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	372c      	adds	r7, #44	; 0x2c
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	785b      	ldrb	r3, [r3, #1]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d12c      	bne.n	800a59e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	db12      	blt.n	800a57c <USB_EPSetStall+0x54>
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00f      	beq.n	800a57c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	0151      	lsls	r1, r2, #5
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	440a      	add	r2, r1
 800a572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a57a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	440a      	add	r2, r1
 800a592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	e02b      	b.n	800a5f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	db12      	blt.n	800a5d6 <USB_EPSetStall+0xae>
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00f      	beq.n	800a5d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	0151      	lsls	r1, r2, #5
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	440a      	add	r2, r1
 800a5cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	785b      	ldrb	r3, [r3, #1]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d128      	bne.n	800a672 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4413      	add	r3, r2
 800a628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	0151      	lsls	r1, r2, #5
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	440a      	add	r2, r1
 800a636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a63a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a63e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	791b      	ldrb	r3, [r3, #4]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d003      	beq.n	800a650 <USB_EPClearStall+0x4c>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	791b      	ldrb	r3, [r3, #4]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d138      	bne.n	800a6c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a66a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	e027      	b.n	800a6c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	0151      	lsls	r1, r2, #5
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	440a      	add	r2, r1
 800a688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a68c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a690:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	791b      	ldrb	r3, [r3, #4]
 800a696:	2b03      	cmp	r3, #3
 800a698:	d003      	beq.n	800a6a2 <USB_EPClearStall+0x9e>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	791b      	ldrb	r3, [r3, #4]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d10f      	bne.n	800a6c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	0151      	lsls	r1, r2, #5
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	440a      	add	r2, r1
 800a6b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a6f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a70a:	4313      	orrs	r3, r2
 800a70c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a74a:	f023 0302 	bic.w	r3, r3, #2
 800a74e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a75e:	b480      	push	{r7}
 800a760:	b085      	sub	sp, #20
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	0c1b      	lsrs	r3, r3, #16
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	4013      	ands	r3, r2
 800a81c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	b29b      	uxth	r3, r3
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a82e:	b480      	push	{r7}
 800a830:	b085      	sub	sp, #20
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	460b      	mov	r3, r1
 800a838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a83e:	78fb      	ldrb	r3, [r7, #3]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	4013      	ands	r3, r2
 800a85a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a85c:	68bb      	ldr	r3, [r7, #8]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b087      	sub	sp, #28
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	fa22 f303 	lsr.w	r3, r2, r3
 800a89a:	01db      	lsls	r3, r3, #7
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8b8:	68bb      	ldr	r3, [r7, #8]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a900:	f023 0307 	bic.w	r3, r3, #7
 800a904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	460b      	mov	r3, r1
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	333c      	adds	r3, #60	; 0x3c
 800a93e:	3304      	adds	r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	4a26      	ldr	r2, [pc, #152]	; (800a9e0 <USB_EP0_OutStart+0xb8>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d90a      	bls.n	800a962 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a95c:	d101      	bne.n	800a962 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	e037      	b.n	800a9d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a968:	461a      	mov	r2, r3
 800a96a:	2300      	movs	r3, #0
 800a96c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a97c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a990:	f043 0318 	orr.w	r3, r3, #24
 800a994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a9a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d10f      	bne.n	800a9d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a9ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	4f54300a 	.word	0x4f54300a

0800a9e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4a13      	ldr	r2, [pc, #76]	; (800aa48 <USB_CoreReset+0x64>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d901      	bls.n	800aa02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e01b      	b.n	800aa3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	daf2      	bge.n	800a9f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f043 0201 	orr.w	r2, r3, #1
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a09      	ldr	r2, [pc, #36]	; (800aa48 <USB_CoreReset+0x64>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d901      	bls.n	800aa2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e006      	b.n	800aa3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d0f0      	beq.n	800aa1a <USB_CoreReset+0x36>

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	00030d40 	.word	0x00030d40

0800aa4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aa5c:	f005 fac2 	bl	800ffe4 <USBD_static_malloc>
 800aa60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d109      	bne.n	800aa7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	32b0      	adds	r2, #176	; 0xb0
 800aa72:	2100      	movs	r1, #0
 800aa74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e0d4      	b.n	800ac26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aa80:	2100      	movs	r1, #0
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f006 f863 	bl	8010b4e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32b0      	adds	r2, #176	; 0xb0
 800aa92:	68f9      	ldr	r1, [r7, #12]
 800aa94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	32b0      	adds	r2, #176	; 0xb0
 800aaa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	7c1b      	ldrb	r3, [r3, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d138      	bne.n	800ab26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aab4:	4b5e      	ldr	r3, [pc, #376]	; (800ac30 <USBD_CDC_Init+0x1e4>)
 800aab6:	7819      	ldrb	r1, [r3, #0]
 800aab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aabc:	2202      	movs	r2, #2
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f005 f96d 	bl	800fd9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aac4:	4b5a      	ldr	r3, [pc, #360]	; (800ac30 <USBD_CDC_Init+0x1e4>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3324      	adds	r3, #36	; 0x24
 800aada:	2201      	movs	r2, #1
 800aadc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aade:	4b55      	ldr	r3, [pc, #340]	; (800ac34 <USBD_CDC_Init+0x1e8>)
 800aae0:	7819      	ldrb	r1, [r3, #0]
 800aae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aae6:	2202      	movs	r2, #2
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f005 f958 	bl	800fd9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aaee:	4b51      	ldr	r3, [pc, #324]	; (800ac34 <USBD_CDC_Init+0x1e8>)
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	f003 020f 	and.w	r2, r3, #15
 800aaf6:	6879      	ldr	r1, [r7, #4]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	440b      	add	r3, r1
 800ab02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab06:	2201      	movs	r2, #1
 800ab08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab0a:	4b4b      	ldr	r3, [pc, #300]	; (800ac38 <USBD_CDC_Init+0x1ec>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	f003 020f 	and.w	r2, r3, #15
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	3326      	adds	r3, #38	; 0x26
 800ab20:	2210      	movs	r2, #16
 800ab22:	801a      	strh	r2, [r3, #0]
 800ab24:	e035      	b.n	800ab92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab26:	4b42      	ldr	r3, [pc, #264]	; (800ac30 <USBD_CDC_Init+0x1e4>)
 800ab28:	7819      	ldrb	r1, [r3, #0]
 800ab2a:	2340      	movs	r3, #64	; 0x40
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f005 f935 	bl	800fd9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab34:	4b3e      	ldr	r3, [pc, #248]	; (800ac30 <USBD_CDC_Init+0x1e4>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 020f 	and.w	r2, r3, #15
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	3324      	adds	r3, #36	; 0x24
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab4e:	4b39      	ldr	r3, [pc, #228]	; (800ac34 <USBD_CDC_Init+0x1e8>)
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	2340      	movs	r3, #64	; 0x40
 800ab54:	2202      	movs	r2, #2
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f005 f921 	bl	800fd9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab5c:	4b35      	ldr	r3, [pc, #212]	; (800ac34 <USBD_CDC_Init+0x1e8>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 020f 	and.w	r2, r3, #15
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	440b      	add	r3, r1
 800ab70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab74:	2201      	movs	r2, #1
 800ab76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab78:	4b2f      	ldr	r3, [pc, #188]	; (800ac38 <USBD_CDC_Init+0x1ec>)
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 020f 	and.w	r2, r3, #15
 800ab80:	6879      	ldr	r1, [r7, #4]
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3326      	adds	r3, #38	; 0x26
 800ab8e:	2210      	movs	r2, #16
 800ab90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab92:	4b29      	ldr	r3, [pc, #164]	; (800ac38 <USBD_CDC_Init+0x1ec>)
 800ab94:	7819      	ldrb	r1, [r3, #0]
 800ab96:	2308      	movs	r3, #8
 800ab98:	2203      	movs	r2, #3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f005 f8ff 	bl	800fd9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <USBD_CDC_Init+0x1ec>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	f003 020f 	and.w	r2, r3, #15
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	440b      	add	r3, r1
 800abb4:	3324      	adds	r3, #36	; 0x24
 800abb6:	2201      	movs	r2, #1
 800abb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	33b0      	adds	r3, #176	; 0xb0
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800abf0:	2302      	movs	r3, #2
 800abf2:	e018      	b.n	800ac26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7c1b      	ldrb	r3, [r3, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abfc:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <USBD_CDC_Init+0x1e8>)
 800abfe:	7819      	ldrb	r1, [r3, #0]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f005 f9b6 	bl	800ff7c <USBD_LL_PrepareReceive>
 800ac10:	e008      	b.n	800ac24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac12:	4b08      	ldr	r3, [pc, #32]	; (800ac34 <USBD_CDC_Init+0x1e8>)
 800ac14:	7819      	ldrb	r1, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac1c:	2340      	movs	r3, #64	; 0x40
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f005 f9ac 	bl	800ff7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	2000017b 	.word	0x2000017b
 800ac34:	2000017c 	.word	0x2000017c
 800ac38:	2000017d 	.word	0x2000017d

0800ac3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac48:	4b3a      	ldr	r3, [pc, #232]	; (800ad34 <USBD_CDC_DeInit+0xf8>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f005 f8cb 	bl	800fdea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac54:	4b37      	ldr	r3, [pc, #220]	; (800ad34 <USBD_CDC_DeInit+0xf8>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 020f 	and.w	r2, r3, #15
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	3324      	adds	r3, #36	; 0x24
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac6e:	4b32      	ldr	r3, [pc, #200]	; (800ad38 <USBD_CDC_DeInit+0xfc>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f005 f8b8 	bl	800fdea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac7a:	4b2f      	ldr	r3, [pc, #188]	; (800ad38 <USBD_CDC_DeInit+0xfc>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	f003 020f 	and.w	r2, r3, #15
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac92:	2200      	movs	r2, #0
 800ac94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac96:	4b29      	ldr	r3, [pc, #164]	; (800ad3c <USBD_CDC_DeInit+0x100>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f005 f8a4 	bl	800fdea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aca2:	4b26      	ldr	r3, [pc, #152]	; (800ad3c <USBD_CDC_DeInit+0x100>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	f003 020f 	and.w	r2, r3, #15
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	3324      	adds	r3, #36	; 0x24
 800acb8:	2200      	movs	r2, #0
 800acba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800acbc:	4b1f      	ldr	r3, [pc, #124]	; (800ad3c <USBD_CDC_DeInit+0x100>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	3326      	adds	r3, #38	; 0x26
 800acd2:	2200      	movs	r2, #0
 800acd4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32b0      	adds	r2, #176	; 0xb0
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01f      	beq.n	800ad28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	33b0      	adds	r3, #176	; 0xb0
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	32b0      	adds	r2, #176	; 0xb0
 800ad06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f005 f978 	bl	8010000 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	32b0      	adds	r2, #176	; 0xb0
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	2000017b 	.word	0x2000017b
 800ad38:	2000017c 	.word	0x2000017c
 800ad3c:	2000017d 	.word	0x2000017d

0800ad40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	32b0      	adds	r2, #176	; 0xb0
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e0bf      	b.n	800aef0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d050      	beq.n	800ae1e <USBD_CDC_Setup+0xde>
 800ad7c:	2b20      	cmp	r3, #32
 800ad7e:	f040 80af 	bne.w	800aee0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	88db      	ldrh	r3, [r3, #6]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d03a      	beq.n	800ae00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	da1b      	bge.n	800adcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	33b0      	adds	r3, #176	; 0xb0
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800adaa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	88d2      	ldrh	r2, [r2, #6]
 800adb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	88db      	ldrh	r3, [r3, #6]
 800adb6:	2b07      	cmp	r3, #7
 800adb8:	bf28      	it	cs
 800adba:	2307      	movcs	r3, #7
 800adbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	89fa      	ldrh	r2, [r7, #14]
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 fd89 	bl	800c8dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800adca:	e090      	b.n	800aeee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	785a      	ldrb	r2, [r3, #1]
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	88db      	ldrh	r3, [r3, #6]
 800adda:	2b3f      	cmp	r3, #63	; 0x3f
 800addc:	d803      	bhi.n	800ade6 <USBD_CDC_Setup+0xa6>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	88db      	ldrh	r3, [r3, #6]
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	e000      	b.n	800ade8 <USBD_CDC_Setup+0xa8>
 800ade6:	2240      	movs	r2, #64	; 0x40
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800adee:	6939      	ldr	r1, [r7, #16]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800adf6:	461a      	mov	r2, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fd9b 	bl	800c934 <USBD_CtlPrepareRx>
      break;
 800adfe:	e076      	b.n	800aeee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	33b0      	adds	r3, #176	; 0xb0
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	7850      	ldrb	r0, [r2, #1]
 800ae16:	2200      	movs	r2, #0
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	4798      	blx	r3
      break;
 800ae1c:	e067      	b.n	800aeee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	785b      	ldrb	r3, [r3, #1]
 800ae22:	2b0b      	cmp	r3, #11
 800ae24:	d851      	bhi.n	800aeca <USBD_CDC_Setup+0x18a>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <USBD_CDC_Setup+0xec>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae5d 	.word	0x0800ae5d
 800ae30:	0800aed9 	.word	0x0800aed9
 800ae34:	0800aecb 	.word	0x0800aecb
 800ae38:	0800aecb 	.word	0x0800aecb
 800ae3c:	0800aecb 	.word	0x0800aecb
 800ae40:	0800aecb 	.word	0x0800aecb
 800ae44:	0800aecb 	.word	0x0800aecb
 800ae48:	0800aecb 	.word	0x0800aecb
 800ae4c:	0800aecb 	.word	0x0800aecb
 800ae50:	0800aecb 	.word	0x0800aecb
 800ae54:	0800ae87 	.word	0x0800ae87
 800ae58:	0800aeb1 	.word	0x0800aeb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d107      	bne.n	800ae78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae68:	f107 030a 	add.w	r3, r7, #10
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 fd33 	bl	800c8dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae76:	e032      	b.n	800aede <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f001 fcbd 	bl	800c7fa <USBD_CtlError>
            ret = USBD_FAIL;
 800ae80:	2303      	movs	r3, #3
 800ae82:	75fb      	strb	r3, [r7, #23]
          break;
 800ae84:	e02b      	b.n	800aede <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d107      	bne.n	800aea2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae92:	f107 030d 	add.w	r3, r7, #13
 800ae96:	2201      	movs	r2, #1
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 fd1e 	bl	800c8dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aea0:	e01d      	b.n	800aede <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 fca8 	bl	800c7fa <USBD_CtlError>
            ret = USBD_FAIL;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	75fb      	strb	r3, [r7, #23]
          break;
 800aeae:	e016      	b.n	800aede <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d00f      	beq.n	800aedc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f001 fc9b 	bl	800c7fa <USBD_CtlError>
            ret = USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aec8:	e008      	b.n	800aedc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 fc94 	bl	800c7fa <USBD_CtlError>
          ret = USBD_FAIL;
 800aed2:	2303      	movs	r3, #3
 800aed4:	75fb      	strb	r3, [r7, #23]
          break;
 800aed6:	e002      	b.n	800aede <USBD_CDC_Setup+0x19e>
          break;
 800aed8:	bf00      	nop
 800aeda:	e008      	b.n	800aeee <USBD_CDC_Setup+0x1ae>
          break;
 800aedc:	bf00      	nop
      }
      break;
 800aede:	e006      	b.n	800aeee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f001 fc89 	bl	800c7fa <USBD_CtlError>
      ret = USBD_FAIL;
 800aee8:	2303      	movs	r3, #3
 800aeea:	75fb      	strb	r3, [r7, #23]
      break;
 800aeec:	bf00      	nop
  }

  return (uint8_t)ret;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	32b0      	adds	r2, #176	; 0xb0
 800af16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af1e:	2303      	movs	r3, #3
 800af20:	e065      	b.n	800afee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	32b0      	adds	r2, #176	; 0xb0
 800af2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	f003 020f 	and.w	r2, r3, #15
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	3318      	adds	r3, #24
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d02f      	beq.n	800afac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af4c:	78fb      	ldrb	r3, [r7, #3]
 800af4e:	f003 020f 	and.w	r2, r3, #15
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	4613      	mov	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	3318      	adds	r3, #24
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	f003 010f 	and.w	r1, r3, #15
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	460b      	mov	r3, r1
 800af6c:	00db      	lsls	r3, r3, #3
 800af6e:	440b      	add	r3, r1
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4403      	add	r3, r0
 800af74:	3348      	adds	r3, #72	; 0x48
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	fbb2 f1f3 	udiv	r1, r2, r3
 800af7c:	fb01 f303 	mul.w	r3, r1, r3
 800af80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af82:	2b00      	cmp	r3, #0
 800af84:	d112      	bne.n	800afac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af86:	78fb      	ldrb	r3, [r7, #3]
 800af88:	f003 020f 	and.w	r2, r3, #15
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	4613      	mov	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	440b      	add	r3, r1
 800af98:	3318      	adds	r3, #24
 800af9a:	2200      	movs	r2, #0
 800af9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af9e:	78f9      	ldrb	r1, [r7, #3]
 800afa0:	2300      	movs	r3, #0
 800afa2:	2200      	movs	r2, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f004 ffc8 	bl	800ff3a <USBD_LL_Transmit>
 800afaa:	e01f      	b.n	800afec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	33b0      	adds	r3, #176	; 0xb0
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d010      	beq.n	800afec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	33b0      	adds	r3, #176	; 0xb0
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800afe8:	78fa      	ldrb	r2, [r7, #3]
 800afea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b084      	sub	sp, #16
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	460b      	mov	r3, r1
 800b000:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	32b0      	adds	r2, #176	; 0xb0
 800b00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b010:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	32b0      	adds	r2, #176	; 0xb0
 800b01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b024:	2303      	movs	r3, #3
 800b026:	e01a      	b.n	800b05e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b028:	78fb      	ldrb	r3, [r7, #3]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f004 ffc6 	bl	800ffbe <USBD_LL_GetRxDataSize>
 800b032:	4602      	mov	r2, r0
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	33b0      	adds	r3, #176	; 0xb0
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b058:	4611      	mov	r1, r2
 800b05a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	32b0      	adds	r2, #176	; 0xb0
 800b078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b084:	2303      	movs	r3, #3
 800b086:	e025      	b.n	800b0d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	33b0      	adds	r3, #176	; 0xb0
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01a      	beq.n	800b0d2 <USBD_CDC_EP0_RxReady+0x6c>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0a2:	2bff      	cmp	r3, #255	; 0xff
 800b0a4:	d015      	beq.n	800b0d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	33b0      	adds	r3, #176	; 0xb0
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b0be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0c6:	b292      	uxth	r2, r2
 800b0c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	22ff      	movs	r2, #255	; 0xff
 800b0ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0e4:	2182      	movs	r1, #130	; 0x82
 800b0e6:	4818      	ldr	r0, [pc, #96]	; (800b148 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0e8:	f000 fd4f 	bl	800bb8a <USBD_GetEpDesc>
 800b0ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4815      	ldr	r0, [pc, #84]	; (800b148 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0f2:	f000 fd4a 	bl	800bb8a <USBD_GetEpDesc>
 800b0f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0f8:	2181      	movs	r1, #129	; 0x81
 800b0fa:	4813      	ldr	r0, [pc, #76]	; (800b148 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0fc:	f000 fd45 	bl	800bb8a <USBD_GetEpDesc>
 800b100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2210      	movs	r2, #16
 800b10c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d006      	beq.n	800b122 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2200      	movs	r2, #0
 800b118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b11c:	711a      	strb	r2, [r3, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b130:	711a      	strb	r2, [r3, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2243      	movs	r2, #67	; 0x43
 800b13a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b13c:	4b02      	ldr	r3, [pc, #8]	; (800b148 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20000138 	.word	0x20000138

0800b14c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b154:	2182      	movs	r1, #130	; 0x82
 800b156:	4818      	ldr	r0, [pc, #96]	; (800b1b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b158:	f000 fd17 	bl	800bb8a <USBD_GetEpDesc>
 800b15c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b15e:	2101      	movs	r1, #1
 800b160:	4815      	ldr	r0, [pc, #84]	; (800b1b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b162:	f000 fd12 	bl	800bb8a <USBD_GetEpDesc>
 800b166:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b168:	2181      	movs	r1, #129	; 0x81
 800b16a:	4813      	ldr	r0, [pc, #76]	; (800b1b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b16c:	f000 fd0d 	bl	800bb8a <USBD_GetEpDesc>
 800b170:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2210      	movs	r2, #16
 800b17c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	2200      	movs	r2, #0
 800b188:	711a      	strb	r2, [r3, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f042 0202 	orr.w	r2, r2, #2
 800b190:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d006      	beq.n	800b1a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	711a      	strb	r2, [r3, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f042 0202 	orr.w	r2, r2, #2
 800b1a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2243      	movs	r2, #67	; 0x43
 800b1aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1ac:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000138 	.word	0x20000138

0800b1bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1c4:	2182      	movs	r1, #130	; 0x82
 800b1c6:	4818      	ldr	r0, [pc, #96]	; (800b228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1c8:	f000 fcdf 	bl	800bb8a <USBD_GetEpDesc>
 800b1cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	4815      	ldr	r0, [pc, #84]	; (800b228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1d2:	f000 fcda 	bl	800bb8a <USBD_GetEpDesc>
 800b1d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1d8:	2181      	movs	r1, #129	; 0x81
 800b1da:	4813      	ldr	r0, [pc, #76]	; (800b228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1dc:	f000 fcd5 	bl	800bb8a <USBD_GetEpDesc>
 800b1e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2210      	movs	r2, #16
 800b1ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d006      	beq.n	800b202 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1fc:	711a      	strb	r2, [r3, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d006      	beq.n	800b216 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b210:	711a      	strb	r2, [r3, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2243      	movs	r2, #67	; 0x43
 800b21a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b21c:	4b02      	ldr	r3, [pc, #8]	; (800b228 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20000138 	.word	0x20000138

0800b22c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	220a      	movs	r2, #10
 800b238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b23a:	4b03      	ldr	r3, [pc, #12]	; (800b248 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	200000f4 	.word	0x200000f4

0800b24c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e009      	b.n	800b274 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	33b0      	adds	r3, #176	; 0xb0
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	32b0      	adds	r2, #176	; 0xb0
 800b296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b29a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e008      	b.n	800b2b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	32b0      	adds	r2, #176	; 0xb0
 800b2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e004      	b.n	800b2f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	32b0      	adds	r2, #176	; 0xb0
 800b312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b316:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b318:	2301      	movs	r3, #1
 800b31a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	32b0      	adds	r2, #176	; 0xb0
 800b326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b32e:	2303      	movs	r3, #3
 800b330:	e025      	b.n	800b37e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d11f      	bne.n	800b37c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2201      	movs	r2, #1
 800b340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b344:	4b10      	ldr	r3, [pc, #64]	; (800b388 <USBD_CDC_TransmitPacket+0x88>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	f003 020f 	and.w	r2, r3, #15
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4403      	add	r3, r0
 800b35e:	3318      	adds	r3, #24
 800b360:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <USBD_CDC_TransmitPacket+0x88>)
 800b364:	7819      	ldrb	r1, [r3, #0]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f004 fde1 	bl	800ff3a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	2000017b 	.word	0x2000017b

0800b38c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32b0      	adds	r2, #176	; 0xb0
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	32b0      	adds	r2, #176	; 0xb0
 800b3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e018      	b.n	800b3ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	7c1b      	ldrb	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10a      	bne.n	800b3d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <USBD_CDC_ReceivePacket+0x68>)
 800b3c4:	7819      	ldrb	r1, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f004 fdd3 	bl	800ff7c <USBD_LL_PrepareReceive>
 800b3d6:	e008      	b.n	800b3ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <USBD_CDC_ReceivePacket+0x68>)
 800b3da:	7819      	ldrb	r1, [r3, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3e2:	2340      	movs	r3, #64	; 0x40
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f004 fdc9 	bl	800ff7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	2000017c 	.word	0x2000017c

0800b3f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e01f      	b.n	800b450 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	79fa      	ldrb	r2, [r7, #7]
 800b442:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f004 fc43 	bl	800fcd0 <USBD_LL_Init>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b462:	2300      	movs	r3, #0
 800b464:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e025      	b.n	800b4bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	32ae      	adds	r2, #174	; 0xae
 800b482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00f      	beq.n	800b4ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32ae      	adds	r2, #174	; 0xae
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49c:	f107 020e 	add.w	r2, r7, #14
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4798      	blx	r3
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f004 fc4b 	bl	800fd68 <USBD_LL_Start>
 800b4d2:	4603      	mov	r3, r0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d009      	beq.n	800b520 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	78fa      	ldrb	r2, [r7, #3]
 800b516:	4611      	mov	r1, r2
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	4611      	mov	r1, r2
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	4798      	blx	r3
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b550:	2303      	movs	r3, #3
 800b552:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f001 f908 	bl	800c786 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b584:	461a      	mov	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b592:	f003 031f 	and.w	r3, r3, #31
 800b596:	2b02      	cmp	r3, #2
 800b598:	d01a      	beq.n	800b5d0 <USBD_LL_SetupStage+0x72>
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d822      	bhi.n	800b5e4 <USBD_LL_SetupStage+0x86>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <USBD_LL_SetupStage+0x4a>
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d00a      	beq.n	800b5bc <USBD_LL_SetupStage+0x5e>
 800b5a6:	e01d      	b.n	800b5e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fb5f 	bl	800bc74 <USBD_StdDevReq>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ba:	e020      	b.n	800b5fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fbc7 	bl	800bd58 <USBD_StdItfReq>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ce:	e016      	b.n	800b5fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fc29 	bl	800be30 <USBD_StdEPReq>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e2:	e00c      	b.n	800b5fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f004 fc18 	bl	800fe28 <USBD_LL_StallEP>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b5fc:	bf00      	nop
  }

  return ret;
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	460b      	mov	r3, r1
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b61a:	7afb      	ldrb	r3, [r7, #11]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d16e      	bne.n	800b6fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b626:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b62e:	2b03      	cmp	r3, #3
 800b630:	f040 8098 	bne.w	800b764 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d913      	bls.n	800b668 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	689a      	ldr	r2, [r3, #8]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	1ad2      	subs	r2, r2, r3
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	4293      	cmp	r3, r2
 800b658:	bf28      	it	cs
 800b65a:	4613      	movcs	r3, r2
 800b65c:	461a      	mov	r2, r3
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f001 f984 	bl	800c96e <USBD_CtlContinueRx>
 800b666:	e07d      	b.n	800b764 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b66e:	f003 031f 	and.w	r3, r3, #31
 800b672:	2b02      	cmp	r3, #2
 800b674:	d014      	beq.n	800b6a0 <USBD_LL_DataOutStage+0x98>
 800b676:	2b02      	cmp	r3, #2
 800b678:	d81d      	bhi.n	800b6b6 <USBD_LL_DataOutStage+0xae>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <USBD_LL_DataOutStage+0x7c>
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d003      	beq.n	800b68a <USBD_LL_DataOutStage+0x82>
 800b682:	e018      	b.n	800b6b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	75bb      	strb	r3, [r7, #22]
            break;
 800b688:	e018      	b.n	800b6bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b690:	b2db      	uxtb	r3, r3
 800b692:	4619      	mov	r1, r3
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 fa5e 	bl	800bb56 <USBD_CoreFindIF>
 800b69a:	4603      	mov	r3, r0
 800b69c:	75bb      	strb	r3, [r7, #22]
            break;
 800b69e:	e00d      	b.n	800b6bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 fa60 	bl	800bb70 <USBD_CoreFindEP>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	75bb      	strb	r3, [r7, #22]
            break;
 800b6b4:	e002      	b.n	800b6bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	75bb      	strb	r3, [r7, #22]
            break;
 800b6ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b6bc:	7dbb      	ldrb	r3, [r7, #22]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d119      	bne.n	800b6f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d113      	bne.n	800b6f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b6ce:	7dba      	ldrb	r2, [r7, #22]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	32ae      	adds	r2, #174	; 0xae
 800b6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00b      	beq.n	800b6f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b6de:	7dba      	ldrb	r2, [r7, #22]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b6e6:	7dba      	ldrb	r2, [r7, #22]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	32ae      	adds	r2, #174	; 0xae
 800b6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f001 f94a 	bl	800c990 <USBD_CtlSendStatus>
 800b6fc:	e032      	b.n	800b764 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b704:	b2db      	uxtb	r3, r3
 800b706:	4619      	mov	r1, r3
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 fa31 	bl	800bb70 <USBD_CoreFindEP>
 800b70e:	4603      	mov	r3, r0
 800b710:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b712:	7dbb      	ldrb	r3, [r7, #22]
 800b714:	2bff      	cmp	r3, #255	; 0xff
 800b716:	d025      	beq.n	800b764 <USBD_LL_DataOutStage+0x15c>
 800b718:	7dbb      	ldrb	r3, [r7, #22]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d122      	bne.n	800b764 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b03      	cmp	r3, #3
 800b728:	d117      	bne.n	800b75a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b72a:	7dba      	ldrb	r2, [r7, #22]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	32ae      	adds	r2, #174	; 0xae
 800b730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00f      	beq.n	800b75a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b73a:	7dba      	ldrb	r2, [r7, #22]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b742:	7dba      	ldrb	r2, [r7, #22]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	32ae      	adds	r2, #174	; 0xae
 800b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74c:	699b      	ldr	r3, [r3, #24]
 800b74e:	7afa      	ldrb	r2, [r7, #11]
 800b750:	4611      	mov	r1, r2
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	4798      	blx	r3
 800b756:	4603      	mov	r3, r0
 800b758:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	e000      	b.n	800b766 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b086      	sub	sp, #24
 800b772:	af00      	add	r7, sp, #0
 800b774:	60f8      	str	r0, [r7, #12]
 800b776:	460b      	mov	r3, r1
 800b778:	607a      	str	r2, [r7, #4]
 800b77a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b77c:	7afb      	ldrb	r3, [r7, #11]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d16f      	bne.n	800b862 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3314      	adds	r3, #20
 800b786:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d15a      	bne.n	800b848 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d914      	bls.n	800b7c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	689a      	ldr	r2, [r3, #8]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	6879      	ldr	r1, [r7, #4]
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f001 f8ac 	bl	800c912 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2100      	movs	r1, #0
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f004 fbdb 	bl	800ff7c <USBD_LL_PrepareReceive>
 800b7c6:	e03f      	b.n	800b848 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d11c      	bne.n	800b80e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d316      	bcc.n	800b80e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d20f      	bcs.n	800b80e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f001 f88d 	bl	800c912 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b800:	2300      	movs	r3, #0
 800b802:	2200      	movs	r2, #0
 800b804:	2100      	movs	r1, #0
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f004 fbb8 	bl	800ff7c <USBD_LL_PrepareReceive>
 800b80c:	e01c      	b.n	800b848 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b03      	cmp	r3, #3
 800b818:	d10f      	bne.n	800b83a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d009      	beq.n	800b83a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b83a:	2180      	movs	r1, #128	; 0x80
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f004 faf3 	bl	800fe28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f001 f8b7 	bl	800c9b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d03a      	beq.n	800b8c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff fe42 	bl	800b4dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b860:	e032      	b.n	800b8c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f000 f97f 	bl	800bb70 <USBD_CoreFindEP>
 800b872:	4603      	mov	r3, r0
 800b874:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b876:	7dfb      	ldrb	r3, [r7, #23]
 800b878:	2bff      	cmp	r3, #255	; 0xff
 800b87a:	d025      	beq.n	800b8c8 <USBD_LL_DataInStage+0x15a>
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d122      	bne.n	800b8c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d11c      	bne.n	800b8c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b88e:	7dfa      	ldrb	r2, [r7, #23]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	32ae      	adds	r2, #174	; 0xae
 800b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d014      	beq.n	800b8c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b89e:	7dfa      	ldrb	r2, [r7, #23]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b8a6:	7dfa      	ldrb	r2, [r7, #23]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	32ae      	adds	r2, #174	; 0xae
 800b8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	7afa      	ldrb	r2, [r7, #11]
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	4798      	blx	r3
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b8be:	7dbb      	ldrb	r3, [r7, #22]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b8c4:	7dbb      	ldrb	r3, [r7, #22]
 800b8c6:	e000      	b.n	800b8ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3718      	adds	r7, #24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d014      	beq.n	800b938 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00e      	beq.n	800b938 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	b2d2      	uxtb	r2, r2
 800b928:	4611      	mov	r1, r2
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b938:	2340      	movs	r3, #64	; 0x40
 800b93a:	2200      	movs	r2, #0
 800b93c:	2100      	movs	r1, #0
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f004 fa2d 	bl	800fd9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2240      	movs	r2, #64	; 0x40
 800b950:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b954:	2340      	movs	r3, #64	; 0x40
 800b956:	2200      	movs	r2, #0
 800b958:	2180      	movs	r1, #128	; 0x80
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f004 fa1f 	bl	800fd9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2240      	movs	r2, #64	; 0x40
 800b96a:	621a      	str	r2, [r3, #32]

  return ret;
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	78fa      	ldrb	r2, [r7, #3]
 800b986:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2204      	movs	r2, #4
 800b9b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d106      	bne.n	800b9e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d110      	bne.n	800ba28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d005      	beq.n	800ba28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba22:	69db      	ldr	r3, [r3, #28]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	32ae      	adds	r2, #174	; 0xae
 800ba48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e01c      	b.n	800ba8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d115      	bne.n	800ba8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	32ae      	adds	r2, #174	; 0xae
 800ba6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	32ae      	adds	r2, #174	; 0xae
 800ba7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	4611      	mov	r1, r2
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	32ae      	adds	r2, #174	; 0xae
 800baac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e01c      	b.n	800baf2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d115      	bne.n	800baf0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	32ae      	adds	r2, #174	; 0xae
 800bace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00b      	beq.n	800baf0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	32ae      	adds	r2, #174	; 0xae
 800bae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae8:	78fa      	ldrb	r2, [r7, #3]
 800baea:	4611      	mov	r1, r2
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00e      	beq.n	800bb4c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	6852      	ldr	r2, [r2, #4]
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	4798      	blx	r3
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b086      	sub	sp, #24
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	885b      	ldrh	r3, [r3, #2]
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d920      	bls.n	800bbf4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bbba:	e013      	b.n	800bbe4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bbbc:	f107 030a 	add.w	r3, r7, #10
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6978      	ldr	r0, [r7, #20]
 800bbc4:	f000 f81b 	bl	800bbfe <USBD_GetNextDesc>
 800bbc8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b05      	cmp	r3, #5
 800bbd0:	d108      	bne.n	800bbe4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	789b      	ldrb	r3, [r3, #2]
 800bbda:	78fa      	ldrb	r2, [r7, #3]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d008      	beq.n	800bbf2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	885b      	ldrh	r3, [r3, #2]
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	897b      	ldrh	r3, [r7, #10]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d8e5      	bhi.n	800bbbc <USBD_GetEpDesc+0x32>
 800bbf0:	e000      	b.n	800bbf4 <USBD_GetEpDesc+0x6a>
          break;
 800bbf2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bbf4:	693b      	ldr	r3, [r7, #16]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	881a      	ldrh	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	4413      	add	r3, r2
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4413      	add	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc56:	8a3b      	ldrh	r3, [r7, #16]
 800bc58:	021b      	lsls	r3, r3, #8
 800bc5a:	b21a      	sxth	r2, r3
 800bc5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	b21b      	sxth	r3, r3
 800bc64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc66:	89fb      	ldrh	r3, [r7, #14]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	371c      	adds	r7, #28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc8a:	2b40      	cmp	r3, #64	; 0x40
 800bc8c:	d005      	beq.n	800bc9a <USBD_StdDevReq+0x26>
 800bc8e:	2b40      	cmp	r3, #64	; 0x40
 800bc90:	d857      	bhi.n	800bd42 <USBD_StdDevReq+0xce>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00f      	beq.n	800bcb6 <USBD_StdDevReq+0x42>
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d153      	bne.n	800bd42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	32ae      	adds	r2, #174	; 0xae
 800bca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	4798      	blx	r3
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	73fb      	strb	r3, [r7, #15]
      break;
 800bcb4:	e04a      	b.n	800bd4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	785b      	ldrb	r3, [r3, #1]
 800bcba:	2b09      	cmp	r3, #9
 800bcbc:	d83b      	bhi.n	800bd36 <USBD_StdDevReq+0xc2>
 800bcbe:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <USBD_StdDevReq+0x50>)
 800bcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc4:	0800bd19 	.word	0x0800bd19
 800bcc8:	0800bd2d 	.word	0x0800bd2d
 800bccc:	0800bd37 	.word	0x0800bd37
 800bcd0:	0800bd23 	.word	0x0800bd23
 800bcd4:	0800bd37 	.word	0x0800bd37
 800bcd8:	0800bcf7 	.word	0x0800bcf7
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bd37 	.word	0x0800bd37
 800bce4:	0800bd0f 	.word	0x0800bd0f
 800bce8:	0800bd01 	.word	0x0800bd01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fa3c 	bl	800c16c <USBD_GetDescriptor>
          break;
 800bcf4:	e024      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fba1 	bl	800c440 <USBD_SetAddress>
          break;
 800bcfe:	e01f      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fbe0 	bl	800c4c8 <USBD_SetConfig>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73fb      	strb	r3, [r7, #15]
          break;
 800bd0c:	e018      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fc83 	bl	800c61c <USBD_GetConfig>
          break;
 800bd16:	e013      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fcb4 	bl	800c688 <USBD_GetStatus>
          break;
 800bd20:	e00e      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fce3 	bl	800c6f0 <USBD_SetFeature>
          break;
 800bd2a:	e009      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fd07 	bl	800c742 <USBD_ClrFeature>
          break;
 800bd34:	e004      	b.n	800bd40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fd5e 	bl	800c7fa <USBD_CtlError>
          break;
 800bd3e:	bf00      	nop
      }
      break;
 800bd40:	e004      	b.n	800bd4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fd58 	bl	800c7fa <USBD_CtlError>
      break;
 800bd4a:	bf00      	nop
  }

  return ret;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop

0800bd58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd6e:	2b40      	cmp	r3, #64	; 0x40
 800bd70:	d005      	beq.n	800bd7e <USBD_StdItfReq+0x26>
 800bd72:	2b40      	cmp	r3, #64	; 0x40
 800bd74:	d852      	bhi.n	800be1c <USBD_StdItfReq+0xc4>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <USBD_StdItfReq+0x26>
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d14e      	bne.n	800be1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d840      	bhi.n	800be0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	889b      	ldrh	r3, [r3, #4]
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d836      	bhi.n	800be04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	889b      	ldrh	r3, [r3, #4]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff fed9 	bl	800bb56 <USBD_CoreFindIF>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	2bff      	cmp	r3, #255	; 0xff
 800bdac:	d01d      	beq.n	800bdea <USBD_StdItfReq+0x92>
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d11a      	bne.n	800bdea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bdb4:	7bba      	ldrb	r2, [r7, #14]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	32ae      	adds	r2, #174	; 0xae
 800bdba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00f      	beq.n	800bde4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bdc4:	7bba      	ldrb	r2, [r7, #14]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdcc:	7bba      	ldrb	r2, [r7, #14]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	32ae      	adds	r2, #174	; 0xae
 800bdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	4798      	blx	r3
 800bdde:	4603      	mov	r3, r0
 800bde0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bde2:	e004      	b.n	800bdee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bde4:	2303      	movs	r3, #3
 800bde6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bde8:	e001      	b.n	800bdee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bdea:	2303      	movs	r3, #3
 800bdec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	88db      	ldrh	r3, [r3, #6]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d110      	bne.n	800be18 <USBD_StdItfReq+0xc0>
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10d      	bne.n	800be18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fdc7 	bl	800c990 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be02:	e009      	b.n	800be18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fcf7 	bl	800c7fa <USBD_CtlError>
          break;
 800be0c:	e004      	b.n	800be18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fcf2 	bl	800c7fa <USBD_CtlError>
          break;
 800be16:	e000      	b.n	800be1a <USBD_StdItfReq+0xc2>
          break;
 800be18:	bf00      	nop
      }
      break;
 800be1a:	e004      	b.n	800be26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fceb 	bl	800c7fa <USBD_CtlError>
      break;
 800be24:	bf00      	nop
  }

  return ret;
 800be26:	7bfb      	ldrb	r3, [r7, #15]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	889b      	ldrh	r3, [r3, #4]
 800be42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be4c:	2b40      	cmp	r3, #64	; 0x40
 800be4e:	d007      	beq.n	800be60 <USBD_StdEPReq+0x30>
 800be50:	2b40      	cmp	r3, #64	; 0x40
 800be52:	f200 817f 	bhi.w	800c154 <USBD_StdEPReq+0x324>
 800be56:	2b00      	cmp	r3, #0
 800be58:	d02a      	beq.n	800beb0 <USBD_StdEPReq+0x80>
 800be5a:	2b20      	cmp	r3, #32
 800be5c:	f040 817a 	bne.w	800c154 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7ff fe83 	bl	800bb70 <USBD_CoreFindEP>
 800be6a:	4603      	mov	r3, r0
 800be6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be6e:	7b7b      	ldrb	r3, [r7, #13]
 800be70:	2bff      	cmp	r3, #255	; 0xff
 800be72:	f000 8174 	beq.w	800c15e <USBD_StdEPReq+0x32e>
 800be76:	7b7b      	ldrb	r3, [r7, #13]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f040 8170 	bne.w	800c15e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be7e:	7b7a      	ldrb	r2, [r7, #13]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800be86:	7b7a      	ldrb	r2, [r7, #13]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	32ae      	adds	r2, #174	; 0xae
 800be8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8163 	beq.w	800c15e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be98:	7b7a      	ldrb	r2, [r7, #13]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	32ae      	adds	r2, #174	; 0xae
 800be9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
 800beaa:	4603      	mov	r3, r0
 800beac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800beae:	e156      	b.n	800c15e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	785b      	ldrb	r3, [r3, #1]
 800beb4:	2b03      	cmp	r3, #3
 800beb6:	d008      	beq.n	800beca <USBD_StdEPReq+0x9a>
 800beb8:	2b03      	cmp	r3, #3
 800beba:	f300 8145 	bgt.w	800c148 <USBD_StdEPReq+0x318>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 809b 	beq.w	800bffa <USBD_StdEPReq+0x1ca>
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d03c      	beq.n	800bf42 <USBD_StdEPReq+0x112>
 800bec8:	e13e      	b.n	800c148 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d002      	beq.n	800bedc <USBD_StdEPReq+0xac>
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d016      	beq.n	800bf08 <USBD_StdEPReq+0xd8>
 800beda:	e02c      	b.n	800bf36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00d      	beq.n	800befe <USBD_StdEPReq+0xce>
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
 800bee4:	2b80      	cmp	r3, #128	; 0x80
 800bee6:	d00a      	beq.n	800befe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f003 ff9b 	bl	800fe28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bef2:	2180      	movs	r1, #128	; 0x80
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f003 ff97 	bl	800fe28 <USBD_LL_StallEP>
 800befa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800befc:	e020      	b.n	800bf40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fc7a 	bl	800c7fa <USBD_CtlError>
              break;
 800bf06:	e01b      	b.n	800bf40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	885b      	ldrh	r3, [r3, #2]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10e      	bne.n	800bf2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00b      	beq.n	800bf2e <USBD_StdEPReq+0xfe>
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	2b80      	cmp	r3, #128	; 0x80
 800bf1a:	d008      	beq.n	800bf2e <USBD_StdEPReq+0xfe>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	88db      	ldrh	r3, [r3, #6]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d104      	bne.n	800bf2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	4619      	mov	r1, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f003 ff7d 	bl	800fe28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fd2e 	bl	800c990 <USBD_CtlSendStatus>

              break;
 800bf34:	e004      	b.n	800bf40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fc5e 	bl	800c7fa <USBD_CtlError>
              break;
 800bf3e:	bf00      	nop
          }
          break;
 800bf40:	e107      	b.n	800c152 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d002      	beq.n	800bf54 <USBD_StdEPReq+0x124>
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d016      	beq.n	800bf80 <USBD_StdEPReq+0x150>
 800bf52:	e04b      	b.n	800bfec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00d      	beq.n	800bf76 <USBD_StdEPReq+0x146>
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	2b80      	cmp	r3, #128	; 0x80
 800bf5e:	d00a      	beq.n	800bf76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f003 ff5f 	bl	800fe28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf6a:	2180      	movs	r1, #128	; 0x80
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f003 ff5b 	bl	800fe28 <USBD_LL_StallEP>
 800bf72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf74:	e040      	b.n	800bff8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fc3e 	bl	800c7fa <USBD_CtlError>
              break;
 800bf7e:	e03b      	b.n	800bff8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	885b      	ldrh	r3, [r3, #2]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d136      	bne.n	800bff6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f003 ff65 	bl	800fe66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fcf7 	bl	800c990 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfa2:	7bbb      	ldrb	r3, [r7, #14]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff fde2 	bl	800bb70 <USBD_CoreFindEP>
 800bfac:	4603      	mov	r3, r0
 800bfae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfb0:	7b7b      	ldrb	r3, [r7, #13]
 800bfb2:	2bff      	cmp	r3, #255	; 0xff
 800bfb4:	d01f      	beq.n	800bff6 <USBD_StdEPReq+0x1c6>
 800bfb6:	7b7b      	ldrb	r3, [r7, #13]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11c      	bne.n	800bff6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bfbc:	7b7a      	ldrb	r2, [r7, #13]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bfc4:	7b7a      	ldrb	r2, [r7, #13]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	32ae      	adds	r2, #174	; 0xae
 800bfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d010      	beq.n	800bff6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfd4:	7b7a      	ldrb	r2, [r7, #13]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	32ae      	adds	r2, #174	; 0xae
 800bfda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	4798      	blx	r3
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bfea:	e004      	b.n	800bff6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fc03 	bl	800c7fa <USBD_CtlError>
              break;
 800bff4:	e000      	b.n	800bff8 <USBD_StdEPReq+0x1c8>
              break;
 800bff6:	bf00      	nop
          }
          break;
 800bff8:	e0ab      	b.n	800c152 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2b02      	cmp	r3, #2
 800c004:	d002      	beq.n	800c00c <USBD_StdEPReq+0x1dc>
 800c006:	2b03      	cmp	r3, #3
 800c008:	d032      	beq.n	800c070 <USBD_StdEPReq+0x240>
 800c00a:	e097      	b.n	800c13c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d007      	beq.n	800c022 <USBD_StdEPReq+0x1f2>
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	2b80      	cmp	r3, #128	; 0x80
 800c016:	d004      	beq.n	800c022 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fbed 	bl	800c7fa <USBD_CtlError>
                break;
 800c020:	e091      	b.n	800c146 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	da0b      	bge.n	800c042 <USBD_StdEPReq+0x212>
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	3310      	adds	r3, #16
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	4413      	add	r3, r2
 800c03e:	3304      	adds	r3, #4
 800c040:	e00b      	b.n	800c05a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c042:	7bbb      	ldrb	r3, [r7, #14]
 800c044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c048:	4613      	mov	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	4413      	add	r3, r2
 800c058:	3304      	adds	r3, #4
 800c05a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2202      	movs	r2, #2
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fc37 	bl	800c8dc <USBD_CtlSendData>
              break;
 800c06e:	e06a      	b.n	800c146 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da11      	bge.n	800c09c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	f003 020f 	and.w	r2, r3, #15
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	440b      	add	r3, r1
 800c08a:	3324      	adds	r3, #36	; 0x24
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d117      	bne.n	800c0c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fbb0 	bl	800c7fa <USBD_CtlError>
                  break;
 800c09a:	e054      	b.n	800c146 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	f003 020f 	and.w	r2, r3, #15
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d104      	bne.n	800c0c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fb9d 	bl	800c7fa <USBD_CtlError>
                  break;
 800c0c0:	e041      	b.n	800c146 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da0b      	bge.n	800c0e2 <USBD_StdEPReq+0x2b2>
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
 800c0cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	3310      	adds	r3, #16
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	4413      	add	r3, r2
 800c0de:	3304      	adds	r3, #4
 800c0e0:	e00b      	b.n	800c0fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
 800c0e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <USBD_StdEPReq+0x2d8>
 800c102:	7bbb      	ldrb	r3, [r7, #14]
 800c104:	2b80      	cmp	r3, #128	; 0x80
 800c106:	d103      	bne.n	800c110 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	e00e      	b.n	800c12e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f003 fec5 	bl	800fea4 <USBD_LL_IsStallEP>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d003      	beq.n	800c128 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2201      	movs	r2, #1
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	e002      	b.n	800c12e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2200      	movs	r2, #0
 800c12c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2202      	movs	r2, #2
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fbd1 	bl	800c8dc <USBD_CtlSendData>
              break;
 800c13a:	e004      	b.n	800c146 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fb5b 	bl	800c7fa <USBD_CtlError>
              break;
 800c144:	bf00      	nop
          }
          break;
 800c146:	e004      	b.n	800c152 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fb55 	bl	800c7fa <USBD_CtlError>
          break;
 800c150:	bf00      	nop
      }
      break;
 800c152:	e005      	b.n	800c160 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fb4f 	bl	800c7fa <USBD_CtlError>
      break;
 800c15c:	e000      	b.n	800c160 <USBD_StdEPReq+0x330>
      break;
 800c15e:	bf00      	nop
  }

  return ret;
 800c160:	7bfb      	ldrb	r3, [r7, #15]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c17e:	2300      	movs	r3, #0
 800c180:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	885b      	ldrh	r3, [r3, #2]
 800c186:	0a1b      	lsrs	r3, r3, #8
 800c188:	b29b      	uxth	r3, r3
 800c18a:	3b01      	subs	r3, #1
 800c18c:	2b06      	cmp	r3, #6
 800c18e:	f200 8128 	bhi.w	800c3e2 <USBD_GetDescriptor+0x276>
 800c192:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <USBD_GetDescriptor+0x2c>)
 800c194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c198:	0800c1b5 	.word	0x0800c1b5
 800c19c:	0800c1cd 	.word	0x0800c1cd
 800c1a0:	0800c20d 	.word	0x0800c20d
 800c1a4:	0800c3e3 	.word	0x0800c3e3
 800c1a8:	0800c3e3 	.word	0x0800c3e3
 800c1ac:	0800c383 	.word	0x0800c383
 800c1b0:	0800c3af 	.word	0x0800c3af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	7c12      	ldrb	r2, [r2, #16]
 800c1c0:	f107 0108 	add.w	r1, r7, #8
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	4798      	blx	r3
 800c1c8:	60f8      	str	r0, [r7, #12]
      break;
 800c1ca:	e112      	b.n	800c3f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7c1b      	ldrb	r3, [r3, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10d      	bne.n	800c1f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1dc:	f107 0208 	add.w	r2, r7, #8
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	4798      	blx	r3
 800c1e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1ee:	e100      	b.n	800c3f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	f107 0208 	add.w	r2, r7, #8
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4798      	blx	r3
 800c200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3301      	adds	r3, #1
 800c206:	2202      	movs	r2, #2
 800c208:	701a      	strb	r2, [r3, #0]
      break;
 800c20a:	e0f2      	b.n	800c3f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	885b      	ldrh	r3, [r3, #2]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b05      	cmp	r3, #5
 800c214:	f200 80ac 	bhi.w	800c370 <USBD_GetDescriptor+0x204>
 800c218:	a201      	add	r2, pc, #4	; (adr r2, 800c220 <USBD_GetDescriptor+0xb4>)
 800c21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21e:	bf00      	nop
 800c220:	0800c239 	.word	0x0800c239
 800c224:	0800c26d 	.word	0x0800c26d
 800c228:	0800c2a1 	.word	0x0800c2a1
 800c22c:	0800c2d5 	.word	0x0800c2d5
 800c230:	0800c309 	.word	0x0800c309
 800c234:	0800c33d 	.word	0x0800c33d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00b      	beq.n	800c25c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	7c12      	ldrb	r2, [r2, #16]
 800c250:	f107 0108 	add.w	r1, r7, #8
 800c254:	4610      	mov	r0, r2
 800c256:	4798      	blx	r3
 800c258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c25a:	e091      	b.n	800c380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 facb 	bl	800c7fa <USBD_CtlError>
            err++;
 800c264:	7afb      	ldrb	r3, [r7, #11]
 800c266:	3301      	adds	r3, #1
 800c268:	72fb      	strb	r3, [r7, #11]
          break;
 800c26a:	e089      	b.n	800c380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	7c12      	ldrb	r2, [r2, #16]
 800c284:	f107 0108 	add.w	r1, r7, #8
 800c288:	4610      	mov	r0, r2
 800c28a:	4798      	blx	r3
 800c28c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c28e:	e077      	b.n	800c380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fab1 	bl	800c7fa <USBD_CtlError>
            err++;
 800c298:	7afb      	ldrb	r3, [r7, #11]
 800c29a:	3301      	adds	r3, #1
 800c29c:	72fb      	strb	r3, [r7, #11]
          break;
 800c29e:	e06f      	b.n	800c380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	7c12      	ldrb	r2, [r2, #16]
 800c2b8:	f107 0108 	add.w	r1, r7, #8
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
 800c2c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2c2:	e05d      	b.n	800c380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fa97 	bl	800c7fa <USBD_CtlError>
            err++;
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2d2:	e055      	b.n	800c380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	7c12      	ldrb	r2, [r2, #16]
 800c2ec:	f107 0108 	add.w	r1, r7, #8
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f6:	e043      	b.n	800c380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fa7d 	bl	800c7fa <USBD_CtlError>
            err++;
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	3301      	adds	r3, #1
 800c304:	72fb      	strb	r3, [r7, #11]
          break;
 800c306:	e03b      	b.n	800c380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c31a:	695b      	ldr	r3, [r3, #20]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7c12      	ldrb	r2, [r2, #16]
 800c320:	f107 0108 	add.w	r1, r7, #8
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c32a:	e029      	b.n	800c380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fa63 	bl	800c7fa <USBD_CtlError>
            err++;
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	3301      	adds	r3, #1
 800c338:	72fb      	strb	r3, [r7, #11]
          break;
 800c33a:	e021      	b.n	800c380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c35e:	e00f      	b.n	800c380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fa49 	bl	800c7fa <USBD_CtlError>
            err++;
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	3301      	adds	r3, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
          break;
 800c36e:	e007      	b.n	800c380 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fa41 	bl	800c7fa <USBD_CtlError>
          err++;
 800c378:	7afb      	ldrb	r3, [r7, #11]
 800c37a:	3301      	adds	r3, #1
 800c37c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c37e:	bf00      	nop
      }
      break;
 800c380:	e037      	b.n	800c3f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	7c1b      	ldrb	r3, [r3, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d109      	bne.n	800c39e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c392:	f107 0208 	add.w	r2, r7, #8
 800c396:	4610      	mov	r0, r2
 800c398:	4798      	blx	r3
 800c39a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c39c:	e029      	b.n	800c3f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fa2a 	bl	800c7fa <USBD_CtlError>
        err++;
 800c3a6:	7afb      	ldrb	r3, [r7, #11]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c3ac:	e021      	b.n	800c3f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	7c1b      	ldrb	r3, [r3, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10d      	bne.n	800c3d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3be:	f107 0208 	add.w	r2, r7, #8
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4798      	blx	r3
 800c3c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	2207      	movs	r2, #7
 800c3ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3d0:	e00f      	b.n	800c3f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fa10 	bl	800c7fa <USBD_CtlError>
        err++;
 800c3da:	7afb      	ldrb	r3, [r7, #11]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	72fb      	strb	r3, [r7, #11]
      break;
 800c3e0:	e007      	b.n	800c3f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fa08 	bl	800c7fa <USBD_CtlError>
      err++;
 800c3ea:	7afb      	ldrb	r3, [r7, #11]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c3f0:	bf00      	nop
  }

  if (err != 0U)
 800c3f2:	7afb      	ldrb	r3, [r7, #11]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d11e      	bne.n	800c436 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	88db      	ldrh	r3, [r3, #6]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d016      	beq.n	800c42e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c400:	893b      	ldrh	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00e      	beq.n	800c424 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	88da      	ldrh	r2, [r3, #6]
 800c40a:	893b      	ldrh	r3, [r7, #8]
 800c40c:	4293      	cmp	r3, r2
 800c40e:	bf28      	it	cs
 800c410:	4613      	movcs	r3, r2
 800c412:	b29b      	uxth	r3, r3
 800c414:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c416:	893b      	ldrh	r3, [r7, #8]
 800c418:	461a      	mov	r2, r3
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fa5d 	bl	800c8dc <USBD_CtlSendData>
 800c422:	e009      	b.n	800c438 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f9e7 	bl	800c7fa <USBD_CtlError>
 800c42c:	e004      	b.n	800c438 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 faae 	bl	800c990 <USBD_CtlSendStatus>
 800c434:	e000      	b.n	800c438 <USBD_GetDescriptor+0x2cc>
    return;
 800c436:	bf00      	nop
  }
}
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop

0800c440 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	889b      	ldrh	r3, [r3, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d131      	bne.n	800c4b6 <USBD_SetAddress+0x76>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	88db      	ldrh	r3, [r3, #6]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d12d      	bne.n	800c4b6 <USBD_SetAddress+0x76>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	885b      	ldrh	r3, [r3, #2]
 800c45e:	2b7f      	cmp	r3, #127	; 0x7f
 800c460:	d829      	bhi.n	800c4b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	885b      	ldrh	r3, [r3, #2]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c46c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b03      	cmp	r3, #3
 800c478:	d104      	bne.n	800c484 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f9bc 	bl	800c7fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c482:	e01d      	b.n	800c4c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7bfa      	ldrb	r2, [r7, #15]
 800c488:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f003 fd33 	bl	800fefc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa7a 	bl	800c990 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d004      	beq.n	800c4ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4aa:	e009      	b.n	800c4c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b4:	e004      	b.n	800c4c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f99e 	bl	800c7fa <USBD_CtlError>
  }
}
 800c4be:	bf00      	nop
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	885b      	ldrh	r3, [r3, #2]
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	4b4e      	ldr	r3, [pc, #312]	; (800c618 <USBD_SetConfig+0x150>)
 800c4de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4e0:	4b4d      	ldr	r3, [pc, #308]	; (800c618 <USBD_SetConfig+0x150>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d905      	bls.n	800c4f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f985 	bl	800c7fa <USBD_CtlError>
    return USBD_FAIL;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e08c      	b.n	800c60e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d002      	beq.n	800c506 <USBD_SetConfig+0x3e>
 800c500:	2b03      	cmp	r3, #3
 800c502:	d029      	beq.n	800c558 <USBD_SetConfig+0x90>
 800c504:	e075      	b.n	800c5f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c506:	4b44      	ldr	r3, [pc, #272]	; (800c618 <USBD_SetConfig+0x150>)
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d020      	beq.n	800c550 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c50e:	4b42      	ldr	r3, [pc, #264]	; (800c618 <USBD_SetConfig+0x150>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c518:	4b3f      	ldr	r3, [pc, #252]	; (800c618 <USBD_SetConfig+0x150>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	4619      	mov	r1, r3
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7fe ffe7 	bl	800b4f2 <USBD_SetClassConfig>
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f962 	bl	800c7fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2202      	movs	r2, #2
 800c53a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c53e:	e065      	b.n	800c60c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fa25 	bl	800c990 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2203      	movs	r2, #3
 800c54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c54e:	e05d      	b.n	800c60c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa1d 	bl	800c990 <USBD_CtlSendStatus>
      break;
 800c556:	e059      	b.n	800c60c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c558:	4b2f      	ldr	r3, [pc, #188]	; (800c618 <USBD_SetConfig+0x150>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d112      	bne.n	800c586 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2202      	movs	r2, #2
 800c564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c568:	4b2b      	ldr	r3, [pc, #172]	; (800c618 <USBD_SetConfig+0x150>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	461a      	mov	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c572:	4b29      	ldr	r3, [pc, #164]	; (800c618 <USBD_SetConfig+0x150>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7fe ffd6 	bl	800b52a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fa06 	bl	800c990 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c584:	e042      	b.n	800c60c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c586:	4b24      	ldr	r3, [pc, #144]	; (800c618 <USBD_SetConfig+0x150>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	d02a      	beq.n	800c5ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7fe ffc4 	bl	800b52a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c5a2:	4b1d      	ldr	r3, [pc, #116]	; (800c618 <USBD_SetConfig+0x150>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5ac:	4b1a      	ldr	r3, [pc, #104]	; (800c618 <USBD_SetConfig+0x150>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7fe ff9d 	bl	800b4f2 <USBD_SetClassConfig>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00f      	beq.n	800c5e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f918 	bl	800c7fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7fe ffa9 	bl	800b52a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5e0:	e014      	b.n	800c60c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f9d4 	bl	800c990 <USBD_CtlSendStatus>
      break;
 800c5e8:	e010      	b.n	800c60c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f9d0 	bl	800c990 <USBD_CtlSendStatus>
      break;
 800c5f0:	e00c      	b.n	800c60c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f900 	bl	800c7fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5fa:	4b07      	ldr	r3, [pc, #28]	; (800c618 <USBD_SetConfig+0x150>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7fe ff92 	bl	800b52a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c606:	2303      	movs	r3, #3
 800c608:	73fb      	strb	r3, [r7, #15]
      break;
 800c60a:	bf00      	nop
  }

  return ret;
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	200007d0 	.word	0x200007d0

0800c61c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	88db      	ldrh	r3, [r3, #6]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d004      	beq.n	800c638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f8e2 	bl	800c7fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c636:	e023      	b.n	800c680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	dc02      	bgt.n	800c64a <USBD_GetConfig+0x2e>
 800c644:	2b00      	cmp	r3, #0
 800c646:	dc03      	bgt.n	800c650 <USBD_GetConfig+0x34>
 800c648:	e015      	b.n	800c676 <USBD_GetConfig+0x5a>
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d00b      	beq.n	800c666 <USBD_GetConfig+0x4a>
 800c64e:	e012      	b.n	800c676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3308      	adds	r3, #8
 800c65a:	2201      	movs	r2, #1
 800c65c:	4619      	mov	r1, r3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f93c 	bl	800c8dc <USBD_CtlSendData>
        break;
 800c664:	e00c      	b.n	800c680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3304      	adds	r3, #4
 800c66a:	2201      	movs	r2, #1
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f934 	bl	800c8dc <USBD_CtlSendData>
        break;
 800c674:	e004      	b.n	800c680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f8be 	bl	800c7fa <USBD_CtlError>
        break;
 800c67e:	bf00      	nop
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	3b01      	subs	r3, #1
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d81e      	bhi.n	800c6de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	88db      	ldrh	r3, [r3, #6]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d004      	beq.n	800c6b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c6a8:	6839      	ldr	r1, [r7, #0]
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f8a5 	bl	800c7fa <USBD_CtlError>
        break;
 800c6b0:	e01a      	b.n	800c6e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d005      	beq.n	800c6ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	f043 0202 	orr.w	r2, r3, #2
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f900 	bl	800c8dc <USBD_CtlSendData>
      break;
 800c6dc:	e004      	b.n	800c6e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f88a 	bl	800c7fa <USBD_CtlError>
      break;
 800c6e6:	bf00      	nop
  }
}
 800c6e8:	bf00      	nop
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	885b      	ldrh	r3, [r3, #2]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d107      	bne.n	800c712 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f940 	bl	800c990 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c710:	e013      	b.n	800c73a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	885b      	ldrh	r3, [r3, #2]
 800c716:	2b02      	cmp	r3, #2
 800c718:	d10b      	bne.n	800c732 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	889b      	ldrh	r3, [r3, #4]
 800c71e:	0a1b      	lsrs	r3, r3, #8
 800c720:	b29b      	uxth	r3, r3
 800c722:	b2da      	uxtb	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f930 	bl	800c990 <USBD_CtlSendStatus>
}
 800c730:	e003      	b.n	800c73a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f860 	bl	800c7fa <USBD_CtlError>
}
 800c73a:	bf00      	nop
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c752:	b2db      	uxtb	r3, r3
 800c754:	3b01      	subs	r3, #1
 800c756:	2b02      	cmp	r3, #2
 800c758:	d80b      	bhi.n	800c772 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	885b      	ldrh	r3, [r3, #2]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d10c      	bne.n	800c77c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f910 	bl	800c990 <USBD_CtlSendStatus>
      }
      break;
 800c770:	e004      	b.n	800c77c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f840 	bl	800c7fa <USBD_CtlError>
      break;
 800c77a:	e000      	b.n	800c77e <USBD_ClrFeature+0x3c>
      break;
 800c77c:	bf00      	nop
  }
}
 800c77e:	bf00      	nop
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	781a      	ldrb	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7ff fa41 	bl	800bc38 <SWAPBYTE>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7ff fa34 	bl	800bc38 <SWAPBYTE>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff fa27 	bl	800bc38 <SWAPBYTE>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	80da      	strh	r2, [r3, #6]
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c804:	2180      	movs	r1, #128	; 0x80
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f003 fb0e 	bl	800fe28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c80c:	2100      	movs	r1, #0
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f003 fb0a 	bl	800fe28 <USBD_LL_StallEP>
}
 800c814:	bf00      	nop
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d036      	beq.n	800c8a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c836:	6938      	ldr	r0, [r7, #16]
 800c838:	f000 f836 	bl	800c8a8 <USBD_GetLen>
 800c83c:	4603      	mov	r3, r0
 800c83e:	3301      	adds	r3, #1
 800c840:	b29b      	uxth	r3, r3
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	b29a      	uxth	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	4413      	add	r3, r2
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	7812      	ldrb	r2, [r2, #0]
 800c854:	701a      	strb	r2, [r3, #0]
  idx++;
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	3301      	adds	r3, #1
 800c85a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	4413      	add	r3, r2
 800c862:	2203      	movs	r2, #3
 800c864:	701a      	strb	r2, [r3, #0]
  idx++;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	3301      	adds	r3, #1
 800c86a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c86c:	e013      	b.n	800c896 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	4413      	add	r3, r2
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	7812      	ldrb	r2, [r2, #0]
 800c878:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3301      	adds	r3, #1
 800c87e:	613b      	str	r3, [r7, #16]
    idx++;
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	3301      	adds	r3, #1
 800c884:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	4413      	add	r3, r2
 800c88c:	2200      	movs	r2, #0
 800c88e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	3301      	adds	r3, #1
 800c894:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e7      	bne.n	800c86e <USBD_GetString+0x52>
 800c89e:	e000      	b.n	800c8a2 <USBD_GetString+0x86>
    return;
 800c8a0:	bf00      	nop
  }
}
 800c8a2:	3718      	adds	r7, #24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c8b8:	e005      	b.n	800c8c6 <USBD_GetLen+0x1e>
  {
    len++;
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1f5      	bne.n	800c8ba <USBD_GetLen+0x12>
  }

  return len;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	2100      	movs	r1, #0
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f003 fb19 	bl	800ff3a <USBD_LL_Transmit>

  return USBD_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	2100      	movs	r1, #0
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f003 fb08 	bl	800ff3a <USBD_LL_Transmit>

  return USBD_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2203      	movs	r2, #3
 800c944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	2100      	movs	r1, #0
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f003 fb0c 	bl	800ff7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	60f8      	str	r0, [r7, #12]
 800c976:	60b9      	str	r1, [r7, #8]
 800c978:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	2100      	movs	r1, #0
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f003 fafb 	bl	800ff7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2204      	movs	r2, #4
 800c99c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f003 fac7 	bl	800ff3a <USBD_LL_Transmit>

  return USBD_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2205      	movs	r2, #5
 800c9c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f003 fad5 	bl	800ff7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <__NVIC_SetPriority>:
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	6039      	str	r1, [r7, #0]
 800c9e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c9e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	db0a      	blt.n	800ca06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	490c      	ldr	r1, [pc, #48]	; (800ca28 <__NVIC_SetPriority+0x4c>)
 800c9f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9fa:	0112      	lsls	r2, r2, #4
 800c9fc:	b2d2      	uxtb	r2, r2
 800c9fe:	440b      	add	r3, r1
 800ca00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ca04:	e00a      	b.n	800ca1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4908      	ldr	r1, [pc, #32]	; (800ca2c <__NVIC_SetPriority+0x50>)
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	3b04      	subs	r3, #4
 800ca14:	0112      	lsls	r2, r2, #4
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	440b      	add	r3, r1
 800ca1a:	761a      	strb	r2, [r3, #24]
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	e000e100 	.word	0xe000e100
 800ca2c:	e000ed00 	.word	0xe000ed00

0800ca30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca34:	2100      	movs	r1, #0
 800ca36:	f06f 0004 	mvn.w	r0, #4
 800ca3a:	f7ff ffcf 	bl	800c9dc <__NVIC_SetPriority>
#endif
}
 800ca3e:	bf00      	nop
 800ca40:	bd80      	pop	{r7, pc}
	...

0800ca44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca4a:	f3ef 8305 	mrs	r3, IPSR
 800ca4e:	603b      	str	r3, [r7, #0]
  return(result);
 800ca50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d003      	beq.n	800ca5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ca56:	f06f 0305 	mvn.w	r3, #5
 800ca5a:	607b      	str	r3, [r7, #4]
 800ca5c:	e00c      	b.n	800ca78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ca5e:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <osKernelInitialize+0x44>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d105      	bne.n	800ca72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ca66:	4b08      	ldr	r3, [pc, #32]	; (800ca88 <osKernelInitialize+0x44>)
 800ca68:	2201      	movs	r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	607b      	str	r3, [r7, #4]
 800ca70:	e002      	b.n	800ca78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ca72:	f04f 33ff 	mov.w	r3, #4294967295
 800ca76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ca78:	687b      	ldr	r3, [r7, #4]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	200007d4 	.word	0x200007d4

0800ca8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca92:	f3ef 8305 	mrs	r3, IPSR
 800ca96:	603b      	str	r3, [r7, #0]
  return(result);
 800ca98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ca9e:	f06f 0305 	mvn.w	r3, #5
 800caa2:	607b      	str	r3, [r7, #4]
 800caa4:	e010      	b.n	800cac8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800caa6:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <osKernelStart+0x48>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d109      	bne.n	800cac2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800caae:	f7ff ffbf 	bl	800ca30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cab2:	4b08      	ldr	r3, [pc, #32]	; (800cad4 <osKernelStart+0x48>)
 800cab4:	2202      	movs	r2, #2
 800cab6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cab8:	f001 f87c 	bl	800dbb4 <vTaskStartScheduler>
      stat = osOK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	607b      	str	r3, [r7, #4]
 800cac0:	e002      	b.n	800cac8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295
 800cac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cac8:	687b      	ldr	r3, [r7, #4]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	200007d4 	.word	0x200007d4

0800cad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08e      	sub	sp, #56	; 0x38
 800cadc:	af04      	add	r7, sp, #16
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cae4:	2300      	movs	r3, #0
 800cae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae8:	f3ef 8305 	mrs	r3, IPSR
 800caec:	617b      	str	r3, [r7, #20]
  return(result);
 800caee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d17e      	bne.n	800cbf2 <osThreadNew+0x11a>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d07b      	beq.n	800cbf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cafa:	2380      	movs	r3, #128	; 0x80
 800cafc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cafe:	2318      	movs	r3, #24
 800cb00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d045      	beq.n	800cb9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d002      	beq.n	800cb20 <osThreadNew+0x48>
        name = attr->name;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d008      	beq.n	800cb46 <osThreadNew+0x6e>
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	2b38      	cmp	r3, #56	; 0x38
 800cb38:	d805      	bhi.n	800cb46 <osThreadNew+0x6e>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	f003 0301 	and.w	r3, r3, #1
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <osThreadNew+0x72>
        return (NULL);
 800cb46:	2300      	movs	r3, #0
 800cb48:	e054      	b.n	800cbf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	695b      	ldr	r3, [r3, #20]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	089b      	lsrs	r3, r3, #2
 800cb58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00e      	beq.n	800cb80 <osThreadNew+0xa8>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	2bbb      	cmp	r3, #187	; 0xbb
 800cb68:	d90a      	bls.n	800cb80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d006      	beq.n	800cb80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <osThreadNew+0xa8>
        mem = 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	61bb      	str	r3, [r7, #24]
 800cb7e:	e010      	b.n	800cba2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10c      	bne.n	800cba2 <osThreadNew+0xca>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d108      	bne.n	800cba2 <osThreadNew+0xca>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d104      	bne.n	800cba2 <osThreadNew+0xca>
          mem = 0;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61bb      	str	r3, [r7, #24]
 800cb9c:	e001      	b.n	800cba2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d110      	bne.n	800cbca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cbb0:	9202      	str	r2, [sp, #8]
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	6a3a      	ldr	r2, [r7, #32]
 800cbbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 fe0c 	bl	800d7dc <xTaskCreateStatic>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	613b      	str	r3, [r7, #16]
 800cbc8:	e013      	b.n	800cbf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d110      	bne.n	800cbf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	f107 0310 	add.w	r3, r7, #16
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f000 fe57 	bl	800d896 <xTaskCreate>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d001      	beq.n	800cbf2 <osThreadNew+0x11a>
            hTask = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cbf2:	693b      	ldr	r3, [r7, #16]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3728      	adds	r7, #40	; 0x28
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc04:	f3ef 8305 	mrs	r3, IPSR
 800cc08:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <osDelay+0x1c>
    stat = osErrorISR;
 800cc10:	f06f 0305 	mvn.w	r3, #5
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	e007      	b.n	800cc28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 ff92 	bl	800db4c <vTaskDelay>
    }
  }

  return (stat);
 800cc28:	68fb      	ldr	r3, [r7, #12]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4a07      	ldr	r2, [pc, #28]	; (800cc60 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	4a06      	ldr	r2, [pc, #24]	; (800cc64 <vApplicationGetIdleTaskMemory+0x30>)
 800cc4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2280      	movs	r2, #128	; 0x80
 800cc50:	601a      	str	r2, [r3, #0]
}
 800cc52:	bf00      	nop
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	200007d8 	.word	0x200007d8
 800cc64:	20000894 	.word	0x20000894

0800cc68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	4a07      	ldr	r2, [pc, #28]	; (800cc94 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	4a06      	ldr	r2, [pc, #24]	; (800cc98 <vApplicationGetTimerTaskMemory+0x30>)
 800cc7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc86:	601a      	str	r2, [r3, #0]
}
 800cc88:	bf00      	nop
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	20000a94 	.word	0x20000a94
 800cc98:	20000b50 	.word	0x20000b50

0800cc9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f103 0208 	add.w	r2, r3, #8
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f103 0208 	add.w	r2, r3, #8
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 0208 	add.w	r2, r3, #8
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccea:	bf00      	nop
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b085      	sub	sp, #20
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	689a      	ldr	r2, [r3, #8]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	683a      	ldr	r2, [r7, #0]
 800cd1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	1c5a      	adds	r2, r3, #1
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	601a      	str	r2, [r3, #0]
}
 800cd32:	bf00      	nop
 800cd34:	3714      	adds	r7, #20
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b085      	sub	sp, #20
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd54:	d103      	bne.n	800cd5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	e00c      	b.n	800cd78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	3308      	adds	r3, #8
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e002      	b.n	800cd6c <vListInsert+0x2e>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d2f6      	bcs.n	800cd66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	683a      	ldr	r2, [r7, #0]
 800cd92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	601a      	str	r2, [r3, #0]
}
 800cda4:	bf00      	nop
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	6892      	ldr	r2, [r2, #8]
 800cdc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	6852      	ldr	r2, [r2, #4]
 800cdd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d103      	bne.n	800cde4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	1e5a      	subs	r2, r3, #1
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce2e:	f002 f901 	bl	800f034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3a:	68f9      	ldr	r1, [r7, #12]
 800ce3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce3e:	fb01 f303 	mul.w	r3, r1, r3
 800ce42:	441a      	add	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	68f9      	ldr	r1, [r7, #12]
 800ce62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce64:	fb01 f303 	mul.w	r3, r1, r3
 800ce68:	441a      	add	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	22ff      	movs	r2, #255	; 0xff
 800ce72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	22ff      	movs	r2, #255	; 0xff
 800ce7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d114      	bne.n	800ceae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d01a      	beq.n	800cec2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3310      	adds	r3, #16
 800ce90:	4618      	mov	r0, r3
 800ce92:	f001 f929 	bl	800e0e8 <xTaskRemoveFromEventList>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d012      	beq.n	800cec2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce9c:	4b0c      	ldr	r3, [pc, #48]	; (800ced0 <xQueueGenericReset+0xcc>)
 800ce9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	e009      	b.n	800cec2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3310      	adds	r3, #16
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fef2 	bl	800cc9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	3324      	adds	r3, #36	; 0x24
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7ff feed 	bl	800cc9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cec2:	f002 f8e7 	bl	800f094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cec6:	2301      	movs	r3, #1
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	e000ed04 	.word	0xe000ed04

0800ced4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08e      	sub	sp, #56	; 0x38
 800ced8:	af02      	add	r7, sp, #8
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf16:	bf00      	nop
 800cf18:	e7fe      	b.n	800cf18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <xQueueGenericCreateStatic+0x52>
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <xQueueGenericCreateStatic+0x56>
 800cf26:	2301      	movs	r3, #1
 800cf28:	e000      	b.n	800cf2c <xQueueGenericCreateStatic+0x58>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	623b      	str	r3, [r7, #32]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <xQueueGenericCreateStatic+0x7e>
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <xQueueGenericCreateStatic+0x82>
 800cf52:	2301      	movs	r3, #1
 800cf54:	e000      	b.n	800cf58 <xQueueGenericCreateStatic+0x84>
 800cf56:	2300      	movs	r3, #0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10a      	bne.n	800cf72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	f383 8811 	msr	BASEPRI, r3
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	61fb      	str	r3, [r7, #28]
}
 800cf6e:	bf00      	nop
 800cf70:	e7fe      	b.n	800cf70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf72:	2350      	movs	r3, #80	; 0x50
 800cf74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2b50      	cmp	r3, #80	; 0x50
 800cf7a:	d00a      	beq.n	800cf92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	61bb      	str	r3, [r7, #24]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00d      	beq.n	800cfba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	68b9      	ldr	r1, [r7, #8]
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f000 f805 	bl	800cfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3730      	adds	r7, #48	; 0x30
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d103      	bne.n	800cfe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	69ba      	ldr	r2, [r7, #24]
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	e002      	b.n	800cfe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cff2:	2101      	movs	r1, #1
 800cff4:	69b8      	ldr	r0, [r7, #24]
 800cff6:	f7ff ff05 	bl	800ce04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	78fa      	ldrb	r2, [r7, #3]
 800cffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d002:	bf00      	nop
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08e      	sub	sp, #56	; 0x38
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d01a:	2300      	movs	r3, #0
 800d01c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <xQueueGenericSend+0x32>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d03a:	bf00      	nop
 800d03c:	e7fe      	b.n	800d03c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d103      	bne.n	800d04c <xQueueGenericSend+0x40>
 800d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <xQueueGenericSend+0x44>
 800d04c:	2301      	movs	r3, #1
 800d04e:	e000      	b.n	800d052 <xQueueGenericSend+0x46>
 800d050:	2300      	movs	r3, #0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <xQueueGenericSend+0x60>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2b02      	cmp	r3, #2
 800d070:	d103      	bne.n	800d07a <xQueueGenericSend+0x6e>
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	2b01      	cmp	r3, #1
 800d078:	d101      	bne.n	800d07e <xQueueGenericSend+0x72>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <xQueueGenericSend+0x74>
 800d07e:	2300      	movs	r3, #0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueGenericSend+0x8e>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	623b      	str	r3, [r7, #32]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09a:	f001 f9e7 	bl	800e46c <xTaskGetSchedulerState>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <xQueueGenericSend+0x9e>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <xQueueGenericSend+0xa2>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <xQueueGenericSend+0xa4>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <xQueueGenericSend+0xbe>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61fb      	str	r3, [r7, #28]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ca:	f001 ffb3 	bl	800f034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d302      	bcc.n	800d0e0 <xQueueGenericSend+0xd4>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d129      	bne.n	800d134 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	68b9      	ldr	r1, [r7, #8]
 800d0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e6:	f000 fa0b 	bl	800d500 <prvCopyDataToQueue>
 800d0ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d010      	beq.n	800d116 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	3324      	adds	r3, #36	; 0x24
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 fff5 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d013      	beq.n	800d12c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d104:	4b3f      	ldr	r3, [pc, #252]	; (800d204 <xQueueGenericSend+0x1f8>)
 800d106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	e00a      	b.n	800d12c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d007      	beq.n	800d12c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d11c:	4b39      	ldr	r3, [pc, #228]	; (800d204 <xQueueGenericSend+0x1f8>)
 800d11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d122:	601a      	str	r2, [r3, #0]
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d12c:	f001 ffb2 	bl	800f094 <vPortExitCritical>
				return pdPASS;
 800d130:	2301      	movs	r3, #1
 800d132:	e063      	b.n	800d1fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d103      	bne.n	800d142 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d13a:	f001 ffab 	bl	800f094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	e05c      	b.n	800d1fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	2b00      	cmp	r3, #0
 800d146:	d106      	bne.n	800d156 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d148:	f107 0314 	add.w	r3, r7, #20
 800d14c:	4618      	mov	r0, r3
 800d14e:	f001 f82f 	bl	800e1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d152:	2301      	movs	r3, #1
 800d154:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d156:	f001 ff9d 	bl	800f094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d15a:	f000 fd9b 	bl	800dc94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d15e:	f001 ff69 	bl	800f034 <vPortEnterCritical>
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d168:	b25b      	sxtb	r3, r3
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d103      	bne.n	800d178 <xQueueGenericSend+0x16c>
 800d170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d172:	2200      	movs	r2, #0
 800d174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d17e:	b25b      	sxtb	r3, r3
 800d180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d184:	d103      	bne.n	800d18e <xQueueGenericSend+0x182>
 800d186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d18e:	f001 ff81 	bl	800f094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d192:	1d3a      	adds	r2, r7, #4
 800d194:	f107 0314 	add.w	r3, r7, #20
 800d198:	4611      	mov	r1, r2
 800d19a:	4618      	mov	r0, r3
 800d19c:	f001 f81e 	bl	800e1dc <xTaskCheckForTimeOut>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d124      	bne.n	800d1f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1a8:	f000 faa2 	bl	800d6f0 <prvIsQueueFull>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d018      	beq.n	800d1e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	3310      	adds	r3, #16
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 ff44 	bl	800e048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1c2:	f000 fa2d 	bl	800d620 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d1c6:	f000 fd73 	bl	800dcb0 <xTaskResumeAll>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f47f af7c 	bne.w	800d0ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d1d2:	4b0c      	ldr	r3, [pc, #48]	; (800d204 <xQueueGenericSend+0x1f8>)
 800d1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	e772      	b.n	800d0ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e6:	f000 fa1b 	bl	800d620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1ea:	f000 fd61 	bl	800dcb0 <xTaskResumeAll>
 800d1ee:	e76c      	b.n	800d0ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1f2:	f000 fa15 	bl	800d620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1f6:	f000 fd5b 	bl	800dcb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d1fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3738      	adds	r7, #56	; 0x38
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	e000ed04 	.word	0xe000ed04

0800d208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b090      	sub	sp, #64	; 0x40
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
 800d214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10a      	bne.n	800d236 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d103      	bne.n	800d244 <xQueueGenericSendFromISR+0x3c>
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <xQueueGenericSendFromISR+0x40>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <xQueueGenericSendFromISR+0x42>
 800d248:	2300      	movs	r3, #0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10a      	bne.n	800d264 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d260:	bf00      	nop
 800d262:	e7fe      	b.n	800d262 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2b02      	cmp	r3, #2
 800d268:	d103      	bne.n	800d272 <xQueueGenericSendFromISR+0x6a>
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d101      	bne.n	800d276 <xQueueGenericSendFromISR+0x6e>
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <xQueueGenericSendFromISR+0x70>
 800d276:	2300      	movs	r3, #0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	623b      	str	r3, [r7, #32]
}
 800d28e:	bf00      	nop
 800d290:	e7fe      	b.n	800d290 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d292:	f001 ffb1 	bl	800f1f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d296:	f3ef 8211 	mrs	r2, BASEPRI
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	61fa      	str	r2, [r7, #28]
 800d2ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d2ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d302      	bcc.n	800d2c4 <xQueueGenericSendFromISR+0xbc>
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d12f      	bne.n	800d324 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2da:	f000 f911 	bl	800d500 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d2de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e6:	d112      	bne.n	800d30e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d016      	beq.n	800d31e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	3324      	adds	r3, #36	; 0x24
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 fef7 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00e      	beq.n	800d31e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00b      	beq.n	800d31e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	e007      	b.n	800d31e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d30e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d312:	3301      	adds	r3, #1
 800d314:	b2db      	uxtb	r3, r3
 800d316:	b25a      	sxtb	r2, r3
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d31e:	2301      	movs	r3, #1
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d322:	e001      	b.n	800d328 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d324:	2300      	movs	r3, #0
 800d326:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d332:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d336:	4618      	mov	r0, r3
 800d338:	3740      	adds	r7, #64	; 0x40
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08c      	sub	sp, #48	; 0x30
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <xQueueReceive+0x30>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	623b      	str	r3, [r7, #32]
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d103      	bne.n	800d37e <xQueueReceive+0x3e>
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <xQueueReceive+0x42>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <xQueueReceive+0x44>
 800d382:	2300      	movs	r3, #0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <xQueueReceive+0x5e>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	61fb      	str	r3, [r7, #28]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d39e:	f001 f865 	bl	800e46c <xTaskGetSchedulerState>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d102      	bne.n	800d3ae <xQueueReceive+0x6e>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <xQueueReceive+0x72>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e000      	b.n	800d3b4 <xQueueReceive+0x74>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10a      	bne.n	800d3ce <xQueueReceive+0x8e>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	61bb      	str	r3, [r7, #24]
}
 800d3ca:	bf00      	nop
 800d3cc:	e7fe      	b.n	800d3cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3ce:	f001 fe31 	bl	800f034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d01f      	beq.n	800d41e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3de:	68b9      	ldr	r1, [r7, #8]
 800d3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3e2:	f000 f8f7 	bl	800d5d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	1e5a      	subs	r2, r3, #1
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00f      	beq.n	800d416 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f8:	3310      	adds	r3, #16
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 fe74 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d007      	beq.n	800d416 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d406:	4b3d      	ldr	r3, [pc, #244]	; (800d4fc <xQueueReceive+0x1bc>)
 800d408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d40c:	601a      	str	r2, [r3, #0]
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d416:	f001 fe3d 	bl	800f094 <vPortExitCritical>
				return pdPASS;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e069      	b.n	800d4f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d103      	bne.n	800d42c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d424:	f001 fe36 	bl	800f094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d428:	2300      	movs	r3, #0
 800d42a:	e062      	b.n	800d4f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d106      	bne.n	800d440 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d432:	f107 0310 	add.w	r3, r7, #16
 800d436:	4618      	mov	r0, r3
 800d438:	f000 feba 	bl	800e1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d43c:	2301      	movs	r3, #1
 800d43e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d440:	f001 fe28 	bl	800f094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d444:	f000 fc26 	bl	800dc94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d448:	f001 fdf4 	bl	800f034 <vPortEnterCritical>
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d452:	b25b      	sxtb	r3, r3
 800d454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d458:	d103      	bne.n	800d462 <xQueueReceive+0x122>
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d468:	b25b      	sxtb	r3, r3
 800d46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d46e:	d103      	bne.n	800d478 <xQueueReceive+0x138>
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	2200      	movs	r2, #0
 800d474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d478:	f001 fe0c 	bl	800f094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d47c:	1d3a      	adds	r2, r7, #4
 800d47e:	f107 0310 	add.w	r3, r7, #16
 800d482:	4611      	mov	r1, r2
 800d484:	4618      	mov	r0, r3
 800d486:	f000 fea9 	bl	800e1dc <xTaskCheckForTimeOut>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d123      	bne.n	800d4d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d492:	f000 f917 	bl	800d6c4 <prvIsQueueEmpty>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d017      	beq.n	800d4cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	3324      	adds	r3, #36	; 0x24
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f000 fdcf 	bl	800e048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ac:	f000 f8b8 	bl	800d620 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4b0:	f000 fbfe 	bl	800dcb0 <xTaskResumeAll>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d189      	bne.n	800d3ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d4ba:	4b10      	ldr	r3, [pc, #64]	; (800d4fc <xQueueReceive+0x1bc>)
 800d4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	e780      	b.n	800d3ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ce:	f000 f8a7 	bl	800d620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4d2:	f000 fbed 	bl	800dcb0 <xTaskResumeAll>
 800d4d6:	e77a      	b.n	800d3ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4da:	f000 f8a1 	bl	800d620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4de:	f000 fbe7 	bl	800dcb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4e4:	f000 f8ee 	bl	800d6c4 <prvIsQueueEmpty>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f43f af6f 	beq.w	800d3ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3730      	adds	r7, #48	; 0x30
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d50c:	2300      	movs	r3, #0
 800d50e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d514:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10d      	bne.n	800d53a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d14d      	bne.n	800d5c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 ffbc 	bl	800e4a8 <xTaskPriorityDisinherit>
 800d530:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	609a      	str	r2, [r3, #8]
 800d538:	e043      	b.n	800d5c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d119      	bne.n	800d574 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6858      	ldr	r0, [r3, #4]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d548:	461a      	mov	r2, r3
 800d54a:	68b9      	ldr	r1, [r7, #8]
 800d54c:	f003 faf1 	bl	8010b32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d558:	441a      	add	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	685a      	ldr	r2, [r3, #4]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	429a      	cmp	r2, r3
 800d568:	d32b      	bcc.n	800d5c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	605a      	str	r2, [r3, #4]
 800d572:	e026      	b.n	800d5c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	68d8      	ldr	r0, [r3, #12]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57c:	461a      	mov	r2, r3
 800d57e:	68b9      	ldr	r1, [r7, #8]
 800d580:	f003 fad7 	bl	8010b32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58c:	425b      	negs	r3, r3
 800d58e:	441a      	add	r2, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d207      	bcs.n	800d5b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a8:	425b      	negs	r3, r3
 800d5aa:	441a      	add	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d105      	bne.n	800d5c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d5ca:	697b      	ldr	r3, [r7, #20]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d018      	beq.n	800d618 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68da      	ldr	r2, [r3, #12]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ee:	441a      	add	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	68da      	ldr	r2, [r3, #12]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d303      	bcc.n	800d608 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68d9      	ldr	r1, [r3, #12]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d610:	461a      	mov	r2, r3
 800d612:	6838      	ldr	r0, [r7, #0]
 800d614:	f003 fa8d 	bl	8010b32 <memcpy>
	}
}
 800d618:	bf00      	nop
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d628:	f001 fd04 	bl	800f034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d632:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d634:	e011      	b.n	800d65a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d012      	beq.n	800d664 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3324      	adds	r3, #36	; 0x24
 800d642:	4618      	mov	r0, r3
 800d644:	f000 fd50 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d64e:	f000 fe27 	bl	800e2a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d652:	7bfb      	ldrb	r3, [r7, #15]
 800d654:	3b01      	subs	r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	dce9      	bgt.n	800d636 <prvUnlockQueue+0x16>
 800d662:	e000      	b.n	800d666 <prvUnlockQueue+0x46>
					break;
 800d664:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	22ff      	movs	r2, #255	; 0xff
 800d66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d66e:	f001 fd11 	bl	800f094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d672:	f001 fcdf 	bl	800f034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d67c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d67e:	e011      	b.n	800d6a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d012      	beq.n	800d6ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3310      	adds	r3, #16
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 fd2b 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d698:	f000 fe02 	bl	800e2a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	dce9      	bgt.n	800d680 <prvUnlockQueue+0x60>
 800d6ac:	e000      	b.n	800d6b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	22ff      	movs	r2, #255	; 0xff
 800d6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d6b8:	f001 fcec 	bl	800f094 <vPortExitCritical>
}
 800d6bc:	bf00      	nop
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6cc:	f001 fcb2 	bl	800f034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	e001      	b.n	800d6e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6e2:	f001 fcd7 	bl	800f094 <vPortExitCritical>

	return xReturn;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6f8:	f001 fc9c 	bl	800f034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d704:	429a      	cmp	r2, r3
 800d706:	d102      	bne.n	800d70e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	e001      	b.n	800d712 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d70e:	2300      	movs	r3, #0
 800d710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d712:	f001 fcbf 	bl	800f094 <vPortExitCritical>

	return xReturn;
 800d716:	68fb      	ldr	r3, [r7, #12]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d72a:	2300      	movs	r3, #0
 800d72c:	60fb      	str	r3, [r7, #12]
 800d72e:	e014      	b.n	800d75a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d730:	4a0f      	ldr	r2, [pc, #60]	; (800d770 <vQueueAddToRegistry+0x50>)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10b      	bne.n	800d754 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d73c:	490c      	ldr	r1, [pc, #48]	; (800d770 <vQueueAddToRegistry+0x50>)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	683a      	ldr	r2, [r7, #0]
 800d742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d746:	4a0a      	ldr	r2, [pc, #40]	; (800d770 <vQueueAddToRegistry+0x50>)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	4413      	add	r3, r2
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d752:	e006      	b.n	800d762 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3301      	adds	r3, #1
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b07      	cmp	r3, #7
 800d75e:	d9e7      	bls.n	800d730 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	3714      	adds	r7, #20
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop
 800d770:	20000f50 	.word	0x20000f50

0800d774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d784:	f001 fc56 	bl	800f034 <vPortEnterCritical>
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d78e:	b25b      	sxtb	r3, r3
 800d790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d794:	d103      	bne.n	800d79e <vQueueWaitForMessageRestricted+0x2a>
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7a4:	b25b      	sxtb	r3, r3
 800d7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7aa:	d103      	bne.n	800d7b4 <vQueueWaitForMessageRestricted+0x40>
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7b4:	f001 fc6e 	bl	800f094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d106      	bne.n	800d7ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	3324      	adds	r3, #36	; 0x24
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	68b9      	ldr	r1, [r7, #8]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 fc61 	bl	800e090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d7ce:	6978      	ldr	r0, [r7, #20]
 800d7d0:	f7ff ff26 	bl	800d620 <prvUnlockQueue>
	}
 800d7d4:	bf00      	nop
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08e      	sub	sp, #56	; 0x38
 800d7e0:	af04      	add	r7, sp, #16
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10a      	bne.n	800d806 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	623b      	str	r3, [r7, #32]
}
 800d802:	bf00      	nop
 800d804:	e7fe      	b.n	800d804 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xTaskCreateStatic+0x46>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	61fb      	str	r3, [r7, #28]
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d822:	23bc      	movs	r3, #188	; 0xbc
 800d824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	2bbc      	cmp	r3, #188	; 0xbc
 800d82a:	d00a      	beq.n	800d842 <xTaskCreateStatic+0x66>
	__asm volatile
 800d82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d830:	f383 8811 	msr	BASEPRI, r3
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	61bb      	str	r3, [r7, #24]
}
 800d83e:	bf00      	nop
 800d840:	e7fe      	b.n	800d840 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d842:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	2b00      	cmp	r3, #0
 800d848:	d01e      	beq.n	800d888 <xTaskCreateStatic+0xac>
 800d84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d01b      	beq.n	800d888 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	2202      	movs	r2, #2
 800d85e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d862:	2300      	movs	r3, #0
 800d864:	9303      	str	r3, [sp, #12]
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	9302      	str	r3, [sp, #8]
 800d86a:	f107 0314 	add.w	r3, r7, #20
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f000 f850 	bl	800d920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d882:	f000 f8f3 	bl	800da6c <prvAddNewTaskToReadyList>
 800d886:	e001      	b.n	800d88c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d888:	2300      	movs	r3, #0
 800d88a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d88c:	697b      	ldr	r3, [r7, #20]
	}
 800d88e:	4618      	mov	r0, r3
 800d890:	3728      	adds	r7, #40	; 0x28
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d896:	b580      	push	{r7, lr}
 800d898:	b08c      	sub	sp, #48	; 0x30
 800d89a:	af04      	add	r7, sp, #16
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	603b      	str	r3, [r7, #0]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8a6:	88fb      	ldrh	r3, [r7, #6]
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f001 fce4 	bl	800f278 <pvPortMalloc>
 800d8b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00e      	beq.n	800d8d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8b8:	20bc      	movs	r0, #188	; 0xbc
 800d8ba:	f001 fcdd 	bl	800f278 <pvPortMalloc>
 800d8be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d003      	beq.n	800d8ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	631a      	str	r2, [r3, #48]	; 0x30
 800d8cc:	e005      	b.n	800d8da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8ce:	6978      	ldr	r0, [r7, #20]
 800d8d0:	f001 fd9e 	bl	800f410 <vPortFree>
 800d8d4:	e001      	b.n	800d8da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d017      	beq.n	800d910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8e8:	88fa      	ldrh	r2, [r7, #6]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9303      	str	r3, [sp, #12]
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	9302      	str	r3, [sp, #8]
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68b9      	ldr	r1, [r7, #8]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 f80e 	bl	800d920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d904:	69f8      	ldr	r0, [r7, #28]
 800d906:	f000 f8b1 	bl	800da6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d90a:	2301      	movs	r3, #1
 800d90c:	61bb      	str	r3, [r7, #24]
 800d90e:	e002      	b.n	800d916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d910:	f04f 33ff 	mov.w	r3, #4294967295
 800d914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d916:	69bb      	ldr	r3, [r7, #24]
	}
 800d918:	4618      	mov	r0, r3
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	461a      	mov	r2, r3
 800d938:	21a5      	movs	r1, #165	; 0xa5
 800d93a:	f003 f908 	bl	8010b4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d948:	3b01      	subs	r3, #1
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	f023 0307 	bic.w	r3, r3, #7
 800d956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	617b      	str	r3, [r7, #20]
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d01f      	beq.n	800d9be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d97e:	2300      	movs	r3, #0
 800d980:	61fb      	str	r3, [r7, #28]
 800d982:	e012      	b.n	800d9aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	4413      	add	r3, r2
 800d98a:	7819      	ldrb	r1, [r3, #0]
 800d98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	4413      	add	r3, r2
 800d992:	3334      	adds	r3, #52	; 0x34
 800d994:	460a      	mov	r2, r1
 800d996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	4413      	add	r3, r2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d006      	beq.n	800d9b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	61fb      	str	r3, [r7, #28]
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	2b0f      	cmp	r3, #15
 800d9ae:	d9e9      	bls.n	800d984 <prvInitialiseNewTask+0x64>
 800d9b0:	e000      	b.n	800d9b4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d9b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9bc:	e003      	b.n	800d9c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	2b37      	cmp	r3, #55	; 0x37
 800d9ca:	d901      	bls.n	800d9d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9cc:	2337      	movs	r3, #55	; 0x37
 800d9ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	2200      	movs	r2, #0
 800d9e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff f978 	bl	800ccdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	3318      	adds	r3, #24
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff f973 	bl	800ccdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0e:	2200      	movs	r2, #0
 800da10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	2200      	movs	r2, #0
 800da18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	3354      	adds	r3, #84	; 0x54
 800da20:	2260      	movs	r2, #96	; 0x60
 800da22:	2100      	movs	r1, #0
 800da24:	4618      	mov	r0, r3
 800da26:	f003 f892 	bl	8010b4e <memset>
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	4a0c      	ldr	r2, [pc, #48]	; (800da60 <prvInitialiseNewTask+0x140>)
 800da2e:	659a      	str	r2, [r3, #88]	; 0x58
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	4a0c      	ldr	r2, [pc, #48]	; (800da64 <prvInitialiseNewTask+0x144>)
 800da34:	65da      	str	r2, [r3, #92]	; 0x5c
 800da36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da38:	4a0b      	ldr	r2, [pc, #44]	; (800da68 <prvInitialiseNewTask+0x148>)
 800da3a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	68f9      	ldr	r1, [r7, #12]
 800da40:	69b8      	ldr	r0, [r7, #24]
 800da42:	f001 f9c7 	bl	800edd4 <pxPortInitialiseStack>
 800da46:	4602      	mov	r2, r0
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da58:	bf00      	nop
 800da5a:	3720      	adds	r7, #32
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	08015bdc 	.word	0x08015bdc
 800da64:	08015bfc 	.word	0x08015bfc
 800da68:	08015bbc 	.word	0x08015bbc

0800da6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da74:	f001 fade 	bl	800f034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da78:	4b2d      	ldr	r3, [pc, #180]	; (800db30 <prvAddNewTaskToReadyList+0xc4>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3301      	adds	r3, #1
 800da7e:	4a2c      	ldr	r2, [pc, #176]	; (800db30 <prvAddNewTaskToReadyList+0xc4>)
 800da80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da82:	4b2c      	ldr	r3, [pc, #176]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d109      	bne.n	800da9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da8a:	4a2a      	ldr	r2, [pc, #168]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da90:	4b27      	ldr	r3, [pc, #156]	; (800db30 <prvAddNewTaskToReadyList+0xc4>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d110      	bne.n	800daba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da98:	f000 fc26 	bl	800e2e8 <prvInitialiseTaskLists>
 800da9c:	e00d      	b.n	800daba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da9e:	4b26      	ldr	r3, [pc, #152]	; (800db38 <prvAddNewTaskToReadyList+0xcc>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d109      	bne.n	800daba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800daa6:	4b23      	ldr	r3, [pc, #140]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d802      	bhi.n	800daba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dab4:	4a1f      	ldr	r2, [pc, #124]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800daba:	4b20      	ldr	r3, [pc, #128]	; (800db3c <prvAddNewTaskToReadyList+0xd0>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	3301      	adds	r3, #1
 800dac0:	4a1e      	ldr	r2, [pc, #120]	; (800db3c <prvAddNewTaskToReadyList+0xd0>)
 800dac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dac4:	4b1d      	ldr	r3, [pc, #116]	; (800db3c <prvAddNewTaskToReadyList+0xd0>)
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad0:	4b1b      	ldr	r3, [pc, #108]	; (800db40 <prvAddNewTaskToReadyList+0xd4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d903      	bls.n	800dae0 <prvAddNewTaskToReadyList+0x74>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dadc:	4a18      	ldr	r2, [pc, #96]	; (800db40 <prvAddNewTaskToReadyList+0xd4>)
 800dade:	6013      	str	r3, [r2, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae4:	4613      	mov	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4413      	add	r3, r2
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	4a15      	ldr	r2, [pc, #84]	; (800db44 <prvAddNewTaskToReadyList+0xd8>)
 800daee:	441a      	add	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	3304      	adds	r3, #4
 800daf4:	4619      	mov	r1, r3
 800daf6:	4610      	mov	r0, r2
 800daf8:	f7ff f8fd 	bl	800ccf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dafc:	f001 faca 	bl	800f094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db00:	4b0d      	ldr	r3, [pc, #52]	; (800db38 <prvAddNewTaskToReadyList+0xcc>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00e      	beq.n	800db26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db08:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db12:	429a      	cmp	r2, r3
 800db14:	d207      	bcs.n	800db26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db16:	4b0c      	ldr	r3, [pc, #48]	; (800db48 <prvAddNewTaskToReadyList+0xdc>)
 800db18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db1c:	601a      	str	r2, [r3, #0]
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db26:	bf00      	nop
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20001464 	.word	0x20001464
 800db34:	20000f90 	.word	0x20000f90
 800db38:	20001470 	.word	0x20001470
 800db3c:	20001480 	.word	0x20001480
 800db40:	2000146c 	.word	0x2000146c
 800db44:	20000f94 	.word	0x20000f94
 800db48:	e000ed04 	.word	0xe000ed04

0800db4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db54:	2300      	movs	r3, #0
 800db56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d017      	beq.n	800db8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db5e:	4b13      	ldr	r3, [pc, #76]	; (800dbac <vTaskDelay+0x60>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00a      	beq.n	800db7c <vTaskDelay+0x30>
	__asm volatile
 800db66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6a:	f383 8811 	msr	BASEPRI, r3
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	f3bf 8f4f 	dsb	sy
 800db76:	60bb      	str	r3, [r7, #8]
}
 800db78:	bf00      	nop
 800db7a:	e7fe      	b.n	800db7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db7c:	f000 f88a 	bl	800dc94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db80:	2100      	movs	r1, #0
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 fd84 	bl	800e690 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db88:	f000 f892 	bl	800dcb0 <xTaskResumeAll>
 800db8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d107      	bne.n	800dba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800db94:	4b06      	ldr	r3, [pc, #24]	; (800dbb0 <vTaskDelay+0x64>)
 800db96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dba4:	bf00      	nop
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	2000148c 	.word	0x2000148c
 800dbb0:	e000ed04 	.word	0xe000ed04

0800dbb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbc2:	463a      	mov	r2, r7
 800dbc4:	1d39      	adds	r1, r7, #4
 800dbc6:	f107 0308 	add.w	r3, r7, #8
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7ff f832 	bl	800cc34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68ba      	ldr	r2, [r7, #8]
 800dbd6:	9202      	str	r2, [sp, #8]
 800dbd8:	9301      	str	r3, [sp, #4]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	460a      	mov	r2, r1
 800dbe2:	4924      	ldr	r1, [pc, #144]	; (800dc74 <vTaskStartScheduler+0xc0>)
 800dbe4:	4824      	ldr	r0, [pc, #144]	; (800dc78 <vTaskStartScheduler+0xc4>)
 800dbe6:	f7ff fdf9 	bl	800d7dc <xTaskCreateStatic>
 800dbea:	4603      	mov	r3, r0
 800dbec:	4a23      	ldr	r2, [pc, #140]	; (800dc7c <vTaskStartScheduler+0xc8>)
 800dbee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbf0:	4b22      	ldr	r3, [pc, #136]	; (800dc7c <vTaskStartScheduler+0xc8>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e001      	b.n	800dc02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d102      	bne.n	800dc0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc08:	f000 fd96 	bl	800e738 <xTimerCreateTimerTask>
 800dc0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d11b      	bne.n	800dc4c <vTaskStartScheduler+0x98>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	613b      	str	r3, [r7, #16]
}
 800dc26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc28:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <vTaskStartScheduler+0xcc>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	3354      	adds	r3, #84	; 0x54
 800dc2e:	4a15      	ldr	r2, [pc, #84]	; (800dc84 <vTaskStartScheduler+0xd0>)
 800dc30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc32:	4b15      	ldr	r3, [pc, #84]	; (800dc88 <vTaskStartScheduler+0xd4>)
 800dc34:	f04f 32ff 	mov.w	r2, #4294967295
 800dc38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc3a:	4b14      	ldr	r3, [pc, #80]	; (800dc8c <vTaskStartScheduler+0xd8>)
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc40:	4b13      	ldr	r3, [pc, #76]	; (800dc90 <vTaskStartScheduler+0xdc>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc46:	f001 f953 	bl	800eef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc4a:	e00e      	b.n	800dc6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc52:	d10a      	bne.n	800dc6a <vTaskStartScheduler+0xb6>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	60fb      	str	r3, [r7, #12]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <vTaskStartScheduler+0xb4>
}
 800dc6a:	bf00      	nop
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	080152b8 	.word	0x080152b8
 800dc78:	0800e2b9 	.word	0x0800e2b9
 800dc7c:	20001488 	.word	0x20001488
 800dc80:	20000f90 	.word	0x20000f90
 800dc84:	200001e8 	.word	0x200001e8
 800dc88:	20001484 	.word	0x20001484
 800dc8c:	20001470 	.word	0x20001470
 800dc90:	20001468 	.word	0x20001468

0800dc94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc94:	b480      	push	{r7}
 800dc96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dc98:	4b04      	ldr	r3, [pc, #16]	; (800dcac <vTaskSuspendAll+0x18>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	4a03      	ldr	r2, [pc, #12]	; (800dcac <vTaskSuspendAll+0x18>)
 800dca0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dca2:	bf00      	nop
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	2000148c 	.word	0x2000148c

0800dcb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dcbe:	4b42      	ldr	r3, [pc, #264]	; (800ddc8 <xTaskResumeAll+0x118>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10a      	bne.n	800dcdc <xTaskResumeAll+0x2c>
	__asm volatile
 800dcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcca:	f383 8811 	msr	BASEPRI, r3
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	603b      	str	r3, [r7, #0]
}
 800dcd8:	bf00      	nop
 800dcda:	e7fe      	b.n	800dcda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcdc:	f001 f9aa 	bl	800f034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dce0:	4b39      	ldr	r3, [pc, #228]	; (800ddc8 <xTaskResumeAll+0x118>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	3b01      	subs	r3, #1
 800dce6:	4a38      	ldr	r2, [pc, #224]	; (800ddc8 <xTaskResumeAll+0x118>)
 800dce8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcea:	4b37      	ldr	r3, [pc, #220]	; (800ddc8 <xTaskResumeAll+0x118>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d162      	bne.n	800ddb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcf2:	4b36      	ldr	r3, [pc, #216]	; (800ddcc <xTaskResumeAll+0x11c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d05e      	beq.n	800ddb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcfa:	e02f      	b.n	800dd5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcfc:	4b34      	ldr	r3, [pc, #208]	; (800ddd0 <xTaskResumeAll+0x120>)
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	3318      	adds	r3, #24
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7ff f851 	bl	800cdb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7ff f84c 	bl	800cdb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1c:	4b2d      	ldr	r3, [pc, #180]	; (800ddd4 <xTaskResumeAll+0x124>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d903      	bls.n	800dd2c <xTaskResumeAll+0x7c>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	4a2a      	ldr	r2, [pc, #168]	; (800ddd4 <xTaskResumeAll+0x124>)
 800dd2a:	6013      	str	r3, [r2, #0]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd30:	4613      	mov	r3, r2
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4a27      	ldr	r2, [pc, #156]	; (800ddd8 <xTaskResumeAll+0x128>)
 800dd3a:	441a      	add	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4619      	mov	r1, r3
 800dd42:	4610      	mov	r0, r2
 800dd44:	f7fe ffd7 	bl	800ccf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4c:	4b23      	ldr	r3, [pc, #140]	; (800dddc <xTaskResumeAll+0x12c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d302      	bcc.n	800dd5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dd56:	4b22      	ldr	r3, [pc, #136]	; (800dde0 <xTaskResumeAll+0x130>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd5c:	4b1c      	ldr	r3, [pc, #112]	; (800ddd0 <xTaskResumeAll+0x120>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1cb      	bne.n	800dcfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd6a:	f000 fb5f 	bl	800e42c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dd6e:	4b1d      	ldr	r3, [pc, #116]	; (800dde4 <xTaskResumeAll+0x134>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d010      	beq.n	800dd9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd7a:	f000 f847 	bl	800de0c <xTaskIncrementTick>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dd84:	4b16      	ldr	r3, [pc, #88]	; (800dde0 <xTaskResumeAll+0x130>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1f1      	bne.n	800dd7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dd96:	4b13      	ldr	r3, [pc, #76]	; (800dde4 <xTaskResumeAll+0x134>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd9c:	4b10      	ldr	r3, [pc, #64]	; (800dde0 <xTaskResumeAll+0x130>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d009      	beq.n	800ddb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dda4:	2301      	movs	r3, #1
 800dda6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dda8:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <xTaskResumeAll+0x138>)
 800ddaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddb8:	f001 f96c 	bl	800f094 <vPortExitCritical>

	return xAlreadyYielded;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	2000148c 	.word	0x2000148c
 800ddcc:	20001464 	.word	0x20001464
 800ddd0:	20001424 	.word	0x20001424
 800ddd4:	2000146c 	.word	0x2000146c
 800ddd8:	20000f94 	.word	0x20000f94
 800dddc:	20000f90 	.word	0x20000f90
 800dde0:	20001478 	.word	0x20001478
 800dde4:	20001474 	.word	0x20001474
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ddf2:	4b05      	ldr	r3, [pc, #20]	; (800de08 <xTaskGetTickCount+0x1c>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ddf8:	687b      	ldr	r3, [r7, #4]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	20001468 	.word	0x20001468

0800de0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de16:	4b4f      	ldr	r3, [pc, #316]	; (800df54 <xTaskIncrementTick+0x148>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f040 808f 	bne.w	800df3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de20:	4b4d      	ldr	r3, [pc, #308]	; (800df58 <xTaskIncrementTick+0x14c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	3301      	adds	r3, #1
 800de26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de28:	4a4b      	ldr	r2, [pc, #300]	; (800df58 <xTaskIncrementTick+0x14c>)
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d120      	bne.n	800de76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800de34:	4b49      	ldr	r3, [pc, #292]	; (800df5c <xTaskIncrementTick+0x150>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00a      	beq.n	800de54 <xTaskIncrementTick+0x48>
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	603b      	str	r3, [r7, #0]
}
 800de50:	bf00      	nop
 800de52:	e7fe      	b.n	800de52 <xTaskIncrementTick+0x46>
 800de54:	4b41      	ldr	r3, [pc, #260]	; (800df5c <xTaskIncrementTick+0x150>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	4b41      	ldr	r3, [pc, #260]	; (800df60 <xTaskIncrementTick+0x154>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a3f      	ldr	r2, [pc, #252]	; (800df5c <xTaskIncrementTick+0x150>)
 800de60:	6013      	str	r3, [r2, #0]
 800de62:	4a3f      	ldr	r2, [pc, #252]	; (800df60 <xTaskIncrementTick+0x154>)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	4b3e      	ldr	r3, [pc, #248]	; (800df64 <xTaskIncrementTick+0x158>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3301      	adds	r3, #1
 800de6e:	4a3d      	ldr	r2, [pc, #244]	; (800df64 <xTaskIncrementTick+0x158>)
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	f000 fadb 	bl	800e42c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de76:	4b3c      	ldr	r3, [pc, #240]	; (800df68 <xTaskIncrementTick+0x15c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d349      	bcc.n	800df14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de80:	4b36      	ldr	r3, [pc, #216]	; (800df5c <xTaskIncrementTick+0x150>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d104      	bne.n	800de94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de8a:	4b37      	ldr	r3, [pc, #220]	; (800df68 <xTaskIncrementTick+0x15c>)
 800de8c:	f04f 32ff 	mov.w	r2, #4294967295
 800de90:	601a      	str	r2, [r3, #0]
					break;
 800de92:	e03f      	b.n	800df14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de94:	4b31      	ldr	r3, [pc, #196]	; (800df5c <xTaskIncrementTick+0x150>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d203      	bcs.n	800deb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800deac:	4a2e      	ldr	r2, [pc, #184]	; (800df68 <xTaskIncrementTick+0x15c>)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800deb2:	e02f      	b.n	800df14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	3304      	adds	r3, #4
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fe ff79 	bl	800cdb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d004      	beq.n	800ded0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	3318      	adds	r3, #24
 800deca:	4618      	mov	r0, r3
 800decc:	f7fe ff70 	bl	800cdb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded4:	4b25      	ldr	r3, [pc, #148]	; (800df6c <xTaskIncrementTick+0x160>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d903      	bls.n	800dee4 <xTaskIncrementTick+0xd8>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee0:	4a22      	ldr	r2, [pc, #136]	; (800df6c <xTaskIncrementTick+0x160>)
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee8:	4613      	mov	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4a1f      	ldr	r2, [pc, #124]	; (800df70 <xTaskIncrementTick+0x164>)
 800def2:	441a      	add	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	3304      	adds	r3, #4
 800def8:	4619      	mov	r1, r3
 800defa:	4610      	mov	r0, r2
 800defc:	f7fe fefb 	bl	800ccf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df04:	4b1b      	ldr	r3, [pc, #108]	; (800df74 <xTaskIncrementTick+0x168>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d3b8      	bcc.n	800de80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800df0e:	2301      	movs	r3, #1
 800df10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df12:	e7b5      	b.n	800de80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df14:	4b17      	ldr	r3, [pc, #92]	; (800df74 <xTaskIncrementTick+0x168>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1a:	4915      	ldr	r1, [pc, #84]	; (800df70 <xTaskIncrementTick+0x164>)
 800df1c:	4613      	mov	r3, r2
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d901      	bls.n	800df30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df30:	4b11      	ldr	r3, [pc, #68]	; (800df78 <xTaskIncrementTick+0x16c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d007      	beq.n	800df48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800df38:	2301      	movs	r3, #1
 800df3a:	617b      	str	r3, [r7, #20]
 800df3c:	e004      	b.n	800df48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df3e:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <xTaskIncrementTick+0x170>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	4a0d      	ldr	r2, [pc, #52]	; (800df7c <xTaskIncrementTick+0x170>)
 800df46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df48:	697b      	ldr	r3, [r7, #20]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	2000148c 	.word	0x2000148c
 800df58:	20001468 	.word	0x20001468
 800df5c:	2000141c 	.word	0x2000141c
 800df60:	20001420 	.word	0x20001420
 800df64:	2000147c 	.word	0x2000147c
 800df68:	20001484 	.word	0x20001484
 800df6c:	2000146c 	.word	0x2000146c
 800df70:	20000f94 	.word	0x20000f94
 800df74:	20000f90 	.word	0x20000f90
 800df78:	20001478 	.word	0x20001478
 800df7c:	20001474 	.word	0x20001474

0800df80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df86:	4b2a      	ldr	r3, [pc, #168]	; (800e030 <vTaskSwitchContext+0xb0>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df8e:	4b29      	ldr	r3, [pc, #164]	; (800e034 <vTaskSwitchContext+0xb4>)
 800df90:	2201      	movs	r2, #1
 800df92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df94:	e046      	b.n	800e024 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800df96:	4b27      	ldr	r3, [pc, #156]	; (800e034 <vTaskSwitchContext+0xb4>)
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df9c:	4b26      	ldr	r3, [pc, #152]	; (800e038 <vTaskSwitchContext+0xb8>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	e010      	b.n	800dfc6 <vTaskSwitchContext+0x46>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10a      	bne.n	800dfc0 <vTaskSwitchContext+0x40>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	607b      	str	r3, [r7, #4]
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <vTaskSwitchContext+0x3e>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	491d      	ldr	r1, [pc, #116]	; (800e03c <vTaskSwitchContext+0xbc>)
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	440b      	add	r3, r1
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0e4      	beq.n	800dfa4 <vTaskSwitchContext+0x24>
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4a15      	ldr	r2, [pc, #84]	; (800e03c <vTaskSwitchContext+0xbc>)
 800dfe6:	4413      	add	r3, r2
 800dfe8:	60bb      	str	r3, [r7, #8]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	685a      	ldr	r2, [r3, #4]
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	605a      	str	r2, [r3, #4]
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	3308      	adds	r3, #8
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d104      	bne.n	800e00a <vTaskSwitchContext+0x8a>
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	605a      	str	r2, [r3, #4]
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	4a0b      	ldr	r2, [pc, #44]	; (800e040 <vTaskSwitchContext+0xc0>)
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	4a08      	ldr	r2, [pc, #32]	; (800e038 <vTaskSwitchContext+0xb8>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e01a:	4b09      	ldr	r3, [pc, #36]	; (800e040 <vTaskSwitchContext+0xc0>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3354      	adds	r3, #84	; 0x54
 800e020:	4a08      	ldr	r2, [pc, #32]	; (800e044 <vTaskSwitchContext+0xc4>)
 800e022:	6013      	str	r3, [r2, #0]
}
 800e024:	bf00      	nop
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	2000148c 	.word	0x2000148c
 800e034:	20001478 	.word	0x20001478
 800e038:	2000146c 	.word	0x2000146c
 800e03c:	20000f94 	.word	0x20000f94
 800e040:	20000f90 	.word	0x20000f90
 800e044:	200001e8 	.word	0x200001e8

0800e048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10a      	bne.n	800e06e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	60fb      	str	r3, [r7, #12]
}
 800e06a:	bf00      	nop
 800e06c:	e7fe      	b.n	800e06c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e06e:	4b07      	ldr	r3, [pc, #28]	; (800e08c <vTaskPlaceOnEventList+0x44>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3318      	adds	r3, #24
 800e074:	4619      	mov	r1, r3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7fe fe61 	bl	800cd3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e07c:	2101      	movs	r1, #1
 800e07e:	6838      	ldr	r0, [r7, #0]
 800e080:	f000 fb06 	bl	800e690 <prvAddCurrentTaskToDelayedList>
}
 800e084:	bf00      	nop
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20000f90 	.word	0x20000f90

0800e090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10a      	bne.n	800e0b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a6:	f383 8811 	msr	BASEPRI, r3
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	617b      	str	r3, [r7, #20]
}
 800e0b4:	bf00      	nop
 800e0b6:	e7fe      	b.n	800e0b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0b8:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3318      	adds	r3, #24
 800e0be:	4619      	mov	r1, r3
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7fe fe18 	bl	800ccf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	68b8      	ldr	r0, [r7, #8]
 800e0d6:	f000 fadb 	bl	800e690 <prvAddCurrentTaskToDelayedList>
	}
 800e0da:	bf00      	nop
 800e0dc:	3718      	adds	r7, #24
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20000f90 	.word	0x20000f90

0800e0e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10a      	bne.n	800e114 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	60fb      	str	r3, [r7, #12]
}
 800e110:	bf00      	nop
 800e112:	e7fe      	b.n	800e112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	3318      	adds	r3, #24
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe fe49 	bl	800cdb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e11e:	4b1e      	ldr	r3, [pc, #120]	; (800e198 <xTaskRemoveFromEventList+0xb0>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d11d      	bne.n	800e162 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	3304      	adds	r3, #4
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fe fe40 	bl	800cdb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e134:	4b19      	ldr	r3, [pc, #100]	; (800e19c <xTaskRemoveFromEventList+0xb4>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d903      	bls.n	800e144 <xTaskRemoveFromEventList+0x5c>
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e140:	4a16      	ldr	r2, [pc, #88]	; (800e19c <xTaskRemoveFromEventList+0xb4>)
 800e142:	6013      	str	r3, [r2, #0]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4a13      	ldr	r2, [pc, #76]	; (800e1a0 <xTaskRemoveFromEventList+0xb8>)
 800e152:	441a      	add	r2, r3
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	3304      	adds	r3, #4
 800e158:	4619      	mov	r1, r3
 800e15a:	4610      	mov	r0, r2
 800e15c:	f7fe fdcb 	bl	800ccf6 <vListInsertEnd>
 800e160:	e005      	b.n	800e16e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	3318      	adds	r3, #24
 800e166:	4619      	mov	r1, r3
 800e168:	480e      	ldr	r0, [pc, #56]	; (800e1a4 <xTaskRemoveFromEventList+0xbc>)
 800e16a:	f7fe fdc4 	bl	800ccf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e172:	4b0d      	ldr	r3, [pc, #52]	; (800e1a8 <xTaskRemoveFromEventList+0xc0>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e178:	429a      	cmp	r2, r3
 800e17a:	d905      	bls.n	800e188 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e17c:	2301      	movs	r3, #1
 800e17e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e180:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <xTaskRemoveFromEventList+0xc4>)
 800e182:	2201      	movs	r2, #1
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	e001      	b.n	800e18c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e188:	2300      	movs	r3, #0
 800e18a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e18c:	697b      	ldr	r3, [r7, #20]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	2000148c 	.word	0x2000148c
 800e19c:	2000146c 	.word	0x2000146c
 800e1a0:	20000f94 	.word	0x20000f94
 800e1a4:	20001424 	.word	0x20001424
 800e1a8:	20000f90 	.word	0x20000f90
 800e1ac:	20001478 	.word	0x20001478

0800e1b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <vTaskInternalSetTimeOutState+0x24>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1c0:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <vTaskInternalSetTimeOutState+0x28>)
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	605a      	str	r2, [r3, #4]
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	2000147c 	.word	0x2000147c
 800e1d8:	20001468 	.word	0x20001468

0800e1dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	613b      	str	r3, [r7, #16]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10a      	bne.n	800e21e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	60fb      	str	r3, [r7, #12]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e21e:	f000 ff09 	bl	800f034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e222:	4b1d      	ldr	r3, [pc, #116]	; (800e298 <xTaskCheckForTimeOut+0xbc>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d102      	bne.n	800e242 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	61fb      	str	r3, [r7, #28]
 800e240:	e023      	b.n	800e28a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	4b15      	ldr	r3, [pc, #84]	; (800e29c <xTaskCheckForTimeOut+0xc0>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d007      	beq.n	800e25e <xTaskCheckForTimeOut+0x82>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	429a      	cmp	r2, r3
 800e256:	d302      	bcc.n	800e25e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e258:	2301      	movs	r3, #1
 800e25a:	61fb      	str	r3, [r7, #28]
 800e25c:	e015      	b.n	800e28a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	429a      	cmp	r2, r3
 800e266:	d20b      	bcs.n	800e280 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	1ad2      	subs	r2, r2, r3
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7ff ff9b 	bl	800e1b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
 800e27e:	e004      	b.n	800e28a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e286:	2301      	movs	r3, #1
 800e288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e28a:	f000 ff03 	bl	800f094 <vPortExitCritical>

	return xReturn;
 800e28e:	69fb      	ldr	r3, [r7, #28]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3720      	adds	r7, #32
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20001468 	.word	0x20001468
 800e29c:	2000147c 	.word	0x2000147c

0800e2a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2a4:	4b03      	ldr	r3, [pc, #12]	; (800e2b4 <vTaskMissedYield+0x14>)
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	601a      	str	r2, [r3, #0]
}
 800e2aa:	bf00      	nop
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	20001478 	.word	0x20001478

0800e2b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2c0:	f000 f852 	bl	800e368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2c4:	4b06      	ldr	r3, [pc, #24]	; (800e2e0 <prvIdleTask+0x28>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d9f9      	bls.n	800e2c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e2cc:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <prvIdleTask+0x2c>)
 800e2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e2dc:	e7f0      	b.n	800e2c0 <prvIdleTask+0x8>
 800e2de:	bf00      	nop
 800e2e0:	20000f94 	.word	0x20000f94
 800e2e4:	e000ed04 	.word	0xe000ed04

0800e2e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	607b      	str	r3, [r7, #4]
 800e2f2:	e00c      	b.n	800e30e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	4a12      	ldr	r2, [pc, #72]	; (800e348 <prvInitialiseTaskLists+0x60>)
 800e300:	4413      	add	r3, r2
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fcca 	bl	800cc9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3301      	adds	r3, #1
 800e30c:	607b      	str	r3, [r7, #4]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b37      	cmp	r3, #55	; 0x37
 800e312:	d9ef      	bls.n	800e2f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e314:	480d      	ldr	r0, [pc, #52]	; (800e34c <prvInitialiseTaskLists+0x64>)
 800e316:	f7fe fcc1 	bl	800cc9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e31a:	480d      	ldr	r0, [pc, #52]	; (800e350 <prvInitialiseTaskLists+0x68>)
 800e31c:	f7fe fcbe 	bl	800cc9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e320:	480c      	ldr	r0, [pc, #48]	; (800e354 <prvInitialiseTaskLists+0x6c>)
 800e322:	f7fe fcbb 	bl	800cc9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e326:	480c      	ldr	r0, [pc, #48]	; (800e358 <prvInitialiseTaskLists+0x70>)
 800e328:	f7fe fcb8 	bl	800cc9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e32c:	480b      	ldr	r0, [pc, #44]	; (800e35c <prvInitialiseTaskLists+0x74>)
 800e32e:	f7fe fcb5 	bl	800cc9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e332:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <prvInitialiseTaskLists+0x78>)
 800e334:	4a05      	ldr	r2, [pc, #20]	; (800e34c <prvInitialiseTaskLists+0x64>)
 800e336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e338:	4b0a      	ldr	r3, [pc, #40]	; (800e364 <prvInitialiseTaskLists+0x7c>)
 800e33a:	4a05      	ldr	r2, [pc, #20]	; (800e350 <prvInitialiseTaskLists+0x68>)
 800e33c:	601a      	str	r2, [r3, #0]
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000f94 	.word	0x20000f94
 800e34c:	200013f4 	.word	0x200013f4
 800e350:	20001408 	.word	0x20001408
 800e354:	20001424 	.word	0x20001424
 800e358:	20001438 	.word	0x20001438
 800e35c:	20001450 	.word	0x20001450
 800e360:	2000141c 	.word	0x2000141c
 800e364:	20001420 	.word	0x20001420

0800e368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e36e:	e019      	b.n	800e3a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e370:	f000 fe60 	bl	800f034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e374:	4b10      	ldr	r3, [pc, #64]	; (800e3b8 <prvCheckTasksWaitingTermination+0x50>)
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3304      	adds	r3, #4
 800e380:	4618      	mov	r0, r3
 800e382:	f7fe fd15 	bl	800cdb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e386:	4b0d      	ldr	r3, [pc, #52]	; (800e3bc <prvCheckTasksWaitingTermination+0x54>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	4a0b      	ldr	r2, [pc, #44]	; (800e3bc <prvCheckTasksWaitingTermination+0x54>)
 800e38e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e390:	4b0b      	ldr	r3, [pc, #44]	; (800e3c0 <prvCheckTasksWaitingTermination+0x58>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3b01      	subs	r3, #1
 800e396:	4a0a      	ldr	r2, [pc, #40]	; (800e3c0 <prvCheckTasksWaitingTermination+0x58>)
 800e398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e39a:	f000 fe7b 	bl	800f094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 f810 	bl	800e3c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3a4:	4b06      	ldr	r3, [pc, #24]	; (800e3c0 <prvCheckTasksWaitingTermination+0x58>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1e1      	bne.n	800e370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3ac:	bf00      	nop
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	20001438 	.word	0x20001438
 800e3bc:	20001464 	.word	0x20001464
 800e3c0:	2000144c 	.word	0x2000144c

0800e3c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3354      	adds	r3, #84	; 0x54
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f003 f947 	bl	8011664 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d108      	bne.n	800e3f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f001 f813 	bl	800f410 <vPortFree>
				vPortFree( pxTCB );
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f001 f810 	bl	800f410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3f0:	e018      	b.n	800e424 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d103      	bne.n	800e404 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f001 f807 	bl	800f410 <vPortFree>
	}
 800e402:	e00f      	b.n	800e424 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d00a      	beq.n	800e424 <prvDeleteTCB+0x60>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	60fb      	str	r3, [r7, #12]
}
 800e420:	bf00      	nop
 800e422:	e7fe      	b.n	800e422 <prvDeleteTCB+0x5e>
	}
 800e424:	bf00      	nop
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e432:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <prvResetNextTaskUnblockTime+0x38>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d104      	bne.n	800e446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e43c:	4b0a      	ldr	r3, [pc, #40]	; (800e468 <prvResetNextTaskUnblockTime+0x3c>)
 800e43e:	f04f 32ff 	mov.w	r2, #4294967295
 800e442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e444:	e008      	b.n	800e458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e446:	4b07      	ldr	r3, [pc, #28]	; (800e464 <prvResetNextTaskUnblockTime+0x38>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	4a04      	ldr	r2, [pc, #16]	; (800e468 <prvResetNextTaskUnblockTime+0x3c>)
 800e456:	6013      	str	r3, [r2, #0]
}
 800e458:	bf00      	nop
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr
 800e464:	2000141c 	.word	0x2000141c
 800e468:	20001484 	.word	0x20001484

0800e46c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e472:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <xTaskGetSchedulerState+0x34>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d102      	bne.n	800e480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e47a:	2301      	movs	r3, #1
 800e47c:	607b      	str	r3, [r7, #4]
 800e47e:	e008      	b.n	800e492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e480:	4b08      	ldr	r3, [pc, #32]	; (800e4a4 <xTaskGetSchedulerState+0x38>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e488:	2302      	movs	r3, #2
 800e48a:	607b      	str	r3, [r7, #4]
 800e48c:	e001      	b.n	800e492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e48e:	2300      	movs	r3, #0
 800e490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e492:	687b      	ldr	r3, [r7, #4]
	}
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	20001470 	.word	0x20001470
 800e4a4:	2000148c 	.word	0x2000148c

0800e4a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d056      	beq.n	800e56c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4be:	4b2e      	ldr	r3, [pc, #184]	; (800e578 <xTaskPriorityDisinherit+0xd0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d00a      	beq.n	800e4de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	60fb      	str	r3, [r7, #12]
}
 800e4da:	bf00      	nop
 800e4dc:	e7fe      	b.n	800e4dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10a      	bne.n	800e4fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ea:	f383 8811 	msr	BASEPRI, r3
 800e4ee:	f3bf 8f6f 	isb	sy
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	60bb      	str	r3, [r7, #8]
}
 800e4f8:	bf00      	nop
 800e4fa:	e7fe      	b.n	800e4fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e500:	1e5a      	subs	r2, r3, #1
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e50e:	429a      	cmp	r2, r3
 800e510:	d02c      	beq.n	800e56c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e516:	2b00      	cmp	r3, #0
 800e518:	d128      	bne.n	800e56c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	3304      	adds	r3, #4
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fe fc46 	bl	800cdb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e530:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53c:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <xTaskPriorityDisinherit+0xd4>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	d903      	bls.n	800e54c <xTaskPriorityDisinherit+0xa4>
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e548:	4a0c      	ldr	r2, [pc, #48]	; (800e57c <xTaskPriorityDisinherit+0xd4>)
 800e54a:	6013      	str	r3, [r2, #0]
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e550:	4613      	mov	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	4413      	add	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4a09      	ldr	r2, [pc, #36]	; (800e580 <xTaskPriorityDisinherit+0xd8>)
 800e55a:	441a      	add	r2, r3
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4610      	mov	r0, r2
 800e564:	f7fe fbc7 	bl	800ccf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e568:	2301      	movs	r3, #1
 800e56a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e56c:	697b      	ldr	r3, [r7, #20]
	}
 800e56e:	4618      	mov	r0, r3
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20000f90 	.word	0x20000f90
 800e57c:	2000146c 	.word	0x2000146c
 800e580:	20000f94 	.word	0x20000f94

0800e584 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e592:	f000 fd4f 	bl	800f034 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e596:	4b29      	ldr	r3, [pc, #164]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d01c      	beq.n	800e5de <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e5a4:	4b25      	ldr	r3, [pc, #148]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	43d2      	mvns	r2, r2
 800e5b0:	400a      	ands	r2, r1
 800e5b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e5b6:	4b21      	ldr	r3, [pc, #132]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00b      	beq.n	800e5de <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	6838      	ldr	r0, [r7, #0]
 800e5ca:	f000 f861 	bl	800e690 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e5ce:	4b1c      	ldr	r3, [pc, #112]	; (800e640 <xTaskNotifyWait+0xbc>)
 800e5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e5de:	f000 fd59 	bl	800f094 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e5e2:	f000 fd27 	bl	800f034 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e5ec:	4b13      	ldr	r3, [pc, #76]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e5f8:	4b10      	ldr	r3, [pc, #64]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b02      	cmp	r3, #2
 800e604:	d002      	beq.n	800e60c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e606:	2300      	movs	r3, #0
 800e608:	617b      	str	r3, [r7, #20]
 800e60a:	e00a      	b.n	800e622 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e60c:	4b0b      	ldr	r3, [pc, #44]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	43d2      	mvns	r2, r2
 800e618:	400a      	ands	r2, r1
 800e61a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800e61e:	2301      	movs	r3, #1
 800e620:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e622:	4b06      	ldr	r3, [pc, #24]	; (800e63c <xTaskNotifyWait+0xb8>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2200      	movs	r2, #0
 800e628:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800e62c:	f000 fd32 	bl	800f094 <vPortExitCritical>

		return xReturn;
 800e630:	697b      	ldr	r3, [r7, #20]
	}
 800e632:	4618      	mov	r0, r3
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000f90 	.word	0x20000f90
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d102      	bne.n	800e65a <ulTaskNotifyValueClear+0x16>
 800e654:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <ulTaskNotifyValueClear+0x48>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	e000      	b.n	800e65c <ulTaskNotifyValueClear+0x18>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 800e65e:	f000 fce9 	bl	800f034 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e662:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <ulTaskNotifyValueClear+0x48>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e66a:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	43db      	mvns	r3, r3
 800e676:	401a      	ands	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 800e67e:	f000 fd09 	bl	800f094 <vPortExitCritical>

		return ulReturn;
 800e682:	68bb      	ldr	r3, [r7, #8]
	}
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20000f90 	.word	0x20000f90

0800e690 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e69a:	4b21      	ldr	r3, [pc, #132]	; (800e720 <prvAddCurrentTaskToDelayedList+0x90>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6a0:	4b20      	ldr	r3, [pc, #128]	; (800e724 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe fb82 	bl	800cdb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b2:	d10a      	bne.n	800e6ca <prvAddCurrentTaskToDelayedList+0x3a>
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d007      	beq.n	800e6ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6ba:	4b1a      	ldr	r3, [pc, #104]	; (800e724 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3304      	adds	r3, #4
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	4819      	ldr	r0, [pc, #100]	; (800e728 <prvAddCurrentTaskToDelayedList+0x98>)
 800e6c4:	f7fe fb17 	bl	800ccf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6c8:	e026      	b.n	800e718 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6d2:	4b14      	ldr	r3, [pc, #80]	; (800e724 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	68ba      	ldr	r2, [r7, #8]
 800e6d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d209      	bcs.n	800e6f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6e2:	4b12      	ldr	r3, [pc, #72]	; (800e72c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	4b0f      	ldr	r3, [pc, #60]	; (800e724 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	f7fe fb25 	bl	800cd3e <vListInsert>
}
 800e6f4:	e010      	b.n	800e718 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6f6:	4b0e      	ldr	r3, [pc, #56]	; (800e730 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	4b0a      	ldr	r3, [pc, #40]	; (800e724 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3304      	adds	r3, #4
 800e700:	4619      	mov	r1, r3
 800e702:	4610      	mov	r0, r2
 800e704:	f7fe fb1b 	bl	800cd3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68ba      	ldr	r2, [r7, #8]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d202      	bcs.n	800e718 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e712:	4a08      	ldr	r2, [pc, #32]	; (800e734 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	6013      	str	r3, [r2, #0]
}
 800e718:	bf00      	nop
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20001468 	.word	0x20001468
 800e724:	20000f90 	.word	0x20000f90
 800e728:	20001450 	.word	0x20001450
 800e72c:	20001420 	.word	0x20001420
 800e730:	2000141c 	.word	0x2000141c
 800e734:	20001484 	.word	0x20001484

0800e738 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b08a      	sub	sp, #40	; 0x28
 800e73c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e73e:	2300      	movs	r3, #0
 800e740:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e742:	f000 fb07 	bl	800ed54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e746:	4b1c      	ldr	r3, [pc, #112]	; (800e7b8 <xTimerCreateTimerTask+0x80>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d021      	beq.n	800e792 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e74e:	2300      	movs	r3, #0
 800e750:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e752:	2300      	movs	r3, #0
 800e754:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e756:	1d3a      	adds	r2, r7, #4
 800e758:	f107 0108 	add.w	r1, r7, #8
 800e75c:	f107 030c 	add.w	r3, r7, #12
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe fa81 	bl	800cc68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e766:	6879      	ldr	r1, [r7, #4]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	9202      	str	r2, [sp, #8]
 800e76e:	9301      	str	r3, [sp, #4]
 800e770:	2302      	movs	r3, #2
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	460a      	mov	r2, r1
 800e778:	4910      	ldr	r1, [pc, #64]	; (800e7bc <xTimerCreateTimerTask+0x84>)
 800e77a:	4811      	ldr	r0, [pc, #68]	; (800e7c0 <xTimerCreateTimerTask+0x88>)
 800e77c:	f7ff f82e 	bl	800d7dc <xTaskCreateStatic>
 800e780:	4603      	mov	r3, r0
 800e782:	4a10      	ldr	r2, [pc, #64]	; (800e7c4 <xTimerCreateTimerTask+0x8c>)
 800e784:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e786:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <xTimerCreateTimerTask+0x8c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d001      	beq.n	800e792 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e78e:	2301      	movs	r3, #1
 800e790:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d10a      	bne.n	800e7ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	613b      	str	r3, [r7, #16]
}
 800e7aa:	bf00      	nop
 800e7ac:	e7fe      	b.n	800e7ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e7ae:	697b      	ldr	r3, [r7, #20]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	200014c0 	.word	0x200014c0
 800e7bc:	080152c0 	.word	0x080152c0
 800e7c0:	0800e8fd 	.word	0x0800e8fd
 800e7c4:	200014c4 	.word	0x200014c4

0800e7c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08a      	sub	sp, #40	; 0x28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10a      	bne.n	800e7f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	623b      	str	r3, [r7, #32]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e7f6:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <xTimerGenericCommand+0x98>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d02a      	beq.n	800e854 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b05      	cmp	r3, #5
 800e80e:	dc18      	bgt.n	800e842 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e810:	f7ff fe2c 	bl	800e46c <xTaskGetSchedulerState>
 800e814:	4603      	mov	r3, r0
 800e816:	2b02      	cmp	r3, #2
 800e818:	d109      	bne.n	800e82e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e81a:	4b11      	ldr	r3, [pc, #68]	; (800e860 <xTimerGenericCommand+0x98>)
 800e81c:	6818      	ldr	r0, [r3, #0]
 800e81e:	f107 0110 	add.w	r1, r7, #16
 800e822:	2300      	movs	r3, #0
 800e824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e826:	f7fe fbf1 	bl	800d00c <xQueueGenericSend>
 800e82a:	6278      	str	r0, [r7, #36]	; 0x24
 800e82c:	e012      	b.n	800e854 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e82e:	4b0c      	ldr	r3, [pc, #48]	; (800e860 <xTimerGenericCommand+0x98>)
 800e830:	6818      	ldr	r0, [r3, #0]
 800e832:	f107 0110 	add.w	r1, r7, #16
 800e836:	2300      	movs	r3, #0
 800e838:	2200      	movs	r2, #0
 800e83a:	f7fe fbe7 	bl	800d00c <xQueueGenericSend>
 800e83e:	6278      	str	r0, [r7, #36]	; 0x24
 800e840:	e008      	b.n	800e854 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e842:	4b07      	ldr	r3, [pc, #28]	; (800e860 <xTimerGenericCommand+0x98>)
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	f107 0110 	add.w	r1, r7, #16
 800e84a:	2300      	movs	r3, #0
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	f7fe fcdb 	bl	800d208 <xQueueGenericSendFromISR>
 800e852:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e856:	4618      	mov	r0, r3
 800e858:	3728      	adds	r7, #40	; 0x28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	200014c0 	.word	0x200014c0

0800e864 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b088      	sub	sp, #32
 800e868:	af02      	add	r7, sp, #8
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e86e:	4b22      	ldr	r3, [pc, #136]	; (800e8f8 <prvProcessExpiredTimer+0x94>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	3304      	adds	r3, #4
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe fa97 	bl	800cdb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e888:	f003 0304 	and.w	r3, r3, #4
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d022      	beq.n	800e8d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	699a      	ldr	r2, [r3, #24]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	18d1      	adds	r1, r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	6978      	ldr	r0, [r7, #20]
 800e89e:	f000 f8d1 	bl	800ea44 <prvInsertTimerInActiveList>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01f      	beq.n	800e8e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	6978      	ldr	r0, [r7, #20]
 800e8b4:	f7ff ff88 	bl	800e7c8 <xTimerGenericCommand>
 800e8b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d113      	bne.n	800e8e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	60fb      	str	r3, [r7, #12]
}
 800e8d2:	bf00      	nop
 800e8d4:	e7fe      	b.n	800e8d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8dc:	f023 0301 	bic.w	r3, r3, #1
 800e8e0:	b2da      	uxtb	r2, r3
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	6a1b      	ldr	r3, [r3, #32]
 800e8ec:	6978      	ldr	r0, [r7, #20]
 800e8ee:	4798      	blx	r3
}
 800e8f0:	bf00      	nop
 800e8f2:	3718      	adds	r7, #24
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	200014b8 	.word	0x200014b8

0800e8fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e904:	f107 0308 	add.w	r3, r7, #8
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 f857 	bl	800e9bc <prvGetNextExpireTime>
 800e90e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	4619      	mov	r1, r3
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 f803 	bl	800e920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e91a:	f000 f8d5 	bl	800eac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e91e:	e7f1      	b.n	800e904 <prvTimerTask+0x8>

0800e920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e92a:	f7ff f9b3 	bl	800dc94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e92e:	f107 0308 	add.w	r3, r7, #8
 800e932:	4618      	mov	r0, r3
 800e934:	f000 f866 	bl	800ea04 <prvSampleTimeNow>
 800e938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d130      	bne.n	800e9a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10a      	bne.n	800e95c <prvProcessTimerOrBlockTask+0x3c>
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d806      	bhi.n	800e95c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e94e:	f7ff f9af 	bl	800dcb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e952:	68f9      	ldr	r1, [r7, #12]
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f7ff ff85 	bl	800e864 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e95a:	e024      	b.n	800e9a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d008      	beq.n	800e974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e962:	4b13      	ldr	r3, [pc, #76]	; (800e9b0 <prvProcessTimerOrBlockTask+0x90>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <prvProcessTimerOrBlockTask+0x50>
 800e96c:	2301      	movs	r3, #1
 800e96e:	e000      	b.n	800e972 <prvProcessTimerOrBlockTask+0x52>
 800e970:	2300      	movs	r3, #0
 800e972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e974:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <prvProcessTimerOrBlockTask+0x94>)
 800e976:	6818      	ldr	r0, [r3, #0]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	4619      	mov	r1, r3
 800e982:	f7fe fef7 	bl	800d774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e986:	f7ff f993 	bl	800dcb0 <xTaskResumeAll>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10a      	bne.n	800e9a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e990:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <prvProcessTimerOrBlockTask+0x98>)
 800e992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e996:	601a      	str	r2, [r3, #0]
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	f3bf 8f6f 	isb	sy
}
 800e9a0:	e001      	b.n	800e9a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9a2:	f7ff f985 	bl	800dcb0 <xTaskResumeAll>
}
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	200014bc 	.word	0x200014bc
 800e9b4:	200014c0 	.word	0x200014c0
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ea00 <prvGetNextExpireTime+0x44>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <prvGetNextExpireTime+0x16>
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	e000      	b.n	800e9d4 <prvGetNextExpireTime+0x18>
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d105      	bne.n	800e9ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e9e0:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <prvGetNextExpireTime+0x44>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	60fb      	str	r3, [r7, #12]
 800e9ea:	e001      	b.n	800e9f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	200014b8 	.word	0x200014b8

0800ea04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea0c:	f7ff f9ee 	bl	800ddec <xTaskGetTickCount>
 800ea10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea12:	4b0b      	ldr	r3, [pc, #44]	; (800ea40 <prvSampleTimeNow+0x3c>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d205      	bcs.n	800ea28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea1c:	f000 f936 	bl	800ec8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	601a      	str	r2, [r3, #0]
 800ea26:	e002      	b.n	800ea2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea2e:	4a04      	ldr	r2, [pc, #16]	; (800ea40 <prvSampleTimeNow+0x3c>)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea34:	68fb      	ldr	r3, [r7, #12]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	200014c8 	.word	0x200014c8

0800ea44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea52:	2300      	movs	r3, #0
 800ea54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	68ba      	ldr	r2, [r7, #8]
 800ea5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d812      	bhi.n	800ea90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d302      	bcc.n	800ea7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	e01b      	b.n	800eab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea7e:	4b10      	ldr	r3, [pc, #64]	; (800eac0 <prvInsertTimerInActiveList+0x7c>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3304      	adds	r3, #4
 800ea86:	4619      	mov	r1, r3
 800ea88:	4610      	mov	r0, r2
 800ea8a:	f7fe f958 	bl	800cd3e <vListInsert>
 800ea8e:	e012      	b.n	800eab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d206      	bcs.n	800eaa6 <prvInsertTimerInActiveList+0x62>
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d302      	bcc.n	800eaa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	e007      	b.n	800eab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaa6:	4b07      	ldr	r3, [pc, #28]	; (800eac4 <prvInsertTimerInActiveList+0x80>)
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4619      	mov	r1, r3
 800eab0:	4610      	mov	r0, r2
 800eab2:	f7fe f944 	bl	800cd3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eab6:	697b      	ldr	r3, [r7, #20]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	200014bc 	.word	0x200014bc
 800eac4:	200014b8 	.word	0x200014b8

0800eac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b08e      	sub	sp, #56	; 0x38
 800eacc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eace:	e0ca      	b.n	800ec66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	da18      	bge.n	800eb08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ead6:	1d3b      	adds	r3, r7, #4
 800ead8:	3304      	adds	r3, #4
 800eada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10a      	bne.n	800eaf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	61fb      	str	r3, [r7, #28]
}
 800eaf4:	bf00      	nop
 800eaf6:	e7fe      	b.n	800eaf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eafe:	6850      	ldr	r0, [r2, #4]
 800eb00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb02:	6892      	ldr	r2, [r2, #8]
 800eb04:	4611      	mov	r1, r2
 800eb06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f2c0 80aa 	blt.w	800ec64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb16:	695b      	ldr	r3, [r3, #20]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d004      	beq.n	800eb26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	3304      	adds	r3, #4
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe f945 	bl	800cdb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb26:	463b      	mov	r3, r7
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7ff ff6b 	bl	800ea04 <prvSampleTimeNow>
 800eb2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b09      	cmp	r3, #9
 800eb34:	f200 8097 	bhi.w	800ec66 <prvProcessReceivedCommands+0x19e>
 800eb38:	a201      	add	r2, pc, #4	; (adr r2, 800eb40 <prvProcessReceivedCommands+0x78>)
 800eb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3e:	bf00      	nop
 800eb40:	0800eb69 	.word	0x0800eb69
 800eb44:	0800eb69 	.word	0x0800eb69
 800eb48:	0800eb69 	.word	0x0800eb69
 800eb4c:	0800ebdd 	.word	0x0800ebdd
 800eb50:	0800ebf1 	.word	0x0800ebf1
 800eb54:	0800ec3b 	.word	0x0800ec3b
 800eb58:	0800eb69 	.word	0x0800eb69
 800eb5c:	0800eb69 	.word	0x0800eb69
 800eb60:	0800ebdd 	.word	0x0800ebdd
 800eb64:	0800ebf1 	.word	0x0800ebf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb6e:	f043 0301 	orr.w	r3, r3, #1
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	18d1      	adds	r1, r2, r3
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb88:	f7ff ff5c 	bl	800ea44 <prvInsertTimerInActiveList>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d069      	beq.n	800ec66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eba0:	f003 0304 	and.w	r3, r3, #4
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d05e      	beq.n	800ec66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	441a      	add	r2, r3
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebba:	f7ff fe05 	bl	800e7c8 <xTimerGenericCommand>
 800ebbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ebc0:	6a3b      	ldr	r3, [r7, #32]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d14f      	bne.n	800ec66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	61bb      	str	r3, [r7, #24]
}
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebe2:	f023 0301 	bic.w	r3, r3, #1
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ebee:	e03a      	b.n	800ec66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebf6:	f043 0301 	orr.w	r3, r3, #1
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10a      	bne.n	800ec26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	617b      	str	r3, [r7, #20]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	699a      	ldr	r2, [r3, #24]
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	18d1      	adds	r1, r2, r3
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec34:	f7ff ff06 	bl	800ea44 <prvInsertTimerInActiveList>
					break;
 800ec38:	e015      	b.n	800ec66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec40:	f003 0302 	and.w	r3, r3, #2
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d103      	bne.n	800ec50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ec48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec4a:	f000 fbe1 	bl	800f410 <vPortFree>
 800ec4e:	e00a      	b.n	800ec66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec56:	f023 0301 	bic.w	r3, r3, #1
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ec62:	e000      	b.n	800ec66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ec64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec66:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <prvProcessReceivedCommands+0x1c0>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	1d39      	adds	r1, r7, #4
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe fb66 	bl	800d340 <xQueueReceive>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f47f af2a 	bne.w	800ead0 <prvProcessReceivedCommands+0x8>
	}
}
 800ec7c:	bf00      	nop
 800ec7e:	bf00      	nop
 800ec80:	3730      	adds	r7, #48	; 0x30
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	200014c0 	.word	0x200014c0

0800ec8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b088      	sub	sp, #32
 800ec90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec92:	e048      	b.n	800ed26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec94:	4b2d      	ldr	r3, [pc, #180]	; (800ed4c <prvSwitchTimerLists+0xc0>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec9e:	4b2b      	ldr	r3, [pc, #172]	; (800ed4c <prvSwitchTimerLists+0xc0>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fe f87f 	bl	800cdb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6a1b      	ldr	r3, [r3, #32]
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecc0:	f003 0304 	and.w	r3, r3, #4
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d02e      	beq.n	800ed26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	699b      	ldr	r3, [r3, #24]
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	4413      	add	r3, r2
 800ecd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ecd2:	68ba      	ldr	r2, [r7, #8]
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d90e      	bls.n	800ecf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	68ba      	ldr	r2, [r7, #8]
 800ecde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ece6:	4b19      	ldr	r3, [pc, #100]	; (800ed4c <prvSwitchTimerLists+0xc0>)
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3304      	adds	r3, #4
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	f7fe f824 	bl	800cd3e <vListInsert>
 800ecf6:	e016      	b.n	800ed26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	9300      	str	r3, [sp, #0]
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	693a      	ldr	r2, [r7, #16]
 800ed00:	2100      	movs	r1, #0
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff fd60 	bl	800e7c8 <xTimerGenericCommand>
 800ed08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10a      	bne.n	800ed26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	603b      	str	r3, [r7, #0]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed26:	4b09      	ldr	r3, [pc, #36]	; (800ed4c <prvSwitchTimerLists+0xc0>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1b1      	bne.n	800ec94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed30:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <prvSwitchTimerLists+0xc0>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed36:	4b06      	ldr	r3, [pc, #24]	; (800ed50 <prvSwitchTimerLists+0xc4>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a04      	ldr	r2, [pc, #16]	; (800ed4c <prvSwitchTimerLists+0xc0>)
 800ed3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed3e:	4a04      	ldr	r2, [pc, #16]	; (800ed50 <prvSwitchTimerLists+0xc4>)
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	6013      	str	r3, [r2, #0]
}
 800ed44:	bf00      	nop
 800ed46:	3718      	adds	r7, #24
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	200014b8 	.word	0x200014b8
 800ed50:	200014bc 	.word	0x200014bc

0800ed54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed5a:	f000 f96b 	bl	800f034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed5e:	4b15      	ldr	r3, [pc, #84]	; (800edb4 <prvCheckForValidListAndQueue+0x60>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d120      	bne.n	800eda8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed66:	4814      	ldr	r0, [pc, #80]	; (800edb8 <prvCheckForValidListAndQueue+0x64>)
 800ed68:	f7fd ff98 	bl	800cc9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed6c:	4813      	ldr	r0, [pc, #76]	; (800edbc <prvCheckForValidListAndQueue+0x68>)
 800ed6e:	f7fd ff95 	bl	800cc9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed72:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <prvCheckForValidListAndQueue+0x6c>)
 800ed74:	4a10      	ldr	r2, [pc, #64]	; (800edb8 <prvCheckForValidListAndQueue+0x64>)
 800ed76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed78:	4b12      	ldr	r3, [pc, #72]	; (800edc4 <prvCheckForValidListAndQueue+0x70>)
 800ed7a:	4a10      	ldr	r2, [pc, #64]	; (800edbc <prvCheckForValidListAndQueue+0x68>)
 800ed7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed7e:	2300      	movs	r3, #0
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	4b11      	ldr	r3, [pc, #68]	; (800edc8 <prvCheckForValidListAndQueue+0x74>)
 800ed84:	4a11      	ldr	r2, [pc, #68]	; (800edcc <prvCheckForValidListAndQueue+0x78>)
 800ed86:	2110      	movs	r1, #16
 800ed88:	200a      	movs	r0, #10
 800ed8a:	f7fe f8a3 	bl	800ced4 <xQueueGenericCreateStatic>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	4a08      	ldr	r2, [pc, #32]	; (800edb4 <prvCheckForValidListAndQueue+0x60>)
 800ed92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed94:	4b07      	ldr	r3, [pc, #28]	; (800edb4 <prvCheckForValidListAndQueue+0x60>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d005      	beq.n	800eda8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed9c:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <prvCheckForValidListAndQueue+0x60>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	490b      	ldr	r1, [pc, #44]	; (800edd0 <prvCheckForValidListAndQueue+0x7c>)
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fe fcbc 	bl	800d720 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eda8:	f000 f974 	bl	800f094 <vPortExitCritical>
}
 800edac:	bf00      	nop
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	200014c0 	.word	0x200014c0
 800edb8:	20001490 	.word	0x20001490
 800edbc:	200014a4 	.word	0x200014a4
 800edc0:	200014b8 	.word	0x200014b8
 800edc4:	200014bc 	.word	0x200014bc
 800edc8:	2000156c 	.word	0x2000156c
 800edcc:	200014cc 	.word	0x200014cc
 800edd0:	080152c8 	.word	0x080152c8

0800edd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	3b04      	subs	r3, #4
 800ede4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800edec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3b04      	subs	r3, #4
 800edf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	f023 0201 	bic.w	r2, r3, #1
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	3b04      	subs	r3, #4
 800ee02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee04:	4a0c      	ldr	r2, [pc, #48]	; (800ee38 <pxPortInitialiseStack+0x64>)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	3b14      	subs	r3, #20
 800ee0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3b04      	subs	r3, #4
 800ee1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f06f 0202 	mvn.w	r2, #2
 800ee22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	3b20      	subs	r3, #32
 800ee28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	0800ee3d 	.word	0x0800ee3d

0800ee3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b085      	sub	sp, #20
 800ee40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee46:	4b12      	ldr	r3, [pc, #72]	; (800ee90 <prvTaskExitError+0x54>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee4e:	d00a      	beq.n	800ee66 <prvTaskExitError+0x2a>
	__asm volatile
 800ee50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee54:	f383 8811 	msr	BASEPRI, r3
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	f3bf 8f4f 	dsb	sy
 800ee60:	60fb      	str	r3, [r7, #12]
}
 800ee62:	bf00      	nop
 800ee64:	e7fe      	b.n	800ee64 <prvTaskExitError+0x28>
	__asm volatile
 800ee66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	60bb      	str	r3, [r7, #8]
}
 800ee78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee7a:	bf00      	nop
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d0fc      	beq.n	800ee7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee82:	bf00      	nop
 800ee84:	bf00      	nop
 800ee86:	3714      	adds	r7, #20
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	20000180 	.word	0x20000180
	...

0800eea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eea0:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <pxCurrentTCBConst2>)
 800eea2:	6819      	ldr	r1, [r3, #0]
 800eea4:	6808      	ldr	r0, [r1, #0]
 800eea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeaa:	f380 8809 	msr	PSP, r0
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	f04f 0000 	mov.w	r0, #0
 800eeb6:	f380 8811 	msr	BASEPRI, r0
 800eeba:	4770      	bx	lr
 800eebc:	f3af 8000 	nop.w

0800eec0 <pxCurrentTCBConst2>:
 800eec0:	20000f90 	.word	0x20000f90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eec4:	bf00      	nop
 800eec6:	bf00      	nop

0800eec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eec8:	4808      	ldr	r0, [pc, #32]	; (800eeec <prvPortStartFirstTask+0x24>)
 800eeca:	6800      	ldr	r0, [r0, #0]
 800eecc:	6800      	ldr	r0, [r0, #0]
 800eece:	f380 8808 	msr	MSP, r0
 800eed2:	f04f 0000 	mov.w	r0, #0
 800eed6:	f380 8814 	msr	CONTROL, r0
 800eeda:	b662      	cpsie	i
 800eedc:	b661      	cpsie	f
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	df00      	svc	0
 800eee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eeea:	bf00      	nop
 800eeec:	e000ed08 	.word	0xe000ed08

0800eef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eef6:	4b46      	ldr	r3, [pc, #280]	; (800f010 <xPortStartScheduler+0x120>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a46      	ldr	r2, [pc, #280]	; (800f014 <xPortStartScheduler+0x124>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d10a      	bne.n	800ef16 <xPortStartScheduler+0x26>
	__asm volatile
 800ef00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	613b      	str	r3, [r7, #16]
}
 800ef12:	bf00      	nop
 800ef14:	e7fe      	b.n	800ef14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef16:	4b3e      	ldr	r3, [pc, #248]	; (800f010 <xPortStartScheduler+0x120>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a3f      	ldr	r2, [pc, #252]	; (800f018 <xPortStartScheduler+0x128>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d10a      	bne.n	800ef36 <xPortStartScheduler+0x46>
	__asm volatile
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	60fb      	str	r3, [r7, #12]
}
 800ef32:	bf00      	nop
 800ef34:	e7fe      	b.n	800ef34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef36:	4b39      	ldr	r3, [pc, #228]	; (800f01c <xPortStartScheduler+0x12c>)
 800ef38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	22ff      	movs	r2, #255	; 0xff
 800ef46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef50:	78fb      	ldrb	r3, [r7, #3]
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	4b31      	ldr	r3, [pc, #196]	; (800f020 <xPortStartScheduler+0x130>)
 800ef5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef5e:	4b31      	ldr	r3, [pc, #196]	; (800f024 <xPortStartScheduler+0x134>)
 800ef60:	2207      	movs	r2, #7
 800ef62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef64:	e009      	b.n	800ef7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ef66:	4b2f      	ldr	r3, [pc, #188]	; (800f024 <xPortStartScheduler+0x134>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	4a2d      	ldr	r2, [pc, #180]	; (800f024 <xPortStartScheduler+0x134>)
 800ef6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef70:	78fb      	ldrb	r3, [r7, #3]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef7a:	78fb      	ldrb	r3, [r7, #3]
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef82:	2b80      	cmp	r3, #128	; 0x80
 800ef84:	d0ef      	beq.n	800ef66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef86:	4b27      	ldr	r3, [pc, #156]	; (800f024 <xPortStartScheduler+0x134>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f1c3 0307 	rsb	r3, r3, #7
 800ef8e:	2b04      	cmp	r3, #4
 800ef90:	d00a      	beq.n	800efa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	60bb      	str	r3, [r7, #8]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800efa8:	4b1e      	ldr	r3, [pc, #120]	; (800f024 <xPortStartScheduler+0x134>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	021b      	lsls	r3, r3, #8
 800efae:	4a1d      	ldr	r2, [pc, #116]	; (800f024 <xPortStartScheduler+0x134>)
 800efb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800efb2:	4b1c      	ldr	r3, [pc, #112]	; (800f024 <xPortStartScheduler+0x134>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800efba:	4a1a      	ldr	r2, [pc, #104]	; (800f024 <xPortStartScheduler+0x134>)
 800efbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	b2da      	uxtb	r2, r3
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800efc6:	4b18      	ldr	r3, [pc, #96]	; (800f028 <xPortStartScheduler+0x138>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a17      	ldr	r2, [pc, #92]	; (800f028 <xPortStartScheduler+0x138>)
 800efcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800efd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800efd2:	4b15      	ldr	r3, [pc, #84]	; (800f028 <xPortStartScheduler+0x138>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a14      	ldr	r2, [pc, #80]	; (800f028 <xPortStartScheduler+0x138>)
 800efd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800efdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800efde:	f000 f8dd 	bl	800f19c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800efe2:	4b12      	ldr	r3, [pc, #72]	; (800f02c <xPortStartScheduler+0x13c>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800efe8:	f000 f8fc 	bl	800f1e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800efec:	4b10      	ldr	r3, [pc, #64]	; (800f030 <xPortStartScheduler+0x140>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a0f      	ldr	r2, [pc, #60]	; (800f030 <xPortStartScheduler+0x140>)
 800eff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eff8:	f7ff ff66 	bl	800eec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800effc:	f7fe ffc0 	bl	800df80 <vTaskSwitchContext>
	prvTaskExitError();
 800f000:	f7ff ff1c 	bl	800ee3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3718      	adds	r7, #24
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	e000ed00 	.word	0xe000ed00
 800f014:	410fc271 	.word	0x410fc271
 800f018:	410fc270 	.word	0x410fc270
 800f01c:	e000e400 	.word	0xe000e400
 800f020:	200015bc 	.word	0x200015bc
 800f024:	200015c0 	.word	0x200015c0
 800f028:	e000ed20 	.word	0xe000ed20
 800f02c:	20000180 	.word	0x20000180
 800f030:	e000ef34 	.word	0xe000ef34

0800f034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
	__asm volatile
 800f03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03e:	f383 8811 	msr	BASEPRI, r3
 800f042:	f3bf 8f6f 	isb	sy
 800f046:	f3bf 8f4f 	dsb	sy
 800f04a:	607b      	str	r3, [r7, #4]
}
 800f04c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f04e:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <vPortEnterCritical+0x58>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	3301      	adds	r3, #1
 800f054:	4a0d      	ldr	r2, [pc, #52]	; (800f08c <vPortEnterCritical+0x58>)
 800f056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f058:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <vPortEnterCritical+0x58>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d10f      	bne.n	800f080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f060:	4b0b      	ldr	r3, [pc, #44]	; (800f090 <vPortEnterCritical+0x5c>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	b2db      	uxtb	r3, r3
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <vPortEnterCritical+0x4c>
	__asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	603b      	str	r3, [r7, #0]
}
 800f07c:	bf00      	nop
 800f07e:	e7fe      	b.n	800f07e <vPortEnterCritical+0x4a>
	}
}
 800f080:	bf00      	nop
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	20000180 	.word	0x20000180
 800f090:	e000ed04 	.word	0xe000ed04

0800f094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f09a:	4b12      	ldr	r3, [pc, #72]	; (800f0e4 <vPortExitCritical+0x50>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10a      	bne.n	800f0b8 <vPortExitCritical+0x24>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	607b      	str	r3, [r7, #4]
}
 800f0b4:	bf00      	nop
 800f0b6:	e7fe      	b.n	800f0b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <vPortExitCritical+0x50>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	4a09      	ldr	r2, [pc, #36]	; (800f0e4 <vPortExitCritical+0x50>)
 800f0c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f0c2:	4b08      	ldr	r3, [pc, #32]	; (800f0e4 <vPortExitCritical+0x50>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d105      	bne.n	800f0d6 <vPortExitCritical+0x42>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	f383 8811 	msr	BASEPRI, r3
}
 800f0d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f0d6:	bf00      	nop
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	20000180 	.word	0x20000180
	...

0800f0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f0f0:	f3ef 8009 	mrs	r0, PSP
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	4b15      	ldr	r3, [pc, #84]	; (800f150 <pxCurrentTCBConst>)
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	f01e 0f10 	tst.w	lr, #16
 800f100:	bf08      	it	eq
 800f102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10a:	6010      	str	r0, [r2, #0]
 800f10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f110:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f114:	f380 8811 	msr	BASEPRI, r0
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	f7fe ff2e 	bl	800df80 <vTaskSwitchContext>
 800f124:	f04f 0000 	mov.w	r0, #0
 800f128:	f380 8811 	msr	BASEPRI, r0
 800f12c:	bc09      	pop	{r0, r3}
 800f12e:	6819      	ldr	r1, [r3, #0]
 800f130:	6808      	ldr	r0, [r1, #0]
 800f132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f136:	f01e 0f10 	tst.w	lr, #16
 800f13a:	bf08      	it	eq
 800f13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f140:	f380 8809 	msr	PSP, r0
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	f3af 8000 	nop.w

0800f150 <pxCurrentTCBConst>:
 800f150:	20000f90 	.word	0x20000f90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f154:	bf00      	nop
 800f156:	bf00      	nop

0800f158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	607b      	str	r3, [r7, #4]
}
 800f170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f172:	f7fe fe4b 	bl	800de0c <xTaskIncrementTick>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d003      	beq.n	800f184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f17c:	4b06      	ldr	r3, [pc, #24]	; (800f198 <xPortSysTickHandler+0x40>)
 800f17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	2300      	movs	r3, #0
 800f186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	f383 8811 	msr	BASEPRI, r3
}
 800f18e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	e000ed04 	.word	0xe000ed04

0800f19c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f19c:	b480      	push	{r7}
 800f19e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f1a0:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <vPortSetupTimerInterrupt+0x34>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f1a6:	4b0b      	ldr	r3, [pc, #44]	; (800f1d4 <vPortSetupTimerInterrupt+0x38>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f1ac:	4b0a      	ldr	r3, [pc, #40]	; (800f1d8 <vPortSetupTimerInterrupt+0x3c>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a0a      	ldr	r2, [pc, #40]	; (800f1dc <vPortSetupTimerInterrupt+0x40>)
 800f1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1b6:	099b      	lsrs	r3, r3, #6
 800f1b8:	4a09      	ldr	r2, [pc, #36]	; (800f1e0 <vPortSetupTimerInterrupt+0x44>)
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f1be:	4b04      	ldr	r3, [pc, #16]	; (800f1d0 <vPortSetupTimerInterrupt+0x34>)
 800f1c0:	2207      	movs	r2, #7
 800f1c2:	601a      	str	r2, [r3, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	e000e010 	.word	0xe000e010
 800f1d4:	e000e018 	.word	0xe000e018
 800f1d8:	200000e8 	.word	0x200000e8
 800f1dc:	10624dd3 	.word	0x10624dd3
 800f1e0:	e000e014 	.word	0xe000e014

0800f1e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f1e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f1f4 <vPortEnableVFP+0x10>
 800f1e8:	6801      	ldr	r1, [r0, #0]
 800f1ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f1ee:	6001      	str	r1, [r0, #0]
 800f1f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f1f2:	bf00      	nop
 800f1f4:	e000ed88 	.word	0xe000ed88

0800f1f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f1fe:	f3ef 8305 	mrs	r3, IPSR
 800f202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2b0f      	cmp	r3, #15
 800f208:	d914      	bls.n	800f234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f20a:	4a17      	ldr	r2, [pc, #92]	; (800f268 <vPortValidateInterruptPriority+0x70>)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	4413      	add	r3, r2
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f214:	4b15      	ldr	r3, [pc, #84]	; (800f26c <vPortValidateInterruptPriority+0x74>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	7afa      	ldrb	r2, [r7, #11]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d20a      	bcs.n	800f234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f222:	f383 8811 	msr	BASEPRI, r3
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	607b      	str	r3, [r7, #4]
}
 800f230:	bf00      	nop
 800f232:	e7fe      	b.n	800f232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f234:	4b0e      	ldr	r3, [pc, #56]	; (800f270 <vPortValidateInterruptPriority+0x78>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f23c:	4b0d      	ldr	r3, [pc, #52]	; (800f274 <vPortValidateInterruptPriority+0x7c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	d90a      	bls.n	800f25a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	603b      	str	r3, [r7, #0]
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <vPortValidateInterruptPriority+0x60>
	}
 800f25a:	bf00      	nop
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	e000e3f0 	.word	0xe000e3f0
 800f26c:	200015bc 	.word	0x200015bc
 800f270:	e000ed0c 	.word	0xe000ed0c
 800f274:	200015c0 	.word	0x200015c0

0800f278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08a      	sub	sp, #40	; 0x28
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f280:	2300      	movs	r3, #0
 800f282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f284:	f7fe fd06 	bl	800dc94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f288:	4b5b      	ldr	r3, [pc, #364]	; (800f3f8 <pvPortMalloc+0x180>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d101      	bne.n	800f294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f290:	f000 f920 	bl	800f4d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f294:	4b59      	ldr	r3, [pc, #356]	; (800f3fc <pvPortMalloc+0x184>)
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4013      	ands	r3, r2
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f040 8093 	bne.w	800f3c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d01d      	beq.n	800f2e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f2a8:	2208      	movs	r2, #8
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f003 0307 	and.w	r3, r3, #7
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d014      	beq.n	800f2e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f023 0307 	bic.w	r3, r3, #7
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f003 0307 	and.w	r3, r3, #7
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00a      	beq.n	800f2e4 <pvPortMalloc+0x6c>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	f383 8811 	msr	BASEPRI, r3
 800f2d6:	f3bf 8f6f 	isb	sy
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	617b      	str	r3, [r7, #20]
}
 800f2e0:	bf00      	nop
 800f2e2:	e7fe      	b.n	800f2e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d06e      	beq.n	800f3c8 <pvPortMalloc+0x150>
 800f2ea:	4b45      	ldr	r3, [pc, #276]	; (800f400 <pvPortMalloc+0x188>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d869      	bhi.n	800f3c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f2f4:	4b43      	ldr	r3, [pc, #268]	; (800f404 <pvPortMalloc+0x18c>)
 800f2f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f2f8:	4b42      	ldr	r3, [pc, #264]	; (800f404 <pvPortMalloc+0x18c>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2fe:	e004      	b.n	800f30a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	429a      	cmp	r2, r3
 800f312:	d903      	bls.n	800f31c <pvPortMalloc+0xa4>
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1f1      	bne.n	800f300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f31c:	4b36      	ldr	r3, [pc, #216]	; (800f3f8 <pvPortMalloc+0x180>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f322:	429a      	cmp	r2, r3
 800f324:	d050      	beq.n	800f3c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2208      	movs	r2, #8
 800f32c:	4413      	add	r3, r2
 800f32e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33a:	685a      	ldr	r2, [r3, #4]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	1ad2      	subs	r2, r2, r3
 800f340:	2308      	movs	r3, #8
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	429a      	cmp	r2, r3
 800f346:	d91f      	bls.n	800f388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4413      	add	r3, r2
 800f34e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	f003 0307 	and.w	r3, r3, #7
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00a      	beq.n	800f370 <pvPortMalloc+0xf8>
	__asm volatile
 800f35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35e:	f383 8811 	msr	BASEPRI, r3
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	f3bf 8f4f 	dsb	sy
 800f36a:	613b      	str	r3, [r7, #16]
}
 800f36c:	bf00      	nop
 800f36e:	e7fe      	b.n	800f36e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	1ad2      	subs	r2, r2, r3
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f382:	69b8      	ldr	r0, [r7, #24]
 800f384:	f000 f908 	bl	800f598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f388:	4b1d      	ldr	r3, [pc, #116]	; (800f400 <pvPortMalloc+0x188>)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	4a1b      	ldr	r2, [pc, #108]	; (800f400 <pvPortMalloc+0x188>)
 800f394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f396:	4b1a      	ldr	r3, [pc, #104]	; (800f400 <pvPortMalloc+0x188>)
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4b1b      	ldr	r3, [pc, #108]	; (800f408 <pvPortMalloc+0x190>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d203      	bcs.n	800f3aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f3a2:	4b17      	ldr	r3, [pc, #92]	; (800f400 <pvPortMalloc+0x188>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a18      	ldr	r2, [pc, #96]	; (800f408 <pvPortMalloc+0x190>)
 800f3a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	4b13      	ldr	r3, [pc, #76]	; (800f3fc <pvPortMalloc+0x184>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f3be:	4b13      	ldr	r3, [pc, #76]	; (800f40c <pvPortMalloc+0x194>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	4a11      	ldr	r2, [pc, #68]	; (800f40c <pvPortMalloc+0x194>)
 800f3c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f3c8:	f7fe fc72 	bl	800dcb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	f003 0307 	and.w	r3, r3, #7
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00a      	beq.n	800f3ec <pvPortMalloc+0x174>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	60fb      	str	r3, [r7, #12]
}
 800f3e8:	bf00      	nop
 800f3ea:	e7fe      	b.n	800f3ea <pvPortMalloc+0x172>
	return pvReturn;
 800f3ec:	69fb      	ldr	r3, [r7, #28]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3728      	adds	r7, #40	; 0x28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	200051cc 	.word	0x200051cc
 800f3fc:	200051e0 	.word	0x200051e0
 800f400:	200051d0 	.word	0x200051d0
 800f404:	200051c4 	.word	0x200051c4
 800f408:	200051d4 	.word	0x200051d4
 800f40c:	200051d8 	.word	0x200051d8

0800f410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d04d      	beq.n	800f4be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f422:	2308      	movs	r3, #8
 800f424:	425b      	negs	r3, r3
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	4413      	add	r3, r2
 800f42a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	4b24      	ldr	r3, [pc, #144]	; (800f4c8 <vPortFree+0xb8>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4013      	ands	r3, r2
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d10a      	bne.n	800f454 <vPortFree+0x44>
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	60fb      	str	r3, [r7, #12]
}
 800f450:	bf00      	nop
 800f452:	e7fe      	b.n	800f452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00a      	beq.n	800f472 <vPortFree+0x62>
	__asm volatile
 800f45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f460:	f383 8811 	msr	BASEPRI, r3
 800f464:	f3bf 8f6f 	isb	sy
 800f468:	f3bf 8f4f 	dsb	sy
 800f46c:	60bb      	str	r3, [r7, #8]
}
 800f46e:	bf00      	nop
 800f470:	e7fe      	b.n	800f470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	685a      	ldr	r2, [r3, #4]
 800f476:	4b14      	ldr	r3, [pc, #80]	; (800f4c8 <vPortFree+0xb8>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4013      	ands	r3, r2
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d01e      	beq.n	800f4be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d11a      	bne.n	800f4be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	4b0e      	ldr	r3, [pc, #56]	; (800f4c8 <vPortFree+0xb8>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	43db      	mvns	r3, r3
 800f492:	401a      	ands	r2, r3
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f498:	f7fe fbfc 	bl	800dc94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <vPortFree+0xbc>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	4a09      	ldr	r2, [pc, #36]	; (800f4cc <vPortFree+0xbc>)
 800f4a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4aa:	6938      	ldr	r0, [r7, #16]
 800f4ac:	f000 f874 	bl	800f598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f4b0:	4b07      	ldr	r3, [pc, #28]	; (800f4d0 <vPortFree+0xc0>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	4a06      	ldr	r2, [pc, #24]	; (800f4d0 <vPortFree+0xc0>)
 800f4b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f4ba:	f7fe fbf9 	bl	800dcb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f4be:	bf00      	nop
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	200051e0 	.word	0x200051e0
 800f4cc:	200051d0 	.word	0x200051d0
 800f4d0:	200051dc 	.word	0x200051dc

0800f4d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f4da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f4de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f4e0:	4b27      	ldr	r3, [pc, #156]	; (800f580 <prvHeapInit+0xac>)
 800f4e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00c      	beq.n	800f508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	3307      	adds	r3, #7
 800f4f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	1ad3      	subs	r3, r2, r3
 800f502:	4a1f      	ldr	r2, [pc, #124]	; (800f580 <prvHeapInit+0xac>)
 800f504:	4413      	add	r3, r2
 800f506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f50c:	4a1d      	ldr	r2, [pc, #116]	; (800f584 <prvHeapInit+0xb0>)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f512:	4b1c      	ldr	r3, [pc, #112]	; (800f584 <prvHeapInit+0xb0>)
 800f514:	2200      	movs	r2, #0
 800f516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f520:	2208      	movs	r2, #8
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	1a9b      	subs	r3, r3, r2
 800f526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f023 0307 	bic.w	r3, r3, #7
 800f52e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	4a15      	ldr	r2, [pc, #84]	; (800f588 <prvHeapInit+0xb4>)
 800f534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f536:	4b14      	ldr	r3, [pc, #80]	; (800f588 <prvHeapInit+0xb4>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2200      	movs	r2, #0
 800f53c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f53e:	4b12      	ldr	r3, [pc, #72]	; (800f588 <prvHeapInit+0xb4>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2200      	movs	r2, #0
 800f544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	1ad2      	subs	r2, r2, r3
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f554:	4b0c      	ldr	r3, [pc, #48]	; (800f588 <prvHeapInit+0xb4>)
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	4a0a      	ldr	r2, [pc, #40]	; (800f58c <prvHeapInit+0xb8>)
 800f562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	4a09      	ldr	r2, [pc, #36]	; (800f590 <prvHeapInit+0xbc>)
 800f56a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f56c:	4b09      	ldr	r3, [pc, #36]	; (800f594 <prvHeapInit+0xc0>)
 800f56e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f572:	601a      	str	r2, [r3, #0]
}
 800f574:	bf00      	nop
 800f576:	3714      	adds	r7, #20
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	200015c4 	.word	0x200015c4
 800f584:	200051c4 	.word	0x200051c4
 800f588:	200051cc 	.word	0x200051cc
 800f58c:	200051d4 	.word	0x200051d4
 800f590:	200051d0 	.word	0x200051d0
 800f594:	200051e0 	.word	0x200051e0

0800f598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5a0:	4b28      	ldr	r3, [pc, #160]	; (800f644 <prvInsertBlockIntoFreeList+0xac>)
 800f5a2:	60fb      	str	r3, [r7, #12]
 800f5a4:	e002      	b.n	800f5ac <prvInsertBlockIntoFreeList+0x14>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d8f7      	bhi.n	800f5a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d108      	bne.n	800f5da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	441a      	add	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	68ba      	ldr	r2, [r7, #8]
 800f5e4:	441a      	add	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d118      	bne.n	800f620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	4b15      	ldr	r3, [pc, #84]	; (800f648 <prvInsertBlockIntoFreeList+0xb0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d00d      	beq.n	800f616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685a      	ldr	r2, [r3, #4]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	441a      	add	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	601a      	str	r2, [r3, #0]
 800f614:	e008      	b.n	800f628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f616:	4b0c      	ldr	r3, [pc, #48]	; (800f648 <prvInsertBlockIntoFreeList+0xb0>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	e003      	b.n	800f628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d002      	beq.n	800f636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f636:	bf00      	nop
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	200051c4 	.word	0x200051c4
 800f648:	200051cc 	.word	0x200051cc

0800f64c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f650:	2200      	movs	r2, #0
 800f652:	4912      	ldr	r1, [pc, #72]	; (800f69c <MX_USB_DEVICE_Init+0x50>)
 800f654:	4812      	ldr	r0, [pc, #72]	; (800f6a0 <MX_USB_DEVICE_Init+0x54>)
 800f656:	f7fb fecf 	bl	800b3f8 <USBD_Init>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f660:	f7f5 f932 	bl	80048c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f664:	490f      	ldr	r1, [pc, #60]	; (800f6a4 <MX_USB_DEVICE_Init+0x58>)
 800f666:	480e      	ldr	r0, [pc, #56]	; (800f6a0 <MX_USB_DEVICE_Init+0x54>)
 800f668:	f7fb fef6 	bl	800b458 <USBD_RegisterClass>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d001      	beq.n	800f676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f672:	f7f5 f929 	bl	80048c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f676:	490c      	ldr	r1, [pc, #48]	; (800f6a8 <MX_USB_DEVICE_Init+0x5c>)
 800f678:	4809      	ldr	r0, [pc, #36]	; (800f6a0 <MX_USB_DEVICE_Init+0x54>)
 800f67a:	f7fb fde7 	bl	800b24c <USBD_CDC_RegisterInterface>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f684:	f7f5 f920 	bl	80048c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f688:	4805      	ldr	r0, [pc, #20]	; (800f6a0 <MX_USB_DEVICE_Init+0x54>)
 800f68a:	f7fb ff1b 	bl	800b4c4 <USBD_Start>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f694:	f7f5 f918 	bl	80048c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f698:	bf00      	nop
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	20000198 	.word	0x20000198
 800f6a0:	200051e4 	.word	0x200051e4
 800f6a4:	20000100 	.word	0x20000100
 800f6a8:	20000184 	.word	0x20000184

0800f6ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	4905      	ldr	r1, [pc, #20]	; (800f6c8 <CDC_Init_FS+0x1c>)
 800f6b4:	4805      	ldr	r0, [pc, #20]	; (800f6cc <CDC_Init_FS+0x20>)
 800f6b6:	f7fb fde3 	bl	800b280 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f6ba:	4905      	ldr	r1, [pc, #20]	; (800f6d0 <CDC_Init_FS+0x24>)
 800f6bc:	4803      	ldr	r0, [pc, #12]	; (800f6cc <CDC_Init_FS+0x20>)
 800f6be:	f7fb fe01 	bl	800b2c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	20005cc0 	.word	0x20005cc0
 800f6cc:	200051e4 	.word	0x200051e4
 800f6d0:	200054c0 	.word	0x200054c0

0800f6d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	71fb      	strb	r3, [r7, #7]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	2b23      	cmp	r3, #35	; 0x23
 800f6f8:	d84a      	bhi.n	800f790 <CDC_Control_FS+0xac>
 800f6fa:	a201      	add	r2, pc, #4	; (adr r2, 800f700 <CDC_Control_FS+0x1c>)
 800f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f700:	0800f791 	.word	0x0800f791
 800f704:	0800f791 	.word	0x0800f791
 800f708:	0800f791 	.word	0x0800f791
 800f70c:	0800f791 	.word	0x0800f791
 800f710:	0800f791 	.word	0x0800f791
 800f714:	0800f791 	.word	0x0800f791
 800f718:	0800f791 	.word	0x0800f791
 800f71c:	0800f791 	.word	0x0800f791
 800f720:	0800f791 	.word	0x0800f791
 800f724:	0800f791 	.word	0x0800f791
 800f728:	0800f791 	.word	0x0800f791
 800f72c:	0800f791 	.word	0x0800f791
 800f730:	0800f791 	.word	0x0800f791
 800f734:	0800f791 	.word	0x0800f791
 800f738:	0800f791 	.word	0x0800f791
 800f73c:	0800f791 	.word	0x0800f791
 800f740:	0800f791 	.word	0x0800f791
 800f744:	0800f791 	.word	0x0800f791
 800f748:	0800f791 	.word	0x0800f791
 800f74c:	0800f791 	.word	0x0800f791
 800f750:	0800f791 	.word	0x0800f791
 800f754:	0800f791 	.word	0x0800f791
 800f758:	0800f791 	.word	0x0800f791
 800f75c:	0800f791 	.word	0x0800f791
 800f760:	0800f791 	.word	0x0800f791
 800f764:	0800f791 	.word	0x0800f791
 800f768:	0800f791 	.word	0x0800f791
 800f76c:	0800f791 	.word	0x0800f791
 800f770:	0800f791 	.word	0x0800f791
 800f774:	0800f791 	.word	0x0800f791
 800f778:	0800f791 	.word	0x0800f791
 800f77c:	0800f791 	.word	0x0800f791
 800f780:	0800f791 	.word	0x0800f791
 800f784:	0800f791 	.word	0x0800f791
 800f788:	0800f791 	.word	0x0800f791
 800f78c:	0800f791 	.word	0x0800f791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f790:	bf00      	nop
  }

  return (USBD_OK);
 800f792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f794:	4618      	mov	r0, r3
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f7aa:	6879      	ldr	r1, [r7, #4]
 800f7ac:	4805      	ldr	r0, [pc, #20]	; (800f7c4 <CDC_Receive_FS+0x24>)
 800f7ae:	f7fb fd89 	bl	800b2c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f7b2:	4804      	ldr	r0, [pc, #16]	; (800f7c4 <CDC_Receive_FS+0x24>)
 800f7b4:	f7fb fdea 	bl	800b38c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f7b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	200051e4 	.word	0x200051e4

0800f7c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f7d8:	4b0d      	ldr	r3, [pc, #52]	; (800f810 <CDC_Transmit_FS+0x48>)
 800f7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e00b      	b.n	800f806 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f7ee:	887b      	ldrh	r3, [r7, #2]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	4806      	ldr	r0, [pc, #24]	; (800f810 <CDC_Transmit_FS+0x48>)
 800f7f6:	f7fb fd43 	bl	800b280 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f7fa:	4805      	ldr	r0, [pc, #20]	; (800f810 <CDC_Transmit_FS+0x48>)
 800f7fc:	f7fb fd80 	bl	800b300 <USBD_CDC_TransmitPacket>
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f804:	7bfb      	ldrb	r3, [r7, #15]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	200051e4 	.word	0x200051e4

0800f814 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f814:	b480      	push	{r7}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	4613      	mov	r3, r2
 800f820:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	371c      	adds	r7, #28
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
	...

0800f838 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	6039      	str	r1, [r7, #0]
 800f842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	2212      	movs	r2, #18
 800f848:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f84a:	4b03      	ldr	r3, [pc, #12]	; (800f858 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	200001b4 	.word	0x200001b4

0800f85c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	4603      	mov	r3, r0
 800f864:	6039      	str	r1, [r7, #0]
 800f866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	2204      	movs	r2, #4
 800f86c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f86e:	4b03      	ldr	r3, [pc, #12]	; (800f87c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	200001c8 	.word	0x200001c8

0800f880 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	4603      	mov	r3, r0
 800f888:	6039      	str	r1, [r7, #0]
 800f88a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d105      	bne.n	800f89e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f892:	683a      	ldr	r2, [r7, #0]
 800f894:	4907      	ldr	r1, [pc, #28]	; (800f8b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f896:	4808      	ldr	r0, [pc, #32]	; (800f8b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f898:	f7fc ffc0 	bl	800c81c <USBD_GetString>
 800f89c:	e004      	b.n	800f8a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	4904      	ldr	r1, [pc, #16]	; (800f8b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f8a2:	4805      	ldr	r0, [pc, #20]	; (800f8b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f8a4:	f7fc ffba 	bl	800c81c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8a8:	4b02      	ldr	r3, [pc, #8]	; (800f8b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	200064c0 	.word	0x200064c0
 800f8b8:	080152d0 	.word	0x080152d0

0800f8bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	6039      	str	r1, [r7, #0]
 800f8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	4904      	ldr	r1, [pc, #16]	; (800f8dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f8cc:	4804      	ldr	r0, [pc, #16]	; (800f8e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f8ce:	f7fc ffa5 	bl	800c81c <USBD_GetString>
  return USBD_StrDesc;
 800f8d2:	4b02      	ldr	r3, [pc, #8]	; (800f8dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	200064c0 	.word	0x200064c0
 800f8e0:	080152e8 	.word	0x080152e8

0800f8e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	6039      	str	r1, [r7, #0]
 800f8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	221a      	movs	r2, #26
 800f8f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8f6:	f000 f843 	bl	800f980 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f8fa:	4b02      	ldr	r3, [pc, #8]	; (800f904 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	200001cc 	.word	0x200001cc

0800f908 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	4603      	mov	r3, r0
 800f910:	6039      	str	r1, [r7, #0]
 800f912:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d105      	bne.n	800f926 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	4907      	ldr	r1, [pc, #28]	; (800f93c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f91e:	4808      	ldr	r0, [pc, #32]	; (800f940 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f920:	f7fc ff7c 	bl	800c81c <USBD_GetString>
 800f924:	e004      	b.n	800f930 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	4904      	ldr	r1, [pc, #16]	; (800f93c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f92a:	4805      	ldr	r0, [pc, #20]	; (800f940 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f92c:	f7fc ff76 	bl	800c81c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f930:	4b02      	ldr	r3, [pc, #8]	; (800f93c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f932:	4618      	mov	r0, r3
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	200064c0 	.word	0x200064c0
 800f940:	080152fc 	.word	0x080152fc

0800f944 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	4603      	mov	r3, r0
 800f94c:	6039      	str	r1, [r7, #0]
 800f94e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f950:	79fb      	ldrb	r3, [r7, #7]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d105      	bne.n	800f962 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	4907      	ldr	r1, [pc, #28]	; (800f978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f95a:	4808      	ldr	r0, [pc, #32]	; (800f97c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f95c:	f7fc ff5e 	bl	800c81c <USBD_GetString>
 800f960:	e004      	b.n	800f96c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f962:	683a      	ldr	r2, [r7, #0]
 800f964:	4904      	ldr	r1, [pc, #16]	; (800f978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f966:	4805      	ldr	r0, [pc, #20]	; (800f97c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f968:	f7fc ff58 	bl	800c81c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f96c:	4b02      	ldr	r3, [pc, #8]	; (800f978 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	200064c0 	.word	0x200064c0
 800f97c:	08015308 	.word	0x08015308

0800f980 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f986:	4b0f      	ldr	r3, [pc, #60]	; (800f9c4 <Get_SerialNum+0x44>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f98c:	4b0e      	ldr	r3, [pc, #56]	; (800f9c8 <Get_SerialNum+0x48>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f992:	4b0e      	ldr	r3, [pc, #56]	; (800f9cc <Get_SerialNum+0x4c>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4413      	add	r3, r2
 800f99e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d009      	beq.n	800f9ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f9a6:	2208      	movs	r2, #8
 800f9a8:	4909      	ldr	r1, [pc, #36]	; (800f9d0 <Get_SerialNum+0x50>)
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f000 f814 	bl	800f9d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f9b0:	2204      	movs	r2, #4
 800f9b2:	4908      	ldr	r1, [pc, #32]	; (800f9d4 <Get_SerialNum+0x54>)
 800f9b4:	68b8      	ldr	r0, [r7, #8]
 800f9b6:	f000 f80f 	bl	800f9d8 <IntToUnicode>
  }
}
 800f9ba:	bf00      	nop
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	1fff7a10 	.word	0x1fff7a10
 800f9c8:	1fff7a14 	.word	0x1fff7a14
 800f9cc:	1fff7a18 	.word	0x1fff7a18
 800f9d0:	200001ce 	.word	0x200001ce
 800f9d4:	200001de 	.word	0x200001de

0800f9d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	75fb      	strb	r3, [r7, #23]
 800f9ee:	e027      	b.n	800fa40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	0f1b      	lsrs	r3, r3, #28
 800f9f4:	2b09      	cmp	r3, #9
 800f9f6:	d80b      	bhi.n	800fa10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	0f1b      	lsrs	r3, r3, #28
 800f9fc:	b2da      	uxtb	r2, r3
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	005b      	lsls	r3, r3, #1
 800fa02:	4619      	mov	r1, r3
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	440b      	add	r3, r1
 800fa08:	3230      	adds	r2, #48	; 0x30
 800fa0a:	b2d2      	uxtb	r2, r2
 800fa0c:	701a      	strb	r2, [r3, #0]
 800fa0e:	e00a      	b.n	800fa26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	0f1b      	lsrs	r3, r3, #28
 800fa14:	b2da      	uxtb	r2, r3
 800fa16:	7dfb      	ldrb	r3, [r7, #23]
 800fa18:	005b      	lsls	r3, r3, #1
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	440b      	add	r3, r1
 800fa20:	3237      	adds	r2, #55	; 0x37
 800fa22:	b2d2      	uxtb	r2, r2
 800fa24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	011b      	lsls	r3, r3, #4
 800fa2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa2c:	7dfb      	ldrb	r3, [r7, #23]
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	3301      	adds	r3, #1
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	4413      	add	r3, r2
 800fa36:	2200      	movs	r2, #0
 800fa38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa3a:	7dfb      	ldrb	r3, [r7, #23]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	75fb      	strb	r3, [r7, #23]
 800fa40:	7dfa      	ldrb	r2, [r7, #23]
 800fa42:	79fb      	ldrb	r3, [r7, #7]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d3d3      	bcc.n	800f9f0 <IntToUnicode+0x18>
  }
}
 800fa48:	bf00      	nop
 800fa4a:	bf00      	nop
 800fa4c:	371c      	adds	r7, #28
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
	...

0800fa58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b08a      	sub	sp, #40	; 0x28
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa60:	f107 0314 	add.w	r3, r7, #20
 800fa64:	2200      	movs	r2, #0
 800fa66:	601a      	str	r2, [r3, #0]
 800fa68:	605a      	str	r2, [r3, #4]
 800fa6a:	609a      	str	r2, [r3, #8]
 800fa6c:	60da      	str	r2, [r3, #12]
 800fa6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa78:	d13a      	bne.n	800faf0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	613b      	str	r3, [r7, #16]
 800fa7e:	4b1e      	ldr	r3, [pc, #120]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800fa80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa82:	4a1d      	ldr	r2, [pc, #116]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800fa84:	f043 0301 	orr.w	r3, r3, #1
 800fa88:	6313      	str	r3, [r2, #48]	; 0x30
 800fa8a:	4b1b      	ldr	r3, [pc, #108]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800fa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa8e:	f003 0301 	and.w	r3, r3, #1
 800fa92:	613b      	str	r3, [r7, #16]
 800fa94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fa96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fa9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa9c:	2302      	movs	r3, #2
 800fa9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faa0:	2300      	movs	r3, #0
 800faa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800faa4:	2303      	movs	r3, #3
 800faa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800faa8:	230a      	movs	r3, #10
 800faaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800faac:	f107 0314 	add.w	r3, r7, #20
 800fab0:	4619      	mov	r1, r3
 800fab2:	4812      	ldr	r0, [pc, #72]	; (800fafc <HAL_PCD_MspInit+0xa4>)
 800fab4:	f7f5 ff60 	bl	8005978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fab8:	4b0f      	ldr	r3, [pc, #60]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800faba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fabc:	4a0e      	ldr	r2, [pc, #56]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800fabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fac2:	6353      	str	r3, [r2, #52]	; 0x34
 800fac4:	2300      	movs	r3, #0
 800fac6:	60fb      	str	r3, [r7, #12]
 800fac8:	4b0b      	ldr	r3, [pc, #44]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800faca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800facc:	4a0a      	ldr	r2, [pc, #40]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800face:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fad2:	6453      	str	r3, [r2, #68]	; 0x44
 800fad4:	4b08      	ldr	r3, [pc, #32]	; (800faf8 <HAL_PCD_MspInit+0xa0>)
 800fad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fadc:	60fb      	str	r3, [r7, #12]
 800fade:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fae0:	2200      	movs	r2, #0
 800fae2:	2105      	movs	r1, #5
 800fae4:	2043      	movs	r0, #67	; 0x43
 800fae6:	f7f5 ff10 	bl	800590a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800faea:	2043      	movs	r0, #67	; 0x43
 800faec:	f7f5 ff29 	bl	8005942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800faf0:	bf00      	nop
 800faf2:	3728      	adds	r7, #40	; 0x28
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	40023800 	.word	0x40023800
 800fafc:	40020000 	.word	0x40020000

0800fb00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fb14:	4619      	mov	r1, r3
 800fb16:	4610      	mov	r0, r2
 800fb18:	f7fb fd21 	bl	800b55e <USBD_LL_SetupStage>
}
 800fb1c:	bf00      	nop
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fb36:	78fa      	ldrb	r2, [r7, #3]
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	00db      	lsls	r3, r3, #3
 800fb3e:	4413      	add	r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	440b      	add	r3, r1
 800fb44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	78fb      	ldrb	r3, [r7, #3]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	f7fb fd5b 	bl	800b608 <USBD_LL_DataOutStage>
}
 800fb52:	bf00      	nop
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	460b      	mov	r3, r1
 800fb64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fb6c:	78fa      	ldrb	r2, [r7, #3]
 800fb6e:	6879      	ldr	r1, [r7, #4]
 800fb70:	4613      	mov	r3, r2
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	4413      	add	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	440b      	add	r3, r1
 800fb7a:	334c      	adds	r3, #76	; 0x4c
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	78fb      	ldrb	r3, [r7, #3]
 800fb80:	4619      	mov	r1, r3
 800fb82:	f7fb fdf4 	bl	800b76e <USBD_LL_DataInStage>
}
 800fb86:	bf00      	nop
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b082      	sub	sp, #8
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fb ff28 	bl	800b9f2 <USBD_LL_SOF>
}
 800fba2:	bf00      	nop
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b084      	sub	sp, #16
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	2b02      	cmp	r3, #2
 800fbbc:	d001      	beq.n	800fbc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fbbe:	f7f4 fe83 	bl	80048c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbc8:	7bfa      	ldrb	r2, [r7, #15]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fb fed2 	bl	800b976 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fb fe7a 	bl	800b8d2 <USBD_LL_Reset>
}
 800fbde:	bf00      	nop
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fb fecd 	bl	800b996 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	6812      	ldr	r2, [r2, #0]
 800fc0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc0e:	f043 0301 	orr.w	r3, r3, #1
 800fc12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a1b      	ldr	r3, [r3, #32]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d005      	beq.n	800fc28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc1c:	4b04      	ldr	r3, [pc, #16]	; (800fc30 <HAL_PCD_SuspendCallback+0x48>)
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	4a03      	ldr	r2, [pc, #12]	; (800fc30 <HAL_PCD_SuspendCallback+0x48>)
 800fc22:	f043 0306 	orr.w	r3, r3, #6
 800fc26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	e000ed00 	.word	0xe000ed00

0800fc34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fb febd 	bl	800b9c2 <USBD_LL_Resume>
}
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc62:	78fa      	ldrb	r2, [r7, #3]
 800fc64:	4611      	mov	r1, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fb ff15 	bl	800ba96 <USBD_LL_IsoOUTIncomplete>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc86:	78fa      	ldrb	r2, [r7, #3]
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fb fed1 	bl	800ba32 <USBD_LL_IsoINIncomplete>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fb ff27 	bl	800bafa <USBD_LL_DevConnected>
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fb ff24 	bl	800bb10 <USBD_LL_DevDisconnected>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d13c      	bne.n	800fd5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fce0:	4a20      	ldr	r2, [pc, #128]	; (800fd64 <USBD_LL_Init+0x94>)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4a1e      	ldr	r2, [pc, #120]	; (800fd64 <USBD_LL_Init+0x94>)
 800fcec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fcf0:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <USBD_LL_Init+0x94>)
 800fcf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fcf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fcf8:	4b1a      	ldr	r3, [pc, #104]	; (800fd64 <USBD_LL_Init+0x94>)
 800fcfa:	2204      	movs	r2, #4
 800fcfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fcfe:	4b19      	ldr	r3, [pc, #100]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd00:	2202      	movs	r2, #2
 800fd02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd04:	4b17      	ldr	r3, [pc, #92]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd0a:	4b16      	ldr	r3, [pc, #88]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd0c:	2202      	movs	r2, #2
 800fd0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd10:	4b14      	ldr	r3, [pc, #80]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd12:	2200      	movs	r2, #0
 800fd14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd16:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd1c:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd22:	4b10      	ldr	r3, [pc, #64]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd28:	4b0e      	ldr	r3, [pc, #56]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd2e:	480d      	ldr	r0, [pc, #52]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd30:	f7f5 ffbf 	bl	8005cb2 <HAL_PCD_Init>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fd3a:	f7f4 fdc5 	bl	80048c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd3e:	2180      	movs	r1, #128	; 0x80
 800fd40:	4808      	ldr	r0, [pc, #32]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd42:	f7f7 fa16 	bl	8007172 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd46:	2240      	movs	r2, #64	; 0x40
 800fd48:	2100      	movs	r1, #0
 800fd4a:	4806      	ldr	r0, [pc, #24]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd4c:	f7f7 f9ca 	bl	80070e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd50:	2280      	movs	r2, #128	; 0x80
 800fd52:	2101      	movs	r1, #1
 800fd54:	4803      	ldr	r0, [pc, #12]	; (800fd64 <USBD_LL_Init+0x94>)
 800fd56:	f7f7 f9c5 	bl	80070e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	200066c0 	.word	0x200066c0

0800fd68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd70:	2300      	movs	r3, #0
 800fd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7f6 f8b4 	bl	8005eec <HAL_PCD_Start>
 800fd84:	4603      	mov	r3, r0
 800fd86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f000 f942 	bl	8010014 <USBD_Get_USB_Status>
 800fd90:	4603      	mov	r3, r0
 800fd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b084      	sub	sp, #16
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	4608      	mov	r0, r1
 800fda8:	4611      	mov	r1, r2
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4603      	mov	r3, r0
 800fdae:	70fb      	strb	r3, [r7, #3]
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	70bb      	strb	r3, [r7, #2]
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdc6:	78bb      	ldrb	r3, [r7, #2]
 800fdc8:	883a      	ldrh	r2, [r7, #0]
 800fdca:	78f9      	ldrb	r1, [r7, #3]
 800fdcc:	f7f6 fd85 	bl	80068da <HAL_PCD_EP_Open>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdd4:	7bfb      	ldrb	r3, [r7, #15]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f000 f91c 	bl	8010014 <USBD_Get_USB_Status>
 800fddc:	4603      	mov	r3, r0
 800fdde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fde0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b084      	sub	sp, #16
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe04:	78fa      	ldrb	r2, [r7, #3]
 800fe06:	4611      	mov	r1, r2
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f6 fdce 	bl	80069aa <HAL_PCD_EP_Close>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe12:	7bfb      	ldrb	r3, [r7, #15]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f000 f8fd 	bl	8010014 <USBD_Get_USB_Status>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3710      	adds	r7, #16
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	460b      	mov	r3, r1
 800fe32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe34:	2300      	movs	r3, #0
 800fe36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe42:	78fa      	ldrb	r2, [r7, #3]
 800fe44:	4611      	mov	r1, r2
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7f6 fea6 	bl	8006b98 <HAL_PCD_EP_SetStall>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 f8de 	bl	8010014 <USBD_Get_USB_Status>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b084      	sub	sp, #16
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
 800fe6e:	460b      	mov	r3, r1
 800fe70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe80:	78fa      	ldrb	r2, [r7, #3]
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7f6 feeb 	bl	8006c60 <HAL_PCD_EP_ClrStall>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe8e:	7bfb      	ldrb	r3, [r7, #15]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f000 f8bf 	bl	8010014 <USBD_Get_USB_Status>
 800fe96:	4603      	mov	r3, r0
 800fe98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b085      	sub	sp, #20
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800feb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800feb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800febc:	2b00      	cmp	r3, #0
 800febe:	da0b      	bge.n	800fed8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fec0:	78fb      	ldrb	r3, [r7, #3]
 800fec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fec6:	68f9      	ldr	r1, [r7, #12]
 800fec8:	4613      	mov	r3, r2
 800feca:	00db      	lsls	r3, r3, #3
 800fecc:	4413      	add	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	440b      	add	r3, r1
 800fed2:	333e      	adds	r3, #62	; 0x3e
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	e00b      	b.n	800fef0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fed8:	78fb      	ldrb	r3, [r7, #3]
 800feda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fede:	68f9      	ldr	r1, [r7, #12]
 800fee0:	4613      	mov	r3, r2
 800fee2:	00db      	lsls	r3, r3, #3
 800fee4:	4413      	add	r3, r2
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	440b      	add	r3, r1
 800feea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800feee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3714      	adds	r7, #20
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff16:	78fa      	ldrb	r2, [r7, #3]
 800ff18:	4611      	mov	r1, r2
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7f6 fcb8 	bl	8006890 <HAL_PCD_SetAddress>
 800ff20:	4603      	mov	r3, r0
 800ff22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff24:	7bfb      	ldrb	r3, [r7, #15]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 f874 	bl	8010014 <USBD_Get_USB_Status>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b086      	sub	sp, #24
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	60f8      	str	r0, [r7, #12]
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	603b      	str	r3, [r7, #0]
 800ff46:	460b      	mov	r3, r1
 800ff48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff58:	7af9      	ldrb	r1, [r7, #11]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	f7f6 fdd1 	bl	8006b04 <HAL_PCD_EP_Transmit>
 800ff62:	4603      	mov	r3, r0
 800ff64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff66:	7dfb      	ldrb	r3, [r7, #23]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 f853 	bl	8010014 <USBD_Get_USB_Status>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3718      	adds	r7, #24
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	607a      	str	r2, [r7, #4]
 800ff86:	603b      	str	r3, [r7, #0]
 800ff88:	460b      	mov	r3, r1
 800ff8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff90:	2300      	movs	r3, #0
 800ff92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff9a:	7af9      	ldrb	r1, [r7, #11]
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	f7f6 fd4d 	bl	8006a3e <HAL_PCD_EP_Receive>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffa8:	7dfb      	ldrb	r3, [r7, #23]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 f832 	bl	8010014 <USBD_Get_USB_Status>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3718      	adds	r7, #24
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffd0:	78fa      	ldrb	r2, [r7, #3]
 800ffd2:	4611      	mov	r1, r2
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f6 fd7d 	bl	8006ad4 <HAL_PCD_EP_GetRxCount>
 800ffda:	4603      	mov	r3, r0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ffec:	4b03      	ldr	r3, [pc, #12]	; (800fffc <USBD_static_malloc+0x18>)
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	370c      	adds	r7, #12
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	20006bcc 	.word	0x20006bcc

08010000 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]

}
 8010008:	bf00      	nop
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010014:	b480      	push	{r7}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	4603      	mov	r3, r0
 801001c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801001e:	2300      	movs	r3, #0
 8010020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	2b03      	cmp	r3, #3
 8010026:	d817      	bhi.n	8010058 <USBD_Get_USB_Status+0x44>
 8010028:	a201      	add	r2, pc, #4	; (adr r2, 8010030 <USBD_Get_USB_Status+0x1c>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	08010041 	.word	0x08010041
 8010034:	08010047 	.word	0x08010047
 8010038:	0801004d 	.word	0x0801004d
 801003c:	08010053 	.word	0x08010053
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010040:	2300      	movs	r3, #0
 8010042:	73fb      	strb	r3, [r7, #15]
    break;
 8010044:	e00b      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010046:	2303      	movs	r3, #3
 8010048:	73fb      	strb	r3, [r7, #15]
    break;
 801004a:	e008      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801004c:	2301      	movs	r3, #1
 801004e:	73fb      	strb	r3, [r7, #15]
    break;
 8010050:	e005      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010052:	2303      	movs	r3, #3
 8010054:	73fb      	strb	r3, [r7, #15]
    break;
 8010056:	e002      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010058:	2303      	movs	r3, #3
 801005a:	73fb      	strb	r3, [r7, #15]
    break;
 801005c:	bf00      	nop
  }
  return usb_status;
 801005e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <arm_copy_f32>:
 801006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010070:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8010074:	d01e      	beq.n	80100b4 <arm_copy_f32+0x48>
 8010076:	f100 0410 	add.w	r4, r0, #16
 801007a:	f101 0310 	add.w	r3, r1, #16
 801007e:	4645      	mov	r5, r8
 8010080:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8010084:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8010088:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801008c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8010090:	f843 6c04 	str.w	r6, [r3, #-4]
 8010094:	3d01      	subs	r5, #1
 8010096:	f843 cc10 	str.w	ip, [r3, #-16]
 801009a:	f843 ec0c 	str.w	lr, [r3, #-12]
 801009e:	f843 7c08 	str.w	r7, [r3, #-8]
 80100a2:	f104 0410 	add.w	r4, r4, #16
 80100a6:	f103 0310 	add.w	r3, r3, #16
 80100aa:	d1e9      	bne.n	8010080 <arm_copy_f32+0x14>
 80100ac:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80100b0:	4440      	add	r0, r8
 80100b2:	4441      	add	r1, r8
 80100b4:	f012 0203 	ands.w	r2, r2, #3
 80100b8:	d005      	beq.n	80100c6 <arm_copy_f32+0x5a>
 80100ba:	f850 3b04 	ldr.w	r3, [r0], #4
 80100be:	f841 3b04 	str.w	r3, [r1], #4
 80100c2:	3a01      	subs	r2, #1
 80100c4:	d1f9      	bne.n	80100ba <arm_copy_f32+0x4e>
 80100c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ca:	bf00      	nop

080100cc <arm_mat_trans_f32>:
 80100cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d0:	f8b0 c000 	ldrh.w	ip, [r0]
 80100d4:	884a      	ldrh	r2, [r1, #2]
 80100d6:	6844      	ldr	r4, [r0, #4]
 80100d8:	8843      	ldrh	r3, [r0, #2]
 80100da:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80100de:	4562      	cmp	r2, ip
 80100e0:	b083      	sub	sp, #12
 80100e2:	d15f      	bne.n	80101a4 <arm_mat_trans_f32+0xd8>
 80100e4:	f8b1 e000 	ldrh.w	lr, [r1]
 80100e8:	459e      	cmp	lr, r3
 80100ea:	d15b      	bne.n	80101a4 <arm_mat_trans_f32+0xd8>
 80100ec:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80100f0:	f00e 0303 	and.w	r3, lr, #3
 80100f4:	461a      	mov	r2, r3
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	f103 0902 	add.w	r9, r3, #2
 8010102:	3a01      	subs	r2, #1
 8010104:	3301      	adds	r3, #1
 8010106:	ea4f 170c 	mov.w	r7, ip, lsl #4
 801010a:	fb03 f707 	mul.w	r7, r3, r7
 801010e:	b292      	uxth	r2, r2
 8010110:	3201      	adds	r2, #1
 8010112:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 8010116:	463b      	mov	r3, r7
 8010118:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801011c:	4647      	mov	r7, r8
 801011e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8010122:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8010126:	2600      	movs	r6, #0
 8010128:	4698      	mov	r8, r3
 801012a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 801012e:	b3bf      	cbz	r7, 80101a0 <arm_mat_trans_f32+0xd4>
 8010130:	f104 0210 	add.w	r2, r4, #16
 8010134:	eb04 0509 	add.w	r5, r4, r9
 8010138:	4603      	mov	r3, r0
 801013a:	ed52 7a04 	vldr	s15, [r2, #-16]
 801013e:	edc3 7a00 	vstr	s15, [r3]
 8010142:	ed52 7a03 	vldr	s15, [r2, #-12]
 8010146:	440b      	add	r3, r1
 8010148:	edc3 7a00 	vstr	s15, [r3]
 801014c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8010150:	440b      	add	r3, r1
 8010152:	edc3 7a00 	vstr	s15, [r3]
 8010156:	ed52 7a01 	vldr	s15, [r2, #-4]
 801015a:	3210      	adds	r2, #16
 801015c:	440b      	add	r3, r1
 801015e:	42aa      	cmp	r2, r5
 8010160:	edc3 7a00 	vstr	s15, [r3]
 8010164:	440b      	add	r3, r1
 8010166:	d1e8      	bne.n	801013a <arm_mat_trans_f32+0x6e>
 8010168:	eb04 030b 	add.w	r3, r4, fp
 801016c:	4440      	add	r0, r8
 801016e:	9a01      	ldr	r2, [sp, #4]
 8010170:	b182      	cbz	r2, 8010194 <arm_mat_trans_f32+0xc8>
 8010172:	eb03 040e 	add.w	r4, r3, lr
 8010176:	f853 2b04 	ldr.w	r2, [r3], #4
 801017a:	6002      	str	r2, [r0, #0]
 801017c:	42a3      	cmp	r3, r4
 801017e:	4408      	add	r0, r1
 8010180:	d1f9      	bne.n	8010176 <arm_mat_trans_f32+0xaa>
 8010182:	3601      	adds	r6, #1
 8010184:	b2b6      	uxth	r6, r6
 8010186:	4566      	cmp	r6, ip
 8010188:	d1cf      	bne.n	801012a <arm_mat_trans_f32+0x5e>
 801018a:	2000      	movs	r0, #0
 801018c:	b240      	sxtb	r0, r0
 801018e:	b003      	add	sp, #12
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	3601      	adds	r6, #1
 8010196:	b2b6      	uxth	r6, r6
 8010198:	4566      	cmp	r6, ip
 801019a:	461c      	mov	r4, r3
 801019c:	d1c5      	bne.n	801012a <arm_mat_trans_f32+0x5e>
 801019e:	e7f4      	b.n	801018a <arm_mat_trans_f32+0xbe>
 80101a0:	4623      	mov	r3, r4
 80101a2:	e7e4      	b.n	801016e <arm_mat_trans_f32+0xa2>
 80101a4:	20fd      	movs	r0, #253	; 0xfd
 80101a6:	b240      	sxtb	r0, r0
 80101a8:	b003      	add	sp, #12
 80101aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ae:	bf00      	nop

080101b0 <arm_mat_sub_f32>:
 80101b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101b2:	e891 0090 	ldmia.w	r1, {r4, r7}
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	6846      	ldr	r6, [r0, #4]
 80101ba:	6855      	ldr	r5, [r2, #4]
 80101bc:	42a3      	cmp	r3, r4
 80101be:	d14f      	bne.n	8010260 <arm_mat_sub_f32+0xb0>
 80101c0:	6812      	ldr	r2, [r2, #0]
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d14c      	bne.n	8010260 <arm_mat_sub_f32+0xb0>
 80101c6:	8842      	ldrh	r2, [r0, #2]
 80101c8:	8803      	ldrh	r3, [r0, #0]
 80101ca:	fb03 f002 	mul.w	r0, r3, r2
 80101ce:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 80101d2:	d033      	beq.n	801023c <arm_mat_sub_f32+0x8c>
 80101d4:	f106 0110 	add.w	r1, r6, #16
 80101d8:	f107 0210 	add.w	r2, r7, #16
 80101dc:	f105 0310 	add.w	r3, r5, #16
 80101e0:	4674      	mov	r4, lr
 80101e2:	ed51 6a03 	vldr	s13, [r1, #-12]
 80101e6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80101ea:	ed51 7a04 	vldr	s15, [r1, #-16]
 80101ee:	ed52 5a04 	vldr	s11, [r2, #-16]
 80101f2:	ed11 7a02 	vldr	s14, [r1, #-8]
 80101f6:	ed12 6a02 	vldr	s12, [r2, #-8]
 80101fa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80101fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010202:	ed43 6a03 	vstr	s13, [r3, #-12]
 8010206:	ed43 7a04 	vstr	s15, [r3, #-16]
 801020a:	ed51 7a01 	vldr	s15, [r1, #-4]
 801020e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8010212:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010216:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801021a:	3c01      	subs	r4, #1
 801021c:	ed03 7a02 	vstr	s14, [r3, #-8]
 8010220:	ed43 7a01 	vstr	s15, [r3, #-4]
 8010224:	f101 0110 	add.w	r1, r1, #16
 8010228:	f102 0210 	add.w	r2, r2, #16
 801022c:	f103 0310 	add.w	r3, r3, #16
 8010230:	d1d7      	bne.n	80101e2 <arm_mat_sub_f32+0x32>
 8010232:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8010236:	441e      	add	r6, r3
 8010238:	441f      	add	r7, r3
 801023a:	441d      	add	r5, r3
 801023c:	f010 0303 	ands.w	r3, r0, #3
 8010240:	bf18      	it	ne
 8010242:	462a      	movne	r2, r5
 8010244:	d009      	beq.n	801025a <arm_mat_sub_f32+0xaa>
 8010246:	ecf6 7a01 	vldmia	r6!, {s15}
 801024a:	ecb7 7a01 	vldmia	r7!, {s14}
 801024e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010252:	3b01      	subs	r3, #1
 8010254:	ece2 7a01 	vstmia	r2!, {s15}
 8010258:	d1f5      	bne.n	8010246 <arm_mat_sub_f32+0x96>
 801025a:	2000      	movs	r0, #0
 801025c:	b240      	sxtb	r0, r0
 801025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010260:	20fd      	movs	r0, #253	; 0xfd
 8010262:	b240      	sxtb	r0, r0
 8010264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010266:	bf00      	nop

08010268 <arm_mat_scale_f32>:
 8010268:	b470      	push	{r4, r5, r6}
 801026a:	e891 0018 	ldmia.w	r1, {r3, r4}
 801026e:	6802      	ldr	r2, [r0, #0]
 8010270:	6845      	ldr	r5, [r0, #4]
 8010272:	429a      	cmp	r2, r3
 8010274:	d13c      	bne.n	80102f0 <arm_mat_scale_f32+0x88>
 8010276:	8841      	ldrh	r1, [r0, #2]
 8010278:	8803      	ldrh	r3, [r0, #0]
 801027a:	fb03 f101 	mul.w	r1, r3, r1
 801027e:	088e      	lsrs	r6, r1, #2
 8010280:	d025      	beq.n	80102ce <arm_mat_scale_f32+0x66>
 8010282:	f105 0210 	add.w	r2, r5, #16
 8010286:	f104 0310 	add.w	r3, r4, #16
 801028a:	4630      	mov	r0, r6
 801028c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8010290:	ed52 6a02 	vldr	s13, [r2, #-8]
 8010294:	ed12 7a01 	vldr	s14, [r2, #-4]
 8010298:	ed52 7a04 	vldr	s15, [r2, #-16]
 801029c:	ee20 6a06 	vmul.f32	s12, s0, s12
 80102a0:	ee60 6a26 	vmul.f32	s13, s0, s13
 80102a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80102a8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80102ac:	3801      	subs	r0, #1
 80102ae:	ed03 6a03 	vstr	s12, [r3, #-12]
 80102b2:	ed43 6a02 	vstr	s13, [r3, #-8]
 80102b6:	ed03 7a01 	vstr	s14, [r3, #-4]
 80102ba:	ed43 7a04 	vstr	s15, [r3, #-16]
 80102be:	f102 0210 	add.w	r2, r2, #16
 80102c2:	f103 0310 	add.w	r3, r3, #16
 80102c6:	d1e1      	bne.n	801028c <arm_mat_scale_f32+0x24>
 80102c8:	0136      	lsls	r6, r6, #4
 80102ca:	4435      	add	r5, r6
 80102cc:	4434      	add	r4, r6
 80102ce:	f011 0303 	ands.w	r3, r1, #3
 80102d2:	bf18      	it	ne
 80102d4:	4622      	movne	r2, r4
 80102d6:	d007      	beq.n	80102e8 <arm_mat_scale_f32+0x80>
 80102d8:	ecf5 7a01 	vldmia	r5!, {s15}
 80102dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80102e0:	3b01      	subs	r3, #1
 80102e2:	ece2 7a01 	vstmia	r2!, {s15}
 80102e6:	d1f7      	bne.n	80102d8 <arm_mat_scale_f32+0x70>
 80102e8:	2000      	movs	r0, #0
 80102ea:	b240      	sxtb	r0, r0
 80102ec:	bc70      	pop	{r4, r5, r6}
 80102ee:	4770      	bx	lr
 80102f0:	20fd      	movs	r0, #253	; 0xfd
 80102f2:	e7fa      	b.n	80102ea <arm_mat_scale_f32+0x82>

080102f4 <arm_mat_mult_f32>:
 80102f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f8:	8843      	ldrh	r3, [r0, #2]
 80102fa:	880d      	ldrh	r5, [r1, #0]
 80102fc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010300:	6854      	ldr	r4, [r2, #4]
 8010302:	8800      	ldrh	r0, [r0, #0]
 8010304:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8010308:	b087      	sub	sp, #28
 801030a:	429d      	cmp	r5, r3
 801030c:	9003      	str	r0, [sp, #12]
 801030e:	9404      	str	r4, [sp, #16]
 8010310:	f040 808d 	bne.w	801042e <arm_mat_mult_f32+0x13a>
 8010314:	8813      	ldrh	r3, [r2, #0]
 8010316:	4283      	cmp	r3, r0
 8010318:	f040 8089 	bne.w	801042e <arm_mat_mult_f32+0x13a>
 801031c:	8853      	ldrh	r3, [r2, #2]
 801031e:	4543      	cmp	r3, r8
 8010320:	f040 8085 	bne.w	801042e <arm_mat_mult_f32+0x13a>
 8010324:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8010328:	f005 0303 	and.w	r3, r5, #3
 801032c:	461a      	mov	r2, r3
 801032e:	9301      	str	r3, [sp, #4]
 8010330:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010334:	b29b      	uxth	r3, r3
 8010336:	3301      	adds	r3, #1
 8010338:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 801033c:	fb0b fb03 	mul.w	fp, fp, r3
 8010340:	3a01      	subs	r2, #1
 8010342:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 8010346:	00ab      	lsls	r3, r5, #2
 8010348:	b292      	uxth	r2, r2
 801034a:	9305      	str	r3, [sp, #20]
 801034c:	2300      	movs	r3, #0
 801034e:	3201      	adds	r2, #1
 8010350:	9302      	str	r3, [sp, #8]
 8010352:	460b      	mov	r3, r1
 8010354:	684c      	ldr	r4, [r1, #4]
 8010356:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801035a:	4651      	mov	r1, sl
 801035c:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8010360:	46da      	mov	sl, fp
 8010362:	469b      	mov	fp, r3
 8010364:	9b04      	ldr	r3, [sp, #16]
 8010366:	9a02      	ldr	r2, [sp, #8]
 8010368:	2600      	movs	r6, #0
 801036a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 801036e:	f10c 0510 	add.w	r5, ip, #16
 8010372:	eddf 7a31 	vldr	s15, [pc, #196]	; 8010438 <arm_mat_mult_f32+0x144>
 8010376:	2900      	cmp	r1, #0
 8010378:	d057      	beq.n	801042a <arm_mat_mult_f32+0x136>
 801037a:	f10e 0210 	add.w	r2, lr, #16
 801037e:	4623      	mov	r3, r4
 8010380:	ed52 5a04 	vldr	s11, [r2, #-16]
 8010384:	edd3 6a00 	vldr	s13, [r3]
 8010388:	ed12 7a03 	vldr	s14, [r2, #-12]
 801038c:	ed12 5a02 	vldr	s10, [r2, #-8]
 8010390:	ed12 6a01 	vldr	s12, [r2, #-4]
 8010394:	4403      	add	r3, r0
 8010396:	ee65 5aa6 	vmul.f32	s11, s11, s13
 801039a:	edd3 6a00 	vldr	s13, [r3]
 801039e:	4403      	add	r3, r0
 80103a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80103a4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80103a8:	edd3 6a00 	vldr	s13, [r3]
 80103ac:	4403      	add	r3, r0
 80103ae:	ee77 5a27 	vadd.f32	s11, s14, s15
 80103b2:	ee65 7a26 	vmul.f32	s15, s10, s13
 80103b6:	edd3 6a00 	vldr	s13, [r3]
 80103ba:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80103be:	3210      	adds	r2, #16
 80103c0:	ee66 7a26 	vmul.f32	s15, s12, s13
 80103c4:	42aa      	cmp	r2, r5
 80103c6:	4403      	add	r3, r0
 80103c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103cc:	d1d8      	bne.n	8010380 <arm_mat_mult_f32+0x8c>
 80103ce:	4454      	add	r4, sl
 80103d0:	4663      	mov	r3, ip
 80103d2:	9a01      	ldr	r2, [sp, #4]
 80103d4:	b162      	cbz	r2, 80103f0 <arm_mat_mult_f32+0xfc>
 80103d6:	eb03 0209 	add.w	r2, r3, r9
 80103da:	ecf3 6a01 	vldmia	r3!, {s13}
 80103de:	ed94 7a00 	vldr	s14, [r4]
 80103e2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80103e6:	4293      	cmp	r3, r2
 80103e8:	4404      	add	r4, r0
 80103ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103ee:	d1f4      	bne.n	80103da <arm_mat_mult_f32+0xe6>
 80103f0:	ece7 7a01 	vstmia	r7!, {s15}
 80103f4:	3601      	adds	r6, #1
 80103f6:	b2b6      	uxth	r6, r6
 80103f8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80103fc:	4546      	cmp	r6, r8
 80103fe:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8010402:	d1b6      	bne.n	8010372 <arm_mat_mult_f32+0x7e>
 8010404:	9a03      	ldr	r2, [sp, #12]
 8010406:	9c02      	ldr	r4, [sp, #8]
 8010408:	9d05      	ldr	r5, [sp, #20]
 801040a:	3a01      	subs	r2, #1
 801040c:	4434      	add	r4, r6
 801040e:	b2a4      	uxth	r4, r4
 8010410:	b292      	uxth	r2, r2
 8010412:	9402      	str	r4, [sp, #8]
 8010414:	9203      	str	r2, [sp, #12]
 8010416:	44ae      	add	lr, r5
 8010418:	44ac      	add	ip, r5
 801041a:	461c      	mov	r4, r3
 801041c:	2a00      	cmp	r2, #0
 801041e:	d1a1      	bne.n	8010364 <arm_mat_mult_f32+0x70>
 8010420:	4610      	mov	r0, r2
 8010422:	b240      	sxtb	r0, r0
 8010424:	b007      	add	sp, #28
 8010426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042a:	4673      	mov	r3, lr
 801042c:	e7d1      	b.n	80103d2 <arm_mat_mult_f32+0xde>
 801042e:	20fd      	movs	r0, #253	; 0xfd
 8010430:	b240      	sxtb	r0, r0
 8010432:	b007      	add	sp, #28
 8010434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010438:	00000000 	.word	0x00000000

0801043c <arm_mat_inverse_f32>:
 801043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	8803      	ldrh	r3, [r0, #0]
 8010442:	8844      	ldrh	r4, [r0, #2]
 8010444:	6845      	ldr	r5, [r0, #4]
 8010446:	684a      	ldr	r2, [r1, #4]
 8010448:	b089      	sub	sp, #36	; 0x24
 801044a:	429c      	cmp	r4, r3
 801044c:	9202      	str	r2, [sp, #8]
 801044e:	9501      	str	r5, [sp, #4]
 8010450:	d004      	beq.n	801045c <arm_mat_inverse_f32+0x20>
 8010452:	20fd      	movs	r0, #253	; 0xfd
 8010454:	b240      	sxtb	r0, r0
 8010456:	b009      	add	sp, #36	; 0x24
 8010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045c:	880a      	ldrh	r2, [r1, #0]
 801045e:	884b      	ldrh	r3, [r1, #2]
 8010460:	4293      	cmp	r3, r2
 8010462:	d1f6      	bne.n	8010452 <arm_mat_inverse_f32+0x16>
 8010464:	429c      	cmp	r4, r3
 8010466:	d1f4      	bne.n	8010452 <arm_mat_inverse_f32+0x16>
 8010468:	2c00      	cmp	r4, #0
 801046a:	f000 80e4 	beq.w	8010636 <arm_mat_inverse_f32+0x1fa>
 801046e:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
 8010472:	4623      	mov	r3, r4
 8010474:	f109 39ff 	add.w	r9, r9, #4294967295
 8010478:	f04f 0a00 	mov.w	sl, #0
 801047c:	1e67      	subs	r7, r4, #1
 801047e:	9007      	str	r0, [sp, #28]
 8010480:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8010484:	9e02      	ldr	r6, [sp, #8]
 8010486:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 801048a:	4654      	mov	r4, sl
 801048c:	4698      	mov	r8, r3
 801048e:	e007      	b.n	80104a0 <arm_mat_inverse_f32+0x64>
 8010490:	f000 fb5d 	bl	8010b4e <memset>
 8010494:	444e      	add	r6, r9
 8010496:	3401      	adds	r4, #1
 8010498:	f1a9 0904 	sub.w	r9, r9, #4
 801049c:	f10a 0a04 	add.w	sl, sl, #4
 80104a0:	4652      	mov	r2, sl
 80104a2:	4630      	mov	r0, r6
 80104a4:	2100      	movs	r1, #0
 80104a6:	b114      	cbz	r4, 80104ae <arm_mat_inverse_f32+0x72>
 80104a8:	f000 fb51 	bl	8010b4e <memset>
 80104ac:	4456      	add	r6, sl
 80104ae:	f8c6 b000 	str.w	fp, [r6]
 80104b2:	42bc      	cmp	r4, r7
 80104b4:	f106 0604 	add.w	r6, r6, #4
 80104b8:	464a      	mov	r2, r9
 80104ba:	4630      	mov	r0, r6
 80104bc:	f04f 0100 	mov.w	r1, #0
 80104c0:	d1e6      	bne.n	8010490 <arm_mat_inverse_f32+0x54>
 80104c2:	4643      	mov	r3, r8
 80104c4:	009e      	lsls	r6, r3, #2
 80104c6:	46a0      	mov	r8, r4
 80104c8:	2700      	movs	r7, #0
 80104ca:	461c      	mov	r4, r3
 80104cc:	f8dd c008 	ldr.w	ip, [sp, #8]
 80104d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80104d4:	1d33      	adds	r3, r6, #4
 80104d6:	9306      	str	r3, [sp, #24]
 80104d8:	46b1      	mov	r9, r6
 80104da:	9705      	str	r7, [sp, #20]
 80104dc:	46a6      	mov	lr, r4
 80104de:	42bc      	cmp	r4, r7
 80104e0:	edd5 6a00 	vldr	s13, [r5]
 80104e4:	f000 80be 	beq.w	8010664 <arm_mat_inverse_f32+0x228>
 80104e8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80106b4 <arm_mat_inverse_f32+0x278>
 80104ec:	463a      	mov	r2, r7
 80104ee:	462b      	mov	r3, r5
 80104f0:	edd3 7a00 	vldr	s15, [r3]
 80104f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80104f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fc:	bfd8      	it	le
 80104fe:	eef1 7a67 	vnegle.f32	s15, s15
 8010502:	eef4 7a47 	vcmp.f32	s15, s14
 8010506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801050a:	f102 0201 	add.w	r2, r2, #1
 801050e:	bfc8      	it	gt
 8010510:	eeb0 7a67 	vmovgt.f32	s14, s15
 8010514:	4294      	cmp	r4, r2
 8010516:	4433      	add	r3, r6
 8010518:	d1ea      	bne.n	80104f0 <arm_mat_inverse_f32+0xb4>
 801051a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801051e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010522:	f000 809f 	beq.w	8010664 <arm_mat_inverse_f32+0x228>
 8010526:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801052a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052e:	bfd4      	ite	le
 8010530:	eef1 7a66 	vnegle.f32	s15, s13
 8010534:	eef0 7a66 	vmovgt.f32	s15, s13
 8010538:	eef4 7a47 	vcmp.f32	s15, s14
 801053c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010540:	d010      	beq.n	8010564 <arm_mat_inverse_f32+0x128>
 8010542:	9b03      	ldr	r3, [sp, #12]
 8010544:	b173      	cbz	r3, 8010564 <arm_mat_inverse_f32+0x128>
 8010546:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801054a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054e:	eef1 7a66 	vneg.f32	s15, s13
 8010552:	bfc8      	it	gt
 8010554:	eef0 7a66 	vmovgt.f32	s15, s13
 8010558:	eef4 7a47 	vcmp.f32	s15, s14
 801055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010560:	f000 8084 	beq.w	801066c <arm_mat_inverse_f32+0x230>
 8010564:	9b05      	ldr	r3, [sp, #20]
 8010566:	b933      	cbnz	r3, 8010576 <arm_mat_inverse_f32+0x13a>
 8010568:	eef5 6a40 	vcmp.f32	s13, #0.0
 801056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010570:	d078      	beq.n	8010664 <arm_mat_inverse_f32+0x228>
 8010572:	2300      	movs	r3, #0
 8010574:	9305      	str	r3, [sp, #20]
 8010576:	eb0c 0306 	add.w	r3, ip, r6
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	4672      	mov	r2, lr
 801057e:	462b      	mov	r3, r5
 8010580:	edd3 7a00 	vldr	s15, [r3]
 8010584:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8010588:	3a01      	subs	r2, #1
 801058a:	ece3 7a01 	vstmia	r3!, {s15}
 801058e:	d1f7      	bne.n	8010580 <arm_mat_inverse_f32+0x144>
 8010590:	4621      	mov	r1, r4
 8010592:	4663      	mov	r3, ip
 8010594:	edd3 7a00 	vldr	s15, [r3]
 8010598:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 801059c:	3901      	subs	r1, #1
 801059e:	ece3 7a01 	vstmia	r3!, {s15}
 80105a2:	d1f7      	bne.n	8010594 <arm_mat_inverse_f32+0x158>
 80105a4:	9802      	ldr	r0, [sp, #8]
 80105a6:	f8dd b004 	ldr.w	fp, [sp, #4]
 80105aa:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80105ae:	42b9      	cmp	r1, r7
 80105b0:	d07c      	beq.n	80106ac <arm_mat_inverse_f32+0x270>
 80105b2:	eddb 6a00 	vldr	s13, [fp]
 80105b6:	4672      	mov	r2, lr
 80105b8:	46aa      	mov	sl, r5
 80105ba:	465b      	mov	r3, fp
 80105bc:	ecfa 7a01 	vldmia	sl!, {s15}
 80105c0:	ed93 7a00 	vldr	s14, [r3]
 80105c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105c8:	3a01      	subs	r2, #1
 80105ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ce:	ece3 7a01 	vstmia	r3!, {s15}
 80105d2:	d1f3      	bne.n	80105bc <arm_mat_inverse_f32+0x180>
 80105d4:	44cb      	add	fp, r9
 80105d6:	4622      	mov	r2, r4
 80105d8:	46e2      	mov	sl, ip
 80105da:	4603      	mov	r3, r0
 80105dc:	ecfa 7a01 	vldmia	sl!, {s15}
 80105e0:	ed93 7a00 	vldr	s14, [r3]
 80105e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105e8:	3a01      	subs	r2, #1
 80105ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ee:	ece3 7a01 	vstmia	r3!, {s15}
 80105f2:	d1f3      	bne.n	80105dc <arm_mat_inverse_f32+0x1a0>
 80105f4:	4430      	add	r0, r6
 80105f6:	3101      	adds	r1, #1
 80105f8:	428c      	cmp	r4, r1
 80105fa:	44c3      	add	fp, r8
 80105fc:	d1d7      	bne.n	80105ae <arm_mat_inverse_f32+0x172>
 80105fe:	9b01      	ldr	r3, [sp, #4]
 8010600:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010604:	3304      	adds	r3, #4
 8010606:	9301      	str	r3, [sp, #4]
 8010608:	9b06      	ldr	r3, [sp, #24]
 801060a:	441d      	add	r5, r3
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	f1be 0e01 	subs.w	lr, lr, #1
 8010612:	f103 33ff 	add.w	r3, r3, #4294967295
 8010616:	f107 0701 	add.w	r7, r7, #1
 801061a:	9303      	str	r3, [sp, #12]
 801061c:	f1a9 0904 	sub.w	r9, r9, #4
 8010620:	f47f af5d 	bne.w	80104de <arm_mat_inverse_f32+0xa2>
 8010624:	9b05      	ldr	r3, [sp, #20]
 8010626:	b9fb      	cbnz	r3, 8010668 <arm_mat_inverse_f32+0x22c>
 8010628:	eef5 6a40 	vcmp.f32	s13, #0.0
 801062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010630:	d11a      	bne.n	8010668 <arm_mat_inverse_f32+0x22c>
 8010632:	9b07      	ldr	r3, [sp, #28]
 8010634:	685d      	ldr	r5, [r3, #4]
 8010636:	fb04 f404 	mul.w	r4, r4, r4
 801063a:	b19c      	cbz	r4, 8010664 <arm_mat_inverse_f32+0x228>
 801063c:	edd5 7a00 	vldr	s15, [r5]
 8010640:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010648:	d10e      	bne.n	8010668 <arm_mat_inverse_f32+0x22c>
 801064a:	3504      	adds	r5, #4
 801064c:	2300      	movs	r3, #0
 801064e:	e006      	b.n	801065e <arm_mat_inverse_f32+0x222>
 8010650:	ecf5 7a01 	vldmia	r5!, {s15}
 8010654:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065c:	d104      	bne.n	8010668 <arm_mat_inverse_f32+0x22c>
 801065e:	3301      	adds	r3, #1
 8010660:	42a3      	cmp	r3, r4
 8010662:	d1f5      	bne.n	8010650 <arm_mat_inverse_f32+0x214>
 8010664:	20fb      	movs	r0, #251	; 0xfb
 8010666:	e6f5      	b.n	8010454 <arm_mat_inverse_f32+0x18>
 8010668:	2000      	movs	r0, #0
 801066a:	e6f3      	b.n	8010454 <arm_mat_inverse_f32+0x18>
 801066c:	9b01      	ldr	r3, [sp, #4]
 801066e:	4671      	mov	r1, lr
 8010670:	462a      	mov	r2, r5
 8010672:	6810      	ldr	r0, [r2, #0]
 8010674:	f8d3 8000 	ldr.w	r8, [r3]
 8010678:	f842 8b04 	str.w	r8, [r2], #4
 801067c:	3901      	subs	r1, #1
 801067e:	f843 0b04 	str.w	r0, [r3], #4
 8010682:	d1f6      	bne.n	8010672 <arm_mat_inverse_f32+0x236>
 8010684:	eb0c 0306 	add.w	r3, ip, r6
 8010688:	9304      	str	r3, [sp, #16]
 801068a:	4619      	mov	r1, r3
 801068c:	4622      	mov	r2, r4
 801068e:	4663      	mov	r3, ip
 8010690:	6808      	ldr	r0, [r1, #0]
 8010692:	f8d3 8000 	ldr.w	r8, [r3]
 8010696:	f841 8b04 	str.w	r8, [r1], #4
 801069a:	3a01      	subs	r2, #1
 801069c:	f843 0b04 	str.w	r0, [r3], #4
 80106a0:	d1f6      	bne.n	8010690 <arm_mat_inverse_f32+0x254>
 80106a2:	2301      	movs	r3, #1
 80106a4:	edd5 6a00 	vldr	s13, [r5]
 80106a8:	9305      	str	r3, [sp, #20]
 80106aa:	e767      	b.n	801057c <arm_mat_inverse_f32+0x140>
 80106ac:	44cb      	add	fp, r9
 80106ae:	4430      	add	r0, r6
 80106b0:	e7a1      	b.n	80105f6 <arm_mat_inverse_f32+0x1ba>
 80106b2:	bf00      	nop
 80106b4:	00000000 	.word	0x00000000

080106b8 <arm_mat_init_f32>:
 80106b8:	8001      	strh	r1, [r0, #0]
 80106ba:	8042      	strh	r2, [r0, #2]
 80106bc:	6043      	str	r3, [r0, #4]
 80106be:	4770      	bx	lr

080106c0 <arm_mat_add_f32>:
 80106c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106c2:	e891 0090 	ldmia.w	r1, {r4, r7}
 80106c6:	6803      	ldr	r3, [r0, #0]
 80106c8:	6846      	ldr	r6, [r0, #4]
 80106ca:	6855      	ldr	r5, [r2, #4]
 80106cc:	42a3      	cmp	r3, r4
 80106ce:	d14f      	bne.n	8010770 <arm_mat_add_f32+0xb0>
 80106d0:	6812      	ldr	r2, [r2, #0]
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d14c      	bne.n	8010770 <arm_mat_add_f32+0xb0>
 80106d6:	8842      	ldrh	r2, [r0, #2]
 80106d8:	8803      	ldrh	r3, [r0, #0]
 80106da:	fb03 f002 	mul.w	r0, r3, r2
 80106de:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 80106e2:	d033      	beq.n	801074c <arm_mat_add_f32+0x8c>
 80106e4:	f106 0110 	add.w	r1, r6, #16
 80106e8:	f107 0210 	add.w	r2, r7, #16
 80106ec:	f105 0310 	add.w	r3, r5, #16
 80106f0:	4674      	mov	r4, lr
 80106f2:	ed51 6a03 	vldr	s13, [r1, #-12]
 80106f6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80106fa:	ed51 7a04 	vldr	s15, [r1, #-16]
 80106fe:	ed52 5a04 	vldr	s11, [r2, #-16]
 8010702:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010706:	ed12 6a02 	vldr	s12, [r2, #-8]
 801070a:	ee76 6a85 	vadd.f32	s13, s13, s10
 801070e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010712:	ed43 6a03 	vstr	s13, [r3, #-12]
 8010716:	ed43 7a04 	vstr	s15, [r3, #-16]
 801071a:	ed51 7a01 	vldr	s15, [r1, #-4]
 801071e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8010722:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801072a:	3c01      	subs	r4, #1
 801072c:	ed03 7a02 	vstr	s14, [r3, #-8]
 8010730:	ed43 7a01 	vstr	s15, [r3, #-4]
 8010734:	f101 0110 	add.w	r1, r1, #16
 8010738:	f102 0210 	add.w	r2, r2, #16
 801073c:	f103 0310 	add.w	r3, r3, #16
 8010740:	d1d7      	bne.n	80106f2 <arm_mat_add_f32+0x32>
 8010742:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8010746:	441e      	add	r6, r3
 8010748:	441f      	add	r7, r3
 801074a:	441d      	add	r5, r3
 801074c:	f010 0303 	ands.w	r3, r0, #3
 8010750:	bf18      	it	ne
 8010752:	462a      	movne	r2, r5
 8010754:	d009      	beq.n	801076a <arm_mat_add_f32+0xaa>
 8010756:	ecf6 7a01 	vldmia	r6!, {s15}
 801075a:	ecb7 7a01 	vldmia	r7!, {s14}
 801075e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010762:	3b01      	subs	r3, #1
 8010764:	ece2 7a01 	vstmia	r2!, {s15}
 8010768:	d1f5      	bne.n	8010756 <arm_mat_add_f32+0x96>
 801076a:	2000      	movs	r0, #0
 801076c:	b240      	sxtb	r0, r0
 801076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010770:	20fd      	movs	r0, #253	; 0xfd
 8010772:	b240      	sxtb	r0, r0
 8010774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010776:	bf00      	nop

08010778 <arm_sin_f32>:
 8010778:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80107f4 <arm_sin_f32+0x7c>
 801077c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010780:	ee20 7a07 	vmul.f32	s14, s0, s14
 8010784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010788:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801078c:	d42c      	bmi.n	80107e8 <arm_sin_f32+0x70>
 801078e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010792:	eddf 6a19 	vldr	s13, [pc, #100]	; 80107f8 <arm_sin_f32+0x80>
 8010796:	4a19      	ldr	r2, [pc, #100]	; (80107fc <arm_sin_f32+0x84>)
 8010798:	ee77 7a67 	vsub.f32	s15, s14, s15
 801079c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80107a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80107a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ac:	bfa8      	it	ge
 80107ae:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80107b2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80107b6:	ee17 3a10 	vmov	r3, s14
 80107ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107be:	ee07 3a10 	vmov	s14, r3
 80107c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80107c6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80107ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107ce:	edd1 6a01 	vldr	s13, [r1, #4]
 80107d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80107d6:	ed91 0a00 	vldr	s0, [r1]
 80107da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107de:	ee27 0a00 	vmul.f32	s0, s14, s0
 80107e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107e6:	4770      	bx	lr
 80107e8:	ee17 3a90 	vmov	r3, s15
 80107ec:	3b01      	subs	r3, #1
 80107ee:	ee07 3a90 	vmov	s15, r3
 80107f2:	e7cc      	b.n	801078e <arm_sin_f32+0x16>
 80107f4:	3e22f983 	.word	0x3e22f983
 80107f8:	44000000 	.word	0x44000000
 80107fc:	080153b8 	.word	0x080153b8

08010800 <arm_cos_f32>:
 8010800:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8010874 <arm_cos_f32+0x74>
 8010804:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010808:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801080c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010810:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010818:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801081c:	d504      	bpl.n	8010828 <arm_cos_f32+0x28>
 801081e:	ee17 3a90 	vmov	r3, s15
 8010822:	3b01      	subs	r3, #1
 8010824:	ee07 3a90 	vmov	s15, r3
 8010828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801082c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8010878 <arm_cos_f32+0x78>
 8010830:	4a12      	ldr	r2, [pc, #72]	; (801087c <arm_cos_f32+0x7c>)
 8010832:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801083a:	ee20 0a26 	vmul.f32	s0, s0, s13
 801083e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010842:	ee17 3a90 	vmov	r3, s15
 8010846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801084a:	ee07 3a90 	vmov	s15, r3
 801084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010852:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8010856:	ee70 7a67 	vsub.f32	s15, s0, s15
 801085a:	edd1 6a01 	vldr	s13, [r1, #4]
 801085e:	ed91 0a00 	vldr	s0, [r1]
 8010862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010866:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801086a:	ee27 0a00 	vmul.f32	s0, s14, s0
 801086e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010872:	4770      	bx	lr
 8010874:	3e22f983 	.word	0x3e22f983
 8010878:	44000000 	.word	0x44000000
 801087c:	080153b8 	.word	0x080153b8

08010880 <arm_scale_f32>:
 8010880:	b470      	push	{r4, r5, r6}
 8010882:	0896      	lsrs	r6, r2, #2
 8010884:	d025      	beq.n	80108d2 <arm_scale_f32+0x52>
 8010886:	f100 0410 	add.w	r4, r0, #16
 801088a:	f101 0310 	add.w	r3, r1, #16
 801088e:	4635      	mov	r5, r6
 8010890:	ed14 6a04 	vldr	s12, [r4, #-16]
 8010894:	ed54 6a03 	vldr	s13, [r4, #-12]
 8010898:	ed14 7a02 	vldr	s14, [r4, #-8]
 801089c:	ed54 7a01 	vldr	s15, [r4, #-4]
 80108a0:	ee26 6a00 	vmul.f32	s12, s12, s0
 80108a4:	ee66 6a80 	vmul.f32	s13, s13, s0
 80108a8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80108ac:	ee67 7a80 	vmul.f32	s15, s15, s0
 80108b0:	3d01      	subs	r5, #1
 80108b2:	ed03 6a04 	vstr	s12, [r3, #-16]
 80108b6:	ed43 6a03 	vstr	s13, [r3, #-12]
 80108ba:	ed03 7a02 	vstr	s14, [r3, #-8]
 80108be:	ed43 7a01 	vstr	s15, [r3, #-4]
 80108c2:	f104 0410 	add.w	r4, r4, #16
 80108c6:	f103 0310 	add.w	r3, r3, #16
 80108ca:	d1e1      	bne.n	8010890 <arm_scale_f32+0x10>
 80108cc:	0136      	lsls	r6, r6, #4
 80108ce:	4430      	add	r0, r6
 80108d0:	4431      	add	r1, r6
 80108d2:	f012 0203 	ands.w	r2, r2, #3
 80108d6:	d007      	beq.n	80108e8 <arm_scale_f32+0x68>
 80108d8:	ecf0 7a01 	vldmia	r0!, {s15}
 80108dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80108e0:	3a01      	subs	r2, #1
 80108e2:	ece1 7a01 	vstmia	r1!, {s15}
 80108e6:	d1f7      	bne.n	80108d8 <arm_scale_f32+0x58>
 80108e8:	bc70      	pop	{r4, r5, r6}
 80108ea:	4770      	bx	lr

080108ec <__errno>:
 80108ec:	4b01      	ldr	r3, [pc, #4]	; (80108f4 <__errno+0x8>)
 80108ee:	6818      	ldr	r0, [r3, #0]
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	200001e8 	.word	0x200001e8

080108f8 <std>:
 80108f8:	2300      	movs	r3, #0
 80108fa:	b510      	push	{r4, lr}
 80108fc:	4604      	mov	r4, r0
 80108fe:	e9c0 3300 	strd	r3, r3, [r0]
 8010902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010906:	6083      	str	r3, [r0, #8]
 8010908:	8181      	strh	r1, [r0, #12]
 801090a:	6643      	str	r3, [r0, #100]	; 0x64
 801090c:	81c2      	strh	r2, [r0, #14]
 801090e:	6183      	str	r3, [r0, #24]
 8010910:	4619      	mov	r1, r3
 8010912:	2208      	movs	r2, #8
 8010914:	305c      	adds	r0, #92	; 0x5c
 8010916:	f000 f91a 	bl	8010b4e <memset>
 801091a:	4b05      	ldr	r3, [pc, #20]	; (8010930 <std+0x38>)
 801091c:	6263      	str	r3, [r4, #36]	; 0x24
 801091e:	4b05      	ldr	r3, [pc, #20]	; (8010934 <std+0x3c>)
 8010920:	62a3      	str	r3, [r4, #40]	; 0x28
 8010922:	4b05      	ldr	r3, [pc, #20]	; (8010938 <std+0x40>)
 8010924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010926:	4b05      	ldr	r3, [pc, #20]	; (801093c <std+0x44>)
 8010928:	6224      	str	r4, [r4, #32]
 801092a:	6323      	str	r3, [r4, #48]	; 0x30
 801092c:	bd10      	pop	{r4, pc}
 801092e:	bf00      	nop
 8010930:	0801177d 	.word	0x0801177d
 8010934:	0801179f 	.word	0x0801179f
 8010938:	080117d7 	.word	0x080117d7
 801093c:	080117fb 	.word	0x080117fb

08010940 <_cleanup_r>:
 8010940:	4901      	ldr	r1, [pc, #4]	; (8010948 <_cleanup_r+0x8>)
 8010942:	f000 b8af 	b.w	8010aa4 <_fwalk_reent>
 8010946:	bf00      	nop
 8010948:	080127c9 	.word	0x080127c9

0801094c <__sfmoreglue>:
 801094c:	b570      	push	{r4, r5, r6, lr}
 801094e:	2268      	movs	r2, #104	; 0x68
 8010950:	1e4d      	subs	r5, r1, #1
 8010952:	4355      	muls	r5, r2
 8010954:	460e      	mov	r6, r1
 8010956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801095a:	f000 f921 	bl	8010ba0 <_malloc_r>
 801095e:	4604      	mov	r4, r0
 8010960:	b140      	cbz	r0, 8010974 <__sfmoreglue+0x28>
 8010962:	2100      	movs	r1, #0
 8010964:	e9c0 1600 	strd	r1, r6, [r0]
 8010968:	300c      	adds	r0, #12
 801096a:	60a0      	str	r0, [r4, #8]
 801096c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010970:	f000 f8ed 	bl	8010b4e <memset>
 8010974:	4620      	mov	r0, r4
 8010976:	bd70      	pop	{r4, r5, r6, pc}

08010978 <__sfp_lock_acquire>:
 8010978:	4801      	ldr	r0, [pc, #4]	; (8010980 <__sfp_lock_acquire+0x8>)
 801097a:	f000 b8d8 	b.w	8010b2e <__retarget_lock_acquire_recursive>
 801097e:	bf00      	nop
 8010980:	20006ded 	.word	0x20006ded

08010984 <__sfp_lock_release>:
 8010984:	4801      	ldr	r0, [pc, #4]	; (801098c <__sfp_lock_release+0x8>)
 8010986:	f000 b8d3 	b.w	8010b30 <__retarget_lock_release_recursive>
 801098a:	bf00      	nop
 801098c:	20006ded 	.word	0x20006ded

08010990 <__sinit_lock_acquire>:
 8010990:	4801      	ldr	r0, [pc, #4]	; (8010998 <__sinit_lock_acquire+0x8>)
 8010992:	f000 b8cc 	b.w	8010b2e <__retarget_lock_acquire_recursive>
 8010996:	bf00      	nop
 8010998:	20006dee 	.word	0x20006dee

0801099c <__sinit_lock_release>:
 801099c:	4801      	ldr	r0, [pc, #4]	; (80109a4 <__sinit_lock_release+0x8>)
 801099e:	f000 b8c7 	b.w	8010b30 <__retarget_lock_release_recursive>
 80109a2:	bf00      	nop
 80109a4:	20006dee 	.word	0x20006dee

080109a8 <__sinit>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	4604      	mov	r4, r0
 80109ac:	f7ff fff0 	bl	8010990 <__sinit_lock_acquire>
 80109b0:	69a3      	ldr	r3, [r4, #24]
 80109b2:	b11b      	cbz	r3, 80109bc <__sinit+0x14>
 80109b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b8:	f7ff bff0 	b.w	801099c <__sinit_lock_release>
 80109bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109c0:	6523      	str	r3, [r4, #80]	; 0x50
 80109c2:	4b13      	ldr	r3, [pc, #76]	; (8010a10 <__sinit+0x68>)
 80109c4:	4a13      	ldr	r2, [pc, #76]	; (8010a14 <__sinit+0x6c>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80109ca:	42a3      	cmp	r3, r4
 80109cc:	bf04      	itt	eq
 80109ce:	2301      	moveq	r3, #1
 80109d0:	61a3      	streq	r3, [r4, #24]
 80109d2:	4620      	mov	r0, r4
 80109d4:	f000 f820 	bl	8010a18 <__sfp>
 80109d8:	6060      	str	r0, [r4, #4]
 80109da:	4620      	mov	r0, r4
 80109dc:	f000 f81c 	bl	8010a18 <__sfp>
 80109e0:	60a0      	str	r0, [r4, #8]
 80109e2:	4620      	mov	r0, r4
 80109e4:	f000 f818 	bl	8010a18 <__sfp>
 80109e8:	2200      	movs	r2, #0
 80109ea:	60e0      	str	r0, [r4, #12]
 80109ec:	2104      	movs	r1, #4
 80109ee:	6860      	ldr	r0, [r4, #4]
 80109f0:	f7ff ff82 	bl	80108f8 <std>
 80109f4:	68a0      	ldr	r0, [r4, #8]
 80109f6:	2201      	movs	r2, #1
 80109f8:	2109      	movs	r1, #9
 80109fa:	f7ff ff7d 	bl	80108f8 <std>
 80109fe:	68e0      	ldr	r0, [r4, #12]
 8010a00:	2202      	movs	r2, #2
 8010a02:	2112      	movs	r1, #18
 8010a04:	f7ff ff78 	bl	80108f8 <std>
 8010a08:	2301      	movs	r3, #1
 8010a0a:	61a3      	str	r3, [r4, #24]
 8010a0c:	e7d2      	b.n	80109b4 <__sinit+0xc>
 8010a0e:	bf00      	nop
 8010a10:	08015c1c 	.word	0x08015c1c
 8010a14:	08010941 	.word	0x08010941

08010a18 <__sfp>:
 8010a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a1a:	4607      	mov	r7, r0
 8010a1c:	f7ff ffac 	bl	8010978 <__sfp_lock_acquire>
 8010a20:	4b1e      	ldr	r3, [pc, #120]	; (8010a9c <__sfp+0x84>)
 8010a22:	681e      	ldr	r6, [r3, #0]
 8010a24:	69b3      	ldr	r3, [r6, #24]
 8010a26:	b913      	cbnz	r3, 8010a2e <__sfp+0x16>
 8010a28:	4630      	mov	r0, r6
 8010a2a:	f7ff ffbd 	bl	80109a8 <__sinit>
 8010a2e:	3648      	adds	r6, #72	; 0x48
 8010a30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a34:	3b01      	subs	r3, #1
 8010a36:	d503      	bpl.n	8010a40 <__sfp+0x28>
 8010a38:	6833      	ldr	r3, [r6, #0]
 8010a3a:	b30b      	cbz	r3, 8010a80 <__sfp+0x68>
 8010a3c:	6836      	ldr	r6, [r6, #0]
 8010a3e:	e7f7      	b.n	8010a30 <__sfp+0x18>
 8010a40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a44:	b9d5      	cbnz	r5, 8010a7c <__sfp+0x64>
 8010a46:	4b16      	ldr	r3, [pc, #88]	; (8010aa0 <__sfp+0x88>)
 8010a48:	60e3      	str	r3, [r4, #12]
 8010a4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a4e:	6665      	str	r5, [r4, #100]	; 0x64
 8010a50:	f000 f86c 	bl	8010b2c <__retarget_lock_init_recursive>
 8010a54:	f7ff ff96 	bl	8010984 <__sfp_lock_release>
 8010a58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a60:	6025      	str	r5, [r4, #0]
 8010a62:	61a5      	str	r5, [r4, #24]
 8010a64:	2208      	movs	r2, #8
 8010a66:	4629      	mov	r1, r5
 8010a68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a6c:	f000 f86f 	bl	8010b4e <memset>
 8010a70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a78:	4620      	mov	r0, r4
 8010a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a7c:	3468      	adds	r4, #104	; 0x68
 8010a7e:	e7d9      	b.n	8010a34 <__sfp+0x1c>
 8010a80:	2104      	movs	r1, #4
 8010a82:	4638      	mov	r0, r7
 8010a84:	f7ff ff62 	bl	801094c <__sfmoreglue>
 8010a88:	4604      	mov	r4, r0
 8010a8a:	6030      	str	r0, [r6, #0]
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d1d5      	bne.n	8010a3c <__sfp+0x24>
 8010a90:	f7ff ff78 	bl	8010984 <__sfp_lock_release>
 8010a94:	230c      	movs	r3, #12
 8010a96:	603b      	str	r3, [r7, #0]
 8010a98:	e7ee      	b.n	8010a78 <__sfp+0x60>
 8010a9a:	bf00      	nop
 8010a9c:	08015c1c 	.word	0x08015c1c
 8010aa0:	ffff0001 	.word	0xffff0001

08010aa4 <_fwalk_reent>:
 8010aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa8:	4606      	mov	r6, r0
 8010aaa:	4688      	mov	r8, r1
 8010aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ab0:	2700      	movs	r7, #0
 8010ab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ab6:	f1b9 0901 	subs.w	r9, r9, #1
 8010aba:	d505      	bpl.n	8010ac8 <_fwalk_reent+0x24>
 8010abc:	6824      	ldr	r4, [r4, #0]
 8010abe:	2c00      	cmp	r4, #0
 8010ac0:	d1f7      	bne.n	8010ab2 <_fwalk_reent+0xe>
 8010ac2:	4638      	mov	r0, r7
 8010ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ac8:	89ab      	ldrh	r3, [r5, #12]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d907      	bls.n	8010ade <_fwalk_reent+0x3a>
 8010ace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	d003      	beq.n	8010ade <_fwalk_reent+0x3a>
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	4630      	mov	r0, r6
 8010ada:	47c0      	blx	r8
 8010adc:	4307      	orrs	r7, r0
 8010ade:	3568      	adds	r5, #104	; 0x68
 8010ae0:	e7e9      	b.n	8010ab6 <_fwalk_reent+0x12>
	...

08010ae4 <__libc_init_array>:
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	4d0d      	ldr	r5, [pc, #52]	; (8010b1c <__libc_init_array+0x38>)
 8010ae8:	4c0d      	ldr	r4, [pc, #52]	; (8010b20 <__libc_init_array+0x3c>)
 8010aea:	1b64      	subs	r4, r4, r5
 8010aec:	10a4      	asrs	r4, r4, #2
 8010aee:	2600      	movs	r6, #0
 8010af0:	42a6      	cmp	r6, r4
 8010af2:	d109      	bne.n	8010b08 <__libc_init_array+0x24>
 8010af4:	4d0b      	ldr	r5, [pc, #44]	; (8010b24 <__libc_init_array+0x40>)
 8010af6:	4c0c      	ldr	r4, [pc, #48]	; (8010b28 <__libc_init_array+0x44>)
 8010af8:	f004 faf0 	bl	80150dc <_init>
 8010afc:	1b64      	subs	r4, r4, r5
 8010afe:	10a4      	asrs	r4, r4, #2
 8010b00:	2600      	movs	r6, #0
 8010b02:	42a6      	cmp	r6, r4
 8010b04:	d105      	bne.n	8010b12 <__libc_init_array+0x2e>
 8010b06:	bd70      	pop	{r4, r5, r6, pc}
 8010b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b0c:	4798      	blx	r3
 8010b0e:	3601      	adds	r6, #1
 8010b10:	e7ee      	b.n	8010af0 <__libc_init_array+0xc>
 8010b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b16:	4798      	blx	r3
 8010b18:	3601      	adds	r6, #1
 8010b1a:	e7f2      	b.n	8010b02 <__libc_init_array+0x1e>
 8010b1c:	08016040 	.word	0x08016040
 8010b20:	08016040 	.word	0x08016040
 8010b24:	08016040 	.word	0x08016040
 8010b28:	08016044 	.word	0x08016044

08010b2c <__retarget_lock_init_recursive>:
 8010b2c:	4770      	bx	lr

08010b2e <__retarget_lock_acquire_recursive>:
 8010b2e:	4770      	bx	lr

08010b30 <__retarget_lock_release_recursive>:
 8010b30:	4770      	bx	lr

08010b32 <memcpy>:
 8010b32:	440a      	add	r2, r1
 8010b34:	4291      	cmp	r1, r2
 8010b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b3a:	d100      	bne.n	8010b3e <memcpy+0xc>
 8010b3c:	4770      	bx	lr
 8010b3e:	b510      	push	{r4, lr}
 8010b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b48:	4291      	cmp	r1, r2
 8010b4a:	d1f9      	bne.n	8010b40 <memcpy+0xe>
 8010b4c:	bd10      	pop	{r4, pc}

08010b4e <memset>:
 8010b4e:	4402      	add	r2, r0
 8010b50:	4603      	mov	r3, r0
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d100      	bne.n	8010b58 <memset+0xa>
 8010b56:	4770      	bx	lr
 8010b58:	f803 1b01 	strb.w	r1, [r3], #1
 8010b5c:	e7f9      	b.n	8010b52 <memset+0x4>
	...

08010b60 <sbrk_aligned>:
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	4e0e      	ldr	r6, [pc, #56]	; (8010b9c <sbrk_aligned+0x3c>)
 8010b64:	460c      	mov	r4, r1
 8010b66:	6831      	ldr	r1, [r6, #0]
 8010b68:	4605      	mov	r5, r0
 8010b6a:	b911      	cbnz	r1, 8010b72 <sbrk_aligned+0x12>
 8010b6c:	f000 fdd6 	bl	801171c <_sbrk_r>
 8010b70:	6030      	str	r0, [r6, #0]
 8010b72:	4621      	mov	r1, r4
 8010b74:	4628      	mov	r0, r5
 8010b76:	f000 fdd1 	bl	801171c <_sbrk_r>
 8010b7a:	1c43      	adds	r3, r0, #1
 8010b7c:	d00a      	beq.n	8010b94 <sbrk_aligned+0x34>
 8010b7e:	1cc4      	adds	r4, r0, #3
 8010b80:	f024 0403 	bic.w	r4, r4, #3
 8010b84:	42a0      	cmp	r0, r4
 8010b86:	d007      	beq.n	8010b98 <sbrk_aligned+0x38>
 8010b88:	1a21      	subs	r1, r4, r0
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f000 fdc6 	bl	801171c <_sbrk_r>
 8010b90:	3001      	adds	r0, #1
 8010b92:	d101      	bne.n	8010b98 <sbrk_aligned+0x38>
 8010b94:	f04f 34ff 	mov.w	r4, #4294967295
 8010b98:	4620      	mov	r0, r4
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
 8010b9c:	20006df4 	.word	0x20006df4

08010ba0 <_malloc_r>:
 8010ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba4:	1ccd      	adds	r5, r1, #3
 8010ba6:	f025 0503 	bic.w	r5, r5, #3
 8010baa:	3508      	adds	r5, #8
 8010bac:	2d0c      	cmp	r5, #12
 8010bae:	bf38      	it	cc
 8010bb0:	250c      	movcc	r5, #12
 8010bb2:	2d00      	cmp	r5, #0
 8010bb4:	4607      	mov	r7, r0
 8010bb6:	db01      	blt.n	8010bbc <_malloc_r+0x1c>
 8010bb8:	42a9      	cmp	r1, r5
 8010bba:	d905      	bls.n	8010bc8 <_malloc_r+0x28>
 8010bbc:	230c      	movs	r3, #12
 8010bbe:	603b      	str	r3, [r7, #0]
 8010bc0:	2600      	movs	r6, #0
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc8:	4e2e      	ldr	r6, [pc, #184]	; (8010c84 <_malloc_r+0xe4>)
 8010bca:	f001 febd 	bl	8012948 <__malloc_lock>
 8010bce:	6833      	ldr	r3, [r6, #0]
 8010bd0:	461c      	mov	r4, r3
 8010bd2:	bb34      	cbnz	r4, 8010c22 <_malloc_r+0x82>
 8010bd4:	4629      	mov	r1, r5
 8010bd6:	4638      	mov	r0, r7
 8010bd8:	f7ff ffc2 	bl	8010b60 <sbrk_aligned>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	4604      	mov	r4, r0
 8010be0:	d14d      	bne.n	8010c7e <_malloc_r+0xde>
 8010be2:	6834      	ldr	r4, [r6, #0]
 8010be4:	4626      	mov	r6, r4
 8010be6:	2e00      	cmp	r6, #0
 8010be8:	d140      	bne.n	8010c6c <_malloc_r+0xcc>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	4631      	mov	r1, r6
 8010bee:	4638      	mov	r0, r7
 8010bf0:	eb04 0803 	add.w	r8, r4, r3
 8010bf4:	f000 fd92 	bl	801171c <_sbrk_r>
 8010bf8:	4580      	cmp	r8, r0
 8010bfa:	d13a      	bne.n	8010c72 <_malloc_r+0xd2>
 8010bfc:	6821      	ldr	r1, [r4, #0]
 8010bfe:	3503      	adds	r5, #3
 8010c00:	1a6d      	subs	r5, r5, r1
 8010c02:	f025 0503 	bic.w	r5, r5, #3
 8010c06:	3508      	adds	r5, #8
 8010c08:	2d0c      	cmp	r5, #12
 8010c0a:	bf38      	it	cc
 8010c0c:	250c      	movcc	r5, #12
 8010c0e:	4629      	mov	r1, r5
 8010c10:	4638      	mov	r0, r7
 8010c12:	f7ff ffa5 	bl	8010b60 <sbrk_aligned>
 8010c16:	3001      	adds	r0, #1
 8010c18:	d02b      	beq.n	8010c72 <_malloc_r+0xd2>
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	442b      	add	r3, r5
 8010c1e:	6023      	str	r3, [r4, #0]
 8010c20:	e00e      	b.n	8010c40 <_malloc_r+0xa0>
 8010c22:	6822      	ldr	r2, [r4, #0]
 8010c24:	1b52      	subs	r2, r2, r5
 8010c26:	d41e      	bmi.n	8010c66 <_malloc_r+0xc6>
 8010c28:	2a0b      	cmp	r2, #11
 8010c2a:	d916      	bls.n	8010c5a <_malloc_r+0xba>
 8010c2c:	1961      	adds	r1, r4, r5
 8010c2e:	42a3      	cmp	r3, r4
 8010c30:	6025      	str	r5, [r4, #0]
 8010c32:	bf18      	it	ne
 8010c34:	6059      	strne	r1, [r3, #4]
 8010c36:	6863      	ldr	r3, [r4, #4]
 8010c38:	bf08      	it	eq
 8010c3a:	6031      	streq	r1, [r6, #0]
 8010c3c:	5162      	str	r2, [r4, r5]
 8010c3e:	604b      	str	r3, [r1, #4]
 8010c40:	4638      	mov	r0, r7
 8010c42:	f104 060b 	add.w	r6, r4, #11
 8010c46:	f001 fe85 	bl	8012954 <__malloc_unlock>
 8010c4a:	f026 0607 	bic.w	r6, r6, #7
 8010c4e:	1d23      	adds	r3, r4, #4
 8010c50:	1af2      	subs	r2, r6, r3
 8010c52:	d0b6      	beq.n	8010bc2 <_malloc_r+0x22>
 8010c54:	1b9b      	subs	r3, r3, r6
 8010c56:	50a3      	str	r3, [r4, r2]
 8010c58:	e7b3      	b.n	8010bc2 <_malloc_r+0x22>
 8010c5a:	6862      	ldr	r2, [r4, #4]
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	bf0c      	ite	eq
 8010c60:	6032      	streq	r2, [r6, #0]
 8010c62:	605a      	strne	r2, [r3, #4]
 8010c64:	e7ec      	b.n	8010c40 <_malloc_r+0xa0>
 8010c66:	4623      	mov	r3, r4
 8010c68:	6864      	ldr	r4, [r4, #4]
 8010c6a:	e7b2      	b.n	8010bd2 <_malloc_r+0x32>
 8010c6c:	4634      	mov	r4, r6
 8010c6e:	6876      	ldr	r6, [r6, #4]
 8010c70:	e7b9      	b.n	8010be6 <_malloc_r+0x46>
 8010c72:	230c      	movs	r3, #12
 8010c74:	603b      	str	r3, [r7, #0]
 8010c76:	4638      	mov	r0, r7
 8010c78:	f001 fe6c 	bl	8012954 <__malloc_unlock>
 8010c7c:	e7a1      	b.n	8010bc2 <_malloc_r+0x22>
 8010c7e:	6025      	str	r5, [r4, #0]
 8010c80:	e7de      	b.n	8010c40 <_malloc_r+0xa0>
 8010c82:	bf00      	nop
 8010c84:	20006df0 	.word	0x20006df0

08010c88 <__cvt>:
 8010c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c8c:	ec55 4b10 	vmov	r4, r5, d0
 8010c90:	2d00      	cmp	r5, #0
 8010c92:	460e      	mov	r6, r1
 8010c94:	4619      	mov	r1, r3
 8010c96:	462b      	mov	r3, r5
 8010c98:	bfbb      	ittet	lt
 8010c9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010c9e:	461d      	movlt	r5, r3
 8010ca0:	2300      	movge	r3, #0
 8010ca2:	232d      	movlt	r3, #45	; 0x2d
 8010ca4:	700b      	strb	r3, [r1, #0]
 8010ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010cac:	4691      	mov	r9, r2
 8010cae:	f023 0820 	bic.w	r8, r3, #32
 8010cb2:	bfbc      	itt	lt
 8010cb4:	4622      	movlt	r2, r4
 8010cb6:	4614      	movlt	r4, r2
 8010cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cbc:	d005      	beq.n	8010cca <__cvt+0x42>
 8010cbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010cc2:	d100      	bne.n	8010cc6 <__cvt+0x3e>
 8010cc4:	3601      	adds	r6, #1
 8010cc6:	2102      	movs	r1, #2
 8010cc8:	e000      	b.n	8010ccc <__cvt+0x44>
 8010cca:	2103      	movs	r1, #3
 8010ccc:	ab03      	add	r3, sp, #12
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	ab02      	add	r3, sp, #8
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	ec45 4b10 	vmov	d0, r4, r5
 8010cd8:	4653      	mov	r3, sl
 8010cda:	4632      	mov	r2, r6
 8010cdc:	f000 ff00 	bl	8011ae0 <_dtoa_r>
 8010ce0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010ce4:	4607      	mov	r7, r0
 8010ce6:	d102      	bne.n	8010cee <__cvt+0x66>
 8010ce8:	f019 0f01 	tst.w	r9, #1
 8010cec:	d022      	beq.n	8010d34 <__cvt+0xac>
 8010cee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cf2:	eb07 0906 	add.w	r9, r7, r6
 8010cf6:	d110      	bne.n	8010d1a <__cvt+0x92>
 8010cf8:	783b      	ldrb	r3, [r7, #0]
 8010cfa:	2b30      	cmp	r3, #48	; 0x30
 8010cfc:	d10a      	bne.n	8010d14 <__cvt+0x8c>
 8010cfe:	2200      	movs	r2, #0
 8010d00:	2300      	movs	r3, #0
 8010d02:	4620      	mov	r0, r4
 8010d04:	4629      	mov	r1, r5
 8010d06:	f7ef fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d0a:	b918      	cbnz	r0, 8010d14 <__cvt+0x8c>
 8010d0c:	f1c6 0601 	rsb	r6, r6, #1
 8010d10:	f8ca 6000 	str.w	r6, [sl]
 8010d14:	f8da 3000 	ldr.w	r3, [sl]
 8010d18:	4499      	add	r9, r3
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	4620      	mov	r0, r4
 8010d20:	4629      	mov	r1, r5
 8010d22:	f7ef fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d26:	b108      	cbz	r0, 8010d2c <__cvt+0xa4>
 8010d28:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d2c:	2230      	movs	r2, #48	; 0x30
 8010d2e:	9b03      	ldr	r3, [sp, #12]
 8010d30:	454b      	cmp	r3, r9
 8010d32:	d307      	bcc.n	8010d44 <__cvt+0xbc>
 8010d34:	9b03      	ldr	r3, [sp, #12]
 8010d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d38:	1bdb      	subs	r3, r3, r7
 8010d3a:	4638      	mov	r0, r7
 8010d3c:	6013      	str	r3, [r2, #0]
 8010d3e:	b004      	add	sp, #16
 8010d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d44:	1c59      	adds	r1, r3, #1
 8010d46:	9103      	str	r1, [sp, #12]
 8010d48:	701a      	strb	r2, [r3, #0]
 8010d4a:	e7f0      	b.n	8010d2e <__cvt+0xa6>

08010d4c <__exponent>:
 8010d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2900      	cmp	r1, #0
 8010d52:	bfb8      	it	lt
 8010d54:	4249      	neglt	r1, r1
 8010d56:	f803 2b02 	strb.w	r2, [r3], #2
 8010d5a:	bfb4      	ite	lt
 8010d5c:	222d      	movlt	r2, #45	; 0x2d
 8010d5e:	222b      	movge	r2, #43	; 0x2b
 8010d60:	2909      	cmp	r1, #9
 8010d62:	7042      	strb	r2, [r0, #1]
 8010d64:	dd2a      	ble.n	8010dbc <__exponent+0x70>
 8010d66:	f10d 0407 	add.w	r4, sp, #7
 8010d6a:	46a4      	mov	ip, r4
 8010d6c:	270a      	movs	r7, #10
 8010d6e:	46a6      	mov	lr, r4
 8010d70:	460a      	mov	r2, r1
 8010d72:	fb91 f6f7 	sdiv	r6, r1, r7
 8010d76:	fb07 1516 	mls	r5, r7, r6, r1
 8010d7a:	3530      	adds	r5, #48	; 0x30
 8010d7c:	2a63      	cmp	r2, #99	; 0x63
 8010d7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010d82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010d86:	4631      	mov	r1, r6
 8010d88:	dcf1      	bgt.n	8010d6e <__exponent+0x22>
 8010d8a:	3130      	adds	r1, #48	; 0x30
 8010d8c:	f1ae 0502 	sub.w	r5, lr, #2
 8010d90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010d94:	1c44      	adds	r4, r0, #1
 8010d96:	4629      	mov	r1, r5
 8010d98:	4561      	cmp	r1, ip
 8010d9a:	d30a      	bcc.n	8010db2 <__exponent+0x66>
 8010d9c:	f10d 0209 	add.w	r2, sp, #9
 8010da0:	eba2 020e 	sub.w	r2, r2, lr
 8010da4:	4565      	cmp	r5, ip
 8010da6:	bf88      	it	hi
 8010da8:	2200      	movhi	r2, #0
 8010daa:	4413      	add	r3, r2
 8010dac:	1a18      	subs	r0, r3, r0
 8010dae:	b003      	add	sp, #12
 8010db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010db6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010dba:	e7ed      	b.n	8010d98 <__exponent+0x4c>
 8010dbc:	2330      	movs	r3, #48	; 0x30
 8010dbe:	3130      	adds	r1, #48	; 0x30
 8010dc0:	7083      	strb	r3, [r0, #2]
 8010dc2:	70c1      	strb	r1, [r0, #3]
 8010dc4:	1d03      	adds	r3, r0, #4
 8010dc6:	e7f1      	b.n	8010dac <__exponent+0x60>

08010dc8 <_printf_float>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	ed2d 8b02 	vpush	{d8}
 8010dd0:	b08d      	sub	sp, #52	; 0x34
 8010dd2:	460c      	mov	r4, r1
 8010dd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010dd8:	4616      	mov	r6, r2
 8010dda:	461f      	mov	r7, r3
 8010ddc:	4605      	mov	r5, r0
 8010dde:	f001 fd2f 	bl	8012840 <_localeconv_r>
 8010de2:	f8d0 a000 	ldr.w	sl, [r0]
 8010de6:	4650      	mov	r0, sl
 8010de8:	f7ef f9fa 	bl	80001e0 <strlen>
 8010dec:	2300      	movs	r3, #0
 8010dee:	930a      	str	r3, [sp, #40]	; 0x28
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	9305      	str	r3, [sp, #20]
 8010df4:	f8d8 3000 	ldr.w	r3, [r8]
 8010df8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010dfc:	3307      	adds	r3, #7
 8010dfe:	f023 0307 	bic.w	r3, r3, #7
 8010e02:	f103 0208 	add.w	r2, r3, #8
 8010e06:	f8c8 2000 	str.w	r2, [r8]
 8010e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010e12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010e16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e1a:	9307      	str	r3, [sp, #28]
 8010e1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e20:	ee08 0a10 	vmov	s16, r0
 8010e24:	4b9f      	ldr	r3, [pc, #636]	; (80110a4 <_printf_float+0x2dc>)
 8010e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2e:	f7ef fe85 	bl	8000b3c <__aeabi_dcmpun>
 8010e32:	bb88      	cbnz	r0, 8010e98 <_printf_float+0xd0>
 8010e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e38:	4b9a      	ldr	r3, [pc, #616]	; (80110a4 <_printf_float+0x2dc>)
 8010e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e3e:	f7ef fe5f 	bl	8000b00 <__aeabi_dcmple>
 8010e42:	bb48      	cbnz	r0, 8010e98 <_printf_float+0xd0>
 8010e44:	2200      	movs	r2, #0
 8010e46:	2300      	movs	r3, #0
 8010e48:	4640      	mov	r0, r8
 8010e4a:	4649      	mov	r1, r9
 8010e4c:	f7ef fe4e 	bl	8000aec <__aeabi_dcmplt>
 8010e50:	b110      	cbz	r0, 8010e58 <_printf_float+0x90>
 8010e52:	232d      	movs	r3, #45	; 0x2d
 8010e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e58:	4b93      	ldr	r3, [pc, #588]	; (80110a8 <_printf_float+0x2e0>)
 8010e5a:	4894      	ldr	r0, [pc, #592]	; (80110ac <_printf_float+0x2e4>)
 8010e5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e60:	bf94      	ite	ls
 8010e62:	4698      	movls	r8, r3
 8010e64:	4680      	movhi	r8, r0
 8010e66:	2303      	movs	r3, #3
 8010e68:	6123      	str	r3, [r4, #16]
 8010e6a:	9b05      	ldr	r3, [sp, #20]
 8010e6c:	f023 0204 	bic.w	r2, r3, #4
 8010e70:	6022      	str	r2, [r4, #0]
 8010e72:	f04f 0900 	mov.w	r9, #0
 8010e76:	9700      	str	r7, [sp, #0]
 8010e78:	4633      	mov	r3, r6
 8010e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e7c:	4621      	mov	r1, r4
 8010e7e:	4628      	mov	r0, r5
 8010e80:	f000 f9d8 	bl	8011234 <_printf_common>
 8010e84:	3001      	adds	r0, #1
 8010e86:	f040 8090 	bne.w	8010faa <_printf_float+0x1e2>
 8010e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e8e:	b00d      	add	sp, #52	; 0x34
 8010e90:	ecbd 8b02 	vpop	{d8}
 8010e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e98:	4642      	mov	r2, r8
 8010e9a:	464b      	mov	r3, r9
 8010e9c:	4640      	mov	r0, r8
 8010e9e:	4649      	mov	r1, r9
 8010ea0:	f7ef fe4c 	bl	8000b3c <__aeabi_dcmpun>
 8010ea4:	b140      	cbz	r0, 8010eb8 <_printf_float+0xf0>
 8010ea6:	464b      	mov	r3, r9
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	bfbc      	itt	lt
 8010eac:	232d      	movlt	r3, #45	; 0x2d
 8010eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010eb2:	487f      	ldr	r0, [pc, #508]	; (80110b0 <_printf_float+0x2e8>)
 8010eb4:	4b7f      	ldr	r3, [pc, #508]	; (80110b4 <_printf_float+0x2ec>)
 8010eb6:	e7d1      	b.n	8010e5c <_printf_float+0x94>
 8010eb8:	6863      	ldr	r3, [r4, #4]
 8010eba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ebe:	9206      	str	r2, [sp, #24]
 8010ec0:	1c5a      	adds	r2, r3, #1
 8010ec2:	d13f      	bne.n	8010f44 <_printf_float+0x17c>
 8010ec4:	2306      	movs	r3, #6
 8010ec6:	6063      	str	r3, [r4, #4]
 8010ec8:	9b05      	ldr	r3, [sp, #20]
 8010eca:	6861      	ldr	r1, [r4, #4]
 8010ecc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	9303      	str	r3, [sp, #12]
 8010ed4:	ab0a      	add	r3, sp, #40	; 0x28
 8010ed6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010eda:	ab09      	add	r3, sp, #36	; 0x24
 8010edc:	ec49 8b10 	vmov	d0, r8, r9
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	6022      	str	r2, [r4, #0]
 8010ee4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010ee8:	4628      	mov	r0, r5
 8010eea:	f7ff fecd 	bl	8010c88 <__cvt>
 8010eee:	9b06      	ldr	r3, [sp, #24]
 8010ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ef2:	2b47      	cmp	r3, #71	; 0x47
 8010ef4:	4680      	mov	r8, r0
 8010ef6:	d108      	bne.n	8010f0a <_printf_float+0x142>
 8010ef8:	1cc8      	adds	r0, r1, #3
 8010efa:	db02      	blt.n	8010f02 <_printf_float+0x13a>
 8010efc:	6863      	ldr	r3, [r4, #4]
 8010efe:	4299      	cmp	r1, r3
 8010f00:	dd41      	ble.n	8010f86 <_printf_float+0x1be>
 8010f02:	f1ab 0b02 	sub.w	fp, fp, #2
 8010f06:	fa5f fb8b 	uxtb.w	fp, fp
 8010f0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f0e:	d820      	bhi.n	8010f52 <_printf_float+0x18a>
 8010f10:	3901      	subs	r1, #1
 8010f12:	465a      	mov	r2, fp
 8010f14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f18:	9109      	str	r1, [sp, #36]	; 0x24
 8010f1a:	f7ff ff17 	bl	8010d4c <__exponent>
 8010f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f20:	1813      	adds	r3, r2, r0
 8010f22:	2a01      	cmp	r2, #1
 8010f24:	4681      	mov	r9, r0
 8010f26:	6123      	str	r3, [r4, #16]
 8010f28:	dc02      	bgt.n	8010f30 <_printf_float+0x168>
 8010f2a:	6822      	ldr	r2, [r4, #0]
 8010f2c:	07d2      	lsls	r2, r2, #31
 8010f2e:	d501      	bpl.n	8010f34 <_printf_float+0x16c>
 8010f30:	3301      	adds	r3, #1
 8010f32:	6123      	str	r3, [r4, #16]
 8010f34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d09c      	beq.n	8010e76 <_printf_float+0xae>
 8010f3c:	232d      	movs	r3, #45	; 0x2d
 8010f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f42:	e798      	b.n	8010e76 <_printf_float+0xae>
 8010f44:	9a06      	ldr	r2, [sp, #24]
 8010f46:	2a47      	cmp	r2, #71	; 0x47
 8010f48:	d1be      	bne.n	8010ec8 <_printf_float+0x100>
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d1bc      	bne.n	8010ec8 <_printf_float+0x100>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	e7b9      	b.n	8010ec6 <_printf_float+0xfe>
 8010f52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f56:	d118      	bne.n	8010f8a <_printf_float+0x1c2>
 8010f58:	2900      	cmp	r1, #0
 8010f5a:	6863      	ldr	r3, [r4, #4]
 8010f5c:	dd0b      	ble.n	8010f76 <_printf_float+0x1ae>
 8010f5e:	6121      	str	r1, [r4, #16]
 8010f60:	b913      	cbnz	r3, 8010f68 <_printf_float+0x1a0>
 8010f62:	6822      	ldr	r2, [r4, #0]
 8010f64:	07d0      	lsls	r0, r2, #31
 8010f66:	d502      	bpl.n	8010f6e <_printf_float+0x1a6>
 8010f68:	3301      	adds	r3, #1
 8010f6a:	440b      	add	r3, r1
 8010f6c:	6123      	str	r3, [r4, #16]
 8010f6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f70:	f04f 0900 	mov.w	r9, #0
 8010f74:	e7de      	b.n	8010f34 <_printf_float+0x16c>
 8010f76:	b913      	cbnz	r3, 8010f7e <_printf_float+0x1b6>
 8010f78:	6822      	ldr	r2, [r4, #0]
 8010f7a:	07d2      	lsls	r2, r2, #31
 8010f7c:	d501      	bpl.n	8010f82 <_printf_float+0x1ba>
 8010f7e:	3302      	adds	r3, #2
 8010f80:	e7f4      	b.n	8010f6c <_printf_float+0x1a4>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e7f2      	b.n	8010f6c <_printf_float+0x1a4>
 8010f86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f8c:	4299      	cmp	r1, r3
 8010f8e:	db05      	blt.n	8010f9c <_printf_float+0x1d4>
 8010f90:	6823      	ldr	r3, [r4, #0]
 8010f92:	6121      	str	r1, [r4, #16]
 8010f94:	07d8      	lsls	r0, r3, #31
 8010f96:	d5ea      	bpl.n	8010f6e <_printf_float+0x1a6>
 8010f98:	1c4b      	adds	r3, r1, #1
 8010f9a:	e7e7      	b.n	8010f6c <_printf_float+0x1a4>
 8010f9c:	2900      	cmp	r1, #0
 8010f9e:	bfd4      	ite	le
 8010fa0:	f1c1 0202 	rsble	r2, r1, #2
 8010fa4:	2201      	movgt	r2, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	e7e0      	b.n	8010f6c <_printf_float+0x1a4>
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	055a      	lsls	r2, r3, #21
 8010fae:	d407      	bmi.n	8010fc0 <_printf_float+0x1f8>
 8010fb0:	6923      	ldr	r3, [r4, #16]
 8010fb2:	4642      	mov	r2, r8
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	47b8      	blx	r7
 8010fba:	3001      	adds	r0, #1
 8010fbc:	d12c      	bne.n	8011018 <_printf_float+0x250>
 8010fbe:	e764      	b.n	8010e8a <_printf_float+0xc2>
 8010fc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fc4:	f240 80e0 	bls.w	8011188 <_printf_float+0x3c0>
 8010fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fcc:	2200      	movs	r2, #0
 8010fce:	2300      	movs	r3, #0
 8010fd0:	f7ef fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d034      	beq.n	8011042 <_printf_float+0x27a>
 8010fd8:	4a37      	ldr	r2, [pc, #220]	; (80110b8 <_printf_float+0x2f0>)
 8010fda:	2301      	movs	r3, #1
 8010fdc:	4631      	mov	r1, r6
 8010fde:	4628      	mov	r0, r5
 8010fe0:	47b8      	blx	r7
 8010fe2:	3001      	adds	r0, #1
 8010fe4:	f43f af51 	beq.w	8010e8a <_printf_float+0xc2>
 8010fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fec:	429a      	cmp	r2, r3
 8010fee:	db02      	blt.n	8010ff6 <_printf_float+0x22e>
 8010ff0:	6823      	ldr	r3, [r4, #0]
 8010ff2:	07d8      	lsls	r0, r3, #31
 8010ff4:	d510      	bpl.n	8011018 <_printf_float+0x250>
 8010ff6:	ee18 3a10 	vmov	r3, s16
 8010ffa:	4652      	mov	r2, sl
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	4628      	mov	r0, r5
 8011000:	47b8      	blx	r7
 8011002:	3001      	adds	r0, #1
 8011004:	f43f af41 	beq.w	8010e8a <_printf_float+0xc2>
 8011008:	f04f 0800 	mov.w	r8, #0
 801100c:	f104 091a 	add.w	r9, r4, #26
 8011010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011012:	3b01      	subs	r3, #1
 8011014:	4543      	cmp	r3, r8
 8011016:	dc09      	bgt.n	801102c <_printf_float+0x264>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	079b      	lsls	r3, r3, #30
 801101c:	f100 8105 	bmi.w	801122a <_printf_float+0x462>
 8011020:	68e0      	ldr	r0, [r4, #12]
 8011022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011024:	4298      	cmp	r0, r3
 8011026:	bfb8      	it	lt
 8011028:	4618      	movlt	r0, r3
 801102a:	e730      	b.n	8010e8e <_printf_float+0xc6>
 801102c:	2301      	movs	r3, #1
 801102e:	464a      	mov	r2, r9
 8011030:	4631      	mov	r1, r6
 8011032:	4628      	mov	r0, r5
 8011034:	47b8      	blx	r7
 8011036:	3001      	adds	r0, #1
 8011038:	f43f af27 	beq.w	8010e8a <_printf_float+0xc2>
 801103c:	f108 0801 	add.w	r8, r8, #1
 8011040:	e7e6      	b.n	8011010 <_printf_float+0x248>
 8011042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011044:	2b00      	cmp	r3, #0
 8011046:	dc39      	bgt.n	80110bc <_printf_float+0x2f4>
 8011048:	4a1b      	ldr	r2, [pc, #108]	; (80110b8 <_printf_float+0x2f0>)
 801104a:	2301      	movs	r3, #1
 801104c:	4631      	mov	r1, r6
 801104e:	4628      	mov	r0, r5
 8011050:	47b8      	blx	r7
 8011052:	3001      	adds	r0, #1
 8011054:	f43f af19 	beq.w	8010e8a <_printf_float+0xc2>
 8011058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801105c:	4313      	orrs	r3, r2
 801105e:	d102      	bne.n	8011066 <_printf_float+0x29e>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	07d9      	lsls	r1, r3, #31
 8011064:	d5d8      	bpl.n	8011018 <_printf_float+0x250>
 8011066:	ee18 3a10 	vmov	r3, s16
 801106a:	4652      	mov	r2, sl
 801106c:	4631      	mov	r1, r6
 801106e:	4628      	mov	r0, r5
 8011070:	47b8      	blx	r7
 8011072:	3001      	adds	r0, #1
 8011074:	f43f af09 	beq.w	8010e8a <_printf_float+0xc2>
 8011078:	f04f 0900 	mov.w	r9, #0
 801107c:	f104 0a1a 	add.w	sl, r4, #26
 8011080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011082:	425b      	negs	r3, r3
 8011084:	454b      	cmp	r3, r9
 8011086:	dc01      	bgt.n	801108c <_printf_float+0x2c4>
 8011088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801108a:	e792      	b.n	8010fb2 <_printf_float+0x1ea>
 801108c:	2301      	movs	r3, #1
 801108e:	4652      	mov	r2, sl
 8011090:	4631      	mov	r1, r6
 8011092:	4628      	mov	r0, r5
 8011094:	47b8      	blx	r7
 8011096:	3001      	adds	r0, #1
 8011098:	f43f aef7 	beq.w	8010e8a <_printf_float+0xc2>
 801109c:	f109 0901 	add.w	r9, r9, #1
 80110a0:	e7ee      	b.n	8011080 <_printf_float+0x2b8>
 80110a2:	bf00      	nop
 80110a4:	7fefffff 	.word	0x7fefffff
 80110a8:	08015c20 	.word	0x08015c20
 80110ac:	08015c24 	.word	0x08015c24
 80110b0:	08015c2c 	.word	0x08015c2c
 80110b4:	08015c28 	.word	0x08015c28
 80110b8:	08015c30 	.word	0x08015c30
 80110bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110c0:	429a      	cmp	r2, r3
 80110c2:	bfa8      	it	ge
 80110c4:	461a      	movge	r2, r3
 80110c6:	2a00      	cmp	r2, #0
 80110c8:	4691      	mov	r9, r2
 80110ca:	dc37      	bgt.n	801113c <_printf_float+0x374>
 80110cc:	f04f 0b00 	mov.w	fp, #0
 80110d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110d4:	f104 021a 	add.w	r2, r4, #26
 80110d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110da:	9305      	str	r3, [sp, #20]
 80110dc:	eba3 0309 	sub.w	r3, r3, r9
 80110e0:	455b      	cmp	r3, fp
 80110e2:	dc33      	bgt.n	801114c <_printf_float+0x384>
 80110e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110e8:	429a      	cmp	r2, r3
 80110ea:	db3b      	blt.n	8011164 <_printf_float+0x39c>
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	07da      	lsls	r2, r3, #31
 80110f0:	d438      	bmi.n	8011164 <_printf_float+0x39c>
 80110f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110f4:	9a05      	ldr	r2, [sp, #20]
 80110f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80110f8:	1a9a      	subs	r2, r3, r2
 80110fa:	eba3 0901 	sub.w	r9, r3, r1
 80110fe:	4591      	cmp	r9, r2
 8011100:	bfa8      	it	ge
 8011102:	4691      	movge	r9, r2
 8011104:	f1b9 0f00 	cmp.w	r9, #0
 8011108:	dc35      	bgt.n	8011176 <_printf_float+0x3ae>
 801110a:	f04f 0800 	mov.w	r8, #0
 801110e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011112:	f104 0a1a 	add.w	sl, r4, #26
 8011116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801111a:	1a9b      	subs	r3, r3, r2
 801111c:	eba3 0309 	sub.w	r3, r3, r9
 8011120:	4543      	cmp	r3, r8
 8011122:	f77f af79 	ble.w	8011018 <_printf_float+0x250>
 8011126:	2301      	movs	r3, #1
 8011128:	4652      	mov	r2, sl
 801112a:	4631      	mov	r1, r6
 801112c:	4628      	mov	r0, r5
 801112e:	47b8      	blx	r7
 8011130:	3001      	adds	r0, #1
 8011132:	f43f aeaa 	beq.w	8010e8a <_printf_float+0xc2>
 8011136:	f108 0801 	add.w	r8, r8, #1
 801113a:	e7ec      	b.n	8011116 <_printf_float+0x34e>
 801113c:	4613      	mov	r3, r2
 801113e:	4631      	mov	r1, r6
 8011140:	4642      	mov	r2, r8
 8011142:	4628      	mov	r0, r5
 8011144:	47b8      	blx	r7
 8011146:	3001      	adds	r0, #1
 8011148:	d1c0      	bne.n	80110cc <_printf_float+0x304>
 801114a:	e69e      	b.n	8010e8a <_printf_float+0xc2>
 801114c:	2301      	movs	r3, #1
 801114e:	4631      	mov	r1, r6
 8011150:	4628      	mov	r0, r5
 8011152:	9205      	str	r2, [sp, #20]
 8011154:	47b8      	blx	r7
 8011156:	3001      	adds	r0, #1
 8011158:	f43f ae97 	beq.w	8010e8a <_printf_float+0xc2>
 801115c:	9a05      	ldr	r2, [sp, #20]
 801115e:	f10b 0b01 	add.w	fp, fp, #1
 8011162:	e7b9      	b.n	80110d8 <_printf_float+0x310>
 8011164:	ee18 3a10 	vmov	r3, s16
 8011168:	4652      	mov	r2, sl
 801116a:	4631      	mov	r1, r6
 801116c:	4628      	mov	r0, r5
 801116e:	47b8      	blx	r7
 8011170:	3001      	adds	r0, #1
 8011172:	d1be      	bne.n	80110f2 <_printf_float+0x32a>
 8011174:	e689      	b.n	8010e8a <_printf_float+0xc2>
 8011176:	9a05      	ldr	r2, [sp, #20]
 8011178:	464b      	mov	r3, r9
 801117a:	4442      	add	r2, r8
 801117c:	4631      	mov	r1, r6
 801117e:	4628      	mov	r0, r5
 8011180:	47b8      	blx	r7
 8011182:	3001      	adds	r0, #1
 8011184:	d1c1      	bne.n	801110a <_printf_float+0x342>
 8011186:	e680      	b.n	8010e8a <_printf_float+0xc2>
 8011188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801118a:	2a01      	cmp	r2, #1
 801118c:	dc01      	bgt.n	8011192 <_printf_float+0x3ca>
 801118e:	07db      	lsls	r3, r3, #31
 8011190:	d538      	bpl.n	8011204 <_printf_float+0x43c>
 8011192:	2301      	movs	r3, #1
 8011194:	4642      	mov	r2, r8
 8011196:	4631      	mov	r1, r6
 8011198:	4628      	mov	r0, r5
 801119a:	47b8      	blx	r7
 801119c:	3001      	adds	r0, #1
 801119e:	f43f ae74 	beq.w	8010e8a <_printf_float+0xc2>
 80111a2:	ee18 3a10 	vmov	r3, s16
 80111a6:	4652      	mov	r2, sl
 80111a8:	4631      	mov	r1, r6
 80111aa:	4628      	mov	r0, r5
 80111ac:	47b8      	blx	r7
 80111ae:	3001      	adds	r0, #1
 80111b0:	f43f ae6b 	beq.w	8010e8a <_printf_float+0xc2>
 80111b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80111b8:	2200      	movs	r2, #0
 80111ba:	2300      	movs	r3, #0
 80111bc:	f7ef fc8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80111c0:	b9d8      	cbnz	r0, 80111fa <_printf_float+0x432>
 80111c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111c4:	f108 0201 	add.w	r2, r8, #1
 80111c8:	3b01      	subs	r3, #1
 80111ca:	4631      	mov	r1, r6
 80111cc:	4628      	mov	r0, r5
 80111ce:	47b8      	blx	r7
 80111d0:	3001      	adds	r0, #1
 80111d2:	d10e      	bne.n	80111f2 <_printf_float+0x42a>
 80111d4:	e659      	b.n	8010e8a <_printf_float+0xc2>
 80111d6:	2301      	movs	r3, #1
 80111d8:	4652      	mov	r2, sl
 80111da:	4631      	mov	r1, r6
 80111dc:	4628      	mov	r0, r5
 80111de:	47b8      	blx	r7
 80111e0:	3001      	adds	r0, #1
 80111e2:	f43f ae52 	beq.w	8010e8a <_printf_float+0xc2>
 80111e6:	f108 0801 	add.w	r8, r8, #1
 80111ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111ec:	3b01      	subs	r3, #1
 80111ee:	4543      	cmp	r3, r8
 80111f0:	dcf1      	bgt.n	80111d6 <_printf_float+0x40e>
 80111f2:	464b      	mov	r3, r9
 80111f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111f8:	e6dc      	b.n	8010fb4 <_printf_float+0x1ec>
 80111fa:	f04f 0800 	mov.w	r8, #0
 80111fe:	f104 0a1a 	add.w	sl, r4, #26
 8011202:	e7f2      	b.n	80111ea <_printf_float+0x422>
 8011204:	2301      	movs	r3, #1
 8011206:	4642      	mov	r2, r8
 8011208:	e7df      	b.n	80111ca <_printf_float+0x402>
 801120a:	2301      	movs	r3, #1
 801120c:	464a      	mov	r2, r9
 801120e:	4631      	mov	r1, r6
 8011210:	4628      	mov	r0, r5
 8011212:	47b8      	blx	r7
 8011214:	3001      	adds	r0, #1
 8011216:	f43f ae38 	beq.w	8010e8a <_printf_float+0xc2>
 801121a:	f108 0801 	add.w	r8, r8, #1
 801121e:	68e3      	ldr	r3, [r4, #12]
 8011220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011222:	1a5b      	subs	r3, r3, r1
 8011224:	4543      	cmp	r3, r8
 8011226:	dcf0      	bgt.n	801120a <_printf_float+0x442>
 8011228:	e6fa      	b.n	8011020 <_printf_float+0x258>
 801122a:	f04f 0800 	mov.w	r8, #0
 801122e:	f104 0919 	add.w	r9, r4, #25
 8011232:	e7f4      	b.n	801121e <_printf_float+0x456>

08011234 <_printf_common>:
 8011234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011238:	4616      	mov	r6, r2
 801123a:	4699      	mov	r9, r3
 801123c:	688a      	ldr	r2, [r1, #8]
 801123e:	690b      	ldr	r3, [r1, #16]
 8011240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011244:	4293      	cmp	r3, r2
 8011246:	bfb8      	it	lt
 8011248:	4613      	movlt	r3, r2
 801124a:	6033      	str	r3, [r6, #0]
 801124c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011250:	4607      	mov	r7, r0
 8011252:	460c      	mov	r4, r1
 8011254:	b10a      	cbz	r2, 801125a <_printf_common+0x26>
 8011256:	3301      	adds	r3, #1
 8011258:	6033      	str	r3, [r6, #0]
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	0699      	lsls	r1, r3, #26
 801125e:	bf42      	ittt	mi
 8011260:	6833      	ldrmi	r3, [r6, #0]
 8011262:	3302      	addmi	r3, #2
 8011264:	6033      	strmi	r3, [r6, #0]
 8011266:	6825      	ldr	r5, [r4, #0]
 8011268:	f015 0506 	ands.w	r5, r5, #6
 801126c:	d106      	bne.n	801127c <_printf_common+0x48>
 801126e:	f104 0a19 	add.w	sl, r4, #25
 8011272:	68e3      	ldr	r3, [r4, #12]
 8011274:	6832      	ldr	r2, [r6, #0]
 8011276:	1a9b      	subs	r3, r3, r2
 8011278:	42ab      	cmp	r3, r5
 801127a:	dc26      	bgt.n	80112ca <_printf_common+0x96>
 801127c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011280:	1e13      	subs	r3, r2, #0
 8011282:	6822      	ldr	r2, [r4, #0]
 8011284:	bf18      	it	ne
 8011286:	2301      	movne	r3, #1
 8011288:	0692      	lsls	r2, r2, #26
 801128a:	d42b      	bmi.n	80112e4 <_printf_common+0xb0>
 801128c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011290:	4649      	mov	r1, r9
 8011292:	4638      	mov	r0, r7
 8011294:	47c0      	blx	r8
 8011296:	3001      	adds	r0, #1
 8011298:	d01e      	beq.n	80112d8 <_printf_common+0xa4>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	68e5      	ldr	r5, [r4, #12]
 801129e:	6832      	ldr	r2, [r6, #0]
 80112a0:	f003 0306 	and.w	r3, r3, #6
 80112a4:	2b04      	cmp	r3, #4
 80112a6:	bf08      	it	eq
 80112a8:	1aad      	subeq	r5, r5, r2
 80112aa:	68a3      	ldr	r3, [r4, #8]
 80112ac:	6922      	ldr	r2, [r4, #16]
 80112ae:	bf0c      	ite	eq
 80112b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112b4:	2500      	movne	r5, #0
 80112b6:	4293      	cmp	r3, r2
 80112b8:	bfc4      	itt	gt
 80112ba:	1a9b      	subgt	r3, r3, r2
 80112bc:	18ed      	addgt	r5, r5, r3
 80112be:	2600      	movs	r6, #0
 80112c0:	341a      	adds	r4, #26
 80112c2:	42b5      	cmp	r5, r6
 80112c4:	d11a      	bne.n	80112fc <_printf_common+0xc8>
 80112c6:	2000      	movs	r0, #0
 80112c8:	e008      	b.n	80112dc <_printf_common+0xa8>
 80112ca:	2301      	movs	r3, #1
 80112cc:	4652      	mov	r2, sl
 80112ce:	4649      	mov	r1, r9
 80112d0:	4638      	mov	r0, r7
 80112d2:	47c0      	blx	r8
 80112d4:	3001      	adds	r0, #1
 80112d6:	d103      	bne.n	80112e0 <_printf_common+0xac>
 80112d8:	f04f 30ff 	mov.w	r0, #4294967295
 80112dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112e0:	3501      	adds	r5, #1
 80112e2:	e7c6      	b.n	8011272 <_printf_common+0x3e>
 80112e4:	18e1      	adds	r1, r4, r3
 80112e6:	1c5a      	adds	r2, r3, #1
 80112e8:	2030      	movs	r0, #48	; 0x30
 80112ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112ee:	4422      	add	r2, r4
 80112f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112f8:	3302      	adds	r3, #2
 80112fa:	e7c7      	b.n	801128c <_printf_common+0x58>
 80112fc:	2301      	movs	r3, #1
 80112fe:	4622      	mov	r2, r4
 8011300:	4649      	mov	r1, r9
 8011302:	4638      	mov	r0, r7
 8011304:	47c0      	blx	r8
 8011306:	3001      	adds	r0, #1
 8011308:	d0e6      	beq.n	80112d8 <_printf_common+0xa4>
 801130a:	3601      	adds	r6, #1
 801130c:	e7d9      	b.n	80112c2 <_printf_common+0x8e>
	...

08011310 <_printf_i>:
 8011310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011314:	7e0f      	ldrb	r7, [r1, #24]
 8011316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011318:	2f78      	cmp	r7, #120	; 0x78
 801131a:	4691      	mov	r9, r2
 801131c:	4680      	mov	r8, r0
 801131e:	460c      	mov	r4, r1
 8011320:	469a      	mov	sl, r3
 8011322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011326:	d807      	bhi.n	8011338 <_printf_i+0x28>
 8011328:	2f62      	cmp	r7, #98	; 0x62
 801132a:	d80a      	bhi.n	8011342 <_printf_i+0x32>
 801132c:	2f00      	cmp	r7, #0
 801132e:	f000 80d8 	beq.w	80114e2 <_printf_i+0x1d2>
 8011332:	2f58      	cmp	r7, #88	; 0x58
 8011334:	f000 80a3 	beq.w	801147e <_printf_i+0x16e>
 8011338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801133c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011340:	e03a      	b.n	80113b8 <_printf_i+0xa8>
 8011342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011346:	2b15      	cmp	r3, #21
 8011348:	d8f6      	bhi.n	8011338 <_printf_i+0x28>
 801134a:	a101      	add	r1, pc, #4	; (adr r1, 8011350 <_printf_i+0x40>)
 801134c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011350:	080113a9 	.word	0x080113a9
 8011354:	080113bd 	.word	0x080113bd
 8011358:	08011339 	.word	0x08011339
 801135c:	08011339 	.word	0x08011339
 8011360:	08011339 	.word	0x08011339
 8011364:	08011339 	.word	0x08011339
 8011368:	080113bd 	.word	0x080113bd
 801136c:	08011339 	.word	0x08011339
 8011370:	08011339 	.word	0x08011339
 8011374:	08011339 	.word	0x08011339
 8011378:	08011339 	.word	0x08011339
 801137c:	080114c9 	.word	0x080114c9
 8011380:	080113ed 	.word	0x080113ed
 8011384:	080114ab 	.word	0x080114ab
 8011388:	08011339 	.word	0x08011339
 801138c:	08011339 	.word	0x08011339
 8011390:	080114eb 	.word	0x080114eb
 8011394:	08011339 	.word	0x08011339
 8011398:	080113ed 	.word	0x080113ed
 801139c:	08011339 	.word	0x08011339
 80113a0:	08011339 	.word	0x08011339
 80113a4:	080114b3 	.word	0x080114b3
 80113a8:	682b      	ldr	r3, [r5, #0]
 80113aa:	1d1a      	adds	r2, r3, #4
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	602a      	str	r2, [r5, #0]
 80113b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113b8:	2301      	movs	r3, #1
 80113ba:	e0a3      	b.n	8011504 <_printf_i+0x1f4>
 80113bc:	6820      	ldr	r0, [r4, #0]
 80113be:	6829      	ldr	r1, [r5, #0]
 80113c0:	0606      	lsls	r6, r0, #24
 80113c2:	f101 0304 	add.w	r3, r1, #4
 80113c6:	d50a      	bpl.n	80113de <_printf_i+0xce>
 80113c8:	680e      	ldr	r6, [r1, #0]
 80113ca:	602b      	str	r3, [r5, #0]
 80113cc:	2e00      	cmp	r6, #0
 80113ce:	da03      	bge.n	80113d8 <_printf_i+0xc8>
 80113d0:	232d      	movs	r3, #45	; 0x2d
 80113d2:	4276      	negs	r6, r6
 80113d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113d8:	485e      	ldr	r0, [pc, #376]	; (8011554 <_printf_i+0x244>)
 80113da:	230a      	movs	r3, #10
 80113dc:	e019      	b.n	8011412 <_printf_i+0x102>
 80113de:	680e      	ldr	r6, [r1, #0]
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113e6:	bf18      	it	ne
 80113e8:	b236      	sxthne	r6, r6
 80113ea:	e7ef      	b.n	80113cc <_printf_i+0xbc>
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	6820      	ldr	r0, [r4, #0]
 80113f0:	1d19      	adds	r1, r3, #4
 80113f2:	6029      	str	r1, [r5, #0]
 80113f4:	0601      	lsls	r1, r0, #24
 80113f6:	d501      	bpl.n	80113fc <_printf_i+0xec>
 80113f8:	681e      	ldr	r6, [r3, #0]
 80113fa:	e002      	b.n	8011402 <_printf_i+0xf2>
 80113fc:	0646      	lsls	r6, r0, #25
 80113fe:	d5fb      	bpl.n	80113f8 <_printf_i+0xe8>
 8011400:	881e      	ldrh	r6, [r3, #0]
 8011402:	4854      	ldr	r0, [pc, #336]	; (8011554 <_printf_i+0x244>)
 8011404:	2f6f      	cmp	r7, #111	; 0x6f
 8011406:	bf0c      	ite	eq
 8011408:	2308      	moveq	r3, #8
 801140a:	230a      	movne	r3, #10
 801140c:	2100      	movs	r1, #0
 801140e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011412:	6865      	ldr	r5, [r4, #4]
 8011414:	60a5      	str	r5, [r4, #8]
 8011416:	2d00      	cmp	r5, #0
 8011418:	bfa2      	ittt	ge
 801141a:	6821      	ldrge	r1, [r4, #0]
 801141c:	f021 0104 	bicge.w	r1, r1, #4
 8011420:	6021      	strge	r1, [r4, #0]
 8011422:	b90e      	cbnz	r6, 8011428 <_printf_i+0x118>
 8011424:	2d00      	cmp	r5, #0
 8011426:	d04d      	beq.n	80114c4 <_printf_i+0x1b4>
 8011428:	4615      	mov	r5, r2
 801142a:	fbb6 f1f3 	udiv	r1, r6, r3
 801142e:	fb03 6711 	mls	r7, r3, r1, r6
 8011432:	5dc7      	ldrb	r7, [r0, r7]
 8011434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011438:	4637      	mov	r7, r6
 801143a:	42bb      	cmp	r3, r7
 801143c:	460e      	mov	r6, r1
 801143e:	d9f4      	bls.n	801142a <_printf_i+0x11a>
 8011440:	2b08      	cmp	r3, #8
 8011442:	d10b      	bne.n	801145c <_printf_i+0x14c>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	07de      	lsls	r6, r3, #31
 8011448:	d508      	bpl.n	801145c <_printf_i+0x14c>
 801144a:	6923      	ldr	r3, [r4, #16]
 801144c:	6861      	ldr	r1, [r4, #4]
 801144e:	4299      	cmp	r1, r3
 8011450:	bfde      	ittt	le
 8011452:	2330      	movle	r3, #48	; 0x30
 8011454:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011458:	f105 35ff 	addle.w	r5, r5, #4294967295
 801145c:	1b52      	subs	r2, r2, r5
 801145e:	6122      	str	r2, [r4, #16]
 8011460:	f8cd a000 	str.w	sl, [sp]
 8011464:	464b      	mov	r3, r9
 8011466:	aa03      	add	r2, sp, #12
 8011468:	4621      	mov	r1, r4
 801146a:	4640      	mov	r0, r8
 801146c:	f7ff fee2 	bl	8011234 <_printf_common>
 8011470:	3001      	adds	r0, #1
 8011472:	d14c      	bne.n	801150e <_printf_i+0x1fe>
 8011474:	f04f 30ff 	mov.w	r0, #4294967295
 8011478:	b004      	add	sp, #16
 801147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801147e:	4835      	ldr	r0, [pc, #212]	; (8011554 <_printf_i+0x244>)
 8011480:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011484:	6829      	ldr	r1, [r5, #0]
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	f851 6b04 	ldr.w	r6, [r1], #4
 801148c:	6029      	str	r1, [r5, #0]
 801148e:	061d      	lsls	r5, r3, #24
 8011490:	d514      	bpl.n	80114bc <_printf_i+0x1ac>
 8011492:	07df      	lsls	r7, r3, #31
 8011494:	bf44      	itt	mi
 8011496:	f043 0320 	orrmi.w	r3, r3, #32
 801149a:	6023      	strmi	r3, [r4, #0]
 801149c:	b91e      	cbnz	r6, 80114a6 <_printf_i+0x196>
 801149e:	6823      	ldr	r3, [r4, #0]
 80114a0:	f023 0320 	bic.w	r3, r3, #32
 80114a4:	6023      	str	r3, [r4, #0]
 80114a6:	2310      	movs	r3, #16
 80114a8:	e7b0      	b.n	801140c <_printf_i+0xfc>
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	f043 0320 	orr.w	r3, r3, #32
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	2378      	movs	r3, #120	; 0x78
 80114b4:	4828      	ldr	r0, [pc, #160]	; (8011558 <_printf_i+0x248>)
 80114b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80114ba:	e7e3      	b.n	8011484 <_printf_i+0x174>
 80114bc:	0659      	lsls	r1, r3, #25
 80114be:	bf48      	it	mi
 80114c0:	b2b6      	uxthmi	r6, r6
 80114c2:	e7e6      	b.n	8011492 <_printf_i+0x182>
 80114c4:	4615      	mov	r5, r2
 80114c6:	e7bb      	b.n	8011440 <_printf_i+0x130>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	6826      	ldr	r6, [r4, #0]
 80114cc:	6961      	ldr	r1, [r4, #20]
 80114ce:	1d18      	adds	r0, r3, #4
 80114d0:	6028      	str	r0, [r5, #0]
 80114d2:	0635      	lsls	r5, r6, #24
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	d501      	bpl.n	80114dc <_printf_i+0x1cc>
 80114d8:	6019      	str	r1, [r3, #0]
 80114da:	e002      	b.n	80114e2 <_printf_i+0x1d2>
 80114dc:	0670      	lsls	r0, r6, #25
 80114de:	d5fb      	bpl.n	80114d8 <_printf_i+0x1c8>
 80114e0:	8019      	strh	r1, [r3, #0]
 80114e2:	2300      	movs	r3, #0
 80114e4:	6123      	str	r3, [r4, #16]
 80114e6:	4615      	mov	r5, r2
 80114e8:	e7ba      	b.n	8011460 <_printf_i+0x150>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	1d1a      	adds	r2, r3, #4
 80114ee:	602a      	str	r2, [r5, #0]
 80114f0:	681d      	ldr	r5, [r3, #0]
 80114f2:	6862      	ldr	r2, [r4, #4]
 80114f4:	2100      	movs	r1, #0
 80114f6:	4628      	mov	r0, r5
 80114f8:	f7ee fe7a 	bl	80001f0 <memchr>
 80114fc:	b108      	cbz	r0, 8011502 <_printf_i+0x1f2>
 80114fe:	1b40      	subs	r0, r0, r5
 8011500:	6060      	str	r0, [r4, #4]
 8011502:	6863      	ldr	r3, [r4, #4]
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	2300      	movs	r3, #0
 8011508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801150c:	e7a8      	b.n	8011460 <_printf_i+0x150>
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	462a      	mov	r2, r5
 8011512:	4649      	mov	r1, r9
 8011514:	4640      	mov	r0, r8
 8011516:	47d0      	blx	sl
 8011518:	3001      	adds	r0, #1
 801151a:	d0ab      	beq.n	8011474 <_printf_i+0x164>
 801151c:	6823      	ldr	r3, [r4, #0]
 801151e:	079b      	lsls	r3, r3, #30
 8011520:	d413      	bmi.n	801154a <_printf_i+0x23a>
 8011522:	68e0      	ldr	r0, [r4, #12]
 8011524:	9b03      	ldr	r3, [sp, #12]
 8011526:	4298      	cmp	r0, r3
 8011528:	bfb8      	it	lt
 801152a:	4618      	movlt	r0, r3
 801152c:	e7a4      	b.n	8011478 <_printf_i+0x168>
 801152e:	2301      	movs	r3, #1
 8011530:	4632      	mov	r2, r6
 8011532:	4649      	mov	r1, r9
 8011534:	4640      	mov	r0, r8
 8011536:	47d0      	blx	sl
 8011538:	3001      	adds	r0, #1
 801153a:	d09b      	beq.n	8011474 <_printf_i+0x164>
 801153c:	3501      	adds	r5, #1
 801153e:	68e3      	ldr	r3, [r4, #12]
 8011540:	9903      	ldr	r1, [sp, #12]
 8011542:	1a5b      	subs	r3, r3, r1
 8011544:	42ab      	cmp	r3, r5
 8011546:	dcf2      	bgt.n	801152e <_printf_i+0x21e>
 8011548:	e7eb      	b.n	8011522 <_printf_i+0x212>
 801154a:	2500      	movs	r5, #0
 801154c:	f104 0619 	add.w	r6, r4, #25
 8011550:	e7f5      	b.n	801153e <_printf_i+0x22e>
 8011552:	bf00      	nop
 8011554:	08015c32 	.word	0x08015c32
 8011558:	08015c43 	.word	0x08015c43

0801155c <_puts_r>:
 801155c:	b570      	push	{r4, r5, r6, lr}
 801155e:	460e      	mov	r6, r1
 8011560:	4605      	mov	r5, r0
 8011562:	b118      	cbz	r0, 801156c <_puts_r+0x10>
 8011564:	6983      	ldr	r3, [r0, #24]
 8011566:	b90b      	cbnz	r3, 801156c <_puts_r+0x10>
 8011568:	f7ff fa1e 	bl	80109a8 <__sinit>
 801156c:	69ab      	ldr	r3, [r5, #24]
 801156e:	68ac      	ldr	r4, [r5, #8]
 8011570:	b913      	cbnz	r3, 8011578 <_puts_r+0x1c>
 8011572:	4628      	mov	r0, r5
 8011574:	f7ff fa18 	bl	80109a8 <__sinit>
 8011578:	4b2c      	ldr	r3, [pc, #176]	; (801162c <_puts_r+0xd0>)
 801157a:	429c      	cmp	r4, r3
 801157c:	d120      	bne.n	80115c0 <_puts_r+0x64>
 801157e:	686c      	ldr	r4, [r5, #4]
 8011580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011582:	07db      	lsls	r3, r3, #31
 8011584:	d405      	bmi.n	8011592 <_puts_r+0x36>
 8011586:	89a3      	ldrh	r3, [r4, #12]
 8011588:	0598      	lsls	r0, r3, #22
 801158a:	d402      	bmi.n	8011592 <_puts_r+0x36>
 801158c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801158e:	f7ff face 	bl	8010b2e <__retarget_lock_acquire_recursive>
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	0719      	lsls	r1, r3, #28
 8011596:	d51d      	bpl.n	80115d4 <_puts_r+0x78>
 8011598:	6923      	ldr	r3, [r4, #16]
 801159a:	b1db      	cbz	r3, 80115d4 <_puts_r+0x78>
 801159c:	3e01      	subs	r6, #1
 801159e:	68a3      	ldr	r3, [r4, #8]
 80115a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80115a4:	3b01      	subs	r3, #1
 80115a6:	60a3      	str	r3, [r4, #8]
 80115a8:	bb39      	cbnz	r1, 80115fa <_puts_r+0x9e>
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	da38      	bge.n	8011620 <_puts_r+0xc4>
 80115ae:	4622      	mov	r2, r4
 80115b0:	210a      	movs	r1, #10
 80115b2:	4628      	mov	r0, r5
 80115b4:	f000 f926 	bl	8011804 <__swbuf_r>
 80115b8:	3001      	adds	r0, #1
 80115ba:	d011      	beq.n	80115e0 <_puts_r+0x84>
 80115bc:	250a      	movs	r5, #10
 80115be:	e011      	b.n	80115e4 <_puts_r+0x88>
 80115c0:	4b1b      	ldr	r3, [pc, #108]	; (8011630 <_puts_r+0xd4>)
 80115c2:	429c      	cmp	r4, r3
 80115c4:	d101      	bne.n	80115ca <_puts_r+0x6e>
 80115c6:	68ac      	ldr	r4, [r5, #8]
 80115c8:	e7da      	b.n	8011580 <_puts_r+0x24>
 80115ca:	4b1a      	ldr	r3, [pc, #104]	; (8011634 <_puts_r+0xd8>)
 80115cc:	429c      	cmp	r4, r3
 80115ce:	bf08      	it	eq
 80115d0:	68ec      	ldreq	r4, [r5, #12]
 80115d2:	e7d5      	b.n	8011580 <_puts_r+0x24>
 80115d4:	4621      	mov	r1, r4
 80115d6:	4628      	mov	r0, r5
 80115d8:	f000 f978 	bl	80118cc <__swsetup_r>
 80115dc:	2800      	cmp	r0, #0
 80115de:	d0dd      	beq.n	801159c <_puts_r+0x40>
 80115e0:	f04f 35ff 	mov.w	r5, #4294967295
 80115e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115e6:	07da      	lsls	r2, r3, #31
 80115e8:	d405      	bmi.n	80115f6 <_puts_r+0x9a>
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	059b      	lsls	r3, r3, #22
 80115ee:	d402      	bmi.n	80115f6 <_puts_r+0x9a>
 80115f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115f2:	f7ff fa9d 	bl	8010b30 <__retarget_lock_release_recursive>
 80115f6:	4628      	mov	r0, r5
 80115f8:	bd70      	pop	{r4, r5, r6, pc}
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	da04      	bge.n	8011608 <_puts_r+0xac>
 80115fe:	69a2      	ldr	r2, [r4, #24]
 8011600:	429a      	cmp	r2, r3
 8011602:	dc06      	bgt.n	8011612 <_puts_r+0xb6>
 8011604:	290a      	cmp	r1, #10
 8011606:	d004      	beq.n	8011612 <_puts_r+0xb6>
 8011608:	6823      	ldr	r3, [r4, #0]
 801160a:	1c5a      	adds	r2, r3, #1
 801160c:	6022      	str	r2, [r4, #0]
 801160e:	7019      	strb	r1, [r3, #0]
 8011610:	e7c5      	b.n	801159e <_puts_r+0x42>
 8011612:	4622      	mov	r2, r4
 8011614:	4628      	mov	r0, r5
 8011616:	f000 f8f5 	bl	8011804 <__swbuf_r>
 801161a:	3001      	adds	r0, #1
 801161c:	d1bf      	bne.n	801159e <_puts_r+0x42>
 801161e:	e7df      	b.n	80115e0 <_puts_r+0x84>
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	250a      	movs	r5, #10
 8011624:	1c5a      	adds	r2, r3, #1
 8011626:	6022      	str	r2, [r4, #0]
 8011628:	701d      	strb	r5, [r3, #0]
 801162a:	e7db      	b.n	80115e4 <_puts_r+0x88>
 801162c:	08015bdc 	.word	0x08015bdc
 8011630:	08015bfc 	.word	0x08015bfc
 8011634:	08015bbc 	.word	0x08015bbc

08011638 <puts>:
 8011638:	4b02      	ldr	r3, [pc, #8]	; (8011644 <puts+0xc>)
 801163a:	4601      	mov	r1, r0
 801163c:	6818      	ldr	r0, [r3, #0]
 801163e:	f7ff bf8d 	b.w	801155c <_puts_r>
 8011642:	bf00      	nop
 8011644:	200001e8 	.word	0x200001e8

08011648 <cleanup_glue>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	460c      	mov	r4, r1
 801164c:	6809      	ldr	r1, [r1, #0]
 801164e:	4605      	mov	r5, r0
 8011650:	b109      	cbz	r1, 8011656 <cleanup_glue+0xe>
 8011652:	f7ff fff9 	bl	8011648 <cleanup_glue>
 8011656:	4621      	mov	r1, r4
 8011658:	4628      	mov	r0, r5
 801165a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801165e:	f001 bd19 	b.w	8013094 <_free_r>
	...

08011664 <_reclaim_reent>:
 8011664:	4b2c      	ldr	r3, [pc, #176]	; (8011718 <_reclaim_reent+0xb4>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4283      	cmp	r3, r0
 801166a:	b570      	push	{r4, r5, r6, lr}
 801166c:	4604      	mov	r4, r0
 801166e:	d051      	beq.n	8011714 <_reclaim_reent+0xb0>
 8011670:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011672:	b143      	cbz	r3, 8011686 <_reclaim_reent+0x22>
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d14a      	bne.n	8011710 <_reclaim_reent+0xac>
 801167a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801167c:	6819      	ldr	r1, [r3, #0]
 801167e:	b111      	cbz	r1, 8011686 <_reclaim_reent+0x22>
 8011680:	4620      	mov	r0, r4
 8011682:	f001 fd07 	bl	8013094 <_free_r>
 8011686:	6961      	ldr	r1, [r4, #20]
 8011688:	b111      	cbz	r1, 8011690 <_reclaim_reent+0x2c>
 801168a:	4620      	mov	r0, r4
 801168c:	f001 fd02 	bl	8013094 <_free_r>
 8011690:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011692:	b111      	cbz	r1, 801169a <_reclaim_reent+0x36>
 8011694:	4620      	mov	r0, r4
 8011696:	f001 fcfd 	bl	8013094 <_free_r>
 801169a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801169c:	b111      	cbz	r1, 80116a4 <_reclaim_reent+0x40>
 801169e:	4620      	mov	r0, r4
 80116a0:	f001 fcf8 	bl	8013094 <_free_r>
 80116a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80116a6:	b111      	cbz	r1, 80116ae <_reclaim_reent+0x4a>
 80116a8:	4620      	mov	r0, r4
 80116aa:	f001 fcf3 	bl	8013094 <_free_r>
 80116ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80116b0:	b111      	cbz	r1, 80116b8 <_reclaim_reent+0x54>
 80116b2:	4620      	mov	r0, r4
 80116b4:	f001 fcee 	bl	8013094 <_free_r>
 80116b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80116ba:	b111      	cbz	r1, 80116c2 <_reclaim_reent+0x5e>
 80116bc:	4620      	mov	r0, r4
 80116be:	f001 fce9 	bl	8013094 <_free_r>
 80116c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80116c4:	b111      	cbz	r1, 80116cc <_reclaim_reent+0x68>
 80116c6:	4620      	mov	r0, r4
 80116c8:	f001 fce4 	bl	8013094 <_free_r>
 80116cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116ce:	b111      	cbz	r1, 80116d6 <_reclaim_reent+0x72>
 80116d0:	4620      	mov	r0, r4
 80116d2:	f001 fcdf 	bl	8013094 <_free_r>
 80116d6:	69a3      	ldr	r3, [r4, #24]
 80116d8:	b1e3      	cbz	r3, 8011714 <_reclaim_reent+0xb0>
 80116da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80116dc:	4620      	mov	r0, r4
 80116de:	4798      	blx	r3
 80116e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80116e2:	b1b9      	cbz	r1, 8011714 <_reclaim_reent+0xb0>
 80116e4:	4620      	mov	r0, r4
 80116e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116ea:	f7ff bfad 	b.w	8011648 <cleanup_glue>
 80116ee:	5949      	ldr	r1, [r1, r5]
 80116f0:	b941      	cbnz	r1, 8011704 <_reclaim_reent+0xa0>
 80116f2:	3504      	adds	r5, #4
 80116f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116f6:	2d80      	cmp	r5, #128	; 0x80
 80116f8:	68d9      	ldr	r1, [r3, #12]
 80116fa:	d1f8      	bne.n	80116ee <_reclaim_reent+0x8a>
 80116fc:	4620      	mov	r0, r4
 80116fe:	f001 fcc9 	bl	8013094 <_free_r>
 8011702:	e7ba      	b.n	801167a <_reclaim_reent+0x16>
 8011704:	680e      	ldr	r6, [r1, #0]
 8011706:	4620      	mov	r0, r4
 8011708:	f001 fcc4 	bl	8013094 <_free_r>
 801170c:	4631      	mov	r1, r6
 801170e:	e7ef      	b.n	80116f0 <_reclaim_reent+0x8c>
 8011710:	2500      	movs	r5, #0
 8011712:	e7ef      	b.n	80116f4 <_reclaim_reent+0x90>
 8011714:	bd70      	pop	{r4, r5, r6, pc}
 8011716:	bf00      	nop
 8011718:	200001e8 	.word	0x200001e8

0801171c <_sbrk_r>:
 801171c:	b538      	push	{r3, r4, r5, lr}
 801171e:	4d06      	ldr	r5, [pc, #24]	; (8011738 <_sbrk_r+0x1c>)
 8011720:	2300      	movs	r3, #0
 8011722:	4604      	mov	r4, r0
 8011724:	4608      	mov	r0, r1
 8011726:	602b      	str	r3, [r5, #0]
 8011728:	f7f3 fc9a 	bl	8005060 <_sbrk>
 801172c:	1c43      	adds	r3, r0, #1
 801172e:	d102      	bne.n	8011736 <_sbrk_r+0x1a>
 8011730:	682b      	ldr	r3, [r5, #0]
 8011732:	b103      	cbz	r3, 8011736 <_sbrk_r+0x1a>
 8011734:	6023      	str	r3, [r4, #0]
 8011736:	bd38      	pop	{r3, r4, r5, pc}
 8011738:	20006df8 	.word	0x20006df8

0801173c <siprintf>:
 801173c:	b40e      	push	{r1, r2, r3}
 801173e:	b500      	push	{lr}
 8011740:	b09c      	sub	sp, #112	; 0x70
 8011742:	ab1d      	add	r3, sp, #116	; 0x74
 8011744:	9002      	str	r0, [sp, #8]
 8011746:	9006      	str	r0, [sp, #24]
 8011748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801174c:	4809      	ldr	r0, [pc, #36]	; (8011774 <siprintf+0x38>)
 801174e:	9107      	str	r1, [sp, #28]
 8011750:	9104      	str	r1, [sp, #16]
 8011752:	4909      	ldr	r1, [pc, #36]	; (8011778 <siprintf+0x3c>)
 8011754:	f853 2b04 	ldr.w	r2, [r3], #4
 8011758:	9105      	str	r1, [sp, #20]
 801175a:	6800      	ldr	r0, [r0, #0]
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	a902      	add	r1, sp, #8
 8011760:	f001 fd40 	bl	80131e4 <_svfiprintf_r>
 8011764:	9b02      	ldr	r3, [sp, #8]
 8011766:	2200      	movs	r2, #0
 8011768:	701a      	strb	r2, [r3, #0]
 801176a:	b01c      	add	sp, #112	; 0x70
 801176c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011770:	b003      	add	sp, #12
 8011772:	4770      	bx	lr
 8011774:	200001e8 	.word	0x200001e8
 8011778:	ffff0208 	.word	0xffff0208

0801177c <__sread>:
 801177c:	b510      	push	{r4, lr}
 801177e:	460c      	mov	r4, r1
 8011780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011784:	f001 fe2e 	bl	80133e4 <_read_r>
 8011788:	2800      	cmp	r0, #0
 801178a:	bfab      	itete	ge
 801178c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801178e:	89a3      	ldrhlt	r3, [r4, #12]
 8011790:	181b      	addge	r3, r3, r0
 8011792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011796:	bfac      	ite	ge
 8011798:	6563      	strge	r3, [r4, #84]	; 0x54
 801179a:	81a3      	strhlt	r3, [r4, #12]
 801179c:	bd10      	pop	{r4, pc}

0801179e <__swrite>:
 801179e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a2:	461f      	mov	r7, r3
 80117a4:	898b      	ldrh	r3, [r1, #12]
 80117a6:	05db      	lsls	r3, r3, #23
 80117a8:	4605      	mov	r5, r0
 80117aa:	460c      	mov	r4, r1
 80117ac:	4616      	mov	r6, r2
 80117ae:	d505      	bpl.n	80117bc <__swrite+0x1e>
 80117b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b4:	2302      	movs	r3, #2
 80117b6:	2200      	movs	r2, #0
 80117b8:	f001 f846 	bl	8012848 <_lseek_r>
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117c6:	81a3      	strh	r3, [r4, #12]
 80117c8:	4632      	mov	r2, r6
 80117ca:	463b      	mov	r3, r7
 80117cc:	4628      	mov	r0, r5
 80117ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117d2:	f000 b869 	b.w	80118a8 <_write_r>

080117d6 <__sseek>:
 80117d6:	b510      	push	{r4, lr}
 80117d8:	460c      	mov	r4, r1
 80117da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117de:	f001 f833 	bl	8012848 <_lseek_r>
 80117e2:	1c43      	adds	r3, r0, #1
 80117e4:	89a3      	ldrh	r3, [r4, #12]
 80117e6:	bf15      	itete	ne
 80117e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80117ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117f2:	81a3      	strheq	r3, [r4, #12]
 80117f4:	bf18      	it	ne
 80117f6:	81a3      	strhne	r3, [r4, #12]
 80117f8:	bd10      	pop	{r4, pc}

080117fa <__sclose>:
 80117fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117fe:	f000 b8d3 	b.w	80119a8 <_close_r>
	...

08011804 <__swbuf_r>:
 8011804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011806:	460e      	mov	r6, r1
 8011808:	4614      	mov	r4, r2
 801180a:	4605      	mov	r5, r0
 801180c:	b118      	cbz	r0, 8011816 <__swbuf_r+0x12>
 801180e:	6983      	ldr	r3, [r0, #24]
 8011810:	b90b      	cbnz	r3, 8011816 <__swbuf_r+0x12>
 8011812:	f7ff f8c9 	bl	80109a8 <__sinit>
 8011816:	4b21      	ldr	r3, [pc, #132]	; (801189c <__swbuf_r+0x98>)
 8011818:	429c      	cmp	r4, r3
 801181a:	d12b      	bne.n	8011874 <__swbuf_r+0x70>
 801181c:	686c      	ldr	r4, [r5, #4]
 801181e:	69a3      	ldr	r3, [r4, #24]
 8011820:	60a3      	str	r3, [r4, #8]
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	071a      	lsls	r2, r3, #28
 8011826:	d52f      	bpl.n	8011888 <__swbuf_r+0x84>
 8011828:	6923      	ldr	r3, [r4, #16]
 801182a:	b36b      	cbz	r3, 8011888 <__swbuf_r+0x84>
 801182c:	6923      	ldr	r3, [r4, #16]
 801182e:	6820      	ldr	r0, [r4, #0]
 8011830:	1ac0      	subs	r0, r0, r3
 8011832:	6963      	ldr	r3, [r4, #20]
 8011834:	b2f6      	uxtb	r6, r6
 8011836:	4283      	cmp	r3, r0
 8011838:	4637      	mov	r7, r6
 801183a:	dc04      	bgt.n	8011846 <__swbuf_r+0x42>
 801183c:	4621      	mov	r1, r4
 801183e:	4628      	mov	r0, r5
 8011840:	f000 ffc2 	bl	80127c8 <_fflush_r>
 8011844:	bb30      	cbnz	r0, 8011894 <__swbuf_r+0x90>
 8011846:	68a3      	ldr	r3, [r4, #8]
 8011848:	3b01      	subs	r3, #1
 801184a:	60a3      	str	r3, [r4, #8]
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	6022      	str	r2, [r4, #0]
 8011852:	701e      	strb	r6, [r3, #0]
 8011854:	6963      	ldr	r3, [r4, #20]
 8011856:	3001      	adds	r0, #1
 8011858:	4283      	cmp	r3, r0
 801185a:	d004      	beq.n	8011866 <__swbuf_r+0x62>
 801185c:	89a3      	ldrh	r3, [r4, #12]
 801185e:	07db      	lsls	r3, r3, #31
 8011860:	d506      	bpl.n	8011870 <__swbuf_r+0x6c>
 8011862:	2e0a      	cmp	r6, #10
 8011864:	d104      	bne.n	8011870 <__swbuf_r+0x6c>
 8011866:	4621      	mov	r1, r4
 8011868:	4628      	mov	r0, r5
 801186a:	f000 ffad 	bl	80127c8 <_fflush_r>
 801186e:	b988      	cbnz	r0, 8011894 <__swbuf_r+0x90>
 8011870:	4638      	mov	r0, r7
 8011872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011874:	4b0a      	ldr	r3, [pc, #40]	; (80118a0 <__swbuf_r+0x9c>)
 8011876:	429c      	cmp	r4, r3
 8011878:	d101      	bne.n	801187e <__swbuf_r+0x7a>
 801187a:	68ac      	ldr	r4, [r5, #8]
 801187c:	e7cf      	b.n	801181e <__swbuf_r+0x1a>
 801187e:	4b09      	ldr	r3, [pc, #36]	; (80118a4 <__swbuf_r+0xa0>)
 8011880:	429c      	cmp	r4, r3
 8011882:	bf08      	it	eq
 8011884:	68ec      	ldreq	r4, [r5, #12]
 8011886:	e7ca      	b.n	801181e <__swbuf_r+0x1a>
 8011888:	4621      	mov	r1, r4
 801188a:	4628      	mov	r0, r5
 801188c:	f000 f81e 	bl	80118cc <__swsetup_r>
 8011890:	2800      	cmp	r0, #0
 8011892:	d0cb      	beq.n	801182c <__swbuf_r+0x28>
 8011894:	f04f 37ff 	mov.w	r7, #4294967295
 8011898:	e7ea      	b.n	8011870 <__swbuf_r+0x6c>
 801189a:	bf00      	nop
 801189c:	08015bdc 	.word	0x08015bdc
 80118a0:	08015bfc 	.word	0x08015bfc
 80118a4:	08015bbc 	.word	0x08015bbc

080118a8 <_write_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d07      	ldr	r5, [pc, #28]	; (80118c8 <_write_r+0x20>)
 80118ac:	4604      	mov	r4, r0
 80118ae:	4608      	mov	r0, r1
 80118b0:	4611      	mov	r1, r2
 80118b2:	2200      	movs	r2, #0
 80118b4:	602a      	str	r2, [r5, #0]
 80118b6:	461a      	mov	r2, r3
 80118b8:	f7f3 fb81 	bl	8004fbe <_write>
 80118bc:	1c43      	adds	r3, r0, #1
 80118be:	d102      	bne.n	80118c6 <_write_r+0x1e>
 80118c0:	682b      	ldr	r3, [r5, #0]
 80118c2:	b103      	cbz	r3, 80118c6 <_write_r+0x1e>
 80118c4:	6023      	str	r3, [r4, #0]
 80118c6:	bd38      	pop	{r3, r4, r5, pc}
 80118c8:	20006df8 	.word	0x20006df8

080118cc <__swsetup_r>:
 80118cc:	4b32      	ldr	r3, [pc, #200]	; (8011998 <__swsetup_r+0xcc>)
 80118ce:	b570      	push	{r4, r5, r6, lr}
 80118d0:	681d      	ldr	r5, [r3, #0]
 80118d2:	4606      	mov	r6, r0
 80118d4:	460c      	mov	r4, r1
 80118d6:	b125      	cbz	r5, 80118e2 <__swsetup_r+0x16>
 80118d8:	69ab      	ldr	r3, [r5, #24]
 80118da:	b913      	cbnz	r3, 80118e2 <__swsetup_r+0x16>
 80118dc:	4628      	mov	r0, r5
 80118de:	f7ff f863 	bl	80109a8 <__sinit>
 80118e2:	4b2e      	ldr	r3, [pc, #184]	; (801199c <__swsetup_r+0xd0>)
 80118e4:	429c      	cmp	r4, r3
 80118e6:	d10f      	bne.n	8011908 <__swsetup_r+0x3c>
 80118e8:	686c      	ldr	r4, [r5, #4]
 80118ea:	89a3      	ldrh	r3, [r4, #12]
 80118ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118f0:	0719      	lsls	r1, r3, #28
 80118f2:	d42c      	bmi.n	801194e <__swsetup_r+0x82>
 80118f4:	06dd      	lsls	r5, r3, #27
 80118f6:	d411      	bmi.n	801191c <__swsetup_r+0x50>
 80118f8:	2309      	movs	r3, #9
 80118fa:	6033      	str	r3, [r6, #0]
 80118fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011900:	81a3      	strh	r3, [r4, #12]
 8011902:	f04f 30ff 	mov.w	r0, #4294967295
 8011906:	e03e      	b.n	8011986 <__swsetup_r+0xba>
 8011908:	4b25      	ldr	r3, [pc, #148]	; (80119a0 <__swsetup_r+0xd4>)
 801190a:	429c      	cmp	r4, r3
 801190c:	d101      	bne.n	8011912 <__swsetup_r+0x46>
 801190e:	68ac      	ldr	r4, [r5, #8]
 8011910:	e7eb      	b.n	80118ea <__swsetup_r+0x1e>
 8011912:	4b24      	ldr	r3, [pc, #144]	; (80119a4 <__swsetup_r+0xd8>)
 8011914:	429c      	cmp	r4, r3
 8011916:	bf08      	it	eq
 8011918:	68ec      	ldreq	r4, [r5, #12]
 801191a:	e7e6      	b.n	80118ea <__swsetup_r+0x1e>
 801191c:	0758      	lsls	r0, r3, #29
 801191e:	d512      	bpl.n	8011946 <__swsetup_r+0x7a>
 8011920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011922:	b141      	cbz	r1, 8011936 <__swsetup_r+0x6a>
 8011924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011928:	4299      	cmp	r1, r3
 801192a:	d002      	beq.n	8011932 <__swsetup_r+0x66>
 801192c:	4630      	mov	r0, r6
 801192e:	f001 fbb1 	bl	8013094 <_free_r>
 8011932:	2300      	movs	r3, #0
 8011934:	6363      	str	r3, [r4, #52]	; 0x34
 8011936:	89a3      	ldrh	r3, [r4, #12]
 8011938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801193c:	81a3      	strh	r3, [r4, #12]
 801193e:	2300      	movs	r3, #0
 8011940:	6063      	str	r3, [r4, #4]
 8011942:	6923      	ldr	r3, [r4, #16]
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	f043 0308 	orr.w	r3, r3, #8
 801194c:	81a3      	strh	r3, [r4, #12]
 801194e:	6923      	ldr	r3, [r4, #16]
 8011950:	b94b      	cbnz	r3, 8011966 <__swsetup_r+0x9a>
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801195c:	d003      	beq.n	8011966 <__swsetup_r+0x9a>
 801195e:	4621      	mov	r1, r4
 8011960:	4630      	mov	r0, r6
 8011962:	f000 ffa9 	bl	80128b8 <__smakebuf_r>
 8011966:	89a0      	ldrh	r0, [r4, #12]
 8011968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801196c:	f010 0301 	ands.w	r3, r0, #1
 8011970:	d00a      	beq.n	8011988 <__swsetup_r+0xbc>
 8011972:	2300      	movs	r3, #0
 8011974:	60a3      	str	r3, [r4, #8]
 8011976:	6963      	ldr	r3, [r4, #20]
 8011978:	425b      	negs	r3, r3
 801197a:	61a3      	str	r3, [r4, #24]
 801197c:	6923      	ldr	r3, [r4, #16]
 801197e:	b943      	cbnz	r3, 8011992 <__swsetup_r+0xc6>
 8011980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011984:	d1ba      	bne.n	80118fc <__swsetup_r+0x30>
 8011986:	bd70      	pop	{r4, r5, r6, pc}
 8011988:	0781      	lsls	r1, r0, #30
 801198a:	bf58      	it	pl
 801198c:	6963      	ldrpl	r3, [r4, #20]
 801198e:	60a3      	str	r3, [r4, #8]
 8011990:	e7f4      	b.n	801197c <__swsetup_r+0xb0>
 8011992:	2000      	movs	r0, #0
 8011994:	e7f7      	b.n	8011986 <__swsetup_r+0xba>
 8011996:	bf00      	nop
 8011998:	200001e8 	.word	0x200001e8
 801199c:	08015bdc 	.word	0x08015bdc
 80119a0:	08015bfc 	.word	0x08015bfc
 80119a4:	08015bbc 	.word	0x08015bbc

080119a8 <_close_r>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4d06      	ldr	r5, [pc, #24]	; (80119c4 <_close_r+0x1c>)
 80119ac:	2300      	movs	r3, #0
 80119ae:	4604      	mov	r4, r0
 80119b0:	4608      	mov	r0, r1
 80119b2:	602b      	str	r3, [r5, #0]
 80119b4:	f7f3 fb1f 	bl	8004ff6 <_close>
 80119b8:	1c43      	adds	r3, r0, #1
 80119ba:	d102      	bne.n	80119c2 <_close_r+0x1a>
 80119bc:	682b      	ldr	r3, [r5, #0]
 80119be:	b103      	cbz	r3, 80119c2 <_close_r+0x1a>
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	20006df8 	.word	0x20006df8

080119c8 <quorem>:
 80119c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119cc:	6903      	ldr	r3, [r0, #16]
 80119ce:	690c      	ldr	r4, [r1, #16]
 80119d0:	42a3      	cmp	r3, r4
 80119d2:	4607      	mov	r7, r0
 80119d4:	f2c0 8081 	blt.w	8011ada <quorem+0x112>
 80119d8:	3c01      	subs	r4, #1
 80119da:	f101 0814 	add.w	r8, r1, #20
 80119de:	f100 0514 	add.w	r5, r0, #20
 80119e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119e6:	9301      	str	r3, [sp, #4]
 80119e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119f0:	3301      	adds	r3, #1
 80119f2:	429a      	cmp	r2, r3
 80119f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80119f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80119fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a00:	d331      	bcc.n	8011a66 <quorem+0x9e>
 8011a02:	f04f 0e00 	mov.w	lr, #0
 8011a06:	4640      	mov	r0, r8
 8011a08:	46ac      	mov	ip, r5
 8011a0a:	46f2      	mov	sl, lr
 8011a0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a10:	b293      	uxth	r3, r2
 8011a12:	fb06 e303 	mla	r3, r6, r3, lr
 8011a16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8011a20:	f8dc a000 	ldr.w	sl, [ip]
 8011a24:	0c12      	lsrs	r2, r2, #16
 8011a26:	fa13 f38a 	uxtah	r3, r3, sl
 8011a2a:	fb06 e202 	mla	r2, r6, r2, lr
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	9b00      	ldr	r3, [sp, #0]
 8011a32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a36:	b292      	uxth	r2, r2
 8011a38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a40:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a44:	4581      	cmp	r9, r0
 8011a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8011a4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a52:	d2db      	bcs.n	8011a0c <quorem+0x44>
 8011a54:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a58:	b92b      	cbnz	r3, 8011a66 <quorem+0x9e>
 8011a5a:	9b01      	ldr	r3, [sp, #4]
 8011a5c:	3b04      	subs	r3, #4
 8011a5e:	429d      	cmp	r5, r3
 8011a60:	461a      	mov	r2, r3
 8011a62:	d32e      	bcc.n	8011ac2 <quorem+0xfa>
 8011a64:	613c      	str	r4, [r7, #16]
 8011a66:	4638      	mov	r0, r7
 8011a68:	f001 f9fc 	bl	8012e64 <__mcmp>
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	db24      	blt.n	8011aba <quorem+0xf2>
 8011a70:	3601      	adds	r6, #1
 8011a72:	4628      	mov	r0, r5
 8011a74:	f04f 0c00 	mov.w	ip, #0
 8011a78:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8011a80:	b293      	uxth	r3, r2
 8011a82:	ebac 0303 	sub.w	r3, ip, r3
 8011a86:	0c12      	lsrs	r2, r2, #16
 8011a88:	fa13 f38e 	uxtah	r3, r3, lr
 8011a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a9a:	45c1      	cmp	r9, r8
 8011a9c:	f840 3b04 	str.w	r3, [r0], #4
 8011aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011aa4:	d2e8      	bcs.n	8011a78 <quorem+0xb0>
 8011aa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011aae:	b922      	cbnz	r2, 8011aba <quorem+0xf2>
 8011ab0:	3b04      	subs	r3, #4
 8011ab2:	429d      	cmp	r5, r3
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	d30a      	bcc.n	8011ace <quorem+0x106>
 8011ab8:	613c      	str	r4, [r7, #16]
 8011aba:	4630      	mov	r0, r6
 8011abc:	b003      	add	sp, #12
 8011abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac2:	6812      	ldr	r2, [r2, #0]
 8011ac4:	3b04      	subs	r3, #4
 8011ac6:	2a00      	cmp	r2, #0
 8011ac8:	d1cc      	bne.n	8011a64 <quorem+0x9c>
 8011aca:	3c01      	subs	r4, #1
 8011acc:	e7c7      	b.n	8011a5e <quorem+0x96>
 8011ace:	6812      	ldr	r2, [r2, #0]
 8011ad0:	3b04      	subs	r3, #4
 8011ad2:	2a00      	cmp	r2, #0
 8011ad4:	d1f0      	bne.n	8011ab8 <quorem+0xf0>
 8011ad6:	3c01      	subs	r4, #1
 8011ad8:	e7eb      	b.n	8011ab2 <quorem+0xea>
 8011ada:	2000      	movs	r0, #0
 8011adc:	e7ee      	b.n	8011abc <quorem+0xf4>
	...

08011ae0 <_dtoa_r>:
 8011ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	ed2d 8b04 	vpush	{d8-d9}
 8011ae8:	ec57 6b10 	vmov	r6, r7, d0
 8011aec:	b093      	sub	sp, #76	; 0x4c
 8011aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011af4:	9106      	str	r1, [sp, #24]
 8011af6:	ee10 aa10 	vmov	sl, s0
 8011afa:	4604      	mov	r4, r0
 8011afc:	9209      	str	r2, [sp, #36]	; 0x24
 8011afe:	930c      	str	r3, [sp, #48]	; 0x30
 8011b00:	46bb      	mov	fp, r7
 8011b02:	b975      	cbnz	r5, 8011b22 <_dtoa_r+0x42>
 8011b04:	2010      	movs	r0, #16
 8011b06:	f000 ff17 	bl	8012938 <malloc>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8011b0e:	b920      	cbnz	r0, 8011b1a <_dtoa_r+0x3a>
 8011b10:	4ba7      	ldr	r3, [pc, #668]	; (8011db0 <_dtoa_r+0x2d0>)
 8011b12:	21ea      	movs	r1, #234	; 0xea
 8011b14:	48a7      	ldr	r0, [pc, #668]	; (8011db4 <_dtoa_r+0x2d4>)
 8011b16:	f001 fc77 	bl	8013408 <__assert_func>
 8011b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b1e:	6005      	str	r5, [r0, #0]
 8011b20:	60c5      	str	r5, [r0, #12]
 8011b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b24:	6819      	ldr	r1, [r3, #0]
 8011b26:	b151      	cbz	r1, 8011b3e <_dtoa_r+0x5e>
 8011b28:	685a      	ldr	r2, [r3, #4]
 8011b2a:	604a      	str	r2, [r1, #4]
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	4093      	lsls	r3, r2
 8011b30:	608b      	str	r3, [r1, #8]
 8011b32:	4620      	mov	r0, r4
 8011b34:	f000 ff54 	bl	80129e0 <_Bfree>
 8011b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	601a      	str	r2, [r3, #0]
 8011b3e:	1e3b      	subs	r3, r7, #0
 8011b40:	bfaa      	itet	ge
 8011b42:	2300      	movge	r3, #0
 8011b44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011b48:	f8c8 3000 	strge.w	r3, [r8]
 8011b4c:	4b9a      	ldr	r3, [pc, #616]	; (8011db8 <_dtoa_r+0x2d8>)
 8011b4e:	bfbc      	itt	lt
 8011b50:	2201      	movlt	r2, #1
 8011b52:	f8c8 2000 	strlt.w	r2, [r8]
 8011b56:	ea33 030b 	bics.w	r3, r3, fp
 8011b5a:	d11b      	bne.n	8011b94 <_dtoa_r+0xb4>
 8011b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b62:	6013      	str	r3, [r2, #0]
 8011b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b68:	4333      	orrs	r3, r6
 8011b6a:	f000 8592 	beq.w	8012692 <_dtoa_r+0xbb2>
 8011b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b70:	b963      	cbnz	r3, 8011b8c <_dtoa_r+0xac>
 8011b72:	4b92      	ldr	r3, [pc, #584]	; (8011dbc <_dtoa_r+0x2dc>)
 8011b74:	e022      	b.n	8011bbc <_dtoa_r+0xdc>
 8011b76:	4b92      	ldr	r3, [pc, #584]	; (8011dc0 <_dtoa_r+0x2e0>)
 8011b78:	9301      	str	r3, [sp, #4]
 8011b7a:	3308      	adds	r3, #8
 8011b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b7e:	6013      	str	r3, [r2, #0]
 8011b80:	9801      	ldr	r0, [sp, #4]
 8011b82:	b013      	add	sp, #76	; 0x4c
 8011b84:	ecbd 8b04 	vpop	{d8-d9}
 8011b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b8c:	4b8b      	ldr	r3, [pc, #556]	; (8011dbc <_dtoa_r+0x2dc>)
 8011b8e:	9301      	str	r3, [sp, #4]
 8011b90:	3303      	adds	r3, #3
 8011b92:	e7f3      	b.n	8011b7c <_dtoa_r+0x9c>
 8011b94:	2200      	movs	r2, #0
 8011b96:	2300      	movs	r3, #0
 8011b98:	4650      	mov	r0, sl
 8011b9a:	4659      	mov	r1, fp
 8011b9c:	f7ee ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8011ba0:	ec4b ab19 	vmov	d9, sl, fp
 8011ba4:	4680      	mov	r8, r0
 8011ba6:	b158      	cbz	r0, 8011bc0 <_dtoa_r+0xe0>
 8011ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011baa:	2301      	movs	r3, #1
 8011bac:	6013      	str	r3, [r2, #0]
 8011bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	f000 856b 	beq.w	801268c <_dtoa_r+0xbac>
 8011bb6:	4883      	ldr	r0, [pc, #524]	; (8011dc4 <_dtoa_r+0x2e4>)
 8011bb8:	6018      	str	r0, [r3, #0]
 8011bba:	1e43      	subs	r3, r0, #1
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	e7df      	b.n	8011b80 <_dtoa_r+0xa0>
 8011bc0:	ec4b ab10 	vmov	d0, sl, fp
 8011bc4:	aa10      	add	r2, sp, #64	; 0x40
 8011bc6:	a911      	add	r1, sp, #68	; 0x44
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f001 f9f1 	bl	8012fb0 <__d2b>
 8011bce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011bd2:	ee08 0a10 	vmov	s16, r0
 8011bd6:	2d00      	cmp	r5, #0
 8011bd8:	f000 8084 	beq.w	8011ce4 <_dtoa_r+0x204>
 8011bdc:	ee19 3a90 	vmov	r3, s19
 8011be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011be4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011be8:	4656      	mov	r6, sl
 8011bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011bf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011bf6:	4b74      	ldr	r3, [pc, #464]	; (8011dc8 <_dtoa_r+0x2e8>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	4639      	mov	r1, r7
 8011bfe:	f7ee fb4b 	bl	8000298 <__aeabi_dsub>
 8011c02:	a365      	add	r3, pc, #404	; (adr r3, 8011d98 <_dtoa_r+0x2b8>)
 8011c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c08:	f7ee fcfe 	bl	8000608 <__aeabi_dmul>
 8011c0c:	a364      	add	r3, pc, #400	; (adr r3, 8011da0 <_dtoa_r+0x2c0>)
 8011c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c12:	f7ee fb43 	bl	800029c <__adddf3>
 8011c16:	4606      	mov	r6, r0
 8011c18:	4628      	mov	r0, r5
 8011c1a:	460f      	mov	r7, r1
 8011c1c:	f7ee fc8a 	bl	8000534 <__aeabi_i2d>
 8011c20:	a361      	add	r3, pc, #388	; (adr r3, 8011da8 <_dtoa_r+0x2c8>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fcef 	bl	8000608 <__aeabi_dmul>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4630      	mov	r0, r6
 8011c30:	4639      	mov	r1, r7
 8011c32:	f7ee fb33 	bl	800029c <__adddf3>
 8011c36:	4606      	mov	r6, r0
 8011c38:	460f      	mov	r7, r1
 8011c3a:	f7ee ff95 	bl	8000b68 <__aeabi_d2iz>
 8011c3e:	2200      	movs	r2, #0
 8011c40:	9000      	str	r0, [sp, #0]
 8011c42:	2300      	movs	r3, #0
 8011c44:	4630      	mov	r0, r6
 8011c46:	4639      	mov	r1, r7
 8011c48:	f7ee ff50 	bl	8000aec <__aeabi_dcmplt>
 8011c4c:	b150      	cbz	r0, 8011c64 <_dtoa_r+0x184>
 8011c4e:	9800      	ldr	r0, [sp, #0]
 8011c50:	f7ee fc70 	bl	8000534 <__aeabi_i2d>
 8011c54:	4632      	mov	r2, r6
 8011c56:	463b      	mov	r3, r7
 8011c58:	f7ee ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8011c5c:	b910      	cbnz	r0, 8011c64 <_dtoa_r+0x184>
 8011c5e:	9b00      	ldr	r3, [sp, #0]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	9b00      	ldr	r3, [sp, #0]
 8011c66:	2b16      	cmp	r3, #22
 8011c68:	d85a      	bhi.n	8011d20 <_dtoa_r+0x240>
 8011c6a:	9a00      	ldr	r2, [sp, #0]
 8011c6c:	4b57      	ldr	r3, [pc, #348]	; (8011dcc <_dtoa_r+0x2ec>)
 8011c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	ec51 0b19 	vmov	r0, r1, d9
 8011c7a:	f7ee ff37 	bl	8000aec <__aeabi_dcmplt>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d050      	beq.n	8011d24 <_dtoa_r+0x244>
 8011c82:	9b00      	ldr	r3, [sp, #0]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	9300      	str	r3, [sp, #0]
 8011c88:	2300      	movs	r3, #0
 8011c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c8e:	1b5d      	subs	r5, r3, r5
 8011c90:	1e6b      	subs	r3, r5, #1
 8011c92:	9305      	str	r3, [sp, #20]
 8011c94:	bf45      	ittet	mi
 8011c96:	f1c5 0301 	rsbmi	r3, r5, #1
 8011c9a:	9304      	strmi	r3, [sp, #16]
 8011c9c:	2300      	movpl	r3, #0
 8011c9e:	2300      	movmi	r3, #0
 8011ca0:	bf4c      	ite	mi
 8011ca2:	9305      	strmi	r3, [sp, #20]
 8011ca4:	9304      	strpl	r3, [sp, #16]
 8011ca6:	9b00      	ldr	r3, [sp, #0]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	db3d      	blt.n	8011d28 <_dtoa_r+0x248>
 8011cac:	9b05      	ldr	r3, [sp, #20]
 8011cae:	9a00      	ldr	r2, [sp, #0]
 8011cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8011cb2:	4413      	add	r3, r2
 8011cb4:	9305      	str	r3, [sp, #20]
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	9307      	str	r3, [sp, #28]
 8011cba:	9b06      	ldr	r3, [sp, #24]
 8011cbc:	2b09      	cmp	r3, #9
 8011cbe:	f200 8089 	bhi.w	8011dd4 <_dtoa_r+0x2f4>
 8011cc2:	2b05      	cmp	r3, #5
 8011cc4:	bfc4      	itt	gt
 8011cc6:	3b04      	subgt	r3, #4
 8011cc8:	9306      	strgt	r3, [sp, #24]
 8011cca:	9b06      	ldr	r3, [sp, #24]
 8011ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8011cd0:	bfcc      	ite	gt
 8011cd2:	2500      	movgt	r5, #0
 8011cd4:	2501      	movle	r5, #1
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	f200 8087 	bhi.w	8011dea <_dtoa_r+0x30a>
 8011cdc:	e8df f003 	tbb	[pc, r3]
 8011ce0:	59383a2d 	.word	0x59383a2d
 8011ce4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011ce8:	441d      	add	r5, r3
 8011cea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011cee:	2b20      	cmp	r3, #32
 8011cf0:	bfc1      	itttt	gt
 8011cf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011cf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011cfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8011cfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d02:	bfda      	itte	le
 8011d04:	f1c3 0320 	rsble	r3, r3, #32
 8011d08:	fa06 f003 	lslle.w	r0, r6, r3
 8011d0c:	4318      	orrgt	r0, r3
 8011d0e:	f7ee fc01 	bl	8000514 <__aeabi_ui2d>
 8011d12:	2301      	movs	r3, #1
 8011d14:	4606      	mov	r6, r0
 8011d16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011d1a:	3d01      	subs	r5, #1
 8011d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d1e:	e76a      	b.n	8011bf6 <_dtoa_r+0x116>
 8011d20:	2301      	movs	r3, #1
 8011d22:	e7b2      	b.n	8011c8a <_dtoa_r+0x1aa>
 8011d24:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d26:	e7b1      	b.n	8011c8c <_dtoa_r+0x1ac>
 8011d28:	9b04      	ldr	r3, [sp, #16]
 8011d2a:	9a00      	ldr	r2, [sp, #0]
 8011d2c:	1a9b      	subs	r3, r3, r2
 8011d2e:	9304      	str	r3, [sp, #16]
 8011d30:	4253      	negs	r3, r2
 8011d32:	9307      	str	r3, [sp, #28]
 8011d34:	2300      	movs	r3, #0
 8011d36:	930a      	str	r3, [sp, #40]	; 0x28
 8011d38:	e7bf      	b.n	8011cba <_dtoa_r+0x1da>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	9308      	str	r3, [sp, #32]
 8011d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	dc55      	bgt.n	8011df0 <_dtoa_r+0x310>
 8011d44:	2301      	movs	r3, #1
 8011d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d4e:	e00c      	b.n	8011d6a <_dtoa_r+0x28a>
 8011d50:	2301      	movs	r3, #1
 8011d52:	e7f3      	b.n	8011d3c <_dtoa_r+0x25c>
 8011d54:	2300      	movs	r3, #0
 8011d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d58:	9308      	str	r3, [sp, #32]
 8011d5a:	9b00      	ldr	r3, [sp, #0]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	9302      	str	r3, [sp, #8]
 8011d60:	3301      	adds	r3, #1
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	9303      	str	r3, [sp, #12]
 8011d66:	bfb8      	it	lt
 8011d68:	2301      	movlt	r3, #1
 8011d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	6042      	str	r2, [r0, #4]
 8011d70:	2204      	movs	r2, #4
 8011d72:	f102 0614 	add.w	r6, r2, #20
 8011d76:	429e      	cmp	r6, r3
 8011d78:	6841      	ldr	r1, [r0, #4]
 8011d7a:	d93d      	bls.n	8011df8 <_dtoa_r+0x318>
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 fdef 	bl	8012960 <_Balloc>
 8011d82:	9001      	str	r0, [sp, #4]
 8011d84:	2800      	cmp	r0, #0
 8011d86:	d13b      	bne.n	8011e00 <_dtoa_r+0x320>
 8011d88:	4b11      	ldr	r3, [pc, #68]	; (8011dd0 <_dtoa_r+0x2f0>)
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d90:	e6c0      	b.n	8011b14 <_dtoa_r+0x34>
 8011d92:	2301      	movs	r3, #1
 8011d94:	e7df      	b.n	8011d56 <_dtoa_r+0x276>
 8011d96:	bf00      	nop
 8011d98:	636f4361 	.word	0x636f4361
 8011d9c:	3fd287a7 	.word	0x3fd287a7
 8011da0:	8b60c8b3 	.word	0x8b60c8b3
 8011da4:	3fc68a28 	.word	0x3fc68a28
 8011da8:	509f79fb 	.word	0x509f79fb
 8011dac:	3fd34413 	.word	0x3fd34413
 8011db0:	08015c61 	.word	0x08015c61
 8011db4:	08015c78 	.word	0x08015c78
 8011db8:	7ff00000 	.word	0x7ff00000
 8011dbc:	08015c5d 	.word	0x08015c5d
 8011dc0:	08015c54 	.word	0x08015c54
 8011dc4:	08015c31 	.word	0x08015c31
 8011dc8:	3ff80000 	.word	0x3ff80000
 8011dcc:	08015d68 	.word	0x08015d68
 8011dd0:	08015cd3 	.word	0x08015cd3
 8011dd4:	2501      	movs	r5, #1
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	9306      	str	r3, [sp, #24]
 8011dda:	9508      	str	r5, [sp, #32]
 8011ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8011de0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011de4:	2200      	movs	r2, #0
 8011de6:	2312      	movs	r3, #18
 8011de8:	e7b0      	b.n	8011d4c <_dtoa_r+0x26c>
 8011dea:	2301      	movs	r3, #1
 8011dec:	9308      	str	r3, [sp, #32]
 8011dee:	e7f5      	b.n	8011ddc <_dtoa_r+0x2fc>
 8011df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011df6:	e7b8      	b.n	8011d6a <_dtoa_r+0x28a>
 8011df8:	3101      	adds	r1, #1
 8011dfa:	6041      	str	r1, [r0, #4]
 8011dfc:	0052      	lsls	r2, r2, #1
 8011dfe:	e7b8      	b.n	8011d72 <_dtoa_r+0x292>
 8011e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e02:	9a01      	ldr	r2, [sp, #4]
 8011e04:	601a      	str	r2, [r3, #0]
 8011e06:	9b03      	ldr	r3, [sp, #12]
 8011e08:	2b0e      	cmp	r3, #14
 8011e0a:	f200 809d 	bhi.w	8011f48 <_dtoa_r+0x468>
 8011e0e:	2d00      	cmp	r5, #0
 8011e10:	f000 809a 	beq.w	8011f48 <_dtoa_r+0x468>
 8011e14:	9b00      	ldr	r3, [sp, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	dd32      	ble.n	8011e80 <_dtoa_r+0x3a0>
 8011e1a:	4ab7      	ldr	r2, [pc, #732]	; (80120f8 <_dtoa_r+0x618>)
 8011e1c:	f003 030f 	and.w	r3, r3, #15
 8011e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e28:	9b00      	ldr	r3, [sp, #0]
 8011e2a:	05d8      	lsls	r0, r3, #23
 8011e2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011e30:	d516      	bpl.n	8011e60 <_dtoa_r+0x380>
 8011e32:	4bb2      	ldr	r3, [pc, #712]	; (80120fc <_dtoa_r+0x61c>)
 8011e34:	ec51 0b19 	vmov	r0, r1, d9
 8011e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e3c:	f7ee fd0e 	bl	800085c <__aeabi_ddiv>
 8011e40:	f007 070f 	and.w	r7, r7, #15
 8011e44:	4682      	mov	sl, r0
 8011e46:	468b      	mov	fp, r1
 8011e48:	2503      	movs	r5, #3
 8011e4a:	4eac      	ldr	r6, [pc, #688]	; (80120fc <_dtoa_r+0x61c>)
 8011e4c:	b957      	cbnz	r7, 8011e64 <_dtoa_r+0x384>
 8011e4e:	4642      	mov	r2, r8
 8011e50:	464b      	mov	r3, r9
 8011e52:	4650      	mov	r0, sl
 8011e54:	4659      	mov	r1, fp
 8011e56:	f7ee fd01 	bl	800085c <__aeabi_ddiv>
 8011e5a:	4682      	mov	sl, r0
 8011e5c:	468b      	mov	fp, r1
 8011e5e:	e028      	b.n	8011eb2 <_dtoa_r+0x3d2>
 8011e60:	2502      	movs	r5, #2
 8011e62:	e7f2      	b.n	8011e4a <_dtoa_r+0x36a>
 8011e64:	07f9      	lsls	r1, r7, #31
 8011e66:	d508      	bpl.n	8011e7a <_dtoa_r+0x39a>
 8011e68:	4640      	mov	r0, r8
 8011e6a:	4649      	mov	r1, r9
 8011e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e70:	f7ee fbca 	bl	8000608 <__aeabi_dmul>
 8011e74:	3501      	adds	r5, #1
 8011e76:	4680      	mov	r8, r0
 8011e78:	4689      	mov	r9, r1
 8011e7a:	107f      	asrs	r7, r7, #1
 8011e7c:	3608      	adds	r6, #8
 8011e7e:	e7e5      	b.n	8011e4c <_dtoa_r+0x36c>
 8011e80:	f000 809b 	beq.w	8011fba <_dtoa_r+0x4da>
 8011e84:	9b00      	ldr	r3, [sp, #0]
 8011e86:	4f9d      	ldr	r7, [pc, #628]	; (80120fc <_dtoa_r+0x61c>)
 8011e88:	425e      	negs	r6, r3
 8011e8a:	4b9b      	ldr	r3, [pc, #620]	; (80120f8 <_dtoa_r+0x618>)
 8011e8c:	f006 020f 	and.w	r2, r6, #15
 8011e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e98:	ec51 0b19 	vmov	r0, r1, d9
 8011e9c:	f7ee fbb4 	bl	8000608 <__aeabi_dmul>
 8011ea0:	1136      	asrs	r6, r6, #4
 8011ea2:	4682      	mov	sl, r0
 8011ea4:	468b      	mov	fp, r1
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	2502      	movs	r5, #2
 8011eaa:	2e00      	cmp	r6, #0
 8011eac:	d17a      	bne.n	8011fa4 <_dtoa_r+0x4c4>
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1d3      	bne.n	8011e5a <_dtoa_r+0x37a>
 8011eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f000 8082 	beq.w	8011fbe <_dtoa_r+0x4de>
 8011eba:	4b91      	ldr	r3, [pc, #580]	; (8012100 <_dtoa_r+0x620>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	4659      	mov	r1, fp
 8011ec2:	f7ee fe13 	bl	8000aec <__aeabi_dcmplt>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d079      	beq.n	8011fbe <_dtoa_r+0x4de>
 8011eca:	9b03      	ldr	r3, [sp, #12]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d076      	beq.n	8011fbe <_dtoa_r+0x4de>
 8011ed0:	9b02      	ldr	r3, [sp, #8]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	dd36      	ble.n	8011f44 <_dtoa_r+0x464>
 8011ed6:	9b00      	ldr	r3, [sp, #0]
 8011ed8:	4650      	mov	r0, sl
 8011eda:	4659      	mov	r1, fp
 8011edc:	1e5f      	subs	r7, r3, #1
 8011ede:	2200      	movs	r2, #0
 8011ee0:	4b88      	ldr	r3, [pc, #544]	; (8012104 <_dtoa_r+0x624>)
 8011ee2:	f7ee fb91 	bl	8000608 <__aeabi_dmul>
 8011ee6:	9e02      	ldr	r6, [sp, #8]
 8011ee8:	4682      	mov	sl, r0
 8011eea:	468b      	mov	fp, r1
 8011eec:	3501      	adds	r5, #1
 8011eee:	4628      	mov	r0, r5
 8011ef0:	f7ee fb20 	bl	8000534 <__aeabi_i2d>
 8011ef4:	4652      	mov	r2, sl
 8011ef6:	465b      	mov	r3, fp
 8011ef8:	f7ee fb86 	bl	8000608 <__aeabi_dmul>
 8011efc:	4b82      	ldr	r3, [pc, #520]	; (8012108 <_dtoa_r+0x628>)
 8011efe:	2200      	movs	r2, #0
 8011f00:	f7ee f9cc 	bl	800029c <__adddf3>
 8011f04:	46d0      	mov	r8, sl
 8011f06:	46d9      	mov	r9, fp
 8011f08:	4682      	mov	sl, r0
 8011f0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011f0e:	2e00      	cmp	r6, #0
 8011f10:	d158      	bne.n	8011fc4 <_dtoa_r+0x4e4>
 8011f12:	4b7e      	ldr	r3, [pc, #504]	; (801210c <_dtoa_r+0x62c>)
 8011f14:	2200      	movs	r2, #0
 8011f16:	4640      	mov	r0, r8
 8011f18:	4649      	mov	r1, r9
 8011f1a:	f7ee f9bd 	bl	8000298 <__aeabi_dsub>
 8011f1e:	4652      	mov	r2, sl
 8011f20:	465b      	mov	r3, fp
 8011f22:	4680      	mov	r8, r0
 8011f24:	4689      	mov	r9, r1
 8011f26:	f7ee fdff 	bl	8000b28 <__aeabi_dcmpgt>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	f040 8295 	bne.w	801245a <_dtoa_r+0x97a>
 8011f30:	4652      	mov	r2, sl
 8011f32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f36:	4640      	mov	r0, r8
 8011f38:	4649      	mov	r1, r9
 8011f3a:	f7ee fdd7 	bl	8000aec <__aeabi_dcmplt>
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	f040 8289 	bne.w	8012456 <_dtoa_r+0x976>
 8011f44:	ec5b ab19 	vmov	sl, fp, d9
 8011f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f2c0 8148 	blt.w	80121e0 <_dtoa_r+0x700>
 8011f50:	9a00      	ldr	r2, [sp, #0]
 8011f52:	2a0e      	cmp	r2, #14
 8011f54:	f300 8144 	bgt.w	80121e0 <_dtoa_r+0x700>
 8011f58:	4b67      	ldr	r3, [pc, #412]	; (80120f8 <_dtoa_r+0x618>)
 8011f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f280 80d5 	bge.w	8012114 <_dtoa_r+0x634>
 8011f6a:	9b03      	ldr	r3, [sp, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f300 80d1 	bgt.w	8012114 <_dtoa_r+0x634>
 8011f72:	f040 826f 	bne.w	8012454 <_dtoa_r+0x974>
 8011f76:	4b65      	ldr	r3, [pc, #404]	; (801210c <_dtoa_r+0x62c>)
 8011f78:	2200      	movs	r2, #0
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	4649      	mov	r1, r9
 8011f7e:	f7ee fb43 	bl	8000608 <__aeabi_dmul>
 8011f82:	4652      	mov	r2, sl
 8011f84:	465b      	mov	r3, fp
 8011f86:	f7ee fdc5 	bl	8000b14 <__aeabi_dcmpge>
 8011f8a:	9e03      	ldr	r6, [sp, #12]
 8011f8c:	4637      	mov	r7, r6
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	f040 8245 	bne.w	801241e <_dtoa_r+0x93e>
 8011f94:	9d01      	ldr	r5, [sp, #4]
 8011f96:	2331      	movs	r3, #49	; 0x31
 8011f98:	f805 3b01 	strb.w	r3, [r5], #1
 8011f9c:	9b00      	ldr	r3, [sp, #0]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	9300      	str	r3, [sp, #0]
 8011fa2:	e240      	b.n	8012426 <_dtoa_r+0x946>
 8011fa4:	07f2      	lsls	r2, r6, #31
 8011fa6:	d505      	bpl.n	8011fb4 <_dtoa_r+0x4d4>
 8011fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fac:	f7ee fb2c 	bl	8000608 <__aeabi_dmul>
 8011fb0:	3501      	adds	r5, #1
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	1076      	asrs	r6, r6, #1
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	e777      	b.n	8011eaa <_dtoa_r+0x3ca>
 8011fba:	2502      	movs	r5, #2
 8011fbc:	e779      	b.n	8011eb2 <_dtoa_r+0x3d2>
 8011fbe:	9f00      	ldr	r7, [sp, #0]
 8011fc0:	9e03      	ldr	r6, [sp, #12]
 8011fc2:	e794      	b.n	8011eee <_dtoa_r+0x40e>
 8011fc4:	9901      	ldr	r1, [sp, #4]
 8011fc6:	4b4c      	ldr	r3, [pc, #304]	; (80120f8 <_dtoa_r+0x618>)
 8011fc8:	4431      	add	r1, r6
 8011fca:	910d      	str	r1, [sp, #52]	; 0x34
 8011fcc:	9908      	ldr	r1, [sp, #32]
 8011fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011fd6:	2900      	cmp	r1, #0
 8011fd8:	d043      	beq.n	8012062 <_dtoa_r+0x582>
 8011fda:	494d      	ldr	r1, [pc, #308]	; (8012110 <_dtoa_r+0x630>)
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f7ee fc3d 	bl	800085c <__aeabi_ddiv>
 8011fe2:	4652      	mov	r2, sl
 8011fe4:	465b      	mov	r3, fp
 8011fe6:	f7ee f957 	bl	8000298 <__aeabi_dsub>
 8011fea:	9d01      	ldr	r5, [sp, #4]
 8011fec:	4682      	mov	sl, r0
 8011fee:	468b      	mov	fp, r1
 8011ff0:	4649      	mov	r1, r9
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	f7ee fdb8 	bl	8000b68 <__aeabi_d2iz>
 8011ff8:	4606      	mov	r6, r0
 8011ffa:	f7ee fa9b 	bl	8000534 <__aeabi_i2d>
 8011ffe:	4602      	mov	r2, r0
 8012000:	460b      	mov	r3, r1
 8012002:	4640      	mov	r0, r8
 8012004:	4649      	mov	r1, r9
 8012006:	f7ee f947 	bl	8000298 <__aeabi_dsub>
 801200a:	3630      	adds	r6, #48	; 0x30
 801200c:	f805 6b01 	strb.w	r6, [r5], #1
 8012010:	4652      	mov	r2, sl
 8012012:	465b      	mov	r3, fp
 8012014:	4680      	mov	r8, r0
 8012016:	4689      	mov	r9, r1
 8012018:	f7ee fd68 	bl	8000aec <__aeabi_dcmplt>
 801201c:	2800      	cmp	r0, #0
 801201e:	d163      	bne.n	80120e8 <_dtoa_r+0x608>
 8012020:	4642      	mov	r2, r8
 8012022:	464b      	mov	r3, r9
 8012024:	4936      	ldr	r1, [pc, #216]	; (8012100 <_dtoa_r+0x620>)
 8012026:	2000      	movs	r0, #0
 8012028:	f7ee f936 	bl	8000298 <__aeabi_dsub>
 801202c:	4652      	mov	r2, sl
 801202e:	465b      	mov	r3, fp
 8012030:	f7ee fd5c 	bl	8000aec <__aeabi_dcmplt>
 8012034:	2800      	cmp	r0, #0
 8012036:	f040 80b5 	bne.w	80121a4 <_dtoa_r+0x6c4>
 801203a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801203c:	429d      	cmp	r5, r3
 801203e:	d081      	beq.n	8011f44 <_dtoa_r+0x464>
 8012040:	4b30      	ldr	r3, [pc, #192]	; (8012104 <_dtoa_r+0x624>)
 8012042:	2200      	movs	r2, #0
 8012044:	4650      	mov	r0, sl
 8012046:	4659      	mov	r1, fp
 8012048:	f7ee fade 	bl	8000608 <__aeabi_dmul>
 801204c:	4b2d      	ldr	r3, [pc, #180]	; (8012104 <_dtoa_r+0x624>)
 801204e:	4682      	mov	sl, r0
 8012050:	468b      	mov	fp, r1
 8012052:	4640      	mov	r0, r8
 8012054:	4649      	mov	r1, r9
 8012056:	2200      	movs	r2, #0
 8012058:	f7ee fad6 	bl	8000608 <__aeabi_dmul>
 801205c:	4680      	mov	r8, r0
 801205e:	4689      	mov	r9, r1
 8012060:	e7c6      	b.n	8011ff0 <_dtoa_r+0x510>
 8012062:	4650      	mov	r0, sl
 8012064:	4659      	mov	r1, fp
 8012066:	f7ee facf 	bl	8000608 <__aeabi_dmul>
 801206a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801206c:	9d01      	ldr	r5, [sp, #4]
 801206e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012070:	4682      	mov	sl, r0
 8012072:	468b      	mov	fp, r1
 8012074:	4649      	mov	r1, r9
 8012076:	4640      	mov	r0, r8
 8012078:	f7ee fd76 	bl	8000b68 <__aeabi_d2iz>
 801207c:	4606      	mov	r6, r0
 801207e:	f7ee fa59 	bl	8000534 <__aeabi_i2d>
 8012082:	3630      	adds	r6, #48	; 0x30
 8012084:	4602      	mov	r2, r0
 8012086:	460b      	mov	r3, r1
 8012088:	4640      	mov	r0, r8
 801208a:	4649      	mov	r1, r9
 801208c:	f7ee f904 	bl	8000298 <__aeabi_dsub>
 8012090:	f805 6b01 	strb.w	r6, [r5], #1
 8012094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012096:	429d      	cmp	r5, r3
 8012098:	4680      	mov	r8, r0
 801209a:	4689      	mov	r9, r1
 801209c:	f04f 0200 	mov.w	r2, #0
 80120a0:	d124      	bne.n	80120ec <_dtoa_r+0x60c>
 80120a2:	4b1b      	ldr	r3, [pc, #108]	; (8012110 <_dtoa_r+0x630>)
 80120a4:	4650      	mov	r0, sl
 80120a6:	4659      	mov	r1, fp
 80120a8:	f7ee f8f8 	bl	800029c <__adddf3>
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	4640      	mov	r0, r8
 80120b2:	4649      	mov	r1, r9
 80120b4:	f7ee fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d173      	bne.n	80121a4 <_dtoa_r+0x6c4>
 80120bc:	4652      	mov	r2, sl
 80120be:	465b      	mov	r3, fp
 80120c0:	4913      	ldr	r1, [pc, #76]	; (8012110 <_dtoa_r+0x630>)
 80120c2:	2000      	movs	r0, #0
 80120c4:	f7ee f8e8 	bl	8000298 <__aeabi_dsub>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4640      	mov	r0, r8
 80120ce:	4649      	mov	r1, r9
 80120d0:	f7ee fd0c 	bl	8000aec <__aeabi_dcmplt>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f43f af35 	beq.w	8011f44 <_dtoa_r+0x464>
 80120da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80120dc:	1e6b      	subs	r3, r5, #1
 80120de:	930f      	str	r3, [sp, #60]	; 0x3c
 80120e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80120e4:	2b30      	cmp	r3, #48	; 0x30
 80120e6:	d0f8      	beq.n	80120da <_dtoa_r+0x5fa>
 80120e8:	9700      	str	r7, [sp, #0]
 80120ea:	e049      	b.n	8012180 <_dtoa_r+0x6a0>
 80120ec:	4b05      	ldr	r3, [pc, #20]	; (8012104 <_dtoa_r+0x624>)
 80120ee:	f7ee fa8b 	bl	8000608 <__aeabi_dmul>
 80120f2:	4680      	mov	r8, r0
 80120f4:	4689      	mov	r9, r1
 80120f6:	e7bd      	b.n	8012074 <_dtoa_r+0x594>
 80120f8:	08015d68 	.word	0x08015d68
 80120fc:	08015d40 	.word	0x08015d40
 8012100:	3ff00000 	.word	0x3ff00000
 8012104:	40240000 	.word	0x40240000
 8012108:	401c0000 	.word	0x401c0000
 801210c:	40140000 	.word	0x40140000
 8012110:	3fe00000 	.word	0x3fe00000
 8012114:	9d01      	ldr	r5, [sp, #4]
 8012116:	4656      	mov	r6, sl
 8012118:	465f      	mov	r7, fp
 801211a:	4642      	mov	r2, r8
 801211c:	464b      	mov	r3, r9
 801211e:	4630      	mov	r0, r6
 8012120:	4639      	mov	r1, r7
 8012122:	f7ee fb9b 	bl	800085c <__aeabi_ddiv>
 8012126:	f7ee fd1f 	bl	8000b68 <__aeabi_d2iz>
 801212a:	4682      	mov	sl, r0
 801212c:	f7ee fa02 	bl	8000534 <__aeabi_i2d>
 8012130:	4642      	mov	r2, r8
 8012132:	464b      	mov	r3, r9
 8012134:	f7ee fa68 	bl	8000608 <__aeabi_dmul>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	4630      	mov	r0, r6
 801213e:	4639      	mov	r1, r7
 8012140:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012144:	f7ee f8a8 	bl	8000298 <__aeabi_dsub>
 8012148:	f805 6b01 	strb.w	r6, [r5], #1
 801214c:	9e01      	ldr	r6, [sp, #4]
 801214e:	9f03      	ldr	r7, [sp, #12]
 8012150:	1bae      	subs	r6, r5, r6
 8012152:	42b7      	cmp	r7, r6
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	d135      	bne.n	80121c6 <_dtoa_r+0x6e6>
 801215a:	f7ee f89f 	bl	800029c <__adddf3>
 801215e:	4642      	mov	r2, r8
 8012160:	464b      	mov	r3, r9
 8012162:	4606      	mov	r6, r0
 8012164:	460f      	mov	r7, r1
 8012166:	f7ee fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 801216a:	b9d0      	cbnz	r0, 80121a2 <_dtoa_r+0x6c2>
 801216c:	4642      	mov	r2, r8
 801216e:	464b      	mov	r3, r9
 8012170:	4630      	mov	r0, r6
 8012172:	4639      	mov	r1, r7
 8012174:	f7ee fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8012178:	b110      	cbz	r0, 8012180 <_dtoa_r+0x6a0>
 801217a:	f01a 0f01 	tst.w	sl, #1
 801217e:	d110      	bne.n	80121a2 <_dtoa_r+0x6c2>
 8012180:	4620      	mov	r0, r4
 8012182:	ee18 1a10 	vmov	r1, s16
 8012186:	f000 fc2b 	bl	80129e0 <_Bfree>
 801218a:	2300      	movs	r3, #0
 801218c:	9800      	ldr	r0, [sp, #0]
 801218e:	702b      	strb	r3, [r5, #0]
 8012190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012192:	3001      	adds	r0, #1
 8012194:	6018      	str	r0, [r3, #0]
 8012196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012198:	2b00      	cmp	r3, #0
 801219a:	f43f acf1 	beq.w	8011b80 <_dtoa_r+0xa0>
 801219e:	601d      	str	r5, [r3, #0]
 80121a0:	e4ee      	b.n	8011b80 <_dtoa_r+0xa0>
 80121a2:	9f00      	ldr	r7, [sp, #0]
 80121a4:	462b      	mov	r3, r5
 80121a6:	461d      	mov	r5, r3
 80121a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121ac:	2a39      	cmp	r2, #57	; 0x39
 80121ae:	d106      	bne.n	80121be <_dtoa_r+0x6de>
 80121b0:	9a01      	ldr	r2, [sp, #4]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d1f7      	bne.n	80121a6 <_dtoa_r+0x6c6>
 80121b6:	9901      	ldr	r1, [sp, #4]
 80121b8:	2230      	movs	r2, #48	; 0x30
 80121ba:	3701      	adds	r7, #1
 80121bc:	700a      	strb	r2, [r1, #0]
 80121be:	781a      	ldrb	r2, [r3, #0]
 80121c0:	3201      	adds	r2, #1
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	e790      	b.n	80120e8 <_dtoa_r+0x608>
 80121c6:	4ba6      	ldr	r3, [pc, #664]	; (8012460 <_dtoa_r+0x980>)
 80121c8:	2200      	movs	r2, #0
 80121ca:	f7ee fa1d 	bl	8000608 <__aeabi_dmul>
 80121ce:	2200      	movs	r2, #0
 80121d0:	2300      	movs	r3, #0
 80121d2:	4606      	mov	r6, r0
 80121d4:	460f      	mov	r7, r1
 80121d6:	f7ee fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d09d      	beq.n	801211a <_dtoa_r+0x63a>
 80121de:	e7cf      	b.n	8012180 <_dtoa_r+0x6a0>
 80121e0:	9a08      	ldr	r2, [sp, #32]
 80121e2:	2a00      	cmp	r2, #0
 80121e4:	f000 80d7 	beq.w	8012396 <_dtoa_r+0x8b6>
 80121e8:	9a06      	ldr	r2, [sp, #24]
 80121ea:	2a01      	cmp	r2, #1
 80121ec:	f300 80ba 	bgt.w	8012364 <_dtoa_r+0x884>
 80121f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121f2:	2a00      	cmp	r2, #0
 80121f4:	f000 80b2 	beq.w	801235c <_dtoa_r+0x87c>
 80121f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80121fc:	9e07      	ldr	r6, [sp, #28]
 80121fe:	9d04      	ldr	r5, [sp, #16]
 8012200:	9a04      	ldr	r2, [sp, #16]
 8012202:	441a      	add	r2, r3
 8012204:	9204      	str	r2, [sp, #16]
 8012206:	9a05      	ldr	r2, [sp, #20]
 8012208:	2101      	movs	r1, #1
 801220a:	441a      	add	r2, r3
 801220c:	4620      	mov	r0, r4
 801220e:	9205      	str	r2, [sp, #20]
 8012210:	f000 fc9e 	bl	8012b50 <__i2b>
 8012214:	4607      	mov	r7, r0
 8012216:	2d00      	cmp	r5, #0
 8012218:	dd0c      	ble.n	8012234 <_dtoa_r+0x754>
 801221a:	9b05      	ldr	r3, [sp, #20]
 801221c:	2b00      	cmp	r3, #0
 801221e:	dd09      	ble.n	8012234 <_dtoa_r+0x754>
 8012220:	42ab      	cmp	r3, r5
 8012222:	9a04      	ldr	r2, [sp, #16]
 8012224:	bfa8      	it	ge
 8012226:	462b      	movge	r3, r5
 8012228:	1ad2      	subs	r2, r2, r3
 801222a:	9204      	str	r2, [sp, #16]
 801222c:	9a05      	ldr	r2, [sp, #20]
 801222e:	1aed      	subs	r5, r5, r3
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	9305      	str	r3, [sp, #20]
 8012234:	9b07      	ldr	r3, [sp, #28]
 8012236:	b31b      	cbz	r3, 8012280 <_dtoa_r+0x7a0>
 8012238:	9b08      	ldr	r3, [sp, #32]
 801223a:	2b00      	cmp	r3, #0
 801223c:	f000 80af 	beq.w	801239e <_dtoa_r+0x8be>
 8012240:	2e00      	cmp	r6, #0
 8012242:	dd13      	ble.n	801226c <_dtoa_r+0x78c>
 8012244:	4639      	mov	r1, r7
 8012246:	4632      	mov	r2, r6
 8012248:	4620      	mov	r0, r4
 801224a:	f000 fd41 	bl	8012cd0 <__pow5mult>
 801224e:	ee18 2a10 	vmov	r2, s16
 8012252:	4601      	mov	r1, r0
 8012254:	4607      	mov	r7, r0
 8012256:	4620      	mov	r0, r4
 8012258:	f000 fc90 	bl	8012b7c <__multiply>
 801225c:	ee18 1a10 	vmov	r1, s16
 8012260:	4680      	mov	r8, r0
 8012262:	4620      	mov	r0, r4
 8012264:	f000 fbbc 	bl	80129e0 <_Bfree>
 8012268:	ee08 8a10 	vmov	s16, r8
 801226c:	9b07      	ldr	r3, [sp, #28]
 801226e:	1b9a      	subs	r2, r3, r6
 8012270:	d006      	beq.n	8012280 <_dtoa_r+0x7a0>
 8012272:	ee18 1a10 	vmov	r1, s16
 8012276:	4620      	mov	r0, r4
 8012278:	f000 fd2a 	bl	8012cd0 <__pow5mult>
 801227c:	ee08 0a10 	vmov	s16, r0
 8012280:	2101      	movs	r1, #1
 8012282:	4620      	mov	r0, r4
 8012284:	f000 fc64 	bl	8012b50 <__i2b>
 8012288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801228a:	2b00      	cmp	r3, #0
 801228c:	4606      	mov	r6, r0
 801228e:	f340 8088 	ble.w	80123a2 <_dtoa_r+0x8c2>
 8012292:	461a      	mov	r2, r3
 8012294:	4601      	mov	r1, r0
 8012296:	4620      	mov	r0, r4
 8012298:	f000 fd1a 	bl	8012cd0 <__pow5mult>
 801229c:	9b06      	ldr	r3, [sp, #24]
 801229e:	2b01      	cmp	r3, #1
 80122a0:	4606      	mov	r6, r0
 80122a2:	f340 8081 	ble.w	80123a8 <_dtoa_r+0x8c8>
 80122a6:	f04f 0800 	mov.w	r8, #0
 80122aa:	6933      	ldr	r3, [r6, #16]
 80122ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80122b0:	6918      	ldr	r0, [r3, #16]
 80122b2:	f000 fbfd 	bl	8012ab0 <__hi0bits>
 80122b6:	f1c0 0020 	rsb	r0, r0, #32
 80122ba:	9b05      	ldr	r3, [sp, #20]
 80122bc:	4418      	add	r0, r3
 80122be:	f010 001f 	ands.w	r0, r0, #31
 80122c2:	f000 8092 	beq.w	80123ea <_dtoa_r+0x90a>
 80122c6:	f1c0 0320 	rsb	r3, r0, #32
 80122ca:	2b04      	cmp	r3, #4
 80122cc:	f340 808a 	ble.w	80123e4 <_dtoa_r+0x904>
 80122d0:	f1c0 001c 	rsb	r0, r0, #28
 80122d4:	9b04      	ldr	r3, [sp, #16]
 80122d6:	4403      	add	r3, r0
 80122d8:	9304      	str	r3, [sp, #16]
 80122da:	9b05      	ldr	r3, [sp, #20]
 80122dc:	4403      	add	r3, r0
 80122de:	4405      	add	r5, r0
 80122e0:	9305      	str	r3, [sp, #20]
 80122e2:	9b04      	ldr	r3, [sp, #16]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	dd07      	ble.n	80122f8 <_dtoa_r+0x818>
 80122e8:	ee18 1a10 	vmov	r1, s16
 80122ec:	461a      	mov	r2, r3
 80122ee:	4620      	mov	r0, r4
 80122f0:	f000 fd48 	bl	8012d84 <__lshift>
 80122f4:	ee08 0a10 	vmov	s16, r0
 80122f8:	9b05      	ldr	r3, [sp, #20]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	dd05      	ble.n	801230a <_dtoa_r+0x82a>
 80122fe:	4631      	mov	r1, r6
 8012300:	461a      	mov	r2, r3
 8012302:	4620      	mov	r0, r4
 8012304:	f000 fd3e 	bl	8012d84 <__lshift>
 8012308:	4606      	mov	r6, r0
 801230a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801230c:	2b00      	cmp	r3, #0
 801230e:	d06e      	beq.n	80123ee <_dtoa_r+0x90e>
 8012310:	ee18 0a10 	vmov	r0, s16
 8012314:	4631      	mov	r1, r6
 8012316:	f000 fda5 	bl	8012e64 <__mcmp>
 801231a:	2800      	cmp	r0, #0
 801231c:	da67      	bge.n	80123ee <_dtoa_r+0x90e>
 801231e:	9b00      	ldr	r3, [sp, #0]
 8012320:	3b01      	subs	r3, #1
 8012322:	ee18 1a10 	vmov	r1, s16
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	220a      	movs	r2, #10
 801232a:	2300      	movs	r3, #0
 801232c:	4620      	mov	r0, r4
 801232e:	f000 fb79 	bl	8012a24 <__multadd>
 8012332:	9b08      	ldr	r3, [sp, #32]
 8012334:	ee08 0a10 	vmov	s16, r0
 8012338:	2b00      	cmp	r3, #0
 801233a:	f000 81b1 	beq.w	80126a0 <_dtoa_r+0xbc0>
 801233e:	2300      	movs	r3, #0
 8012340:	4639      	mov	r1, r7
 8012342:	220a      	movs	r2, #10
 8012344:	4620      	mov	r0, r4
 8012346:	f000 fb6d 	bl	8012a24 <__multadd>
 801234a:	9b02      	ldr	r3, [sp, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	4607      	mov	r7, r0
 8012350:	f300 808e 	bgt.w	8012470 <_dtoa_r+0x990>
 8012354:	9b06      	ldr	r3, [sp, #24]
 8012356:	2b02      	cmp	r3, #2
 8012358:	dc51      	bgt.n	80123fe <_dtoa_r+0x91e>
 801235a:	e089      	b.n	8012470 <_dtoa_r+0x990>
 801235c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801235e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012362:	e74b      	b.n	80121fc <_dtoa_r+0x71c>
 8012364:	9b03      	ldr	r3, [sp, #12]
 8012366:	1e5e      	subs	r6, r3, #1
 8012368:	9b07      	ldr	r3, [sp, #28]
 801236a:	42b3      	cmp	r3, r6
 801236c:	bfbf      	itttt	lt
 801236e:	9b07      	ldrlt	r3, [sp, #28]
 8012370:	9607      	strlt	r6, [sp, #28]
 8012372:	1af2      	sublt	r2, r6, r3
 8012374:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012376:	bfb6      	itet	lt
 8012378:	189b      	addlt	r3, r3, r2
 801237a:	1b9e      	subge	r6, r3, r6
 801237c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801237e:	9b03      	ldr	r3, [sp, #12]
 8012380:	bfb8      	it	lt
 8012382:	2600      	movlt	r6, #0
 8012384:	2b00      	cmp	r3, #0
 8012386:	bfb7      	itett	lt
 8012388:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801238c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012390:	1a9d      	sublt	r5, r3, r2
 8012392:	2300      	movlt	r3, #0
 8012394:	e734      	b.n	8012200 <_dtoa_r+0x720>
 8012396:	9e07      	ldr	r6, [sp, #28]
 8012398:	9d04      	ldr	r5, [sp, #16]
 801239a:	9f08      	ldr	r7, [sp, #32]
 801239c:	e73b      	b.n	8012216 <_dtoa_r+0x736>
 801239e:	9a07      	ldr	r2, [sp, #28]
 80123a0:	e767      	b.n	8012272 <_dtoa_r+0x792>
 80123a2:	9b06      	ldr	r3, [sp, #24]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	dc18      	bgt.n	80123da <_dtoa_r+0x8fa>
 80123a8:	f1ba 0f00 	cmp.w	sl, #0
 80123ac:	d115      	bne.n	80123da <_dtoa_r+0x8fa>
 80123ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123b2:	b993      	cbnz	r3, 80123da <_dtoa_r+0x8fa>
 80123b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123b8:	0d1b      	lsrs	r3, r3, #20
 80123ba:	051b      	lsls	r3, r3, #20
 80123bc:	b183      	cbz	r3, 80123e0 <_dtoa_r+0x900>
 80123be:	9b04      	ldr	r3, [sp, #16]
 80123c0:	3301      	adds	r3, #1
 80123c2:	9304      	str	r3, [sp, #16]
 80123c4:	9b05      	ldr	r3, [sp, #20]
 80123c6:	3301      	adds	r3, #1
 80123c8:	9305      	str	r3, [sp, #20]
 80123ca:	f04f 0801 	mov.w	r8, #1
 80123ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f47f af6a 	bne.w	80122aa <_dtoa_r+0x7ca>
 80123d6:	2001      	movs	r0, #1
 80123d8:	e76f      	b.n	80122ba <_dtoa_r+0x7da>
 80123da:	f04f 0800 	mov.w	r8, #0
 80123de:	e7f6      	b.n	80123ce <_dtoa_r+0x8ee>
 80123e0:	4698      	mov	r8, r3
 80123e2:	e7f4      	b.n	80123ce <_dtoa_r+0x8ee>
 80123e4:	f43f af7d 	beq.w	80122e2 <_dtoa_r+0x802>
 80123e8:	4618      	mov	r0, r3
 80123ea:	301c      	adds	r0, #28
 80123ec:	e772      	b.n	80122d4 <_dtoa_r+0x7f4>
 80123ee:	9b03      	ldr	r3, [sp, #12]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	dc37      	bgt.n	8012464 <_dtoa_r+0x984>
 80123f4:	9b06      	ldr	r3, [sp, #24]
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	dd34      	ble.n	8012464 <_dtoa_r+0x984>
 80123fa:	9b03      	ldr	r3, [sp, #12]
 80123fc:	9302      	str	r3, [sp, #8]
 80123fe:	9b02      	ldr	r3, [sp, #8]
 8012400:	b96b      	cbnz	r3, 801241e <_dtoa_r+0x93e>
 8012402:	4631      	mov	r1, r6
 8012404:	2205      	movs	r2, #5
 8012406:	4620      	mov	r0, r4
 8012408:	f000 fb0c 	bl	8012a24 <__multadd>
 801240c:	4601      	mov	r1, r0
 801240e:	4606      	mov	r6, r0
 8012410:	ee18 0a10 	vmov	r0, s16
 8012414:	f000 fd26 	bl	8012e64 <__mcmp>
 8012418:	2800      	cmp	r0, #0
 801241a:	f73f adbb 	bgt.w	8011f94 <_dtoa_r+0x4b4>
 801241e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012420:	9d01      	ldr	r5, [sp, #4]
 8012422:	43db      	mvns	r3, r3
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	f04f 0800 	mov.w	r8, #0
 801242a:	4631      	mov	r1, r6
 801242c:	4620      	mov	r0, r4
 801242e:	f000 fad7 	bl	80129e0 <_Bfree>
 8012432:	2f00      	cmp	r7, #0
 8012434:	f43f aea4 	beq.w	8012180 <_dtoa_r+0x6a0>
 8012438:	f1b8 0f00 	cmp.w	r8, #0
 801243c:	d005      	beq.n	801244a <_dtoa_r+0x96a>
 801243e:	45b8      	cmp	r8, r7
 8012440:	d003      	beq.n	801244a <_dtoa_r+0x96a>
 8012442:	4641      	mov	r1, r8
 8012444:	4620      	mov	r0, r4
 8012446:	f000 facb 	bl	80129e0 <_Bfree>
 801244a:	4639      	mov	r1, r7
 801244c:	4620      	mov	r0, r4
 801244e:	f000 fac7 	bl	80129e0 <_Bfree>
 8012452:	e695      	b.n	8012180 <_dtoa_r+0x6a0>
 8012454:	2600      	movs	r6, #0
 8012456:	4637      	mov	r7, r6
 8012458:	e7e1      	b.n	801241e <_dtoa_r+0x93e>
 801245a:	9700      	str	r7, [sp, #0]
 801245c:	4637      	mov	r7, r6
 801245e:	e599      	b.n	8011f94 <_dtoa_r+0x4b4>
 8012460:	40240000 	.word	0x40240000
 8012464:	9b08      	ldr	r3, [sp, #32]
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 80ca 	beq.w	8012600 <_dtoa_r+0xb20>
 801246c:	9b03      	ldr	r3, [sp, #12]
 801246e:	9302      	str	r3, [sp, #8]
 8012470:	2d00      	cmp	r5, #0
 8012472:	dd05      	ble.n	8012480 <_dtoa_r+0x9a0>
 8012474:	4639      	mov	r1, r7
 8012476:	462a      	mov	r2, r5
 8012478:	4620      	mov	r0, r4
 801247a:	f000 fc83 	bl	8012d84 <__lshift>
 801247e:	4607      	mov	r7, r0
 8012480:	f1b8 0f00 	cmp.w	r8, #0
 8012484:	d05b      	beq.n	801253e <_dtoa_r+0xa5e>
 8012486:	6879      	ldr	r1, [r7, #4]
 8012488:	4620      	mov	r0, r4
 801248a:	f000 fa69 	bl	8012960 <_Balloc>
 801248e:	4605      	mov	r5, r0
 8012490:	b928      	cbnz	r0, 801249e <_dtoa_r+0x9be>
 8012492:	4b87      	ldr	r3, [pc, #540]	; (80126b0 <_dtoa_r+0xbd0>)
 8012494:	4602      	mov	r2, r0
 8012496:	f240 21ea 	movw	r1, #746	; 0x2ea
 801249a:	f7ff bb3b 	b.w	8011b14 <_dtoa_r+0x34>
 801249e:	693a      	ldr	r2, [r7, #16]
 80124a0:	3202      	adds	r2, #2
 80124a2:	0092      	lsls	r2, r2, #2
 80124a4:	f107 010c 	add.w	r1, r7, #12
 80124a8:	300c      	adds	r0, #12
 80124aa:	f7fe fb42 	bl	8010b32 <memcpy>
 80124ae:	2201      	movs	r2, #1
 80124b0:	4629      	mov	r1, r5
 80124b2:	4620      	mov	r0, r4
 80124b4:	f000 fc66 	bl	8012d84 <__lshift>
 80124b8:	9b01      	ldr	r3, [sp, #4]
 80124ba:	f103 0901 	add.w	r9, r3, #1
 80124be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80124c2:	4413      	add	r3, r2
 80124c4:	9305      	str	r3, [sp, #20]
 80124c6:	f00a 0301 	and.w	r3, sl, #1
 80124ca:	46b8      	mov	r8, r7
 80124cc:	9304      	str	r3, [sp, #16]
 80124ce:	4607      	mov	r7, r0
 80124d0:	4631      	mov	r1, r6
 80124d2:	ee18 0a10 	vmov	r0, s16
 80124d6:	f7ff fa77 	bl	80119c8 <quorem>
 80124da:	4641      	mov	r1, r8
 80124dc:	9002      	str	r0, [sp, #8]
 80124de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80124e2:	ee18 0a10 	vmov	r0, s16
 80124e6:	f000 fcbd 	bl	8012e64 <__mcmp>
 80124ea:	463a      	mov	r2, r7
 80124ec:	9003      	str	r0, [sp, #12]
 80124ee:	4631      	mov	r1, r6
 80124f0:	4620      	mov	r0, r4
 80124f2:	f000 fcd3 	bl	8012e9c <__mdiff>
 80124f6:	68c2      	ldr	r2, [r0, #12]
 80124f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80124fc:	4605      	mov	r5, r0
 80124fe:	bb02      	cbnz	r2, 8012542 <_dtoa_r+0xa62>
 8012500:	4601      	mov	r1, r0
 8012502:	ee18 0a10 	vmov	r0, s16
 8012506:	f000 fcad 	bl	8012e64 <__mcmp>
 801250a:	4602      	mov	r2, r0
 801250c:	4629      	mov	r1, r5
 801250e:	4620      	mov	r0, r4
 8012510:	9207      	str	r2, [sp, #28]
 8012512:	f000 fa65 	bl	80129e0 <_Bfree>
 8012516:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801251a:	ea43 0102 	orr.w	r1, r3, r2
 801251e:	9b04      	ldr	r3, [sp, #16]
 8012520:	430b      	orrs	r3, r1
 8012522:	464d      	mov	r5, r9
 8012524:	d10f      	bne.n	8012546 <_dtoa_r+0xa66>
 8012526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801252a:	d02a      	beq.n	8012582 <_dtoa_r+0xaa2>
 801252c:	9b03      	ldr	r3, [sp, #12]
 801252e:	2b00      	cmp	r3, #0
 8012530:	dd02      	ble.n	8012538 <_dtoa_r+0xa58>
 8012532:	9b02      	ldr	r3, [sp, #8]
 8012534:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012538:	f88b a000 	strb.w	sl, [fp]
 801253c:	e775      	b.n	801242a <_dtoa_r+0x94a>
 801253e:	4638      	mov	r0, r7
 8012540:	e7ba      	b.n	80124b8 <_dtoa_r+0x9d8>
 8012542:	2201      	movs	r2, #1
 8012544:	e7e2      	b.n	801250c <_dtoa_r+0xa2c>
 8012546:	9b03      	ldr	r3, [sp, #12]
 8012548:	2b00      	cmp	r3, #0
 801254a:	db04      	blt.n	8012556 <_dtoa_r+0xa76>
 801254c:	9906      	ldr	r1, [sp, #24]
 801254e:	430b      	orrs	r3, r1
 8012550:	9904      	ldr	r1, [sp, #16]
 8012552:	430b      	orrs	r3, r1
 8012554:	d122      	bne.n	801259c <_dtoa_r+0xabc>
 8012556:	2a00      	cmp	r2, #0
 8012558:	ddee      	ble.n	8012538 <_dtoa_r+0xa58>
 801255a:	ee18 1a10 	vmov	r1, s16
 801255e:	2201      	movs	r2, #1
 8012560:	4620      	mov	r0, r4
 8012562:	f000 fc0f 	bl	8012d84 <__lshift>
 8012566:	4631      	mov	r1, r6
 8012568:	ee08 0a10 	vmov	s16, r0
 801256c:	f000 fc7a 	bl	8012e64 <__mcmp>
 8012570:	2800      	cmp	r0, #0
 8012572:	dc03      	bgt.n	801257c <_dtoa_r+0xa9c>
 8012574:	d1e0      	bne.n	8012538 <_dtoa_r+0xa58>
 8012576:	f01a 0f01 	tst.w	sl, #1
 801257a:	d0dd      	beq.n	8012538 <_dtoa_r+0xa58>
 801257c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012580:	d1d7      	bne.n	8012532 <_dtoa_r+0xa52>
 8012582:	2339      	movs	r3, #57	; 0x39
 8012584:	f88b 3000 	strb.w	r3, [fp]
 8012588:	462b      	mov	r3, r5
 801258a:	461d      	mov	r5, r3
 801258c:	3b01      	subs	r3, #1
 801258e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012592:	2a39      	cmp	r2, #57	; 0x39
 8012594:	d071      	beq.n	801267a <_dtoa_r+0xb9a>
 8012596:	3201      	adds	r2, #1
 8012598:	701a      	strb	r2, [r3, #0]
 801259a:	e746      	b.n	801242a <_dtoa_r+0x94a>
 801259c:	2a00      	cmp	r2, #0
 801259e:	dd07      	ble.n	80125b0 <_dtoa_r+0xad0>
 80125a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80125a4:	d0ed      	beq.n	8012582 <_dtoa_r+0xaa2>
 80125a6:	f10a 0301 	add.w	r3, sl, #1
 80125aa:	f88b 3000 	strb.w	r3, [fp]
 80125ae:	e73c      	b.n	801242a <_dtoa_r+0x94a>
 80125b0:	9b05      	ldr	r3, [sp, #20]
 80125b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80125b6:	4599      	cmp	r9, r3
 80125b8:	d047      	beq.n	801264a <_dtoa_r+0xb6a>
 80125ba:	ee18 1a10 	vmov	r1, s16
 80125be:	2300      	movs	r3, #0
 80125c0:	220a      	movs	r2, #10
 80125c2:	4620      	mov	r0, r4
 80125c4:	f000 fa2e 	bl	8012a24 <__multadd>
 80125c8:	45b8      	cmp	r8, r7
 80125ca:	ee08 0a10 	vmov	s16, r0
 80125ce:	f04f 0300 	mov.w	r3, #0
 80125d2:	f04f 020a 	mov.w	r2, #10
 80125d6:	4641      	mov	r1, r8
 80125d8:	4620      	mov	r0, r4
 80125da:	d106      	bne.n	80125ea <_dtoa_r+0xb0a>
 80125dc:	f000 fa22 	bl	8012a24 <__multadd>
 80125e0:	4680      	mov	r8, r0
 80125e2:	4607      	mov	r7, r0
 80125e4:	f109 0901 	add.w	r9, r9, #1
 80125e8:	e772      	b.n	80124d0 <_dtoa_r+0x9f0>
 80125ea:	f000 fa1b 	bl	8012a24 <__multadd>
 80125ee:	4639      	mov	r1, r7
 80125f0:	4680      	mov	r8, r0
 80125f2:	2300      	movs	r3, #0
 80125f4:	220a      	movs	r2, #10
 80125f6:	4620      	mov	r0, r4
 80125f8:	f000 fa14 	bl	8012a24 <__multadd>
 80125fc:	4607      	mov	r7, r0
 80125fe:	e7f1      	b.n	80125e4 <_dtoa_r+0xb04>
 8012600:	9b03      	ldr	r3, [sp, #12]
 8012602:	9302      	str	r3, [sp, #8]
 8012604:	9d01      	ldr	r5, [sp, #4]
 8012606:	ee18 0a10 	vmov	r0, s16
 801260a:	4631      	mov	r1, r6
 801260c:	f7ff f9dc 	bl	80119c8 <quorem>
 8012610:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012614:	9b01      	ldr	r3, [sp, #4]
 8012616:	f805 ab01 	strb.w	sl, [r5], #1
 801261a:	1aea      	subs	r2, r5, r3
 801261c:	9b02      	ldr	r3, [sp, #8]
 801261e:	4293      	cmp	r3, r2
 8012620:	dd09      	ble.n	8012636 <_dtoa_r+0xb56>
 8012622:	ee18 1a10 	vmov	r1, s16
 8012626:	2300      	movs	r3, #0
 8012628:	220a      	movs	r2, #10
 801262a:	4620      	mov	r0, r4
 801262c:	f000 f9fa 	bl	8012a24 <__multadd>
 8012630:	ee08 0a10 	vmov	s16, r0
 8012634:	e7e7      	b.n	8012606 <_dtoa_r+0xb26>
 8012636:	9b02      	ldr	r3, [sp, #8]
 8012638:	2b00      	cmp	r3, #0
 801263a:	bfc8      	it	gt
 801263c:	461d      	movgt	r5, r3
 801263e:	9b01      	ldr	r3, [sp, #4]
 8012640:	bfd8      	it	le
 8012642:	2501      	movle	r5, #1
 8012644:	441d      	add	r5, r3
 8012646:	f04f 0800 	mov.w	r8, #0
 801264a:	ee18 1a10 	vmov	r1, s16
 801264e:	2201      	movs	r2, #1
 8012650:	4620      	mov	r0, r4
 8012652:	f000 fb97 	bl	8012d84 <__lshift>
 8012656:	4631      	mov	r1, r6
 8012658:	ee08 0a10 	vmov	s16, r0
 801265c:	f000 fc02 	bl	8012e64 <__mcmp>
 8012660:	2800      	cmp	r0, #0
 8012662:	dc91      	bgt.n	8012588 <_dtoa_r+0xaa8>
 8012664:	d102      	bne.n	801266c <_dtoa_r+0xb8c>
 8012666:	f01a 0f01 	tst.w	sl, #1
 801266a:	d18d      	bne.n	8012588 <_dtoa_r+0xaa8>
 801266c:	462b      	mov	r3, r5
 801266e:	461d      	mov	r5, r3
 8012670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012674:	2a30      	cmp	r2, #48	; 0x30
 8012676:	d0fa      	beq.n	801266e <_dtoa_r+0xb8e>
 8012678:	e6d7      	b.n	801242a <_dtoa_r+0x94a>
 801267a:	9a01      	ldr	r2, [sp, #4]
 801267c:	429a      	cmp	r2, r3
 801267e:	d184      	bne.n	801258a <_dtoa_r+0xaaa>
 8012680:	9b00      	ldr	r3, [sp, #0]
 8012682:	3301      	adds	r3, #1
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	2331      	movs	r3, #49	; 0x31
 8012688:	7013      	strb	r3, [r2, #0]
 801268a:	e6ce      	b.n	801242a <_dtoa_r+0x94a>
 801268c:	4b09      	ldr	r3, [pc, #36]	; (80126b4 <_dtoa_r+0xbd4>)
 801268e:	f7ff ba95 	b.w	8011bbc <_dtoa_r+0xdc>
 8012692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012694:	2b00      	cmp	r3, #0
 8012696:	f47f aa6e 	bne.w	8011b76 <_dtoa_r+0x96>
 801269a:	4b07      	ldr	r3, [pc, #28]	; (80126b8 <_dtoa_r+0xbd8>)
 801269c:	f7ff ba8e 	b.w	8011bbc <_dtoa_r+0xdc>
 80126a0:	9b02      	ldr	r3, [sp, #8]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	dcae      	bgt.n	8012604 <_dtoa_r+0xb24>
 80126a6:	9b06      	ldr	r3, [sp, #24]
 80126a8:	2b02      	cmp	r3, #2
 80126aa:	f73f aea8 	bgt.w	80123fe <_dtoa_r+0x91e>
 80126ae:	e7a9      	b.n	8012604 <_dtoa_r+0xb24>
 80126b0:	08015cd3 	.word	0x08015cd3
 80126b4:	08015c30 	.word	0x08015c30
 80126b8:	08015c54 	.word	0x08015c54

080126bc <__sflush_r>:
 80126bc:	898a      	ldrh	r2, [r1, #12]
 80126be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c2:	4605      	mov	r5, r0
 80126c4:	0710      	lsls	r0, r2, #28
 80126c6:	460c      	mov	r4, r1
 80126c8:	d458      	bmi.n	801277c <__sflush_r+0xc0>
 80126ca:	684b      	ldr	r3, [r1, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dc05      	bgt.n	80126dc <__sflush_r+0x20>
 80126d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dc02      	bgt.n	80126dc <__sflush_r+0x20>
 80126d6:	2000      	movs	r0, #0
 80126d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126de:	2e00      	cmp	r6, #0
 80126e0:	d0f9      	beq.n	80126d6 <__sflush_r+0x1a>
 80126e2:	2300      	movs	r3, #0
 80126e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80126e8:	682f      	ldr	r7, [r5, #0]
 80126ea:	602b      	str	r3, [r5, #0]
 80126ec:	d032      	beq.n	8012754 <__sflush_r+0x98>
 80126ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	075a      	lsls	r2, r3, #29
 80126f4:	d505      	bpl.n	8012702 <__sflush_r+0x46>
 80126f6:	6863      	ldr	r3, [r4, #4]
 80126f8:	1ac0      	subs	r0, r0, r3
 80126fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126fc:	b10b      	cbz	r3, 8012702 <__sflush_r+0x46>
 80126fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012700:	1ac0      	subs	r0, r0, r3
 8012702:	2300      	movs	r3, #0
 8012704:	4602      	mov	r2, r0
 8012706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012708:	6a21      	ldr	r1, [r4, #32]
 801270a:	4628      	mov	r0, r5
 801270c:	47b0      	blx	r6
 801270e:	1c43      	adds	r3, r0, #1
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	d106      	bne.n	8012722 <__sflush_r+0x66>
 8012714:	6829      	ldr	r1, [r5, #0]
 8012716:	291d      	cmp	r1, #29
 8012718:	d82c      	bhi.n	8012774 <__sflush_r+0xb8>
 801271a:	4a2a      	ldr	r2, [pc, #168]	; (80127c4 <__sflush_r+0x108>)
 801271c:	40ca      	lsrs	r2, r1
 801271e:	07d6      	lsls	r6, r2, #31
 8012720:	d528      	bpl.n	8012774 <__sflush_r+0xb8>
 8012722:	2200      	movs	r2, #0
 8012724:	6062      	str	r2, [r4, #4]
 8012726:	04d9      	lsls	r1, r3, #19
 8012728:	6922      	ldr	r2, [r4, #16]
 801272a:	6022      	str	r2, [r4, #0]
 801272c:	d504      	bpl.n	8012738 <__sflush_r+0x7c>
 801272e:	1c42      	adds	r2, r0, #1
 8012730:	d101      	bne.n	8012736 <__sflush_r+0x7a>
 8012732:	682b      	ldr	r3, [r5, #0]
 8012734:	b903      	cbnz	r3, 8012738 <__sflush_r+0x7c>
 8012736:	6560      	str	r0, [r4, #84]	; 0x54
 8012738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801273a:	602f      	str	r7, [r5, #0]
 801273c:	2900      	cmp	r1, #0
 801273e:	d0ca      	beq.n	80126d6 <__sflush_r+0x1a>
 8012740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012744:	4299      	cmp	r1, r3
 8012746:	d002      	beq.n	801274e <__sflush_r+0x92>
 8012748:	4628      	mov	r0, r5
 801274a:	f000 fca3 	bl	8013094 <_free_r>
 801274e:	2000      	movs	r0, #0
 8012750:	6360      	str	r0, [r4, #52]	; 0x34
 8012752:	e7c1      	b.n	80126d8 <__sflush_r+0x1c>
 8012754:	6a21      	ldr	r1, [r4, #32]
 8012756:	2301      	movs	r3, #1
 8012758:	4628      	mov	r0, r5
 801275a:	47b0      	blx	r6
 801275c:	1c41      	adds	r1, r0, #1
 801275e:	d1c7      	bne.n	80126f0 <__sflush_r+0x34>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d0c4      	beq.n	80126f0 <__sflush_r+0x34>
 8012766:	2b1d      	cmp	r3, #29
 8012768:	d001      	beq.n	801276e <__sflush_r+0xb2>
 801276a:	2b16      	cmp	r3, #22
 801276c:	d101      	bne.n	8012772 <__sflush_r+0xb6>
 801276e:	602f      	str	r7, [r5, #0]
 8012770:	e7b1      	b.n	80126d6 <__sflush_r+0x1a>
 8012772:	89a3      	ldrh	r3, [r4, #12]
 8012774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	e7ad      	b.n	80126d8 <__sflush_r+0x1c>
 801277c:	690f      	ldr	r7, [r1, #16]
 801277e:	2f00      	cmp	r7, #0
 8012780:	d0a9      	beq.n	80126d6 <__sflush_r+0x1a>
 8012782:	0793      	lsls	r3, r2, #30
 8012784:	680e      	ldr	r6, [r1, #0]
 8012786:	bf08      	it	eq
 8012788:	694b      	ldreq	r3, [r1, #20]
 801278a:	600f      	str	r7, [r1, #0]
 801278c:	bf18      	it	ne
 801278e:	2300      	movne	r3, #0
 8012790:	eba6 0807 	sub.w	r8, r6, r7
 8012794:	608b      	str	r3, [r1, #8]
 8012796:	f1b8 0f00 	cmp.w	r8, #0
 801279a:	dd9c      	ble.n	80126d6 <__sflush_r+0x1a>
 801279c:	6a21      	ldr	r1, [r4, #32]
 801279e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127a0:	4643      	mov	r3, r8
 80127a2:	463a      	mov	r2, r7
 80127a4:	4628      	mov	r0, r5
 80127a6:	47b0      	blx	r6
 80127a8:	2800      	cmp	r0, #0
 80127aa:	dc06      	bgt.n	80127ba <__sflush_r+0xfe>
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b2:	81a3      	strh	r3, [r4, #12]
 80127b4:	f04f 30ff 	mov.w	r0, #4294967295
 80127b8:	e78e      	b.n	80126d8 <__sflush_r+0x1c>
 80127ba:	4407      	add	r7, r0
 80127bc:	eba8 0800 	sub.w	r8, r8, r0
 80127c0:	e7e9      	b.n	8012796 <__sflush_r+0xda>
 80127c2:	bf00      	nop
 80127c4:	20400001 	.word	0x20400001

080127c8 <_fflush_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	690b      	ldr	r3, [r1, #16]
 80127cc:	4605      	mov	r5, r0
 80127ce:	460c      	mov	r4, r1
 80127d0:	b913      	cbnz	r3, 80127d8 <_fflush_r+0x10>
 80127d2:	2500      	movs	r5, #0
 80127d4:	4628      	mov	r0, r5
 80127d6:	bd38      	pop	{r3, r4, r5, pc}
 80127d8:	b118      	cbz	r0, 80127e2 <_fflush_r+0x1a>
 80127da:	6983      	ldr	r3, [r0, #24]
 80127dc:	b90b      	cbnz	r3, 80127e2 <_fflush_r+0x1a>
 80127de:	f7fe f8e3 	bl	80109a8 <__sinit>
 80127e2:	4b14      	ldr	r3, [pc, #80]	; (8012834 <_fflush_r+0x6c>)
 80127e4:	429c      	cmp	r4, r3
 80127e6:	d11b      	bne.n	8012820 <_fflush_r+0x58>
 80127e8:	686c      	ldr	r4, [r5, #4]
 80127ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d0ef      	beq.n	80127d2 <_fflush_r+0xa>
 80127f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127f4:	07d0      	lsls	r0, r2, #31
 80127f6:	d404      	bmi.n	8012802 <_fflush_r+0x3a>
 80127f8:	0599      	lsls	r1, r3, #22
 80127fa:	d402      	bmi.n	8012802 <_fflush_r+0x3a>
 80127fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127fe:	f7fe f996 	bl	8010b2e <__retarget_lock_acquire_recursive>
 8012802:	4628      	mov	r0, r5
 8012804:	4621      	mov	r1, r4
 8012806:	f7ff ff59 	bl	80126bc <__sflush_r>
 801280a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801280c:	07da      	lsls	r2, r3, #31
 801280e:	4605      	mov	r5, r0
 8012810:	d4e0      	bmi.n	80127d4 <_fflush_r+0xc>
 8012812:	89a3      	ldrh	r3, [r4, #12]
 8012814:	059b      	lsls	r3, r3, #22
 8012816:	d4dd      	bmi.n	80127d4 <_fflush_r+0xc>
 8012818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801281a:	f7fe f989 	bl	8010b30 <__retarget_lock_release_recursive>
 801281e:	e7d9      	b.n	80127d4 <_fflush_r+0xc>
 8012820:	4b05      	ldr	r3, [pc, #20]	; (8012838 <_fflush_r+0x70>)
 8012822:	429c      	cmp	r4, r3
 8012824:	d101      	bne.n	801282a <_fflush_r+0x62>
 8012826:	68ac      	ldr	r4, [r5, #8]
 8012828:	e7df      	b.n	80127ea <_fflush_r+0x22>
 801282a:	4b04      	ldr	r3, [pc, #16]	; (801283c <_fflush_r+0x74>)
 801282c:	429c      	cmp	r4, r3
 801282e:	bf08      	it	eq
 8012830:	68ec      	ldreq	r4, [r5, #12]
 8012832:	e7da      	b.n	80127ea <_fflush_r+0x22>
 8012834:	08015bdc 	.word	0x08015bdc
 8012838:	08015bfc 	.word	0x08015bfc
 801283c:	08015bbc 	.word	0x08015bbc

08012840 <_localeconv_r>:
 8012840:	4800      	ldr	r0, [pc, #0]	; (8012844 <_localeconv_r+0x4>)
 8012842:	4770      	bx	lr
 8012844:	2000033c 	.word	0x2000033c

08012848 <_lseek_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	; (8012868 <_lseek_r+0x20>)
 801284c:	4604      	mov	r4, r0
 801284e:	4608      	mov	r0, r1
 8012850:	4611      	mov	r1, r2
 8012852:	2200      	movs	r2, #0
 8012854:	602a      	str	r2, [r5, #0]
 8012856:	461a      	mov	r2, r3
 8012858:	f7f2 fbf4 	bl	8005044 <_lseek>
 801285c:	1c43      	adds	r3, r0, #1
 801285e:	d102      	bne.n	8012866 <_lseek_r+0x1e>
 8012860:	682b      	ldr	r3, [r5, #0]
 8012862:	b103      	cbz	r3, 8012866 <_lseek_r+0x1e>
 8012864:	6023      	str	r3, [r4, #0]
 8012866:	bd38      	pop	{r3, r4, r5, pc}
 8012868:	20006df8 	.word	0x20006df8

0801286c <__swhatbuf_r>:
 801286c:	b570      	push	{r4, r5, r6, lr}
 801286e:	460e      	mov	r6, r1
 8012870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012874:	2900      	cmp	r1, #0
 8012876:	b096      	sub	sp, #88	; 0x58
 8012878:	4614      	mov	r4, r2
 801287a:	461d      	mov	r5, r3
 801287c:	da08      	bge.n	8012890 <__swhatbuf_r+0x24>
 801287e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012882:	2200      	movs	r2, #0
 8012884:	602a      	str	r2, [r5, #0]
 8012886:	061a      	lsls	r2, r3, #24
 8012888:	d410      	bmi.n	80128ac <__swhatbuf_r+0x40>
 801288a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801288e:	e00e      	b.n	80128ae <__swhatbuf_r+0x42>
 8012890:	466a      	mov	r2, sp
 8012892:	f000 fde9 	bl	8013468 <_fstat_r>
 8012896:	2800      	cmp	r0, #0
 8012898:	dbf1      	blt.n	801287e <__swhatbuf_r+0x12>
 801289a:	9a01      	ldr	r2, [sp, #4]
 801289c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80128a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80128a4:	425a      	negs	r2, r3
 80128a6:	415a      	adcs	r2, r3
 80128a8:	602a      	str	r2, [r5, #0]
 80128aa:	e7ee      	b.n	801288a <__swhatbuf_r+0x1e>
 80128ac:	2340      	movs	r3, #64	; 0x40
 80128ae:	2000      	movs	r0, #0
 80128b0:	6023      	str	r3, [r4, #0]
 80128b2:	b016      	add	sp, #88	; 0x58
 80128b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080128b8 <__smakebuf_r>:
 80128b8:	898b      	ldrh	r3, [r1, #12]
 80128ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128bc:	079d      	lsls	r5, r3, #30
 80128be:	4606      	mov	r6, r0
 80128c0:	460c      	mov	r4, r1
 80128c2:	d507      	bpl.n	80128d4 <__smakebuf_r+0x1c>
 80128c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128c8:	6023      	str	r3, [r4, #0]
 80128ca:	6123      	str	r3, [r4, #16]
 80128cc:	2301      	movs	r3, #1
 80128ce:	6163      	str	r3, [r4, #20]
 80128d0:	b002      	add	sp, #8
 80128d2:	bd70      	pop	{r4, r5, r6, pc}
 80128d4:	ab01      	add	r3, sp, #4
 80128d6:	466a      	mov	r2, sp
 80128d8:	f7ff ffc8 	bl	801286c <__swhatbuf_r>
 80128dc:	9900      	ldr	r1, [sp, #0]
 80128de:	4605      	mov	r5, r0
 80128e0:	4630      	mov	r0, r6
 80128e2:	f7fe f95d 	bl	8010ba0 <_malloc_r>
 80128e6:	b948      	cbnz	r0, 80128fc <__smakebuf_r+0x44>
 80128e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128ec:	059a      	lsls	r2, r3, #22
 80128ee:	d4ef      	bmi.n	80128d0 <__smakebuf_r+0x18>
 80128f0:	f023 0303 	bic.w	r3, r3, #3
 80128f4:	f043 0302 	orr.w	r3, r3, #2
 80128f8:	81a3      	strh	r3, [r4, #12]
 80128fa:	e7e3      	b.n	80128c4 <__smakebuf_r+0xc>
 80128fc:	4b0d      	ldr	r3, [pc, #52]	; (8012934 <__smakebuf_r+0x7c>)
 80128fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8012900:	89a3      	ldrh	r3, [r4, #12]
 8012902:	6020      	str	r0, [r4, #0]
 8012904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012908:	81a3      	strh	r3, [r4, #12]
 801290a:	9b00      	ldr	r3, [sp, #0]
 801290c:	6163      	str	r3, [r4, #20]
 801290e:	9b01      	ldr	r3, [sp, #4]
 8012910:	6120      	str	r0, [r4, #16]
 8012912:	b15b      	cbz	r3, 801292c <__smakebuf_r+0x74>
 8012914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012918:	4630      	mov	r0, r6
 801291a:	f000 fdb7 	bl	801348c <_isatty_r>
 801291e:	b128      	cbz	r0, 801292c <__smakebuf_r+0x74>
 8012920:	89a3      	ldrh	r3, [r4, #12]
 8012922:	f023 0303 	bic.w	r3, r3, #3
 8012926:	f043 0301 	orr.w	r3, r3, #1
 801292a:	81a3      	strh	r3, [r4, #12]
 801292c:	89a0      	ldrh	r0, [r4, #12]
 801292e:	4305      	orrs	r5, r0
 8012930:	81a5      	strh	r5, [r4, #12]
 8012932:	e7cd      	b.n	80128d0 <__smakebuf_r+0x18>
 8012934:	08010941 	.word	0x08010941

08012938 <malloc>:
 8012938:	4b02      	ldr	r3, [pc, #8]	; (8012944 <malloc+0xc>)
 801293a:	4601      	mov	r1, r0
 801293c:	6818      	ldr	r0, [r3, #0]
 801293e:	f7fe b92f 	b.w	8010ba0 <_malloc_r>
 8012942:	bf00      	nop
 8012944:	200001e8 	.word	0x200001e8

08012948 <__malloc_lock>:
 8012948:	4801      	ldr	r0, [pc, #4]	; (8012950 <__malloc_lock+0x8>)
 801294a:	f7fe b8f0 	b.w	8010b2e <__retarget_lock_acquire_recursive>
 801294e:	bf00      	nop
 8012950:	20006dec 	.word	0x20006dec

08012954 <__malloc_unlock>:
 8012954:	4801      	ldr	r0, [pc, #4]	; (801295c <__malloc_unlock+0x8>)
 8012956:	f7fe b8eb 	b.w	8010b30 <__retarget_lock_release_recursive>
 801295a:	bf00      	nop
 801295c:	20006dec 	.word	0x20006dec

08012960 <_Balloc>:
 8012960:	b570      	push	{r4, r5, r6, lr}
 8012962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012964:	4604      	mov	r4, r0
 8012966:	460d      	mov	r5, r1
 8012968:	b976      	cbnz	r6, 8012988 <_Balloc+0x28>
 801296a:	2010      	movs	r0, #16
 801296c:	f7ff ffe4 	bl	8012938 <malloc>
 8012970:	4602      	mov	r2, r0
 8012972:	6260      	str	r0, [r4, #36]	; 0x24
 8012974:	b920      	cbnz	r0, 8012980 <_Balloc+0x20>
 8012976:	4b18      	ldr	r3, [pc, #96]	; (80129d8 <_Balloc+0x78>)
 8012978:	4818      	ldr	r0, [pc, #96]	; (80129dc <_Balloc+0x7c>)
 801297a:	2166      	movs	r1, #102	; 0x66
 801297c:	f000 fd44 	bl	8013408 <__assert_func>
 8012980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012984:	6006      	str	r6, [r0, #0]
 8012986:	60c6      	str	r6, [r0, #12]
 8012988:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801298a:	68f3      	ldr	r3, [r6, #12]
 801298c:	b183      	cbz	r3, 80129b0 <_Balloc+0x50>
 801298e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012996:	b9b8      	cbnz	r0, 80129c8 <_Balloc+0x68>
 8012998:	2101      	movs	r1, #1
 801299a:	fa01 f605 	lsl.w	r6, r1, r5
 801299e:	1d72      	adds	r2, r6, #5
 80129a0:	0092      	lsls	r2, r2, #2
 80129a2:	4620      	mov	r0, r4
 80129a4:	f000 fb60 	bl	8013068 <_calloc_r>
 80129a8:	b160      	cbz	r0, 80129c4 <_Balloc+0x64>
 80129aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80129ae:	e00e      	b.n	80129ce <_Balloc+0x6e>
 80129b0:	2221      	movs	r2, #33	; 0x21
 80129b2:	2104      	movs	r1, #4
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 fb57 	bl	8013068 <_calloc_r>
 80129ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129bc:	60f0      	str	r0, [r6, #12]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1e4      	bne.n	801298e <_Balloc+0x2e>
 80129c4:	2000      	movs	r0, #0
 80129c6:	bd70      	pop	{r4, r5, r6, pc}
 80129c8:	6802      	ldr	r2, [r0, #0]
 80129ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80129ce:	2300      	movs	r3, #0
 80129d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129d4:	e7f7      	b.n	80129c6 <_Balloc+0x66>
 80129d6:	bf00      	nop
 80129d8:	08015c61 	.word	0x08015c61
 80129dc:	08015ce4 	.word	0x08015ce4

080129e0 <_Bfree>:
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80129e4:	4605      	mov	r5, r0
 80129e6:	460c      	mov	r4, r1
 80129e8:	b976      	cbnz	r6, 8012a08 <_Bfree+0x28>
 80129ea:	2010      	movs	r0, #16
 80129ec:	f7ff ffa4 	bl	8012938 <malloc>
 80129f0:	4602      	mov	r2, r0
 80129f2:	6268      	str	r0, [r5, #36]	; 0x24
 80129f4:	b920      	cbnz	r0, 8012a00 <_Bfree+0x20>
 80129f6:	4b09      	ldr	r3, [pc, #36]	; (8012a1c <_Bfree+0x3c>)
 80129f8:	4809      	ldr	r0, [pc, #36]	; (8012a20 <_Bfree+0x40>)
 80129fa:	218a      	movs	r1, #138	; 0x8a
 80129fc:	f000 fd04 	bl	8013408 <__assert_func>
 8012a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a04:	6006      	str	r6, [r0, #0]
 8012a06:	60c6      	str	r6, [r0, #12]
 8012a08:	b13c      	cbz	r4, 8012a1a <_Bfree+0x3a>
 8012a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012a0c:	6862      	ldr	r2, [r4, #4]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a14:	6021      	str	r1, [r4, #0]
 8012a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012a1a:	bd70      	pop	{r4, r5, r6, pc}
 8012a1c:	08015c61 	.word	0x08015c61
 8012a20:	08015ce4 	.word	0x08015ce4

08012a24 <__multadd>:
 8012a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a28:	690d      	ldr	r5, [r1, #16]
 8012a2a:	4607      	mov	r7, r0
 8012a2c:	460c      	mov	r4, r1
 8012a2e:	461e      	mov	r6, r3
 8012a30:	f101 0c14 	add.w	ip, r1, #20
 8012a34:	2000      	movs	r0, #0
 8012a36:	f8dc 3000 	ldr.w	r3, [ip]
 8012a3a:	b299      	uxth	r1, r3
 8012a3c:	fb02 6101 	mla	r1, r2, r1, r6
 8012a40:	0c1e      	lsrs	r6, r3, #16
 8012a42:	0c0b      	lsrs	r3, r1, #16
 8012a44:	fb02 3306 	mla	r3, r2, r6, r3
 8012a48:	b289      	uxth	r1, r1
 8012a4a:	3001      	adds	r0, #1
 8012a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012a50:	4285      	cmp	r5, r0
 8012a52:	f84c 1b04 	str.w	r1, [ip], #4
 8012a56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012a5a:	dcec      	bgt.n	8012a36 <__multadd+0x12>
 8012a5c:	b30e      	cbz	r6, 8012aa2 <__multadd+0x7e>
 8012a5e:	68a3      	ldr	r3, [r4, #8]
 8012a60:	42ab      	cmp	r3, r5
 8012a62:	dc19      	bgt.n	8012a98 <__multadd+0x74>
 8012a64:	6861      	ldr	r1, [r4, #4]
 8012a66:	4638      	mov	r0, r7
 8012a68:	3101      	adds	r1, #1
 8012a6a:	f7ff ff79 	bl	8012960 <_Balloc>
 8012a6e:	4680      	mov	r8, r0
 8012a70:	b928      	cbnz	r0, 8012a7e <__multadd+0x5a>
 8012a72:	4602      	mov	r2, r0
 8012a74:	4b0c      	ldr	r3, [pc, #48]	; (8012aa8 <__multadd+0x84>)
 8012a76:	480d      	ldr	r0, [pc, #52]	; (8012aac <__multadd+0x88>)
 8012a78:	21b5      	movs	r1, #181	; 0xb5
 8012a7a:	f000 fcc5 	bl	8013408 <__assert_func>
 8012a7e:	6922      	ldr	r2, [r4, #16]
 8012a80:	3202      	adds	r2, #2
 8012a82:	f104 010c 	add.w	r1, r4, #12
 8012a86:	0092      	lsls	r2, r2, #2
 8012a88:	300c      	adds	r0, #12
 8012a8a:	f7fe f852 	bl	8010b32 <memcpy>
 8012a8e:	4621      	mov	r1, r4
 8012a90:	4638      	mov	r0, r7
 8012a92:	f7ff ffa5 	bl	80129e0 <_Bfree>
 8012a96:	4644      	mov	r4, r8
 8012a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a9c:	3501      	adds	r5, #1
 8012a9e:	615e      	str	r6, [r3, #20]
 8012aa0:	6125      	str	r5, [r4, #16]
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa8:	08015cd3 	.word	0x08015cd3
 8012aac:	08015ce4 	.word	0x08015ce4

08012ab0 <__hi0bits>:
 8012ab0:	0c03      	lsrs	r3, r0, #16
 8012ab2:	041b      	lsls	r3, r3, #16
 8012ab4:	b9d3      	cbnz	r3, 8012aec <__hi0bits+0x3c>
 8012ab6:	0400      	lsls	r0, r0, #16
 8012ab8:	2310      	movs	r3, #16
 8012aba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012abe:	bf04      	itt	eq
 8012ac0:	0200      	lsleq	r0, r0, #8
 8012ac2:	3308      	addeq	r3, #8
 8012ac4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ac8:	bf04      	itt	eq
 8012aca:	0100      	lsleq	r0, r0, #4
 8012acc:	3304      	addeq	r3, #4
 8012ace:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ad2:	bf04      	itt	eq
 8012ad4:	0080      	lsleq	r0, r0, #2
 8012ad6:	3302      	addeq	r3, #2
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	db05      	blt.n	8012ae8 <__hi0bits+0x38>
 8012adc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ae0:	f103 0301 	add.w	r3, r3, #1
 8012ae4:	bf08      	it	eq
 8012ae6:	2320      	moveq	r3, #32
 8012ae8:	4618      	mov	r0, r3
 8012aea:	4770      	bx	lr
 8012aec:	2300      	movs	r3, #0
 8012aee:	e7e4      	b.n	8012aba <__hi0bits+0xa>

08012af0 <__lo0bits>:
 8012af0:	6803      	ldr	r3, [r0, #0]
 8012af2:	f013 0207 	ands.w	r2, r3, #7
 8012af6:	4601      	mov	r1, r0
 8012af8:	d00b      	beq.n	8012b12 <__lo0bits+0x22>
 8012afa:	07da      	lsls	r2, r3, #31
 8012afc:	d423      	bmi.n	8012b46 <__lo0bits+0x56>
 8012afe:	0798      	lsls	r0, r3, #30
 8012b00:	bf49      	itett	mi
 8012b02:	085b      	lsrmi	r3, r3, #1
 8012b04:	089b      	lsrpl	r3, r3, #2
 8012b06:	2001      	movmi	r0, #1
 8012b08:	600b      	strmi	r3, [r1, #0]
 8012b0a:	bf5c      	itt	pl
 8012b0c:	600b      	strpl	r3, [r1, #0]
 8012b0e:	2002      	movpl	r0, #2
 8012b10:	4770      	bx	lr
 8012b12:	b298      	uxth	r0, r3
 8012b14:	b9a8      	cbnz	r0, 8012b42 <__lo0bits+0x52>
 8012b16:	0c1b      	lsrs	r3, r3, #16
 8012b18:	2010      	movs	r0, #16
 8012b1a:	b2da      	uxtb	r2, r3
 8012b1c:	b90a      	cbnz	r2, 8012b22 <__lo0bits+0x32>
 8012b1e:	3008      	adds	r0, #8
 8012b20:	0a1b      	lsrs	r3, r3, #8
 8012b22:	071a      	lsls	r2, r3, #28
 8012b24:	bf04      	itt	eq
 8012b26:	091b      	lsreq	r3, r3, #4
 8012b28:	3004      	addeq	r0, #4
 8012b2a:	079a      	lsls	r2, r3, #30
 8012b2c:	bf04      	itt	eq
 8012b2e:	089b      	lsreq	r3, r3, #2
 8012b30:	3002      	addeq	r0, #2
 8012b32:	07da      	lsls	r2, r3, #31
 8012b34:	d403      	bmi.n	8012b3e <__lo0bits+0x4e>
 8012b36:	085b      	lsrs	r3, r3, #1
 8012b38:	f100 0001 	add.w	r0, r0, #1
 8012b3c:	d005      	beq.n	8012b4a <__lo0bits+0x5a>
 8012b3e:	600b      	str	r3, [r1, #0]
 8012b40:	4770      	bx	lr
 8012b42:	4610      	mov	r0, r2
 8012b44:	e7e9      	b.n	8012b1a <__lo0bits+0x2a>
 8012b46:	2000      	movs	r0, #0
 8012b48:	4770      	bx	lr
 8012b4a:	2020      	movs	r0, #32
 8012b4c:	4770      	bx	lr
	...

08012b50 <__i2b>:
 8012b50:	b510      	push	{r4, lr}
 8012b52:	460c      	mov	r4, r1
 8012b54:	2101      	movs	r1, #1
 8012b56:	f7ff ff03 	bl	8012960 <_Balloc>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	b928      	cbnz	r0, 8012b6a <__i2b+0x1a>
 8012b5e:	4b05      	ldr	r3, [pc, #20]	; (8012b74 <__i2b+0x24>)
 8012b60:	4805      	ldr	r0, [pc, #20]	; (8012b78 <__i2b+0x28>)
 8012b62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012b66:	f000 fc4f 	bl	8013408 <__assert_func>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	6144      	str	r4, [r0, #20]
 8012b6e:	6103      	str	r3, [r0, #16]
 8012b70:	bd10      	pop	{r4, pc}
 8012b72:	bf00      	nop
 8012b74:	08015cd3 	.word	0x08015cd3
 8012b78:	08015ce4 	.word	0x08015ce4

08012b7c <__multiply>:
 8012b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b80:	4691      	mov	r9, r2
 8012b82:	690a      	ldr	r2, [r1, #16]
 8012b84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	bfb8      	it	lt
 8012b8c:	460b      	movlt	r3, r1
 8012b8e:	460c      	mov	r4, r1
 8012b90:	bfbc      	itt	lt
 8012b92:	464c      	movlt	r4, r9
 8012b94:	4699      	movlt	r9, r3
 8012b96:	6927      	ldr	r7, [r4, #16]
 8012b98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012b9c:	68a3      	ldr	r3, [r4, #8]
 8012b9e:	6861      	ldr	r1, [r4, #4]
 8012ba0:	eb07 060a 	add.w	r6, r7, sl
 8012ba4:	42b3      	cmp	r3, r6
 8012ba6:	b085      	sub	sp, #20
 8012ba8:	bfb8      	it	lt
 8012baa:	3101      	addlt	r1, #1
 8012bac:	f7ff fed8 	bl	8012960 <_Balloc>
 8012bb0:	b930      	cbnz	r0, 8012bc0 <__multiply+0x44>
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	4b44      	ldr	r3, [pc, #272]	; (8012cc8 <__multiply+0x14c>)
 8012bb6:	4845      	ldr	r0, [pc, #276]	; (8012ccc <__multiply+0x150>)
 8012bb8:	f240 115d 	movw	r1, #349	; 0x15d
 8012bbc:	f000 fc24 	bl	8013408 <__assert_func>
 8012bc0:	f100 0514 	add.w	r5, r0, #20
 8012bc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012bc8:	462b      	mov	r3, r5
 8012bca:	2200      	movs	r2, #0
 8012bcc:	4543      	cmp	r3, r8
 8012bce:	d321      	bcc.n	8012c14 <__multiply+0x98>
 8012bd0:	f104 0314 	add.w	r3, r4, #20
 8012bd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012bd8:	f109 0314 	add.w	r3, r9, #20
 8012bdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012be0:	9202      	str	r2, [sp, #8]
 8012be2:	1b3a      	subs	r2, r7, r4
 8012be4:	3a15      	subs	r2, #21
 8012be6:	f022 0203 	bic.w	r2, r2, #3
 8012bea:	3204      	adds	r2, #4
 8012bec:	f104 0115 	add.w	r1, r4, #21
 8012bf0:	428f      	cmp	r7, r1
 8012bf2:	bf38      	it	cc
 8012bf4:	2204      	movcc	r2, #4
 8012bf6:	9201      	str	r2, [sp, #4]
 8012bf8:	9a02      	ldr	r2, [sp, #8]
 8012bfa:	9303      	str	r3, [sp, #12]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d80c      	bhi.n	8012c1a <__multiply+0x9e>
 8012c00:	2e00      	cmp	r6, #0
 8012c02:	dd03      	ble.n	8012c0c <__multiply+0x90>
 8012c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d05a      	beq.n	8012cc2 <__multiply+0x146>
 8012c0c:	6106      	str	r6, [r0, #16]
 8012c0e:	b005      	add	sp, #20
 8012c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c14:	f843 2b04 	str.w	r2, [r3], #4
 8012c18:	e7d8      	b.n	8012bcc <__multiply+0x50>
 8012c1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c1e:	f1ba 0f00 	cmp.w	sl, #0
 8012c22:	d024      	beq.n	8012c6e <__multiply+0xf2>
 8012c24:	f104 0e14 	add.w	lr, r4, #20
 8012c28:	46a9      	mov	r9, r5
 8012c2a:	f04f 0c00 	mov.w	ip, #0
 8012c2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c32:	f8d9 1000 	ldr.w	r1, [r9]
 8012c36:	fa1f fb82 	uxth.w	fp, r2
 8012c3a:	b289      	uxth	r1, r1
 8012c3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012c44:	f8d9 2000 	ldr.w	r2, [r9]
 8012c48:	4461      	add	r1, ip
 8012c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012c52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012c56:	b289      	uxth	r1, r1
 8012c58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c5c:	4577      	cmp	r7, lr
 8012c5e:	f849 1b04 	str.w	r1, [r9], #4
 8012c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c66:	d8e2      	bhi.n	8012c2e <__multiply+0xb2>
 8012c68:	9a01      	ldr	r2, [sp, #4]
 8012c6a:	f845 c002 	str.w	ip, [r5, r2]
 8012c6e:	9a03      	ldr	r2, [sp, #12]
 8012c70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c74:	3304      	adds	r3, #4
 8012c76:	f1b9 0f00 	cmp.w	r9, #0
 8012c7a:	d020      	beq.n	8012cbe <__multiply+0x142>
 8012c7c:	6829      	ldr	r1, [r5, #0]
 8012c7e:	f104 0c14 	add.w	ip, r4, #20
 8012c82:	46ae      	mov	lr, r5
 8012c84:	f04f 0a00 	mov.w	sl, #0
 8012c88:	f8bc b000 	ldrh.w	fp, [ip]
 8012c8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012c90:	fb09 220b 	mla	r2, r9, fp, r2
 8012c94:	4492      	add	sl, r2
 8012c96:	b289      	uxth	r1, r1
 8012c98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012c9c:	f84e 1b04 	str.w	r1, [lr], #4
 8012ca0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012ca4:	f8be 1000 	ldrh.w	r1, [lr]
 8012ca8:	0c12      	lsrs	r2, r2, #16
 8012caa:	fb09 1102 	mla	r1, r9, r2, r1
 8012cae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012cb2:	4567      	cmp	r7, ip
 8012cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012cb8:	d8e6      	bhi.n	8012c88 <__multiply+0x10c>
 8012cba:	9a01      	ldr	r2, [sp, #4]
 8012cbc:	50a9      	str	r1, [r5, r2]
 8012cbe:	3504      	adds	r5, #4
 8012cc0:	e79a      	b.n	8012bf8 <__multiply+0x7c>
 8012cc2:	3e01      	subs	r6, #1
 8012cc4:	e79c      	b.n	8012c00 <__multiply+0x84>
 8012cc6:	bf00      	nop
 8012cc8:	08015cd3 	.word	0x08015cd3
 8012ccc:	08015ce4 	.word	0x08015ce4

08012cd0 <__pow5mult>:
 8012cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cd4:	4615      	mov	r5, r2
 8012cd6:	f012 0203 	ands.w	r2, r2, #3
 8012cda:	4606      	mov	r6, r0
 8012cdc:	460f      	mov	r7, r1
 8012cde:	d007      	beq.n	8012cf0 <__pow5mult+0x20>
 8012ce0:	4c25      	ldr	r4, [pc, #148]	; (8012d78 <__pow5mult+0xa8>)
 8012ce2:	3a01      	subs	r2, #1
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012cea:	f7ff fe9b 	bl	8012a24 <__multadd>
 8012cee:	4607      	mov	r7, r0
 8012cf0:	10ad      	asrs	r5, r5, #2
 8012cf2:	d03d      	beq.n	8012d70 <__pow5mult+0xa0>
 8012cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012cf6:	b97c      	cbnz	r4, 8012d18 <__pow5mult+0x48>
 8012cf8:	2010      	movs	r0, #16
 8012cfa:	f7ff fe1d 	bl	8012938 <malloc>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	6270      	str	r0, [r6, #36]	; 0x24
 8012d02:	b928      	cbnz	r0, 8012d10 <__pow5mult+0x40>
 8012d04:	4b1d      	ldr	r3, [pc, #116]	; (8012d7c <__pow5mult+0xac>)
 8012d06:	481e      	ldr	r0, [pc, #120]	; (8012d80 <__pow5mult+0xb0>)
 8012d08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012d0c:	f000 fb7c 	bl	8013408 <__assert_func>
 8012d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d14:	6004      	str	r4, [r0, #0]
 8012d16:	60c4      	str	r4, [r0, #12]
 8012d18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d20:	b94c      	cbnz	r4, 8012d36 <__pow5mult+0x66>
 8012d22:	f240 2171 	movw	r1, #625	; 0x271
 8012d26:	4630      	mov	r0, r6
 8012d28:	f7ff ff12 	bl	8012b50 <__i2b>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d32:	4604      	mov	r4, r0
 8012d34:	6003      	str	r3, [r0, #0]
 8012d36:	f04f 0900 	mov.w	r9, #0
 8012d3a:	07eb      	lsls	r3, r5, #31
 8012d3c:	d50a      	bpl.n	8012d54 <__pow5mult+0x84>
 8012d3e:	4639      	mov	r1, r7
 8012d40:	4622      	mov	r2, r4
 8012d42:	4630      	mov	r0, r6
 8012d44:	f7ff ff1a 	bl	8012b7c <__multiply>
 8012d48:	4639      	mov	r1, r7
 8012d4a:	4680      	mov	r8, r0
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	f7ff fe47 	bl	80129e0 <_Bfree>
 8012d52:	4647      	mov	r7, r8
 8012d54:	106d      	asrs	r5, r5, #1
 8012d56:	d00b      	beq.n	8012d70 <__pow5mult+0xa0>
 8012d58:	6820      	ldr	r0, [r4, #0]
 8012d5a:	b938      	cbnz	r0, 8012d6c <__pow5mult+0x9c>
 8012d5c:	4622      	mov	r2, r4
 8012d5e:	4621      	mov	r1, r4
 8012d60:	4630      	mov	r0, r6
 8012d62:	f7ff ff0b 	bl	8012b7c <__multiply>
 8012d66:	6020      	str	r0, [r4, #0]
 8012d68:	f8c0 9000 	str.w	r9, [r0]
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	e7e4      	b.n	8012d3a <__pow5mult+0x6a>
 8012d70:	4638      	mov	r0, r7
 8012d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d76:	bf00      	nop
 8012d78:	08015e30 	.word	0x08015e30
 8012d7c:	08015c61 	.word	0x08015c61
 8012d80:	08015ce4 	.word	0x08015ce4

08012d84 <__lshift>:
 8012d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d88:	460c      	mov	r4, r1
 8012d8a:	6849      	ldr	r1, [r1, #4]
 8012d8c:	6923      	ldr	r3, [r4, #16]
 8012d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d92:	68a3      	ldr	r3, [r4, #8]
 8012d94:	4607      	mov	r7, r0
 8012d96:	4691      	mov	r9, r2
 8012d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d9c:	f108 0601 	add.w	r6, r8, #1
 8012da0:	42b3      	cmp	r3, r6
 8012da2:	db0b      	blt.n	8012dbc <__lshift+0x38>
 8012da4:	4638      	mov	r0, r7
 8012da6:	f7ff fddb 	bl	8012960 <_Balloc>
 8012daa:	4605      	mov	r5, r0
 8012dac:	b948      	cbnz	r0, 8012dc2 <__lshift+0x3e>
 8012dae:	4602      	mov	r2, r0
 8012db0:	4b2a      	ldr	r3, [pc, #168]	; (8012e5c <__lshift+0xd8>)
 8012db2:	482b      	ldr	r0, [pc, #172]	; (8012e60 <__lshift+0xdc>)
 8012db4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012db8:	f000 fb26 	bl	8013408 <__assert_func>
 8012dbc:	3101      	adds	r1, #1
 8012dbe:	005b      	lsls	r3, r3, #1
 8012dc0:	e7ee      	b.n	8012da0 <__lshift+0x1c>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f100 0114 	add.w	r1, r0, #20
 8012dc8:	f100 0210 	add.w	r2, r0, #16
 8012dcc:	4618      	mov	r0, r3
 8012dce:	4553      	cmp	r3, sl
 8012dd0:	db37      	blt.n	8012e42 <__lshift+0xbe>
 8012dd2:	6920      	ldr	r0, [r4, #16]
 8012dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012dd8:	f104 0314 	add.w	r3, r4, #20
 8012ddc:	f019 091f 	ands.w	r9, r9, #31
 8012de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012de8:	d02f      	beq.n	8012e4a <__lshift+0xc6>
 8012dea:	f1c9 0e20 	rsb	lr, r9, #32
 8012dee:	468a      	mov	sl, r1
 8012df0:	f04f 0c00 	mov.w	ip, #0
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	fa02 f209 	lsl.w	r2, r2, r9
 8012dfa:	ea42 020c 	orr.w	r2, r2, ip
 8012dfe:	f84a 2b04 	str.w	r2, [sl], #4
 8012e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e06:	4298      	cmp	r0, r3
 8012e08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012e0c:	d8f2      	bhi.n	8012df4 <__lshift+0x70>
 8012e0e:	1b03      	subs	r3, r0, r4
 8012e10:	3b15      	subs	r3, #21
 8012e12:	f023 0303 	bic.w	r3, r3, #3
 8012e16:	3304      	adds	r3, #4
 8012e18:	f104 0215 	add.w	r2, r4, #21
 8012e1c:	4290      	cmp	r0, r2
 8012e1e:	bf38      	it	cc
 8012e20:	2304      	movcc	r3, #4
 8012e22:	f841 c003 	str.w	ip, [r1, r3]
 8012e26:	f1bc 0f00 	cmp.w	ip, #0
 8012e2a:	d001      	beq.n	8012e30 <__lshift+0xac>
 8012e2c:	f108 0602 	add.w	r6, r8, #2
 8012e30:	3e01      	subs	r6, #1
 8012e32:	4638      	mov	r0, r7
 8012e34:	612e      	str	r6, [r5, #16]
 8012e36:	4621      	mov	r1, r4
 8012e38:	f7ff fdd2 	bl	80129e0 <_Bfree>
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e46:	3301      	adds	r3, #1
 8012e48:	e7c1      	b.n	8012dce <__lshift+0x4a>
 8012e4a:	3904      	subs	r1, #4
 8012e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e50:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e54:	4298      	cmp	r0, r3
 8012e56:	d8f9      	bhi.n	8012e4c <__lshift+0xc8>
 8012e58:	e7ea      	b.n	8012e30 <__lshift+0xac>
 8012e5a:	bf00      	nop
 8012e5c:	08015cd3 	.word	0x08015cd3
 8012e60:	08015ce4 	.word	0x08015ce4

08012e64 <__mcmp>:
 8012e64:	b530      	push	{r4, r5, lr}
 8012e66:	6902      	ldr	r2, [r0, #16]
 8012e68:	690c      	ldr	r4, [r1, #16]
 8012e6a:	1b12      	subs	r2, r2, r4
 8012e6c:	d10e      	bne.n	8012e8c <__mcmp+0x28>
 8012e6e:	f100 0314 	add.w	r3, r0, #20
 8012e72:	3114      	adds	r1, #20
 8012e74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012e84:	42a5      	cmp	r5, r4
 8012e86:	d003      	beq.n	8012e90 <__mcmp+0x2c>
 8012e88:	d305      	bcc.n	8012e96 <__mcmp+0x32>
 8012e8a:	2201      	movs	r2, #1
 8012e8c:	4610      	mov	r0, r2
 8012e8e:	bd30      	pop	{r4, r5, pc}
 8012e90:	4283      	cmp	r3, r0
 8012e92:	d3f3      	bcc.n	8012e7c <__mcmp+0x18>
 8012e94:	e7fa      	b.n	8012e8c <__mcmp+0x28>
 8012e96:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9a:	e7f7      	b.n	8012e8c <__mcmp+0x28>

08012e9c <__mdiff>:
 8012e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea0:	460c      	mov	r4, r1
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4690      	mov	r8, r2
 8012eaa:	f7ff ffdb 	bl	8012e64 <__mcmp>
 8012eae:	1e05      	subs	r5, r0, #0
 8012eb0:	d110      	bne.n	8012ed4 <__mdiff+0x38>
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f7ff fd53 	bl	8012960 <_Balloc>
 8012eba:	b930      	cbnz	r0, 8012eca <__mdiff+0x2e>
 8012ebc:	4b3a      	ldr	r3, [pc, #232]	; (8012fa8 <__mdiff+0x10c>)
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	f240 2132 	movw	r1, #562	; 0x232
 8012ec4:	4839      	ldr	r0, [pc, #228]	; (8012fac <__mdiff+0x110>)
 8012ec6:	f000 fa9f 	bl	8013408 <__assert_func>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed4:	bfa4      	itt	ge
 8012ed6:	4643      	movge	r3, r8
 8012ed8:	46a0      	movge	r8, r4
 8012eda:	4630      	mov	r0, r6
 8012edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ee0:	bfa6      	itte	ge
 8012ee2:	461c      	movge	r4, r3
 8012ee4:	2500      	movge	r5, #0
 8012ee6:	2501      	movlt	r5, #1
 8012ee8:	f7ff fd3a 	bl	8012960 <_Balloc>
 8012eec:	b920      	cbnz	r0, 8012ef8 <__mdiff+0x5c>
 8012eee:	4b2e      	ldr	r3, [pc, #184]	; (8012fa8 <__mdiff+0x10c>)
 8012ef0:	4602      	mov	r2, r0
 8012ef2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012ef6:	e7e5      	b.n	8012ec4 <__mdiff+0x28>
 8012ef8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012efc:	6926      	ldr	r6, [r4, #16]
 8012efe:	60c5      	str	r5, [r0, #12]
 8012f00:	f104 0914 	add.w	r9, r4, #20
 8012f04:	f108 0514 	add.w	r5, r8, #20
 8012f08:	f100 0e14 	add.w	lr, r0, #20
 8012f0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012f10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f14:	f108 0210 	add.w	r2, r8, #16
 8012f18:	46f2      	mov	sl, lr
 8012f1a:	2100      	movs	r1, #0
 8012f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f24:	fa1f f883 	uxth.w	r8, r3
 8012f28:	fa11 f18b 	uxtah	r1, r1, fp
 8012f2c:	0c1b      	lsrs	r3, r3, #16
 8012f2e:	eba1 0808 	sub.w	r8, r1, r8
 8012f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f3a:	fa1f f888 	uxth.w	r8, r8
 8012f3e:	1419      	asrs	r1, r3, #16
 8012f40:	454e      	cmp	r6, r9
 8012f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f46:	f84a 3b04 	str.w	r3, [sl], #4
 8012f4a:	d8e7      	bhi.n	8012f1c <__mdiff+0x80>
 8012f4c:	1b33      	subs	r3, r6, r4
 8012f4e:	3b15      	subs	r3, #21
 8012f50:	f023 0303 	bic.w	r3, r3, #3
 8012f54:	3304      	adds	r3, #4
 8012f56:	3415      	adds	r4, #21
 8012f58:	42a6      	cmp	r6, r4
 8012f5a:	bf38      	it	cc
 8012f5c:	2304      	movcc	r3, #4
 8012f5e:	441d      	add	r5, r3
 8012f60:	4473      	add	r3, lr
 8012f62:	469e      	mov	lr, r3
 8012f64:	462e      	mov	r6, r5
 8012f66:	4566      	cmp	r6, ip
 8012f68:	d30e      	bcc.n	8012f88 <__mdiff+0xec>
 8012f6a:	f10c 0203 	add.w	r2, ip, #3
 8012f6e:	1b52      	subs	r2, r2, r5
 8012f70:	f022 0203 	bic.w	r2, r2, #3
 8012f74:	3d03      	subs	r5, #3
 8012f76:	45ac      	cmp	ip, r5
 8012f78:	bf38      	it	cc
 8012f7a:	2200      	movcc	r2, #0
 8012f7c:	441a      	add	r2, r3
 8012f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012f82:	b17b      	cbz	r3, 8012fa4 <__mdiff+0x108>
 8012f84:	6107      	str	r7, [r0, #16]
 8012f86:	e7a3      	b.n	8012ed0 <__mdiff+0x34>
 8012f88:	f856 8b04 	ldr.w	r8, [r6], #4
 8012f8c:	fa11 f288 	uxtah	r2, r1, r8
 8012f90:	1414      	asrs	r4, r2, #16
 8012f92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012f96:	b292      	uxth	r2, r2
 8012f98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012f9c:	f84e 2b04 	str.w	r2, [lr], #4
 8012fa0:	1421      	asrs	r1, r4, #16
 8012fa2:	e7e0      	b.n	8012f66 <__mdiff+0xca>
 8012fa4:	3f01      	subs	r7, #1
 8012fa6:	e7ea      	b.n	8012f7e <__mdiff+0xe2>
 8012fa8:	08015cd3 	.word	0x08015cd3
 8012fac:	08015ce4 	.word	0x08015ce4

08012fb0 <__d2b>:
 8012fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012fb4:	4689      	mov	r9, r1
 8012fb6:	2101      	movs	r1, #1
 8012fb8:	ec57 6b10 	vmov	r6, r7, d0
 8012fbc:	4690      	mov	r8, r2
 8012fbe:	f7ff fccf 	bl	8012960 <_Balloc>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	b930      	cbnz	r0, 8012fd4 <__d2b+0x24>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	4b25      	ldr	r3, [pc, #148]	; (8013060 <__d2b+0xb0>)
 8012fca:	4826      	ldr	r0, [pc, #152]	; (8013064 <__d2b+0xb4>)
 8012fcc:	f240 310a 	movw	r1, #778	; 0x30a
 8012fd0:	f000 fa1a 	bl	8013408 <__assert_func>
 8012fd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012fdc:	bb35      	cbnz	r5, 801302c <__d2b+0x7c>
 8012fde:	2e00      	cmp	r6, #0
 8012fe0:	9301      	str	r3, [sp, #4]
 8012fe2:	d028      	beq.n	8013036 <__d2b+0x86>
 8012fe4:	4668      	mov	r0, sp
 8012fe6:	9600      	str	r6, [sp, #0]
 8012fe8:	f7ff fd82 	bl	8012af0 <__lo0bits>
 8012fec:	9900      	ldr	r1, [sp, #0]
 8012fee:	b300      	cbz	r0, 8013032 <__d2b+0x82>
 8012ff0:	9a01      	ldr	r2, [sp, #4]
 8012ff2:	f1c0 0320 	rsb	r3, r0, #32
 8012ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8012ffa:	430b      	orrs	r3, r1
 8012ffc:	40c2      	lsrs	r2, r0
 8012ffe:	6163      	str	r3, [r4, #20]
 8013000:	9201      	str	r2, [sp, #4]
 8013002:	9b01      	ldr	r3, [sp, #4]
 8013004:	61a3      	str	r3, [r4, #24]
 8013006:	2b00      	cmp	r3, #0
 8013008:	bf14      	ite	ne
 801300a:	2202      	movne	r2, #2
 801300c:	2201      	moveq	r2, #1
 801300e:	6122      	str	r2, [r4, #16]
 8013010:	b1d5      	cbz	r5, 8013048 <__d2b+0x98>
 8013012:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013016:	4405      	add	r5, r0
 8013018:	f8c9 5000 	str.w	r5, [r9]
 801301c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013020:	f8c8 0000 	str.w	r0, [r8]
 8013024:	4620      	mov	r0, r4
 8013026:	b003      	add	sp, #12
 8013028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801302c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013030:	e7d5      	b.n	8012fde <__d2b+0x2e>
 8013032:	6161      	str	r1, [r4, #20]
 8013034:	e7e5      	b.n	8013002 <__d2b+0x52>
 8013036:	a801      	add	r0, sp, #4
 8013038:	f7ff fd5a 	bl	8012af0 <__lo0bits>
 801303c:	9b01      	ldr	r3, [sp, #4]
 801303e:	6163      	str	r3, [r4, #20]
 8013040:	2201      	movs	r2, #1
 8013042:	6122      	str	r2, [r4, #16]
 8013044:	3020      	adds	r0, #32
 8013046:	e7e3      	b.n	8013010 <__d2b+0x60>
 8013048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801304c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013050:	f8c9 0000 	str.w	r0, [r9]
 8013054:	6918      	ldr	r0, [r3, #16]
 8013056:	f7ff fd2b 	bl	8012ab0 <__hi0bits>
 801305a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801305e:	e7df      	b.n	8013020 <__d2b+0x70>
 8013060:	08015cd3 	.word	0x08015cd3
 8013064:	08015ce4 	.word	0x08015ce4

08013068 <_calloc_r>:
 8013068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801306a:	fba1 2402 	umull	r2, r4, r1, r2
 801306e:	b94c      	cbnz	r4, 8013084 <_calloc_r+0x1c>
 8013070:	4611      	mov	r1, r2
 8013072:	9201      	str	r2, [sp, #4]
 8013074:	f7fd fd94 	bl	8010ba0 <_malloc_r>
 8013078:	9a01      	ldr	r2, [sp, #4]
 801307a:	4605      	mov	r5, r0
 801307c:	b930      	cbnz	r0, 801308c <_calloc_r+0x24>
 801307e:	4628      	mov	r0, r5
 8013080:	b003      	add	sp, #12
 8013082:	bd30      	pop	{r4, r5, pc}
 8013084:	220c      	movs	r2, #12
 8013086:	6002      	str	r2, [r0, #0]
 8013088:	2500      	movs	r5, #0
 801308a:	e7f8      	b.n	801307e <_calloc_r+0x16>
 801308c:	4621      	mov	r1, r4
 801308e:	f7fd fd5e 	bl	8010b4e <memset>
 8013092:	e7f4      	b.n	801307e <_calloc_r+0x16>

08013094 <_free_r>:
 8013094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013096:	2900      	cmp	r1, #0
 8013098:	d044      	beq.n	8013124 <_free_r+0x90>
 801309a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801309e:	9001      	str	r0, [sp, #4]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f1a1 0404 	sub.w	r4, r1, #4
 80130a6:	bfb8      	it	lt
 80130a8:	18e4      	addlt	r4, r4, r3
 80130aa:	f7ff fc4d 	bl	8012948 <__malloc_lock>
 80130ae:	4a1e      	ldr	r2, [pc, #120]	; (8013128 <_free_r+0x94>)
 80130b0:	9801      	ldr	r0, [sp, #4]
 80130b2:	6813      	ldr	r3, [r2, #0]
 80130b4:	b933      	cbnz	r3, 80130c4 <_free_r+0x30>
 80130b6:	6063      	str	r3, [r4, #4]
 80130b8:	6014      	str	r4, [r2, #0]
 80130ba:	b003      	add	sp, #12
 80130bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130c0:	f7ff bc48 	b.w	8012954 <__malloc_unlock>
 80130c4:	42a3      	cmp	r3, r4
 80130c6:	d908      	bls.n	80130da <_free_r+0x46>
 80130c8:	6825      	ldr	r5, [r4, #0]
 80130ca:	1961      	adds	r1, r4, r5
 80130cc:	428b      	cmp	r3, r1
 80130ce:	bf01      	itttt	eq
 80130d0:	6819      	ldreq	r1, [r3, #0]
 80130d2:	685b      	ldreq	r3, [r3, #4]
 80130d4:	1949      	addeq	r1, r1, r5
 80130d6:	6021      	streq	r1, [r4, #0]
 80130d8:	e7ed      	b.n	80130b6 <_free_r+0x22>
 80130da:	461a      	mov	r2, r3
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	b10b      	cbz	r3, 80130e4 <_free_r+0x50>
 80130e0:	42a3      	cmp	r3, r4
 80130e2:	d9fa      	bls.n	80130da <_free_r+0x46>
 80130e4:	6811      	ldr	r1, [r2, #0]
 80130e6:	1855      	adds	r5, r2, r1
 80130e8:	42a5      	cmp	r5, r4
 80130ea:	d10b      	bne.n	8013104 <_free_r+0x70>
 80130ec:	6824      	ldr	r4, [r4, #0]
 80130ee:	4421      	add	r1, r4
 80130f0:	1854      	adds	r4, r2, r1
 80130f2:	42a3      	cmp	r3, r4
 80130f4:	6011      	str	r1, [r2, #0]
 80130f6:	d1e0      	bne.n	80130ba <_free_r+0x26>
 80130f8:	681c      	ldr	r4, [r3, #0]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	6053      	str	r3, [r2, #4]
 80130fe:	4421      	add	r1, r4
 8013100:	6011      	str	r1, [r2, #0]
 8013102:	e7da      	b.n	80130ba <_free_r+0x26>
 8013104:	d902      	bls.n	801310c <_free_r+0x78>
 8013106:	230c      	movs	r3, #12
 8013108:	6003      	str	r3, [r0, #0]
 801310a:	e7d6      	b.n	80130ba <_free_r+0x26>
 801310c:	6825      	ldr	r5, [r4, #0]
 801310e:	1961      	adds	r1, r4, r5
 8013110:	428b      	cmp	r3, r1
 8013112:	bf04      	itt	eq
 8013114:	6819      	ldreq	r1, [r3, #0]
 8013116:	685b      	ldreq	r3, [r3, #4]
 8013118:	6063      	str	r3, [r4, #4]
 801311a:	bf04      	itt	eq
 801311c:	1949      	addeq	r1, r1, r5
 801311e:	6021      	streq	r1, [r4, #0]
 8013120:	6054      	str	r4, [r2, #4]
 8013122:	e7ca      	b.n	80130ba <_free_r+0x26>
 8013124:	b003      	add	sp, #12
 8013126:	bd30      	pop	{r4, r5, pc}
 8013128:	20006df0 	.word	0x20006df0

0801312c <__ssputs_r>:
 801312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013130:	688e      	ldr	r6, [r1, #8]
 8013132:	429e      	cmp	r6, r3
 8013134:	4682      	mov	sl, r0
 8013136:	460c      	mov	r4, r1
 8013138:	4690      	mov	r8, r2
 801313a:	461f      	mov	r7, r3
 801313c:	d838      	bhi.n	80131b0 <__ssputs_r+0x84>
 801313e:	898a      	ldrh	r2, [r1, #12]
 8013140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013144:	d032      	beq.n	80131ac <__ssputs_r+0x80>
 8013146:	6825      	ldr	r5, [r4, #0]
 8013148:	6909      	ldr	r1, [r1, #16]
 801314a:	eba5 0901 	sub.w	r9, r5, r1
 801314e:	6965      	ldr	r5, [r4, #20]
 8013150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013158:	3301      	adds	r3, #1
 801315a:	444b      	add	r3, r9
 801315c:	106d      	asrs	r5, r5, #1
 801315e:	429d      	cmp	r5, r3
 8013160:	bf38      	it	cc
 8013162:	461d      	movcc	r5, r3
 8013164:	0553      	lsls	r3, r2, #21
 8013166:	d531      	bpl.n	80131cc <__ssputs_r+0xa0>
 8013168:	4629      	mov	r1, r5
 801316a:	f7fd fd19 	bl	8010ba0 <_malloc_r>
 801316e:	4606      	mov	r6, r0
 8013170:	b950      	cbnz	r0, 8013188 <__ssputs_r+0x5c>
 8013172:	230c      	movs	r3, #12
 8013174:	f8ca 3000 	str.w	r3, [sl]
 8013178:	89a3      	ldrh	r3, [r4, #12]
 801317a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801317e:	81a3      	strh	r3, [r4, #12]
 8013180:	f04f 30ff 	mov.w	r0, #4294967295
 8013184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013188:	6921      	ldr	r1, [r4, #16]
 801318a:	464a      	mov	r2, r9
 801318c:	f7fd fcd1 	bl	8010b32 <memcpy>
 8013190:	89a3      	ldrh	r3, [r4, #12]
 8013192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801319a:	81a3      	strh	r3, [r4, #12]
 801319c:	6126      	str	r6, [r4, #16]
 801319e:	6165      	str	r5, [r4, #20]
 80131a0:	444e      	add	r6, r9
 80131a2:	eba5 0509 	sub.w	r5, r5, r9
 80131a6:	6026      	str	r6, [r4, #0]
 80131a8:	60a5      	str	r5, [r4, #8]
 80131aa:	463e      	mov	r6, r7
 80131ac:	42be      	cmp	r6, r7
 80131ae:	d900      	bls.n	80131b2 <__ssputs_r+0x86>
 80131b0:	463e      	mov	r6, r7
 80131b2:	6820      	ldr	r0, [r4, #0]
 80131b4:	4632      	mov	r2, r6
 80131b6:	4641      	mov	r1, r8
 80131b8:	f000 f98a 	bl	80134d0 <memmove>
 80131bc:	68a3      	ldr	r3, [r4, #8]
 80131be:	1b9b      	subs	r3, r3, r6
 80131c0:	60a3      	str	r3, [r4, #8]
 80131c2:	6823      	ldr	r3, [r4, #0]
 80131c4:	4433      	add	r3, r6
 80131c6:	6023      	str	r3, [r4, #0]
 80131c8:	2000      	movs	r0, #0
 80131ca:	e7db      	b.n	8013184 <__ssputs_r+0x58>
 80131cc:	462a      	mov	r2, r5
 80131ce:	f000 f999 	bl	8013504 <_realloc_r>
 80131d2:	4606      	mov	r6, r0
 80131d4:	2800      	cmp	r0, #0
 80131d6:	d1e1      	bne.n	801319c <__ssputs_r+0x70>
 80131d8:	6921      	ldr	r1, [r4, #16]
 80131da:	4650      	mov	r0, sl
 80131dc:	f7ff ff5a 	bl	8013094 <_free_r>
 80131e0:	e7c7      	b.n	8013172 <__ssputs_r+0x46>
	...

080131e4 <_svfiprintf_r>:
 80131e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e8:	4698      	mov	r8, r3
 80131ea:	898b      	ldrh	r3, [r1, #12]
 80131ec:	061b      	lsls	r3, r3, #24
 80131ee:	b09d      	sub	sp, #116	; 0x74
 80131f0:	4607      	mov	r7, r0
 80131f2:	460d      	mov	r5, r1
 80131f4:	4614      	mov	r4, r2
 80131f6:	d50e      	bpl.n	8013216 <_svfiprintf_r+0x32>
 80131f8:	690b      	ldr	r3, [r1, #16]
 80131fa:	b963      	cbnz	r3, 8013216 <_svfiprintf_r+0x32>
 80131fc:	2140      	movs	r1, #64	; 0x40
 80131fe:	f7fd fccf 	bl	8010ba0 <_malloc_r>
 8013202:	6028      	str	r0, [r5, #0]
 8013204:	6128      	str	r0, [r5, #16]
 8013206:	b920      	cbnz	r0, 8013212 <_svfiprintf_r+0x2e>
 8013208:	230c      	movs	r3, #12
 801320a:	603b      	str	r3, [r7, #0]
 801320c:	f04f 30ff 	mov.w	r0, #4294967295
 8013210:	e0d1      	b.n	80133b6 <_svfiprintf_r+0x1d2>
 8013212:	2340      	movs	r3, #64	; 0x40
 8013214:	616b      	str	r3, [r5, #20]
 8013216:	2300      	movs	r3, #0
 8013218:	9309      	str	r3, [sp, #36]	; 0x24
 801321a:	2320      	movs	r3, #32
 801321c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013220:	f8cd 800c 	str.w	r8, [sp, #12]
 8013224:	2330      	movs	r3, #48	; 0x30
 8013226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80133d0 <_svfiprintf_r+0x1ec>
 801322a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801322e:	f04f 0901 	mov.w	r9, #1
 8013232:	4623      	mov	r3, r4
 8013234:	469a      	mov	sl, r3
 8013236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801323a:	b10a      	cbz	r2, 8013240 <_svfiprintf_r+0x5c>
 801323c:	2a25      	cmp	r2, #37	; 0x25
 801323e:	d1f9      	bne.n	8013234 <_svfiprintf_r+0x50>
 8013240:	ebba 0b04 	subs.w	fp, sl, r4
 8013244:	d00b      	beq.n	801325e <_svfiprintf_r+0x7a>
 8013246:	465b      	mov	r3, fp
 8013248:	4622      	mov	r2, r4
 801324a:	4629      	mov	r1, r5
 801324c:	4638      	mov	r0, r7
 801324e:	f7ff ff6d 	bl	801312c <__ssputs_r>
 8013252:	3001      	adds	r0, #1
 8013254:	f000 80aa 	beq.w	80133ac <_svfiprintf_r+0x1c8>
 8013258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801325a:	445a      	add	r2, fp
 801325c:	9209      	str	r2, [sp, #36]	; 0x24
 801325e:	f89a 3000 	ldrb.w	r3, [sl]
 8013262:	2b00      	cmp	r3, #0
 8013264:	f000 80a2 	beq.w	80133ac <_svfiprintf_r+0x1c8>
 8013268:	2300      	movs	r3, #0
 801326a:	f04f 32ff 	mov.w	r2, #4294967295
 801326e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013272:	f10a 0a01 	add.w	sl, sl, #1
 8013276:	9304      	str	r3, [sp, #16]
 8013278:	9307      	str	r3, [sp, #28]
 801327a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801327e:	931a      	str	r3, [sp, #104]	; 0x68
 8013280:	4654      	mov	r4, sl
 8013282:	2205      	movs	r2, #5
 8013284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013288:	4851      	ldr	r0, [pc, #324]	; (80133d0 <_svfiprintf_r+0x1ec>)
 801328a:	f7ec ffb1 	bl	80001f0 <memchr>
 801328e:	9a04      	ldr	r2, [sp, #16]
 8013290:	b9d8      	cbnz	r0, 80132ca <_svfiprintf_r+0xe6>
 8013292:	06d0      	lsls	r0, r2, #27
 8013294:	bf44      	itt	mi
 8013296:	2320      	movmi	r3, #32
 8013298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801329c:	0711      	lsls	r1, r2, #28
 801329e:	bf44      	itt	mi
 80132a0:	232b      	movmi	r3, #43	; 0x2b
 80132a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132a6:	f89a 3000 	ldrb.w	r3, [sl]
 80132aa:	2b2a      	cmp	r3, #42	; 0x2a
 80132ac:	d015      	beq.n	80132da <_svfiprintf_r+0xf6>
 80132ae:	9a07      	ldr	r2, [sp, #28]
 80132b0:	4654      	mov	r4, sl
 80132b2:	2000      	movs	r0, #0
 80132b4:	f04f 0c0a 	mov.w	ip, #10
 80132b8:	4621      	mov	r1, r4
 80132ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132be:	3b30      	subs	r3, #48	; 0x30
 80132c0:	2b09      	cmp	r3, #9
 80132c2:	d94e      	bls.n	8013362 <_svfiprintf_r+0x17e>
 80132c4:	b1b0      	cbz	r0, 80132f4 <_svfiprintf_r+0x110>
 80132c6:	9207      	str	r2, [sp, #28]
 80132c8:	e014      	b.n	80132f4 <_svfiprintf_r+0x110>
 80132ca:	eba0 0308 	sub.w	r3, r0, r8
 80132ce:	fa09 f303 	lsl.w	r3, r9, r3
 80132d2:	4313      	orrs	r3, r2
 80132d4:	9304      	str	r3, [sp, #16]
 80132d6:	46a2      	mov	sl, r4
 80132d8:	e7d2      	b.n	8013280 <_svfiprintf_r+0x9c>
 80132da:	9b03      	ldr	r3, [sp, #12]
 80132dc:	1d19      	adds	r1, r3, #4
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	9103      	str	r1, [sp, #12]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	bfbb      	ittet	lt
 80132e6:	425b      	neglt	r3, r3
 80132e8:	f042 0202 	orrlt.w	r2, r2, #2
 80132ec:	9307      	strge	r3, [sp, #28]
 80132ee:	9307      	strlt	r3, [sp, #28]
 80132f0:	bfb8      	it	lt
 80132f2:	9204      	strlt	r2, [sp, #16]
 80132f4:	7823      	ldrb	r3, [r4, #0]
 80132f6:	2b2e      	cmp	r3, #46	; 0x2e
 80132f8:	d10c      	bne.n	8013314 <_svfiprintf_r+0x130>
 80132fa:	7863      	ldrb	r3, [r4, #1]
 80132fc:	2b2a      	cmp	r3, #42	; 0x2a
 80132fe:	d135      	bne.n	801336c <_svfiprintf_r+0x188>
 8013300:	9b03      	ldr	r3, [sp, #12]
 8013302:	1d1a      	adds	r2, r3, #4
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	9203      	str	r2, [sp, #12]
 8013308:	2b00      	cmp	r3, #0
 801330a:	bfb8      	it	lt
 801330c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013310:	3402      	adds	r4, #2
 8013312:	9305      	str	r3, [sp, #20]
 8013314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80133e0 <_svfiprintf_r+0x1fc>
 8013318:	7821      	ldrb	r1, [r4, #0]
 801331a:	2203      	movs	r2, #3
 801331c:	4650      	mov	r0, sl
 801331e:	f7ec ff67 	bl	80001f0 <memchr>
 8013322:	b140      	cbz	r0, 8013336 <_svfiprintf_r+0x152>
 8013324:	2340      	movs	r3, #64	; 0x40
 8013326:	eba0 000a 	sub.w	r0, r0, sl
 801332a:	fa03 f000 	lsl.w	r0, r3, r0
 801332e:	9b04      	ldr	r3, [sp, #16]
 8013330:	4303      	orrs	r3, r0
 8013332:	3401      	adds	r4, #1
 8013334:	9304      	str	r3, [sp, #16]
 8013336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801333a:	4826      	ldr	r0, [pc, #152]	; (80133d4 <_svfiprintf_r+0x1f0>)
 801333c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013340:	2206      	movs	r2, #6
 8013342:	f7ec ff55 	bl	80001f0 <memchr>
 8013346:	2800      	cmp	r0, #0
 8013348:	d038      	beq.n	80133bc <_svfiprintf_r+0x1d8>
 801334a:	4b23      	ldr	r3, [pc, #140]	; (80133d8 <_svfiprintf_r+0x1f4>)
 801334c:	bb1b      	cbnz	r3, 8013396 <_svfiprintf_r+0x1b2>
 801334e:	9b03      	ldr	r3, [sp, #12]
 8013350:	3307      	adds	r3, #7
 8013352:	f023 0307 	bic.w	r3, r3, #7
 8013356:	3308      	adds	r3, #8
 8013358:	9303      	str	r3, [sp, #12]
 801335a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801335c:	4433      	add	r3, r6
 801335e:	9309      	str	r3, [sp, #36]	; 0x24
 8013360:	e767      	b.n	8013232 <_svfiprintf_r+0x4e>
 8013362:	fb0c 3202 	mla	r2, ip, r2, r3
 8013366:	460c      	mov	r4, r1
 8013368:	2001      	movs	r0, #1
 801336a:	e7a5      	b.n	80132b8 <_svfiprintf_r+0xd4>
 801336c:	2300      	movs	r3, #0
 801336e:	3401      	adds	r4, #1
 8013370:	9305      	str	r3, [sp, #20]
 8013372:	4619      	mov	r1, r3
 8013374:	f04f 0c0a 	mov.w	ip, #10
 8013378:	4620      	mov	r0, r4
 801337a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801337e:	3a30      	subs	r2, #48	; 0x30
 8013380:	2a09      	cmp	r2, #9
 8013382:	d903      	bls.n	801338c <_svfiprintf_r+0x1a8>
 8013384:	2b00      	cmp	r3, #0
 8013386:	d0c5      	beq.n	8013314 <_svfiprintf_r+0x130>
 8013388:	9105      	str	r1, [sp, #20]
 801338a:	e7c3      	b.n	8013314 <_svfiprintf_r+0x130>
 801338c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013390:	4604      	mov	r4, r0
 8013392:	2301      	movs	r3, #1
 8013394:	e7f0      	b.n	8013378 <_svfiprintf_r+0x194>
 8013396:	ab03      	add	r3, sp, #12
 8013398:	9300      	str	r3, [sp, #0]
 801339a:	462a      	mov	r2, r5
 801339c:	4b0f      	ldr	r3, [pc, #60]	; (80133dc <_svfiprintf_r+0x1f8>)
 801339e:	a904      	add	r1, sp, #16
 80133a0:	4638      	mov	r0, r7
 80133a2:	f7fd fd11 	bl	8010dc8 <_printf_float>
 80133a6:	1c42      	adds	r2, r0, #1
 80133a8:	4606      	mov	r6, r0
 80133aa:	d1d6      	bne.n	801335a <_svfiprintf_r+0x176>
 80133ac:	89ab      	ldrh	r3, [r5, #12]
 80133ae:	065b      	lsls	r3, r3, #25
 80133b0:	f53f af2c 	bmi.w	801320c <_svfiprintf_r+0x28>
 80133b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133b6:	b01d      	add	sp, #116	; 0x74
 80133b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133bc:	ab03      	add	r3, sp, #12
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	462a      	mov	r2, r5
 80133c2:	4b06      	ldr	r3, [pc, #24]	; (80133dc <_svfiprintf_r+0x1f8>)
 80133c4:	a904      	add	r1, sp, #16
 80133c6:	4638      	mov	r0, r7
 80133c8:	f7fd ffa2 	bl	8011310 <_printf_i>
 80133cc:	e7eb      	b.n	80133a6 <_svfiprintf_r+0x1c2>
 80133ce:	bf00      	nop
 80133d0:	08015e3c 	.word	0x08015e3c
 80133d4:	08015e46 	.word	0x08015e46
 80133d8:	08010dc9 	.word	0x08010dc9
 80133dc:	0801312d 	.word	0x0801312d
 80133e0:	08015e42 	.word	0x08015e42

080133e4 <_read_r>:
 80133e4:	b538      	push	{r3, r4, r5, lr}
 80133e6:	4d07      	ldr	r5, [pc, #28]	; (8013404 <_read_r+0x20>)
 80133e8:	4604      	mov	r4, r0
 80133ea:	4608      	mov	r0, r1
 80133ec:	4611      	mov	r1, r2
 80133ee:	2200      	movs	r2, #0
 80133f0:	602a      	str	r2, [r5, #0]
 80133f2:	461a      	mov	r2, r3
 80133f4:	f7f1 fdc6 	bl	8004f84 <_read>
 80133f8:	1c43      	adds	r3, r0, #1
 80133fa:	d102      	bne.n	8013402 <_read_r+0x1e>
 80133fc:	682b      	ldr	r3, [r5, #0]
 80133fe:	b103      	cbz	r3, 8013402 <_read_r+0x1e>
 8013400:	6023      	str	r3, [r4, #0]
 8013402:	bd38      	pop	{r3, r4, r5, pc}
 8013404:	20006df8 	.word	0x20006df8

08013408 <__assert_func>:
 8013408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801340a:	4614      	mov	r4, r2
 801340c:	461a      	mov	r2, r3
 801340e:	4b09      	ldr	r3, [pc, #36]	; (8013434 <__assert_func+0x2c>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4605      	mov	r5, r0
 8013414:	68d8      	ldr	r0, [r3, #12]
 8013416:	b14c      	cbz	r4, 801342c <__assert_func+0x24>
 8013418:	4b07      	ldr	r3, [pc, #28]	; (8013438 <__assert_func+0x30>)
 801341a:	9100      	str	r1, [sp, #0]
 801341c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013420:	4906      	ldr	r1, [pc, #24]	; (801343c <__assert_func+0x34>)
 8013422:	462b      	mov	r3, r5
 8013424:	f000 f80e 	bl	8013444 <fiprintf>
 8013428:	f000 fa01 	bl	801382e <abort>
 801342c:	4b04      	ldr	r3, [pc, #16]	; (8013440 <__assert_func+0x38>)
 801342e:	461c      	mov	r4, r3
 8013430:	e7f3      	b.n	801341a <__assert_func+0x12>
 8013432:	bf00      	nop
 8013434:	200001e8 	.word	0x200001e8
 8013438:	08015e4d 	.word	0x08015e4d
 801343c:	08015e5a 	.word	0x08015e5a
 8013440:	08015e88 	.word	0x08015e88

08013444 <fiprintf>:
 8013444:	b40e      	push	{r1, r2, r3}
 8013446:	b503      	push	{r0, r1, lr}
 8013448:	4601      	mov	r1, r0
 801344a:	ab03      	add	r3, sp, #12
 801344c:	4805      	ldr	r0, [pc, #20]	; (8013464 <fiprintf+0x20>)
 801344e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013452:	6800      	ldr	r0, [r0, #0]
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f000 f8ad 	bl	80135b4 <_vfiprintf_r>
 801345a:	b002      	add	sp, #8
 801345c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013460:	b003      	add	sp, #12
 8013462:	4770      	bx	lr
 8013464:	200001e8 	.word	0x200001e8

08013468 <_fstat_r>:
 8013468:	b538      	push	{r3, r4, r5, lr}
 801346a:	4d07      	ldr	r5, [pc, #28]	; (8013488 <_fstat_r+0x20>)
 801346c:	2300      	movs	r3, #0
 801346e:	4604      	mov	r4, r0
 8013470:	4608      	mov	r0, r1
 8013472:	4611      	mov	r1, r2
 8013474:	602b      	str	r3, [r5, #0]
 8013476:	f7f1 fdca 	bl	800500e <_fstat>
 801347a:	1c43      	adds	r3, r0, #1
 801347c:	d102      	bne.n	8013484 <_fstat_r+0x1c>
 801347e:	682b      	ldr	r3, [r5, #0]
 8013480:	b103      	cbz	r3, 8013484 <_fstat_r+0x1c>
 8013482:	6023      	str	r3, [r4, #0]
 8013484:	bd38      	pop	{r3, r4, r5, pc}
 8013486:	bf00      	nop
 8013488:	20006df8 	.word	0x20006df8

0801348c <_isatty_r>:
 801348c:	b538      	push	{r3, r4, r5, lr}
 801348e:	4d06      	ldr	r5, [pc, #24]	; (80134a8 <_isatty_r+0x1c>)
 8013490:	2300      	movs	r3, #0
 8013492:	4604      	mov	r4, r0
 8013494:	4608      	mov	r0, r1
 8013496:	602b      	str	r3, [r5, #0]
 8013498:	f7f1 fdc9 	bl	800502e <_isatty>
 801349c:	1c43      	adds	r3, r0, #1
 801349e:	d102      	bne.n	80134a6 <_isatty_r+0x1a>
 80134a0:	682b      	ldr	r3, [r5, #0]
 80134a2:	b103      	cbz	r3, 80134a6 <_isatty_r+0x1a>
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	20006df8 	.word	0x20006df8

080134ac <__ascii_mbtowc>:
 80134ac:	b082      	sub	sp, #8
 80134ae:	b901      	cbnz	r1, 80134b2 <__ascii_mbtowc+0x6>
 80134b0:	a901      	add	r1, sp, #4
 80134b2:	b142      	cbz	r2, 80134c6 <__ascii_mbtowc+0x1a>
 80134b4:	b14b      	cbz	r3, 80134ca <__ascii_mbtowc+0x1e>
 80134b6:	7813      	ldrb	r3, [r2, #0]
 80134b8:	600b      	str	r3, [r1, #0]
 80134ba:	7812      	ldrb	r2, [r2, #0]
 80134bc:	1e10      	subs	r0, r2, #0
 80134be:	bf18      	it	ne
 80134c0:	2001      	movne	r0, #1
 80134c2:	b002      	add	sp, #8
 80134c4:	4770      	bx	lr
 80134c6:	4610      	mov	r0, r2
 80134c8:	e7fb      	b.n	80134c2 <__ascii_mbtowc+0x16>
 80134ca:	f06f 0001 	mvn.w	r0, #1
 80134ce:	e7f8      	b.n	80134c2 <__ascii_mbtowc+0x16>

080134d0 <memmove>:
 80134d0:	4288      	cmp	r0, r1
 80134d2:	b510      	push	{r4, lr}
 80134d4:	eb01 0402 	add.w	r4, r1, r2
 80134d8:	d902      	bls.n	80134e0 <memmove+0x10>
 80134da:	4284      	cmp	r4, r0
 80134dc:	4623      	mov	r3, r4
 80134de:	d807      	bhi.n	80134f0 <memmove+0x20>
 80134e0:	1e43      	subs	r3, r0, #1
 80134e2:	42a1      	cmp	r1, r4
 80134e4:	d008      	beq.n	80134f8 <memmove+0x28>
 80134e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134ee:	e7f8      	b.n	80134e2 <memmove+0x12>
 80134f0:	4402      	add	r2, r0
 80134f2:	4601      	mov	r1, r0
 80134f4:	428a      	cmp	r2, r1
 80134f6:	d100      	bne.n	80134fa <memmove+0x2a>
 80134f8:	bd10      	pop	{r4, pc}
 80134fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013502:	e7f7      	b.n	80134f4 <memmove+0x24>

08013504 <_realloc_r>:
 8013504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013508:	4680      	mov	r8, r0
 801350a:	4614      	mov	r4, r2
 801350c:	460e      	mov	r6, r1
 801350e:	b921      	cbnz	r1, 801351a <_realloc_r+0x16>
 8013510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013514:	4611      	mov	r1, r2
 8013516:	f7fd bb43 	b.w	8010ba0 <_malloc_r>
 801351a:	b92a      	cbnz	r2, 8013528 <_realloc_r+0x24>
 801351c:	f7ff fdba 	bl	8013094 <_free_r>
 8013520:	4625      	mov	r5, r4
 8013522:	4628      	mov	r0, r5
 8013524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013528:	f000 f988 	bl	801383c <_malloc_usable_size_r>
 801352c:	4284      	cmp	r4, r0
 801352e:	4607      	mov	r7, r0
 8013530:	d802      	bhi.n	8013538 <_realloc_r+0x34>
 8013532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013536:	d812      	bhi.n	801355e <_realloc_r+0x5a>
 8013538:	4621      	mov	r1, r4
 801353a:	4640      	mov	r0, r8
 801353c:	f7fd fb30 	bl	8010ba0 <_malloc_r>
 8013540:	4605      	mov	r5, r0
 8013542:	2800      	cmp	r0, #0
 8013544:	d0ed      	beq.n	8013522 <_realloc_r+0x1e>
 8013546:	42bc      	cmp	r4, r7
 8013548:	4622      	mov	r2, r4
 801354a:	4631      	mov	r1, r6
 801354c:	bf28      	it	cs
 801354e:	463a      	movcs	r2, r7
 8013550:	f7fd faef 	bl	8010b32 <memcpy>
 8013554:	4631      	mov	r1, r6
 8013556:	4640      	mov	r0, r8
 8013558:	f7ff fd9c 	bl	8013094 <_free_r>
 801355c:	e7e1      	b.n	8013522 <_realloc_r+0x1e>
 801355e:	4635      	mov	r5, r6
 8013560:	e7df      	b.n	8013522 <_realloc_r+0x1e>

08013562 <__sfputc_r>:
 8013562:	6893      	ldr	r3, [r2, #8]
 8013564:	3b01      	subs	r3, #1
 8013566:	2b00      	cmp	r3, #0
 8013568:	b410      	push	{r4}
 801356a:	6093      	str	r3, [r2, #8]
 801356c:	da08      	bge.n	8013580 <__sfputc_r+0x1e>
 801356e:	6994      	ldr	r4, [r2, #24]
 8013570:	42a3      	cmp	r3, r4
 8013572:	db01      	blt.n	8013578 <__sfputc_r+0x16>
 8013574:	290a      	cmp	r1, #10
 8013576:	d103      	bne.n	8013580 <__sfputc_r+0x1e>
 8013578:	f85d 4b04 	ldr.w	r4, [sp], #4
 801357c:	f7fe b942 	b.w	8011804 <__swbuf_r>
 8013580:	6813      	ldr	r3, [r2, #0]
 8013582:	1c58      	adds	r0, r3, #1
 8013584:	6010      	str	r0, [r2, #0]
 8013586:	7019      	strb	r1, [r3, #0]
 8013588:	4608      	mov	r0, r1
 801358a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801358e:	4770      	bx	lr

08013590 <__sfputs_r>:
 8013590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013592:	4606      	mov	r6, r0
 8013594:	460f      	mov	r7, r1
 8013596:	4614      	mov	r4, r2
 8013598:	18d5      	adds	r5, r2, r3
 801359a:	42ac      	cmp	r4, r5
 801359c:	d101      	bne.n	80135a2 <__sfputs_r+0x12>
 801359e:	2000      	movs	r0, #0
 80135a0:	e007      	b.n	80135b2 <__sfputs_r+0x22>
 80135a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135a6:	463a      	mov	r2, r7
 80135a8:	4630      	mov	r0, r6
 80135aa:	f7ff ffda 	bl	8013562 <__sfputc_r>
 80135ae:	1c43      	adds	r3, r0, #1
 80135b0:	d1f3      	bne.n	801359a <__sfputs_r+0xa>
 80135b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080135b4 <_vfiprintf_r>:
 80135b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b8:	460d      	mov	r5, r1
 80135ba:	b09d      	sub	sp, #116	; 0x74
 80135bc:	4614      	mov	r4, r2
 80135be:	4698      	mov	r8, r3
 80135c0:	4606      	mov	r6, r0
 80135c2:	b118      	cbz	r0, 80135cc <_vfiprintf_r+0x18>
 80135c4:	6983      	ldr	r3, [r0, #24]
 80135c6:	b90b      	cbnz	r3, 80135cc <_vfiprintf_r+0x18>
 80135c8:	f7fd f9ee 	bl	80109a8 <__sinit>
 80135cc:	4b89      	ldr	r3, [pc, #548]	; (80137f4 <_vfiprintf_r+0x240>)
 80135ce:	429d      	cmp	r5, r3
 80135d0:	d11b      	bne.n	801360a <_vfiprintf_r+0x56>
 80135d2:	6875      	ldr	r5, [r6, #4]
 80135d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135d6:	07d9      	lsls	r1, r3, #31
 80135d8:	d405      	bmi.n	80135e6 <_vfiprintf_r+0x32>
 80135da:	89ab      	ldrh	r3, [r5, #12]
 80135dc:	059a      	lsls	r2, r3, #22
 80135de:	d402      	bmi.n	80135e6 <_vfiprintf_r+0x32>
 80135e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135e2:	f7fd faa4 	bl	8010b2e <__retarget_lock_acquire_recursive>
 80135e6:	89ab      	ldrh	r3, [r5, #12]
 80135e8:	071b      	lsls	r3, r3, #28
 80135ea:	d501      	bpl.n	80135f0 <_vfiprintf_r+0x3c>
 80135ec:	692b      	ldr	r3, [r5, #16]
 80135ee:	b9eb      	cbnz	r3, 801362c <_vfiprintf_r+0x78>
 80135f0:	4629      	mov	r1, r5
 80135f2:	4630      	mov	r0, r6
 80135f4:	f7fe f96a 	bl	80118cc <__swsetup_r>
 80135f8:	b1c0      	cbz	r0, 801362c <_vfiprintf_r+0x78>
 80135fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135fc:	07dc      	lsls	r4, r3, #31
 80135fe:	d50e      	bpl.n	801361e <_vfiprintf_r+0x6a>
 8013600:	f04f 30ff 	mov.w	r0, #4294967295
 8013604:	b01d      	add	sp, #116	; 0x74
 8013606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360a:	4b7b      	ldr	r3, [pc, #492]	; (80137f8 <_vfiprintf_r+0x244>)
 801360c:	429d      	cmp	r5, r3
 801360e:	d101      	bne.n	8013614 <_vfiprintf_r+0x60>
 8013610:	68b5      	ldr	r5, [r6, #8]
 8013612:	e7df      	b.n	80135d4 <_vfiprintf_r+0x20>
 8013614:	4b79      	ldr	r3, [pc, #484]	; (80137fc <_vfiprintf_r+0x248>)
 8013616:	429d      	cmp	r5, r3
 8013618:	bf08      	it	eq
 801361a:	68f5      	ldreq	r5, [r6, #12]
 801361c:	e7da      	b.n	80135d4 <_vfiprintf_r+0x20>
 801361e:	89ab      	ldrh	r3, [r5, #12]
 8013620:	0598      	lsls	r0, r3, #22
 8013622:	d4ed      	bmi.n	8013600 <_vfiprintf_r+0x4c>
 8013624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013626:	f7fd fa83 	bl	8010b30 <__retarget_lock_release_recursive>
 801362a:	e7e9      	b.n	8013600 <_vfiprintf_r+0x4c>
 801362c:	2300      	movs	r3, #0
 801362e:	9309      	str	r3, [sp, #36]	; 0x24
 8013630:	2320      	movs	r3, #32
 8013632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013636:	f8cd 800c 	str.w	r8, [sp, #12]
 801363a:	2330      	movs	r3, #48	; 0x30
 801363c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013800 <_vfiprintf_r+0x24c>
 8013640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013644:	f04f 0901 	mov.w	r9, #1
 8013648:	4623      	mov	r3, r4
 801364a:	469a      	mov	sl, r3
 801364c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013650:	b10a      	cbz	r2, 8013656 <_vfiprintf_r+0xa2>
 8013652:	2a25      	cmp	r2, #37	; 0x25
 8013654:	d1f9      	bne.n	801364a <_vfiprintf_r+0x96>
 8013656:	ebba 0b04 	subs.w	fp, sl, r4
 801365a:	d00b      	beq.n	8013674 <_vfiprintf_r+0xc0>
 801365c:	465b      	mov	r3, fp
 801365e:	4622      	mov	r2, r4
 8013660:	4629      	mov	r1, r5
 8013662:	4630      	mov	r0, r6
 8013664:	f7ff ff94 	bl	8013590 <__sfputs_r>
 8013668:	3001      	adds	r0, #1
 801366a:	f000 80aa 	beq.w	80137c2 <_vfiprintf_r+0x20e>
 801366e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013670:	445a      	add	r2, fp
 8013672:	9209      	str	r2, [sp, #36]	; 0x24
 8013674:	f89a 3000 	ldrb.w	r3, [sl]
 8013678:	2b00      	cmp	r3, #0
 801367a:	f000 80a2 	beq.w	80137c2 <_vfiprintf_r+0x20e>
 801367e:	2300      	movs	r3, #0
 8013680:	f04f 32ff 	mov.w	r2, #4294967295
 8013684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013688:	f10a 0a01 	add.w	sl, sl, #1
 801368c:	9304      	str	r3, [sp, #16]
 801368e:	9307      	str	r3, [sp, #28]
 8013690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013694:	931a      	str	r3, [sp, #104]	; 0x68
 8013696:	4654      	mov	r4, sl
 8013698:	2205      	movs	r2, #5
 801369a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801369e:	4858      	ldr	r0, [pc, #352]	; (8013800 <_vfiprintf_r+0x24c>)
 80136a0:	f7ec fda6 	bl	80001f0 <memchr>
 80136a4:	9a04      	ldr	r2, [sp, #16]
 80136a6:	b9d8      	cbnz	r0, 80136e0 <_vfiprintf_r+0x12c>
 80136a8:	06d1      	lsls	r1, r2, #27
 80136aa:	bf44      	itt	mi
 80136ac:	2320      	movmi	r3, #32
 80136ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136b2:	0713      	lsls	r3, r2, #28
 80136b4:	bf44      	itt	mi
 80136b6:	232b      	movmi	r3, #43	; 0x2b
 80136b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136bc:	f89a 3000 	ldrb.w	r3, [sl]
 80136c0:	2b2a      	cmp	r3, #42	; 0x2a
 80136c2:	d015      	beq.n	80136f0 <_vfiprintf_r+0x13c>
 80136c4:	9a07      	ldr	r2, [sp, #28]
 80136c6:	4654      	mov	r4, sl
 80136c8:	2000      	movs	r0, #0
 80136ca:	f04f 0c0a 	mov.w	ip, #10
 80136ce:	4621      	mov	r1, r4
 80136d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136d4:	3b30      	subs	r3, #48	; 0x30
 80136d6:	2b09      	cmp	r3, #9
 80136d8:	d94e      	bls.n	8013778 <_vfiprintf_r+0x1c4>
 80136da:	b1b0      	cbz	r0, 801370a <_vfiprintf_r+0x156>
 80136dc:	9207      	str	r2, [sp, #28]
 80136de:	e014      	b.n	801370a <_vfiprintf_r+0x156>
 80136e0:	eba0 0308 	sub.w	r3, r0, r8
 80136e4:	fa09 f303 	lsl.w	r3, r9, r3
 80136e8:	4313      	orrs	r3, r2
 80136ea:	9304      	str	r3, [sp, #16]
 80136ec:	46a2      	mov	sl, r4
 80136ee:	e7d2      	b.n	8013696 <_vfiprintf_r+0xe2>
 80136f0:	9b03      	ldr	r3, [sp, #12]
 80136f2:	1d19      	adds	r1, r3, #4
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	9103      	str	r1, [sp, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	bfbb      	ittet	lt
 80136fc:	425b      	neglt	r3, r3
 80136fe:	f042 0202 	orrlt.w	r2, r2, #2
 8013702:	9307      	strge	r3, [sp, #28]
 8013704:	9307      	strlt	r3, [sp, #28]
 8013706:	bfb8      	it	lt
 8013708:	9204      	strlt	r2, [sp, #16]
 801370a:	7823      	ldrb	r3, [r4, #0]
 801370c:	2b2e      	cmp	r3, #46	; 0x2e
 801370e:	d10c      	bne.n	801372a <_vfiprintf_r+0x176>
 8013710:	7863      	ldrb	r3, [r4, #1]
 8013712:	2b2a      	cmp	r3, #42	; 0x2a
 8013714:	d135      	bne.n	8013782 <_vfiprintf_r+0x1ce>
 8013716:	9b03      	ldr	r3, [sp, #12]
 8013718:	1d1a      	adds	r2, r3, #4
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	9203      	str	r2, [sp, #12]
 801371e:	2b00      	cmp	r3, #0
 8013720:	bfb8      	it	lt
 8013722:	f04f 33ff 	movlt.w	r3, #4294967295
 8013726:	3402      	adds	r4, #2
 8013728:	9305      	str	r3, [sp, #20]
 801372a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013810 <_vfiprintf_r+0x25c>
 801372e:	7821      	ldrb	r1, [r4, #0]
 8013730:	2203      	movs	r2, #3
 8013732:	4650      	mov	r0, sl
 8013734:	f7ec fd5c 	bl	80001f0 <memchr>
 8013738:	b140      	cbz	r0, 801374c <_vfiprintf_r+0x198>
 801373a:	2340      	movs	r3, #64	; 0x40
 801373c:	eba0 000a 	sub.w	r0, r0, sl
 8013740:	fa03 f000 	lsl.w	r0, r3, r0
 8013744:	9b04      	ldr	r3, [sp, #16]
 8013746:	4303      	orrs	r3, r0
 8013748:	3401      	adds	r4, #1
 801374a:	9304      	str	r3, [sp, #16]
 801374c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013750:	482c      	ldr	r0, [pc, #176]	; (8013804 <_vfiprintf_r+0x250>)
 8013752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013756:	2206      	movs	r2, #6
 8013758:	f7ec fd4a 	bl	80001f0 <memchr>
 801375c:	2800      	cmp	r0, #0
 801375e:	d03f      	beq.n	80137e0 <_vfiprintf_r+0x22c>
 8013760:	4b29      	ldr	r3, [pc, #164]	; (8013808 <_vfiprintf_r+0x254>)
 8013762:	bb1b      	cbnz	r3, 80137ac <_vfiprintf_r+0x1f8>
 8013764:	9b03      	ldr	r3, [sp, #12]
 8013766:	3307      	adds	r3, #7
 8013768:	f023 0307 	bic.w	r3, r3, #7
 801376c:	3308      	adds	r3, #8
 801376e:	9303      	str	r3, [sp, #12]
 8013770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013772:	443b      	add	r3, r7
 8013774:	9309      	str	r3, [sp, #36]	; 0x24
 8013776:	e767      	b.n	8013648 <_vfiprintf_r+0x94>
 8013778:	fb0c 3202 	mla	r2, ip, r2, r3
 801377c:	460c      	mov	r4, r1
 801377e:	2001      	movs	r0, #1
 8013780:	e7a5      	b.n	80136ce <_vfiprintf_r+0x11a>
 8013782:	2300      	movs	r3, #0
 8013784:	3401      	adds	r4, #1
 8013786:	9305      	str	r3, [sp, #20]
 8013788:	4619      	mov	r1, r3
 801378a:	f04f 0c0a 	mov.w	ip, #10
 801378e:	4620      	mov	r0, r4
 8013790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013794:	3a30      	subs	r2, #48	; 0x30
 8013796:	2a09      	cmp	r2, #9
 8013798:	d903      	bls.n	80137a2 <_vfiprintf_r+0x1ee>
 801379a:	2b00      	cmp	r3, #0
 801379c:	d0c5      	beq.n	801372a <_vfiprintf_r+0x176>
 801379e:	9105      	str	r1, [sp, #20]
 80137a0:	e7c3      	b.n	801372a <_vfiprintf_r+0x176>
 80137a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80137a6:	4604      	mov	r4, r0
 80137a8:	2301      	movs	r3, #1
 80137aa:	e7f0      	b.n	801378e <_vfiprintf_r+0x1da>
 80137ac:	ab03      	add	r3, sp, #12
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	462a      	mov	r2, r5
 80137b2:	4b16      	ldr	r3, [pc, #88]	; (801380c <_vfiprintf_r+0x258>)
 80137b4:	a904      	add	r1, sp, #16
 80137b6:	4630      	mov	r0, r6
 80137b8:	f7fd fb06 	bl	8010dc8 <_printf_float>
 80137bc:	4607      	mov	r7, r0
 80137be:	1c78      	adds	r0, r7, #1
 80137c0:	d1d6      	bne.n	8013770 <_vfiprintf_r+0x1bc>
 80137c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137c4:	07d9      	lsls	r1, r3, #31
 80137c6:	d405      	bmi.n	80137d4 <_vfiprintf_r+0x220>
 80137c8:	89ab      	ldrh	r3, [r5, #12]
 80137ca:	059a      	lsls	r2, r3, #22
 80137cc:	d402      	bmi.n	80137d4 <_vfiprintf_r+0x220>
 80137ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137d0:	f7fd f9ae 	bl	8010b30 <__retarget_lock_release_recursive>
 80137d4:	89ab      	ldrh	r3, [r5, #12]
 80137d6:	065b      	lsls	r3, r3, #25
 80137d8:	f53f af12 	bmi.w	8013600 <_vfiprintf_r+0x4c>
 80137dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137de:	e711      	b.n	8013604 <_vfiprintf_r+0x50>
 80137e0:	ab03      	add	r3, sp, #12
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	462a      	mov	r2, r5
 80137e6:	4b09      	ldr	r3, [pc, #36]	; (801380c <_vfiprintf_r+0x258>)
 80137e8:	a904      	add	r1, sp, #16
 80137ea:	4630      	mov	r0, r6
 80137ec:	f7fd fd90 	bl	8011310 <_printf_i>
 80137f0:	e7e4      	b.n	80137bc <_vfiprintf_r+0x208>
 80137f2:	bf00      	nop
 80137f4:	08015bdc 	.word	0x08015bdc
 80137f8:	08015bfc 	.word	0x08015bfc
 80137fc:	08015bbc 	.word	0x08015bbc
 8013800:	08015e3c 	.word	0x08015e3c
 8013804:	08015e46 	.word	0x08015e46
 8013808:	08010dc9 	.word	0x08010dc9
 801380c:	08013591 	.word	0x08013591
 8013810:	08015e42 	.word	0x08015e42

08013814 <__ascii_wctomb>:
 8013814:	b149      	cbz	r1, 801382a <__ascii_wctomb+0x16>
 8013816:	2aff      	cmp	r2, #255	; 0xff
 8013818:	bf85      	ittet	hi
 801381a:	238a      	movhi	r3, #138	; 0x8a
 801381c:	6003      	strhi	r3, [r0, #0]
 801381e:	700a      	strbls	r2, [r1, #0]
 8013820:	f04f 30ff 	movhi.w	r0, #4294967295
 8013824:	bf98      	it	ls
 8013826:	2001      	movls	r0, #1
 8013828:	4770      	bx	lr
 801382a:	4608      	mov	r0, r1
 801382c:	4770      	bx	lr

0801382e <abort>:
 801382e:	b508      	push	{r3, lr}
 8013830:	2006      	movs	r0, #6
 8013832:	f000 f833 	bl	801389c <raise>
 8013836:	2001      	movs	r0, #1
 8013838:	f7f1 fb9a 	bl	8004f70 <_exit>

0801383c <_malloc_usable_size_r>:
 801383c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013840:	1f18      	subs	r0, r3, #4
 8013842:	2b00      	cmp	r3, #0
 8013844:	bfbc      	itt	lt
 8013846:	580b      	ldrlt	r3, [r1, r0]
 8013848:	18c0      	addlt	r0, r0, r3
 801384a:	4770      	bx	lr

0801384c <_raise_r>:
 801384c:	291f      	cmp	r1, #31
 801384e:	b538      	push	{r3, r4, r5, lr}
 8013850:	4604      	mov	r4, r0
 8013852:	460d      	mov	r5, r1
 8013854:	d904      	bls.n	8013860 <_raise_r+0x14>
 8013856:	2316      	movs	r3, #22
 8013858:	6003      	str	r3, [r0, #0]
 801385a:	f04f 30ff 	mov.w	r0, #4294967295
 801385e:	bd38      	pop	{r3, r4, r5, pc}
 8013860:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013862:	b112      	cbz	r2, 801386a <_raise_r+0x1e>
 8013864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013868:	b94b      	cbnz	r3, 801387e <_raise_r+0x32>
 801386a:	4620      	mov	r0, r4
 801386c:	f000 f830 	bl	80138d0 <_getpid_r>
 8013870:	462a      	mov	r2, r5
 8013872:	4601      	mov	r1, r0
 8013874:	4620      	mov	r0, r4
 8013876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801387a:	f000 b817 	b.w	80138ac <_kill_r>
 801387e:	2b01      	cmp	r3, #1
 8013880:	d00a      	beq.n	8013898 <_raise_r+0x4c>
 8013882:	1c59      	adds	r1, r3, #1
 8013884:	d103      	bne.n	801388e <_raise_r+0x42>
 8013886:	2316      	movs	r3, #22
 8013888:	6003      	str	r3, [r0, #0]
 801388a:	2001      	movs	r0, #1
 801388c:	e7e7      	b.n	801385e <_raise_r+0x12>
 801388e:	2400      	movs	r4, #0
 8013890:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013894:	4628      	mov	r0, r5
 8013896:	4798      	blx	r3
 8013898:	2000      	movs	r0, #0
 801389a:	e7e0      	b.n	801385e <_raise_r+0x12>

0801389c <raise>:
 801389c:	4b02      	ldr	r3, [pc, #8]	; (80138a8 <raise+0xc>)
 801389e:	4601      	mov	r1, r0
 80138a0:	6818      	ldr	r0, [r3, #0]
 80138a2:	f7ff bfd3 	b.w	801384c <_raise_r>
 80138a6:	bf00      	nop
 80138a8:	200001e8 	.word	0x200001e8

080138ac <_kill_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	4d07      	ldr	r5, [pc, #28]	; (80138cc <_kill_r+0x20>)
 80138b0:	2300      	movs	r3, #0
 80138b2:	4604      	mov	r4, r0
 80138b4:	4608      	mov	r0, r1
 80138b6:	4611      	mov	r1, r2
 80138b8:	602b      	str	r3, [r5, #0]
 80138ba:	f7f1 fb49 	bl	8004f50 <_kill>
 80138be:	1c43      	adds	r3, r0, #1
 80138c0:	d102      	bne.n	80138c8 <_kill_r+0x1c>
 80138c2:	682b      	ldr	r3, [r5, #0]
 80138c4:	b103      	cbz	r3, 80138c8 <_kill_r+0x1c>
 80138c6:	6023      	str	r3, [r4, #0]
 80138c8:	bd38      	pop	{r3, r4, r5, pc}
 80138ca:	bf00      	nop
 80138cc:	20006df8 	.word	0x20006df8

080138d0 <_getpid_r>:
 80138d0:	f7f1 bb36 	b.w	8004f40 <_getpid>

080138d4 <asin>:
 80138d4:	b538      	push	{r3, r4, r5, lr}
 80138d6:	ed2d 8b02 	vpush	{d8}
 80138da:	ec55 4b10 	vmov	r4, r5, d0
 80138de:	f000 f8cb 	bl	8013a78 <__ieee754_asin>
 80138e2:	4622      	mov	r2, r4
 80138e4:	462b      	mov	r3, r5
 80138e6:	4620      	mov	r0, r4
 80138e8:	4629      	mov	r1, r5
 80138ea:	eeb0 8a40 	vmov.f32	s16, s0
 80138ee:	eef0 8a60 	vmov.f32	s17, s1
 80138f2:	f7ed f923 	bl	8000b3c <__aeabi_dcmpun>
 80138f6:	b9a8      	cbnz	r0, 8013924 <asin+0x50>
 80138f8:	ec45 4b10 	vmov	d0, r4, r5
 80138fc:	f001 fb4c 	bl	8014f98 <fabs>
 8013900:	4b0c      	ldr	r3, [pc, #48]	; (8013934 <asin+0x60>)
 8013902:	ec51 0b10 	vmov	r0, r1, d0
 8013906:	2200      	movs	r2, #0
 8013908:	f7ed f90e 	bl	8000b28 <__aeabi_dcmpgt>
 801390c:	b150      	cbz	r0, 8013924 <asin+0x50>
 801390e:	f7fc ffed 	bl	80108ec <__errno>
 8013912:	ecbd 8b02 	vpop	{d8}
 8013916:	2321      	movs	r3, #33	; 0x21
 8013918:	6003      	str	r3, [r0, #0]
 801391a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801391e:	4806      	ldr	r0, [pc, #24]	; (8013938 <asin+0x64>)
 8013920:	f001 bb4e 	b.w	8014fc0 <nan>
 8013924:	eeb0 0a48 	vmov.f32	s0, s16
 8013928:	eef0 0a68 	vmov.f32	s1, s17
 801392c:	ecbd 8b02 	vpop	{d8}
 8013930:	bd38      	pop	{r3, r4, r5, pc}
 8013932:	bf00      	nop
 8013934:	3ff00000 	.word	0x3ff00000
 8013938:	08015e88 	.word	0x08015e88

0801393c <atan2>:
 801393c:	f000 bab0 	b.w	8013ea0 <__ieee754_atan2>

08013940 <pow>:
 8013940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013942:	ed2d 8b02 	vpush	{d8}
 8013946:	eeb0 8a40 	vmov.f32	s16, s0
 801394a:	eef0 8a60 	vmov.f32	s17, s1
 801394e:	ec55 4b11 	vmov	r4, r5, d1
 8013952:	f000 fb71 	bl	8014038 <__ieee754_pow>
 8013956:	4622      	mov	r2, r4
 8013958:	462b      	mov	r3, r5
 801395a:	4620      	mov	r0, r4
 801395c:	4629      	mov	r1, r5
 801395e:	ec57 6b10 	vmov	r6, r7, d0
 8013962:	f7ed f8eb 	bl	8000b3c <__aeabi_dcmpun>
 8013966:	2800      	cmp	r0, #0
 8013968:	d13b      	bne.n	80139e2 <pow+0xa2>
 801396a:	ec51 0b18 	vmov	r0, r1, d8
 801396e:	2200      	movs	r2, #0
 8013970:	2300      	movs	r3, #0
 8013972:	f7ed f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8013976:	b1b8      	cbz	r0, 80139a8 <pow+0x68>
 8013978:	2200      	movs	r2, #0
 801397a:	2300      	movs	r3, #0
 801397c:	4620      	mov	r0, r4
 801397e:	4629      	mov	r1, r5
 8013980:	f7ed f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8013984:	2800      	cmp	r0, #0
 8013986:	d146      	bne.n	8013a16 <pow+0xd6>
 8013988:	ec45 4b10 	vmov	d0, r4, r5
 801398c:	f001 fb0d 	bl	8014faa <finite>
 8013990:	b338      	cbz	r0, 80139e2 <pow+0xa2>
 8013992:	2200      	movs	r2, #0
 8013994:	2300      	movs	r3, #0
 8013996:	4620      	mov	r0, r4
 8013998:	4629      	mov	r1, r5
 801399a:	f7ed f8a7 	bl	8000aec <__aeabi_dcmplt>
 801399e:	b300      	cbz	r0, 80139e2 <pow+0xa2>
 80139a0:	f7fc ffa4 	bl	80108ec <__errno>
 80139a4:	2322      	movs	r3, #34	; 0x22
 80139a6:	e01b      	b.n	80139e0 <pow+0xa0>
 80139a8:	ec47 6b10 	vmov	d0, r6, r7
 80139ac:	f001 fafd 	bl	8014faa <finite>
 80139b0:	b9e0      	cbnz	r0, 80139ec <pow+0xac>
 80139b2:	eeb0 0a48 	vmov.f32	s0, s16
 80139b6:	eef0 0a68 	vmov.f32	s1, s17
 80139ba:	f001 faf6 	bl	8014faa <finite>
 80139be:	b1a8      	cbz	r0, 80139ec <pow+0xac>
 80139c0:	ec45 4b10 	vmov	d0, r4, r5
 80139c4:	f001 faf1 	bl	8014faa <finite>
 80139c8:	b180      	cbz	r0, 80139ec <pow+0xac>
 80139ca:	4632      	mov	r2, r6
 80139cc:	463b      	mov	r3, r7
 80139ce:	4630      	mov	r0, r6
 80139d0:	4639      	mov	r1, r7
 80139d2:	f7ed f8b3 	bl	8000b3c <__aeabi_dcmpun>
 80139d6:	2800      	cmp	r0, #0
 80139d8:	d0e2      	beq.n	80139a0 <pow+0x60>
 80139da:	f7fc ff87 	bl	80108ec <__errno>
 80139de:	2321      	movs	r3, #33	; 0x21
 80139e0:	6003      	str	r3, [r0, #0]
 80139e2:	ecbd 8b02 	vpop	{d8}
 80139e6:	ec47 6b10 	vmov	d0, r6, r7
 80139ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139ec:	2200      	movs	r2, #0
 80139ee:	2300      	movs	r3, #0
 80139f0:	4630      	mov	r0, r6
 80139f2:	4639      	mov	r1, r7
 80139f4:	f7ed f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d0f2      	beq.n	80139e2 <pow+0xa2>
 80139fc:	eeb0 0a48 	vmov.f32	s0, s16
 8013a00:	eef0 0a68 	vmov.f32	s1, s17
 8013a04:	f001 fad1 	bl	8014faa <finite>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d0ea      	beq.n	80139e2 <pow+0xa2>
 8013a0c:	ec45 4b10 	vmov	d0, r4, r5
 8013a10:	f001 facb 	bl	8014faa <finite>
 8013a14:	e7c3      	b.n	801399e <pow+0x5e>
 8013a16:	4f01      	ldr	r7, [pc, #4]	; (8013a1c <pow+0xdc>)
 8013a18:	2600      	movs	r6, #0
 8013a1a:	e7e2      	b.n	80139e2 <pow+0xa2>
 8013a1c:	3ff00000 	.word	0x3ff00000

08013a20 <sqrt>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	ed2d 8b02 	vpush	{d8}
 8013a26:	ec55 4b10 	vmov	r4, r5, d0
 8013a2a:	f001 f833 	bl	8014a94 <__ieee754_sqrt>
 8013a2e:	4622      	mov	r2, r4
 8013a30:	462b      	mov	r3, r5
 8013a32:	4620      	mov	r0, r4
 8013a34:	4629      	mov	r1, r5
 8013a36:	eeb0 8a40 	vmov.f32	s16, s0
 8013a3a:	eef0 8a60 	vmov.f32	s17, s1
 8013a3e:	f7ed f87d 	bl	8000b3c <__aeabi_dcmpun>
 8013a42:	b990      	cbnz	r0, 8013a6a <sqrt+0x4a>
 8013a44:	2200      	movs	r2, #0
 8013a46:	2300      	movs	r3, #0
 8013a48:	4620      	mov	r0, r4
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	f7ed f84e 	bl	8000aec <__aeabi_dcmplt>
 8013a50:	b158      	cbz	r0, 8013a6a <sqrt+0x4a>
 8013a52:	f7fc ff4b 	bl	80108ec <__errno>
 8013a56:	2321      	movs	r3, #33	; 0x21
 8013a58:	6003      	str	r3, [r0, #0]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	4610      	mov	r0, r2
 8013a60:	4619      	mov	r1, r3
 8013a62:	f7ec fefb 	bl	800085c <__aeabi_ddiv>
 8013a66:	ec41 0b18 	vmov	d8, r0, r1
 8013a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8013a6e:	eef0 0a68 	vmov.f32	s1, s17
 8013a72:	ecbd 8b02 	vpop	{d8}
 8013a76:	bd38      	pop	{r3, r4, r5, pc}

08013a78 <__ieee754_asin>:
 8013a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	ed2d 8b04 	vpush	{d8-d9}
 8013a80:	ec55 4b10 	vmov	r4, r5, d0
 8013a84:	4bcc      	ldr	r3, [pc, #816]	; (8013db8 <__ieee754_asin+0x340>)
 8013a86:	b083      	sub	sp, #12
 8013a88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013a8c:	4598      	cmp	r8, r3
 8013a8e:	9501      	str	r5, [sp, #4]
 8013a90:	dd35      	ble.n	8013afe <__ieee754_asin+0x86>
 8013a92:	ee10 3a10 	vmov	r3, s0
 8013a96:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8013a9a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8013a9e:	ea58 0303 	orrs.w	r3, r8, r3
 8013aa2:	d117      	bne.n	8013ad4 <__ieee754_asin+0x5c>
 8013aa4:	a3aa      	add	r3, pc, #680	; (adr r3, 8013d50 <__ieee754_asin+0x2d8>)
 8013aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aaa:	ee10 0a10 	vmov	r0, s0
 8013aae:	4629      	mov	r1, r5
 8013ab0:	f7ec fdaa 	bl	8000608 <__aeabi_dmul>
 8013ab4:	a3a8      	add	r3, pc, #672	; (adr r3, 8013d58 <__ieee754_asin+0x2e0>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	4606      	mov	r6, r0
 8013abc:	460f      	mov	r7, r1
 8013abe:	4620      	mov	r0, r4
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	f7ec fda1 	bl	8000608 <__aeabi_dmul>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	460b      	mov	r3, r1
 8013aca:	4630      	mov	r0, r6
 8013acc:	4639      	mov	r1, r7
 8013ace:	f7ec fbe5 	bl	800029c <__adddf3>
 8013ad2:	e00b      	b.n	8013aec <__ieee754_asin+0x74>
 8013ad4:	ee10 2a10 	vmov	r2, s0
 8013ad8:	462b      	mov	r3, r5
 8013ada:	ee10 0a10 	vmov	r0, s0
 8013ade:	4629      	mov	r1, r5
 8013ae0:	f7ec fbda 	bl	8000298 <__aeabi_dsub>
 8013ae4:	4602      	mov	r2, r0
 8013ae6:	460b      	mov	r3, r1
 8013ae8:	f7ec feb8 	bl	800085c <__aeabi_ddiv>
 8013aec:	4604      	mov	r4, r0
 8013aee:	460d      	mov	r5, r1
 8013af0:	ec45 4b10 	vmov	d0, r4, r5
 8013af4:	b003      	add	sp, #12
 8013af6:	ecbd 8b04 	vpop	{d8-d9}
 8013afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afe:	4baf      	ldr	r3, [pc, #700]	; (8013dbc <__ieee754_asin+0x344>)
 8013b00:	4598      	cmp	r8, r3
 8013b02:	dc11      	bgt.n	8013b28 <__ieee754_asin+0xb0>
 8013b04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013b08:	f280 80ae 	bge.w	8013c68 <__ieee754_asin+0x1f0>
 8013b0c:	a394      	add	r3, pc, #592	; (adr r3, 8013d60 <__ieee754_asin+0x2e8>)
 8013b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b12:	ee10 0a10 	vmov	r0, s0
 8013b16:	4629      	mov	r1, r5
 8013b18:	f7ec fbc0 	bl	800029c <__adddf3>
 8013b1c:	4ba8      	ldr	r3, [pc, #672]	; (8013dc0 <__ieee754_asin+0x348>)
 8013b1e:	2200      	movs	r2, #0
 8013b20:	f7ed f802 	bl	8000b28 <__aeabi_dcmpgt>
 8013b24:	2800      	cmp	r0, #0
 8013b26:	d1e3      	bne.n	8013af0 <__ieee754_asin+0x78>
 8013b28:	ec45 4b10 	vmov	d0, r4, r5
 8013b2c:	f001 fa34 	bl	8014f98 <fabs>
 8013b30:	49a3      	ldr	r1, [pc, #652]	; (8013dc0 <__ieee754_asin+0x348>)
 8013b32:	ec53 2b10 	vmov	r2, r3, d0
 8013b36:	2000      	movs	r0, #0
 8013b38:	f7ec fbae 	bl	8000298 <__aeabi_dsub>
 8013b3c:	4ba1      	ldr	r3, [pc, #644]	; (8013dc4 <__ieee754_asin+0x34c>)
 8013b3e:	2200      	movs	r2, #0
 8013b40:	f7ec fd62 	bl	8000608 <__aeabi_dmul>
 8013b44:	a388      	add	r3, pc, #544	; (adr r3, 8013d68 <__ieee754_asin+0x2f0>)
 8013b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	460d      	mov	r5, r1
 8013b4e:	f7ec fd5b 	bl	8000608 <__aeabi_dmul>
 8013b52:	a387      	add	r3, pc, #540	; (adr r3, 8013d70 <__ieee754_asin+0x2f8>)
 8013b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b58:	f7ec fba0 	bl	800029c <__adddf3>
 8013b5c:	4622      	mov	r2, r4
 8013b5e:	462b      	mov	r3, r5
 8013b60:	f7ec fd52 	bl	8000608 <__aeabi_dmul>
 8013b64:	a384      	add	r3, pc, #528	; (adr r3, 8013d78 <__ieee754_asin+0x300>)
 8013b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6a:	f7ec fb95 	bl	8000298 <__aeabi_dsub>
 8013b6e:	4622      	mov	r2, r4
 8013b70:	462b      	mov	r3, r5
 8013b72:	f7ec fd49 	bl	8000608 <__aeabi_dmul>
 8013b76:	a382      	add	r3, pc, #520	; (adr r3, 8013d80 <__ieee754_asin+0x308>)
 8013b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7c:	f7ec fb8e 	bl	800029c <__adddf3>
 8013b80:	4622      	mov	r2, r4
 8013b82:	462b      	mov	r3, r5
 8013b84:	f7ec fd40 	bl	8000608 <__aeabi_dmul>
 8013b88:	a37f      	add	r3, pc, #508	; (adr r3, 8013d88 <__ieee754_asin+0x310>)
 8013b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8e:	f7ec fb83 	bl	8000298 <__aeabi_dsub>
 8013b92:	4622      	mov	r2, r4
 8013b94:	462b      	mov	r3, r5
 8013b96:	f7ec fd37 	bl	8000608 <__aeabi_dmul>
 8013b9a:	a37d      	add	r3, pc, #500	; (adr r3, 8013d90 <__ieee754_asin+0x318>)
 8013b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba0:	f7ec fb7c 	bl	800029c <__adddf3>
 8013ba4:	4622      	mov	r2, r4
 8013ba6:	462b      	mov	r3, r5
 8013ba8:	f7ec fd2e 	bl	8000608 <__aeabi_dmul>
 8013bac:	a37a      	add	r3, pc, #488	; (adr r3, 8013d98 <__ieee754_asin+0x320>)
 8013bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb2:	ec41 0b18 	vmov	d8, r0, r1
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	4629      	mov	r1, r5
 8013bba:	f7ec fd25 	bl	8000608 <__aeabi_dmul>
 8013bbe:	a378      	add	r3, pc, #480	; (adr r3, 8013da0 <__ieee754_asin+0x328>)
 8013bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc4:	f7ec fb68 	bl	8000298 <__aeabi_dsub>
 8013bc8:	4622      	mov	r2, r4
 8013bca:	462b      	mov	r3, r5
 8013bcc:	f7ec fd1c 	bl	8000608 <__aeabi_dmul>
 8013bd0:	a375      	add	r3, pc, #468	; (adr r3, 8013da8 <__ieee754_asin+0x330>)
 8013bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd6:	f7ec fb61 	bl	800029c <__adddf3>
 8013bda:	4622      	mov	r2, r4
 8013bdc:	462b      	mov	r3, r5
 8013bde:	f7ec fd13 	bl	8000608 <__aeabi_dmul>
 8013be2:	a373      	add	r3, pc, #460	; (adr r3, 8013db0 <__ieee754_asin+0x338>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	f7ec fb56 	bl	8000298 <__aeabi_dsub>
 8013bec:	4622      	mov	r2, r4
 8013bee:	462b      	mov	r3, r5
 8013bf0:	f7ec fd0a 	bl	8000608 <__aeabi_dmul>
 8013bf4:	4b72      	ldr	r3, [pc, #456]	; (8013dc0 <__ieee754_asin+0x348>)
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f7ec fb50 	bl	800029c <__adddf3>
 8013bfc:	ec45 4b10 	vmov	d0, r4, r5
 8013c00:	4606      	mov	r6, r0
 8013c02:	460f      	mov	r7, r1
 8013c04:	f000 ff46 	bl	8014a94 <__ieee754_sqrt>
 8013c08:	4b6f      	ldr	r3, [pc, #444]	; (8013dc8 <__ieee754_asin+0x350>)
 8013c0a:	4598      	cmp	r8, r3
 8013c0c:	ec5b ab10 	vmov	sl, fp, d0
 8013c10:	f340 80dc 	ble.w	8013dcc <__ieee754_asin+0x354>
 8013c14:	4632      	mov	r2, r6
 8013c16:	463b      	mov	r3, r7
 8013c18:	ec51 0b18 	vmov	r0, r1, d8
 8013c1c:	f7ec fe1e 	bl	800085c <__aeabi_ddiv>
 8013c20:	4652      	mov	r2, sl
 8013c22:	465b      	mov	r3, fp
 8013c24:	f7ec fcf0 	bl	8000608 <__aeabi_dmul>
 8013c28:	4652      	mov	r2, sl
 8013c2a:	465b      	mov	r3, fp
 8013c2c:	f7ec fb36 	bl	800029c <__adddf3>
 8013c30:	4602      	mov	r2, r0
 8013c32:	460b      	mov	r3, r1
 8013c34:	f7ec fb32 	bl	800029c <__adddf3>
 8013c38:	a347      	add	r3, pc, #284	; (adr r3, 8013d58 <__ieee754_asin+0x2e0>)
 8013c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3e:	f7ec fb2b 	bl	8000298 <__aeabi_dsub>
 8013c42:	4602      	mov	r2, r0
 8013c44:	460b      	mov	r3, r1
 8013c46:	a142      	add	r1, pc, #264	; (adr r1, 8013d50 <__ieee754_asin+0x2d8>)
 8013c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c4c:	f7ec fb24 	bl	8000298 <__aeabi_dsub>
 8013c50:	9b01      	ldr	r3, [sp, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	bfdc      	itt	le
 8013c56:	4602      	movle	r2, r0
 8013c58:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8013c5c:	4604      	mov	r4, r0
 8013c5e:	460d      	mov	r5, r1
 8013c60:	bfdc      	itt	le
 8013c62:	4614      	movle	r4, r2
 8013c64:	461d      	movle	r5, r3
 8013c66:	e743      	b.n	8013af0 <__ieee754_asin+0x78>
 8013c68:	ee10 2a10 	vmov	r2, s0
 8013c6c:	ee10 0a10 	vmov	r0, s0
 8013c70:	462b      	mov	r3, r5
 8013c72:	4629      	mov	r1, r5
 8013c74:	f7ec fcc8 	bl	8000608 <__aeabi_dmul>
 8013c78:	a33b      	add	r3, pc, #236	; (adr r3, 8013d68 <__ieee754_asin+0x2f0>)
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	4606      	mov	r6, r0
 8013c80:	460f      	mov	r7, r1
 8013c82:	f7ec fcc1 	bl	8000608 <__aeabi_dmul>
 8013c86:	a33a      	add	r3, pc, #232	; (adr r3, 8013d70 <__ieee754_asin+0x2f8>)
 8013c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8c:	f7ec fb06 	bl	800029c <__adddf3>
 8013c90:	4632      	mov	r2, r6
 8013c92:	463b      	mov	r3, r7
 8013c94:	f7ec fcb8 	bl	8000608 <__aeabi_dmul>
 8013c98:	a337      	add	r3, pc, #220	; (adr r3, 8013d78 <__ieee754_asin+0x300>)
 8013c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9e:	f7ec fafb 	bl	8000298 <__aeabi_dsub>
 8013ca2:	4632      	mov	r2, r6
 8013ca4:	463b      	mov	r3, r7
 8013ca6:	f7ec fcaf 	bl	8000608 <__aeabi_dmul>
 8013caa:	a335      	add	r3, pc, #212	; (adr r3, 8013d80 <__ieee754_asin+0x308>)
 8013cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb0:	f7ec faf4 	bl	800029c <__adddf3>
 8013cb4:	4632      	mov	r2, r6
 8013cb6:	463b      	mov	r3, r7
 8013cb8:	f7ec fca6 	bl	8000608 <__aeabi_dmul>
 8013cbc:	a332      	add	r3, pc, #200	; (adr r3, 8013d88 <__ieee754_asin+0x310>)
 8013cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc2:	f7ec fae9 	bl	8000298 <__aeabi_dsub>
 8013cc6:	4632      	mov	r2, r6
 8013cc8:	463b      	mov	r3, r7
 8013cca:	f7ec fc9d 	bl	8000608 <__aeabi_dmul>
 8013cce:	a330      	add	r3, pc, #192	; (adr r3, 8013d90 <__ieee754_asin+0x318>)
 8013cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd4:	f7ec fae2 	bl	800029c <__adddf3>
 8013cd8:	4632      	mov	r2, r6
 8013cda:	463b      	mov	r3, r7
 8013cdc:	f7ec fc94 	bl	8000608 <__aeabi_dmul>
 8013ce0:	a32d      	add	r3, pc, #180	; (adr r3, 8013d98 <__ieee754_asin+0x320>)
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	4680      	mov	r8, r0
 8013ce8:	4689      	mov	r9, r1
 8013cea:	4630      	mov	r0, r6
 8013cec:	4639      	mov	r1, r7
 8013cee:	f7ec fc8b 	bl	8000608 <__aeabi_dmul>
 8013cf2:	a32b      	add	r3, pc, #172	; (adr r3, 8013da0 <__ieee754_asin+0x328>)
 8013cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf8:	f7ec face 	bl	8000298 <__aeabi_dsub>
 8013cfc:	4632      	mov	r2, r6
 8013cfe:	463b      	mov	r3, r7
 8013d00:	f7ec fc82 	bl	8000608 <__aeabi_dmul>
 8013d04:	a328      	add	r3, pc, #160	; (adr r3, 8013da8 <__ieee754_asin+0x330>)
 8013d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0a:	f7ec fac7 	bl	800029c <__adddf3>
 8013d0e:	4632      	mov	r2, r6
 8013d10:	463b      	mov	r3, r7
 8013d12:	f7ec fc79 	bl	8000608 <__aeabi_dmul>
 8013d16:	a326      	add	r3, pc, #152	; (adr r3, 8013db0 <__ieee754_asin+0x338>)
 8013d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1c:	f7ec fabc 	bl	8000298 <__aeabi_dsub>
 8013d20:	4632      	mov	r2, r6
 8013d22:	463b      	mov	r3, r7
 8013d24:	f7ec fc70 	bl	8000608 <__aeabi_dmul>
 8013d28:	4b25      	ldr	r3, [pc, #148]	; (8013dc0 <__ieee754_asin+0x348>)
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f7ec fab6 	bl	800029c <__adddf3>
 8013d30:	4602      	mov	r2, r0
 8013d32:	460b      	mov	r3, r1
 8013d34:	4640      	mov	r0, r8
 8013d36:	4649      	mov	r1, r9
 8013d38:	f7ec fd90 	bl	800085c <__aeabi_ddiv>
 8013d3c:	4622      	mov	r2, r4
 8013d3e:	462b      	mov	r3, r5
 8013d40:	f7ec fc62 	bl	8000608 <__aeabi_dmul>
 8013d44:	4602      	mov	r2, r0
 8013d46:	460b      	mov	r3, r1
 8013d48:	4620      	mov	r0, r4
 8013d4a:	4629      	mov	r1, r5
 8013d4c:	e6bf      	b.n	8013ace <__ieee754_asin+0x56>
 8013d4e:	bf00      	nop
 8013d50:	54442d18 	.word	0x54442d18
 8013d54:	3ff921fb 	.word	0x3ff921fb
 8013d58:	33145c07 	.word	0x33145c07
 8013d5c:	3c91a626 	.word	0x3c91a626
 8013d60:	8800759c 	.word	0x8800759c
 8013d64:	7e37e43c 	.word	0x7e37e43c
 8013d68:	0dfdf709 	.word	0x0dfdf709
 8013d6c:	3f023de1 	.word	0x3f023de1
 8013d70:	7501b288 	.word	0x7501b288
 8013d74:	3f49efe0 	.word	0x3f49efe0
 8013d78:	b5688f3b 	.word	0xb5688f3b
 8013d7c:	3fa48228 	.word	0x3fa48228
 8013d80:	0e884455 	.word	0x0e884455
 8013d84:	3fc9c155 	.word	0x3fc9c155
 8013d88:	03eb6f7d 	.word	0x03eb6f7d
 8013d8c:	3fd4d612 	.word	0x3fd4d612
 8013d90:	55555555 	.word	0x55555555
 8013d94:	3fc55555 	.word	0x3fc55555
 8013d98:	b12e9282 	.word	0xb12e9282
 8013d9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013da0:	1b8d0159 	.word	0x1b8d0159
 8013da4:	3fe6066c 	.word	0x3fe6066c
 8013da8:	9c598ac8 	.word	0x9c598ac8
 8013dac:	40002ae5 	.word	0x40002ae5
 8013db0:	1c8a2d4b 	.word	0x1c8a2d4b
 8013db4:	40033a27 	.word	0x40033a27
 8013db8:	3fefffff 	.word	0x3fefffff
 8013dbc:	3fdfffff 	.word	0x3fdfffff
 8013dc0:	3ff00000 	.word	0x3ff00000
 8013dc4:	3fe00000 	.word	0x3fe00000
 8013dc8:	3fef3332 	.word	0x3fef3332
 8013dcc:	ee10 2a10 	vmov	r2, s0
 8013dd0:	ee10 0a10 	vmov	r0, s0
 8013dd4:	465b      	mov	r3, fp
 8013dd6:	4659      	mov	r1, fp
 8013dd8:	f7ec fa60 	bl	800029c <__adddf3>
 8013ddc:	4632      	mov	r2, r6
 8013dde:	463b      	mov	r3, r7
 8013de0:	ec41 0b19 	vmov	d9, r0, r1
 8013de4:	ec51 0b18 	vmov	r0, r1, d8
 8013de8:	f7ec fd38 	bl	800085c <__aeabi_ddiv>
 8013dec:	4602      	mov	r2, r0
 8013dee:	460b      	mov	r3, r1
 8013df0:	ec51 0b19 	vmov	r0, r1, d9
 8013df4:	f7ec fc08 	bl	8000608 <__aeabi_dmul>
 8013df8:	f04f 0800 	mov.w	r8, #0
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	460f      	mov	r7, r1
 8013e00:	4642      	mov	r2, r8
 8013e02:	465b      	mov	r3, fp
 8013e04:	4640      	mov	r0, r8
 8013e06:	4659      	mov	r1, fp
 8013e08:	f7ec fbfe 	bl	8000608 <__aeabi_dmul>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	460b      	mov	r3, r1
 8013e10:	4620      	mov	r0, r4
 8013e12:	4629      	mov	r1, r5
 8013e14:	f7ec fa40 	bl	8000298 <__aeabi_dsub>
 8013e18:	4642      	mov	r2, r8
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	465b      	mov	r3, fp
 8013e20:	4650      	mov	r0, sl
 8013e22:	4659      	mov	r1, fp
 8013e24:	f7ec fa3a 	bl	800029c <__adddf3>
 8013e28:	4602      	mov	r2, r0
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	4629      	mov	r1, r5
 8013e30:	f7ec fd14 	bl	800085c <__aeabi_ddiv>
 8013e34:	4602      	mov	r2, r0
 8013e36:	460b      	mov	r3, r1
 8013e38:	f7ec fa30 	bl	800029c <__adddf3>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	a113      	add	r1, pc, #76	; (adr r1, 8013e90 <__ieee754_asin+0x418>)
 8013e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e46:	f7ec fa27 	bl	8000298 <__aeabi_dsub>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	4630      	mov	r0, r6
 8013e50:	4639      	mov	r1, r7
 8013e52:	f7ec fa21 	bl	8000298 <__aeabi_dsub>
 8013e56:	4642      	mov	r2, r8
 8013e58:	4604      	mov	r4, r0
 8013e5a:	460d      	mov	r5, r1
 8013e5c:	465b      	mov	r3, fp
 8013e5e:	4640      	mov	r0, r8
 8013e60:	4659      	mov	r1, fp
 8013e62:	f7ec fa1b 	bl	800029c <__adddf3>
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	a10b      	add	r1, pc, #44	; (adr r1, 8013e98 <__ieee754_asin+0x420>)
 8013e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e70:	f7ec fa12 	bl	8000298 <__aeabi_dsub>
 8013e74:	4602      	mov	r2, r0
 8013e76:	460b      	mov	r3, r1
 8013e78:	4620      	mov	r0, r4
 8013e7a:	4629      	mov	r1, r5
 8013e7c:	f7ec fa0c 	bl	8000298 <__aeabi_dsub>
 8013e80:	4602      	mov	r2, r0
 8013e82:	460b      	mov	r3, r1
 8013e84:	a104      	add	r1, pc, #16	; (adr r1, 8013e98 <__ieee754_asin+0x420>)
 8013e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e8a:	e6df      	b.n	8013c4c <__ieee754_asin+0x1d4>
 8013e8c:	f3af 8000 	nop.w
 8013e90:	33145c07 	.word	0x33145c07
 8013e94:	3c91a626 	.word	0x3c91a626
 8013e98:	54442d18 	.word	0x54442d18
 8013e9c:	3fe921fb 	.word	0x3fe921fb

08013ea0 <__ieee754_atan2>:
 8013ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ea4:	ec57 6b11 	vmov	r6, r7, d1
 8013ea8:	4273      	negs	r3, r6
 8013eaa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8014030 <__ieee754_atan2+0x190>
 8013eae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8013eb2:	4333      	orrs	r3, r6
 8013eb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013eb8:	4573      	cmp	r3, lr
 8013eba:	ec51 0b10 	vmov	r0, r1, d0
 8013ebe:	ee11 8a10 	vmov	r8, s2
 8013ec2:	d80a      	bhi.n	8013eda <__ieee754_atan2+0x3a>
 8013ec4:	4244      	negs	r4, r0
 8013ec6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013eca:	4304      	orrs	r4, r0
 8013ecc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013ed0:	4574      	cmp	r4, lr
 8013ed2:	ee10 9a10 	vmov	r9, s0
 8013ed6:	468c      	mov	ip, r1
 8013ed8:	d907      	bls.n	8013eea <__ieee754_atan2+0x4a>
 8013eda:	4632      	mov	r2, r6
 8013edc:	463b      	mov	r3, r7
 8013ede:	f7ec f9dd 	bl	800029c <__adddf3>
 8013ee2:	ec41 0b10 	vmov	d0, r0, r1
 8013ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013eee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013ef2:	4334      	orrs	r4, r6
 8013ef4:	d103      	bne.n	8013efe <__ieee754_atan2+0x5e>
 8013ef6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013efa:	f000 bead 	b.w	8014c58 <atan>
 8013efe:	17bc      	asrs	r4, r7, #30
 8013f00:	f004 0402 	and.w	r4, r4, #2
 8013f04:	ea53 0909 	orrs.w	r9, r3, r9
 8013f08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013f0c:	d107      	bne.n	8013f1e <__ieee754_atan2+0x7e>
 8013f0e:	2c02      	cmp	r4, #2
 8013f10:	d060      	beq.n	8013fd4 <__ieee754_atan2+0x134>
 8013f12:	2c03      	cmp	r4, #3
 8013f14:	d1e5      	bne.n	8013ee2 <__ieee754_atan2+0x42>
 8013f16:	a142      	add	r1, pc, #264	; (adr r1, 8014020 <__ieee754_atan2+0x180>)
 8013f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f1c:	e7e1      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013f1e:	ea52 0808 	orrs.w	r8, r2, r8
 8013f22:	d106      	bne.n	8013f32 <__ieee754_atan2+0x92>
 8013f24:	f1bc 0f00 	cmp.w	ip, #0
 8013f28:	da5f      	bge.n	8013fea <__ieee754_atan2+0x14a>
 8013f2a:	a13f      	add	r1, pc, #252	; (adr r1, 8014028 <__ieee754_atan2+0x188>)
 8013f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f30:	e7d7      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013f32:	4572      	cmp	r2, lr
 8013f34:	d10f      	bne.n	8013f56 <__ieee754_atan2+0xb6>
 8013f36:	4293      	cmp	r3, r2
 8013f38:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f3c:	d107      	bne.n	8013f4e <__ieee754_atan2+0xae>
 8013f3e:	2c02      	cmp	r4, #2
 8013f40:	d84c      	bhi.n	8013fdc <__ieee754_atan2+0x13c>
 8013f42:	4b35      	ldr	r3, [pc, #212]	; (8014018 <__ieee754_atan2+0x178>)
 8013f44:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013f48:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013f4c:	e7c9      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013f4e:	2c02      	cmp	r4, #2
 8013f50:	d848      	bhi.n	8013fe4 <__ieee754_atan2+0x144>
 8013f52:	4b32      	ldr	r3, [pc, #200]	; (801401c <__ieee754_atan2+0x17c>)
 8013f54:	e7f6      	b.n	8013f44 <__ieee754_atan2+0xa4>
 8013f56:	4573      	cmp	r3, lr
 8013f58:	d0e4      	beq.n	8013f24 <__ieee754_atan2+0x84>
 8013f5a:	1a9b      	subs	r3, r3, r2
 8013f5c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013f60:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f64:	da1e      	bge.n	8013fa4 <__ieee754_atan2+0x104>
 8013f66:	2f00      	cmp	r7, #0
 8013f68:	da01      	bge.n	8013f6e <__ieee754_atan2+0xce>
 8013f6a:	323c      	adds	r2, #60	; 0x3c
 8013f6c:	db1e      	blt.n	8013fac <__ieee754_atan2+0x10c>
 8013f6e:	4632      	mov	r2, r6
 8013f70:	463b      	mov	r3, r7
 8013f72:	f7ec fc73 	bl	800085c <__aeabi_ddiv>
 8013f76:	ec41 0b10 	vmov	d0, r0, r1
 8013f7a:	f001 f80d 	bl	8014f98 <fabs>
 8013f7e:	f000 fe6b 	bl	8014c58 <atan>
 8013f82:	ec51 0b10 	vmov	r0, r1, d0
 8013f86:	2c01      	cmp	r4, #1
 8013f88:	d013      	beq.n	8013fb2 <__ieee754_atan2+0x112>
 8013f8a:	2c02      	cmp	r4, #2
 8013f8c:	d015      	beq.n	8013fba <__ieee754_atan2+0x11a>
 8013f8e:	2c00      	cmp	r4, #0
 8013f90:	d0a7      	beq.n	8013ee2 <__ieee754_atan2+0x42>
 8013f92:	a319      	add	r3, pc, #100	; (adr r3, 8013ff8 <__ieee754_atan2+0x158>)
 8013f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f98:	f7ec f97e 	bl	8000298 <__aeabi_dsub>
 8013f9c:	a318      	add	r3, pc, #96	; (adr r3, 8014000 <__ieee754_atan2+0x160>)
 8013f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa2:	e014      	b.n	8013fce <__ieee754_atan2+0x12e>
 8013fa4:	a118      	add	r1, pc, #96	; (adr r1, 8014008 <__ieee754_atan2+0x168>)
 8013fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013faa:	e7ec      	b.n	8013f86 <__ieee754_atan2+0xe6>
 8013fac:	2000      	movs	r0, #0
 8013fae:	2100      	movs	r1, #0
 8013fb0:	e7e9      	b.n	8013f86 <__ieee754_atan2+0xe6>
 8013fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	e793      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013fba:	a30f      	add	r3, pc, #60	; (adr r3, 8013ff8 <__ieee754_atan2+0x158>)
 8013fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc0:	f7ec f96a 	bl	8000298 <__aeabi_dsub>
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	a10d      	add	r1, pc, #52	; (adr r1, 8014000 <__ieee754_atan2+0x160>)
 8013fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fce:	f7ec f963 	bl	8000298 <__aeabi_dsub>
 8013fd2:	e786      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013fd4:	a10a      	add	r1, pc, #40	; (adr r1, 8014000 <__ieee754_atan2+0x160>)
 8013fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fda:	e782      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013fdc:	a10c      	add	r1, pc, #48	; (adr r1, 8014010 <__ieee754_atan2+0x170>)
 8013fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fe2:	e77e      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013fe4:	2000      	movs	r0, #0
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	e77b      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013fea:	a107      	add	r1, pc, #28	; (adr r1, 8014008 <__ieee754_atan2+0x168>)
 8013fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ff0:	e777      	b.n	8013ee2 <__ieee754_atan2+0x42>
 8013ff2:	bf00      	nop
 8013ff4:	f3af 8000 	nop.w
 8013ff8:	33145c07 	.word	0x33145c07
 8013ffc:	3ca1a626 	.word	0x3ca1a626
 8014000:	54442d18 	.word	0x54442d18
 8014004:	400921fb 	.word	0x400921fb
 8014008:	54442d18 	.word	0x54442d18
 801400c:	3ff921fb 	.word	0x3ff921fb
 8014010:	54442d18 	.word	0x54442d18
 8014014:	3fe921fb 	.word	0x3fe921fb
 8014018:	08015f98 	.word	0x08015f98
 801401c:	08015fb0 	.word	0x08015fb0
 8014020:	54442d18 	.word	0x54442d18
 8014024:	c00921fb 	.word	0xc00921fb
 8014028:	54442d18 	.word	0x54442d18
 801402c:	bff921fb 	.word	0xbff921fb
 8014030:	7ff00000 	.word	0x7ff00000
 8014034:	00000000 	.word	0x00000000

08014038 <__ieee754_pow>:
 8014038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403c:	ed2d 8b06 	vpush	{d8-d10}
 8014040:	b089      	sub	sp, #36	; 0x24
 8014042:	ed8d 1b00 	vstr	d1, [sp]
 8014046:	e9dd 2900 	ldrd	r2, r9, [sp]
 801404a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801404e:	ea58 0102 	orrs.w	r1, r8, r2
 8014052:	ec57 6b10 	vmov	r6, r7, d0
 8014056:	d115      	bne.n	8014084 <__ieee754_pow+0x4c>
 8014058:	19b3      	adds	r3, r6, r6
 801405a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801405e:	4152      	adcs	r2, r2
 8014060:	4299      	cmp	r1, r3
 8014062:	4b89      	ldr	r3, [pc, #548]	; (8014288 <__ieee754_pow+0x250>)
 8014064:	4193      	sbcs	r3, r2
 8014066:	f080 84d2 	bcs.w	8014a0e <__ieee754_pow+0x9d6>
 801406a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801406e:	4630      	mov	r0, r6
 8014070:	4639      	mov	r1, r7
 8014072:	f7ec f913 	bl	800029c <__adddf3>
 8014076:	ec41 0b10 	vmov	d0, r0, r1
 801407a:	b009      	add	sp, #36	; 0x24
 801407c:	ecbd 8b06 	vpop	{d8-d10}
 8014080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014084:	4b81      	ldr	r3, [pc, #516]	; (801428c <__ieee754_pow+0x254>)
 8014086:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801408a:	429c      	cmp	r4, r3
 801408c:	ee10 aa10 	vmov	sl, s0
 8014090:	463d      	mov	r5, r7
 8014092:	dc06      	bgt.n	80140a2 <__ieee754_pow+0x6a>
 8014094:	d101      	bne.n	801409a <__ieee754_pow+0x62>
 8014096:	2e00      	cmp	r6, #0
 8014098:	d1e7      	bne.n	801406a <__ieee754_pow+0x32>
 801409a:	4598      	cmp	r8, r3
 801409c:	dc01      	bgt.n	80140a2 <__ieee754_pow+0x6a>
 801409e:	d10f      	bne.n	80140c0 <__ieee754_pow+0x88>
 80140a0:	b172      	cbz	r2, 80140c0 <__ieee754_pow+0x88>
 80140a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80140a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80140aa:	ea55 050a 	orrs.w	r5, r5, sl
 80140ae:	d1dc      	bne.n	801406a <__ieee754_pow+0x32>
 80140b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140b4:	18db      	adds	r3, r3, r3
 80140b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80140ba:	4152      	adcs	r2, r2
 80140bc:	429d      	cmp	r5, r3
 80140be:	e7d0      	b.n	8014062 <__ieee754_pow+0x2a>
 80140c0:	2d00      	cmp	r5, #0
 80140c2:	da3b      	bge.n	801413c <__ieee754_pow+0x104>
 80140c4:	4b72      	ldr	r3, [pc, #456]	; (8014290 <__ieee754_pow+0x258>)
 80140c6:	4598      	cmp	r8, r3
 80140c8:	dc51      	bgt.n	801416e <__ieee754_pow+0x136>
 80140ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80140ce:	4598      	cmp	r8, r3
 80140d0:	f340 84ac 	ble.w	8014a2c <__ieee754_pow+0x9f4>
 80140d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80140d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80140dc:	2b14      	cmp	r3, #20
 80140de:	dd0f      	ble.n	8014100 <__ieee754_pow+0xc8>
 80140e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80140e4:	fa22 f103 	lsr.w	r1, r2, r3
 80140e8:	fa01 f303 	lsl.w	r3, r1, r3
 80140ec:	4293      	cmp	r3, r2
 80140ee:	f040 849d 	bne.w	8014a2c <__ieee754_pow+0x9f4>
 80140f2:	f001 0101 	and.w	r1, r1, #1
 80140f6:	f1c1 0302 	rsb	r3, r1, #2
 80140fa:	9304      	str	r3, [sp, #16]
 80140fc:	b182      	cbz	r2, 8014120 <__ieee754_pow+0xe8>
 80140fe:	e05f      	b.n	80141c0 <__ieee754_pow+0x188>
 8014100:	2a00      	cmp	r2, #0
 8014102:	d15b      	bne.n	80141bc <__ieee754_pow+0x184>
 8014104:	f1c3 0314 	rsb	r3, r3, #20
 8014108:	fa48 f103 	asr.w	r1, r8, r3
 801410c:	fa01 f303 	lsl.w	r3, r1, r3
 8014110:	4543      	cmp	r3, r8
 8014112:	f040 8488 	bne.w	8014a26 <__ieee754_pow+0x9ee>
 8014116:	f001 0101 	and.w	r1, r1, #1
 801411a:	f1c1 0302 	rsb	r3, r1, #2
 801411e:	9304      	str	r3, [sp, #16]
 8014120:	4b5c      	ldr	r3, [pc, #368]	; (8014294 <__ieee754_pow+0x25c>)
 8014122:	4598      	cmp	r8, r3
 8014124:	d132      	bne.n	801418c <__ieee754_pow+0x154>
 8014126:	f1b9 0f00 	cmp.w	r9, #0
 801412a:	f280 8478 	bge.w	8014a1e <__ieee754_pow+0x9e6>
 801412e:	4959      	ldr	r1, [pc, #356]	; (8014294 <__ieee754_pow+0x25c>)
 8014130:	4632      	mov	r2, r6
 8014132:	463b      	mov	r3, r7
 8014134:	2000      	movs	r0, #0
 8014136:	f7ec fb91 	bl	800085c <__aeabi_ddiv>
 801413a:	e79c      	b.n	8014076 <__ieee754_pow+0x3e>
 801413c:	2300      	movs	r3, #0
 801413e:	9304      	str	r3, [sp, #16]
 8014140:	2a00      	cmp	r2, #0
 8014142:	d13d      	bne.n	80141c0 <__ieee754_pow+0x188>
 8014144:	4b51      	ldr	r3, [pc, #324]	; (801428c <__ieee754_pow+0x254>)
 8014146:	4598      	cmp	r8, r3
 8014148:	d1ea      	bne.n	8014120 <__ieee754_pow+0xe8>
 801414a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801414e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014152:	ea53 030a 	orrs.w	r3, r3, sl
 8014156:	f000 845a 	beq.w	8014a0e <__ieee754_pow+0x9d6>
 801415a:	4b4f      	ldr	r3, [pc, #316]	; (8014298 <__ieee754_pow+0x260>)
 801415c:	429c      	cmp	r4, r3
 801415e:	dd08      	ble.n	8014172 <__ieee754_pow+0x13a>
 8014160:	f1b9 0f00 	cmp.w	r9, #0
 8014164:	f2c0 8457 	blt.w	8014a16 <__ieee754_pow+0x9de>
 8014168:	e9dd 0100 	ldrd	r0, r1, [sp]
 801416c:	e783      	b.n	8014076 <__ieee754_pow+0x3e>
 801416e:	2302      	movs	r3, #2
 8014170:	e7e5      	b.n	801413e <__ieee754_pow+0x106>
 8014172:	f1b9 0f00 	cmp.w	r9, #0
 8014176:	f04f 0000 	mov.w	r0, #0
 801417a:	f04f 0100 	mov.w	r1, #0
 801417e:	f6bf af7a 	bge.w	8014076 <__ieee754_pow+0x3e>
 8014182:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014186:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801418a:	e774      	b.n	8014076 <__ieee754_pow+0x3e>
 801418c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014190:	d106      	bne.n	80141a0 <__ieee754_pow+0x168>
 8014192:	4632      	mov	r2, r6
 8014194:	463b      	mov	r3, r7
 8014196:	4630      	mov	r0, r6
 8014198:	4639      	mov	r1, r7
 801419a:	f7ec fa35 	bl	8000608 <__aeabi_dmul>
 801419e:	e76a      	b.n	8014076 <__ieee754_pow+0x3e>
 80141a0:	4b3e      	ldr	r3, [pc, #248]	; (801429c <__ieee754_pow+0x264>)
 80141a2:	4599      	cmp	r9, r3
 80141a4:	d10c      	bne.n	80141c0 <__ieee754_pow+0x188>
 80141a6:	2d00      	cmp	r5, #0
 80141a8:	db0a      	blt.n	80141c0 <__ieee754_pow+0x188>
 80141aa:	ec47 6b10 	vmov	d0, r6, r7
 80141ae:	b009      	add	sp, #36	; 0x24
 80141b0:	ecbd 8b06 	vpop	{d8-d10}
 80141b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	f000 bc6c 	b.w	8014a94 <__ieee754_sqrt>
 80141bc:	2300      	movs	r3, #0
 80141be:	9304      	str	r3, [sp, #16]
 80141c0:	ec47 6b10 	vmov	d0, r6, r7
 80141c4:	f000 fee8 	bl	8014f98 <fabs>
 80141c8:	ec51 0b10 	vmov	r0, r1, d0
 80141cc:	f1ba 0f00 	cmp.w	sl, #0
 80141d0:	d129      	bne.n	8014226 <__ieee754_pow+0x1ee>
 80141d2:	b124      	cbz	r4, 80141de <__ieee754_pow+0x1a6>
 80141d4:	4b2f      	ldr	r3, [pc, #188]	; (8014294 <__ieee754_pow+0x25c>)
 80141d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80141da:	429a      	cmp	r2, r3
 80141dc:	d123      	bne.n	8014226 <__ieee754_pow+0x1ee>
 80141de:	f1b9 0f00 	cmp.w	r9, #0
 80141e2:	da05      	bge.n	80141f0 <__ieee754_pow+0x1b8>
 80141e4:	4602      	mov	r2, r0
 80141e6:	460b      	mov	r3, r1
 80141e8:	2000      	movs	r0, #0
 80141ea:	492a      	ldr	r1, [pc, #168]	; (8014294 <__ieee754_pow+0x25c>)
 80141ec:	f7ec fb36 	bl	800085c <__aeabi_ddiv>
 80141f0:	2d00      	cmp	r5, #0
 80141f2:	f6bf af40 	bge.w	8014076 <__ieee754_pow+0x3e>
 80141f6:	9b04      	ldr	r3, [sp, #16]
 80141f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80141fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014200:	4323      	orrs	r3, r4
 8014202:	d108      	bne.n	8014216 <__ieee754_pow+0x1de>
 8014204:	4602      	mov	r2, r0
 8014206:	460b      	mov	r3, r1
 8014208:	4610      	mov	r0, r2
 801420a:	4619      	mov	r1, r3
 801420c:	f7ec f844 	bl	8000298 <__aeabi_dsub>
 8014210:	4602      	mov	r2, r0
 8014212:	460b      	mov	r3, r1
 8014214:	e78f      	b.n	8014136 <__ieee754_pow+0xfe>
 8014216:	9b04      	ldr	r3, [sp, #16]
 8014218:	2b01      	cmp	r3, #1
 801421a:	f47f af2c 	bne.w	8014076 <__ieee754_pow+0x3e>
 801421e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014222:	4619      	mov	r1, r3
 8014224:	e727      	b.n	8014076 <__ieee754_pow+0x3e>
 8014226:	0feb      	lsrs	r3, r5, #31
 8014228:	3b01      	subs	r3, #1
 801422a:	9306      	str	r3, [sp, #24]
 801422c:	9a06      	ldr	r2, [sp, #24]
 801422e:	9b04      	ldr	r3, [sp, #16]
 8014230:	4313      	orrs	r3, r2
 8014232:	d102      	bne.n	801423a <__ieee754_pow+0x202>
 8014234:	4632      	mov	r2, r6
 8014236:	463b      	mov	r3, r7
 8014238:	e7e6      	b.n	8014208 <__ieee754_pow+0x1d0>
 801423a:	4b19      	ldr	r3, [pc, #100]	; (80142a0 <__ieee754_pow+0x268>)
 801423c:	4598      	cmp	r8, r3
 801423e:	f340 80fb 	ble.w	8014438 <__ieee754_pow+0x400>
 8014242:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014246:	4598      	cmp	r8, r3
 8014248:	4b13      	ldr	r3, [pc, #76]	; (8014298 <__ieee754_pow+0x260>)
 801424a:	dd0c      	ble.n	8014266 <__ieee754_pow+0x22e>
 801424c:	429c      	cmp	r4, r3
 801424e:	dc0f      	bgt.n	8014270 <__ieee754_pow+0x238>
 8014250:	f1b9 0f00 	cmp.w	r9, #0
 8014254:	da0f      	bge.n	8014276 <__ieee754_pow+0x23e>
 8014256:	2000      	movs	r0, #0
 8014258:	b009      	add	sp, #36	; 0x24
 801425a:	ecbd 8b06 	vpop	{d8-d10}
 801425e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014262:	f000 bcf0 	b.w	8014c46 <__math_oflow>
 8014266:	429c      	cmp	r4, r3
 8014268:	dbf2      	blt.n	8014250 <__ieee754_pow+0x218>
 801426a:	4b0a      	ldr	r3, [pc, #40]	; (8014294 <__ieee754_pow+0x25c>)
 801426c:	429c      	cmp	r4, r3
 801426e:	dd19      	ble.n	80142a4 <__ieee754_pow+0x26c>
 8014270:	f1b9 0f00 	cmp.w	r9, #0
 8014274:	dcef      	bgt.n	8014256 <__ieee754_pow+0x21e>
 8014276:	2000      	movs	r0, #0
 8014278:	b009      	add	sp, #36	; 0x24
 801427a:	ecbd 8b06 	vpop	{d8-d10}
 801427e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014282:	f000 bcd7 	b.w	8014c34 <__math_uflow>
 8014286:	bf00      	nop
 8014288:	fff00000 	.word	0xfff00000
 801428c:	7ff00000 	.word	0x7ff00000
 8014290:	433fffff 	.word	0x433fffff
 8014294:	3ff00000 	.word	0x3ff00000
 8014298:	3fefffff 	.word	0x3fefffff
 801429c:	3fe00000 	.word	0x3fe00000
 80142a0:	41e00000 	.word	0x41e00000
 80142a4:	4b60      	ldr	r3, [pc, #384]	; (8014428 <__ieee754_pow+0x3f0>)
 80142a6:	2200      	movs	r2, #0
 80142a8:	f7eb fff6 	bl	8000298 <__aeabi_dsub>
 80142ac:	a354      	add	r3, pc, #336	; (adr r3, 8014400 <__ieee754_pow+0x3c8>)
 80142ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b2:	4604      	mov	r4, r0
 80142b4:	460d      	mov	r5, r1
 80142b6:	f7ec f9a7 	bl	8000608 <__aeabi_dmul>
 80142ba:	a353      	add	r3, pc, #332	; (adr r3, 8014408 <__ieee754_pow+0x3d0>)
 80142bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c0:	4606      	mov	r6, r0
 80142c2:	460f      	mov	r7, r1
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f7ec f99e 	bl	8000608 <__aeabi_dmul>
 80142cc:	4b57      	ldr	r3, [pc, #348]	; (801442c <__ieee754_pow+0x3f4>)
 80142ce:	4682      	mov	sl, r0
 80142d0:	468b      	mov	fp, r1
 80142d2:	2200      	movs	r2, #0
 80142d4:	4620      	mov	r0, r4
 80142d6:	4629      	mov	r1, r5
 80142d8:	f7ec f996 	bl	8000608 <__aeabi_dmul>
 80142dc:	4602      	mov	r2, r0
 80142de:	460b      	mov	r3, r1
 80142e0:	a14b      	add	r1, pc, #300	; (adr r1, 8014410 <__ieee754_pow+0x3d8>)
 80142e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142e6:	f7eb ffd7 	bl	8000298 <__aeabi_dsub>
 80142ea:	4622      	mov	r2, r4
 80142ec:	462b      	mov	r3, r5
 80142ee:	f7ec f98b 	bl	8000608 <__aeabi_dmul>
 80142f2:	4602      	mov	r2, r0
 80142f4:	460b      	mov	r3, r1
 80142f6:	2000      	movs	r0, #0
 80142f8:	494d      	ldr	r1, [pc, #308]	; (8014430 <__ieee754_pow+0x3f8>)
 80142fa:	f7eb ffcd 	bl	8000298 <__aeabi_dsub>
 80142fe:	4622      	mov	r2, r4
 8014300:	4680      	mov	r8, r0
 8014302:	4689      	mov	r9, r1
 8014304:	462b      	mov	r3, r5
 8014306:	4620      	mov	r0, r4
 8014308:	4629      	mov	r1, r5
 801430a:	f7ec f97d 	bl	8000608 <__aeabi_dmul>
 801430e:	4602      	mov	r2, r0
 8014310:	460b      	mov	r3, r1
 8014312:	4640      	mov	r0, r8
 8014314:	4649      	mov	r1, r9
 8014316:	f7ec f977 	bl	8000608 <__aeabi_dmul>
 801431a:	a33f      	add	r3, pc, #252	; (adr r3, 8014418 <__ieee754_pow+0x3e0>)
 801431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014320:	f7ec f972 	bl	8000608 <__aeabi_dmul>
 8014324:	4602      	mov	r2, r0
 8014326:	460b      	mov	r3, r1
 8014328:	4650      	mov	r0, sl
 801432a:	4659      	mov	r1, fp
 801432c:	f7eb ffb4 	bl	8000298 <__aeabi_dsub>
 8014330:	4602      	mov	r2, r0
 8014332:	460b      	mov	r3, r1
 8014334:	4680      	mov	r8, r0
 8014336:	4689      	mov	r9, r1
 8014338:	4630      	mov	r0, r6
 801433a:	4639      	mov	r1, r7
 801433c:	f7eb ffae 	bl	800029c <__adddf3>
 8014340:	2000      	movs	r0, #0
 8014342:	4632      	mov	r2, r6
 8014344:	463b      	mov	r3, r7
 8014346:	4604      	mov	r4, r0
 8014348:	460d      	mov	r5, r1
 801434a:	f7eb ffa5 	bl	8000298 <__aeabi_dsub>
 801434e:	4602      	mov	r2, r0
 8014350:	460b      	mov	r3, r1
 8014352:	4640      	mov	r0, r8
 8014354:	4649      	mov	r1, r9
 8014356:	f7eb ff9f 	bl	8000298 <__aeabi_dsub>
 801435a:	9b04      	ldr	r3, [sp, #16]
 801435c:	9a06      	ldr	r2, [sp, #24]
 801435e:	3b01      	subs	r3, #1
 8014360:	4313      	orrs	r3, r2
 8014362:	4682      	mov	sl, r0
 8014364:	468b      	mov	fp, r1
 8014366:	f040 81e7 	bne.w	8014738 <__ieee754_pow+0x700>
 801436a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014420 <__ieee754_pow+0x3e8>
 801436e:	eeb0 8a47 	vmov.f32	s16, s14
 8014372:	eef0 8a67 	vmov.f32	s17, s15
 8014376:	e9dd 6700 	ldrd	r6, r7, [sp]
 801437a:	2600      	movs	r6, #0
 801437c:	4632      	mov	r2, r6
 801437e:	463b      	mov	r3, r7
 8014380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014384:	f7eb ff88 	bl	8000298 <__aeabi_dsub>
 8014388:	4622      	mov	r2, r4
 801438a:	462b      	mov	r3, r5
 801438c:	f7ec f93c 	bl	8000608 <__aeabi_dmul>
 8014390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014394:	4680      	mov	r8, r0
 8014396:	4689      	mov	r9, r1
 8014398:	4650      	mov	r0, sl
 801439a:	4659      	mov	r1, fp
 801439c:	f7ec f934 	bl	8000608 <__aeabi_dmul>
 80143a0:	4602      	mov	r2, r0
 80143a2:	460b      	mov	r3, r1
 80143a4:	4640      	mov	r0, r8
 80143a6:	4649      	mov	r1, r9
 80143a8:	f7eb ff78 	bl	800029c <__adddf3>
 80143ac:	4632      	mov	r2, r6
 80143ae:	463b      	mov	r3, r7
 80143b0:	4680      	mov	r8, r0
 80143b2:	4689      	mov	r9, r1
 80143b4:	4620      	mov	r0, r4
 80143b6:	4629      	mov	r1, r5
 80143b8:	f7ec f926 	bl	8000608 <__aeabi_dmul>
 80143bc:	460b      	mov	r3, r1
 80143be:	4604      	mov	r4, r0
 80143c0:	460d      	mov	r5, r1
 80143c2:	4602      	mov	r2, r0
 80143c4:	4649      	mov	r1, r9
 80143c6:	4640      	mov	r0, r8
 80143c8:	f7eb ff68 	bl	800029c <__adddf3>
 80143cc:	4b19      	ldr	r3, [pc, #100]	; (8014434 <__ieee754_pow+0x3fc>)
 80143ce:	4299      	cmp	r1, r3
 80143d0:	ec45 4b19 	vmov	d9, r4, r5
 80143d4:	4606      	mov	r6, r0
 80143d6:	460f      	mov	r7, r1
 80143d8:	468b      	mov	fp, r1
 80143da:	f340 82f1 	ble.w	80149c0 <__ieee754_pow+0x988>
 80143de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80143e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80143e6:	4303      	orrs	r3, r0
 80143e8:	f000 81e4 	beq.w	80147b4 <__ieee754_pow+0x77c>
 80143ec:	ec51 0b18 	vmov	r0, r1, d8
 80143f0:	2200      	movs	r2, #0
 80143f2:	2300      	movs	r3, #0
 80143f4:	f7ec fb7a 	bl	8000aec <__aeabi_dcmplt>
 80143f8:	3800      	subs	r0, #0
 80143fa:	bf18      	it	ne
 80143fc:	2001      	movne	r0, #1
 80143fe:	e72b      	b.n	8014258 <__ieee754_pow+0x220>
 8014400:	60000000 	.word	0x60000000
 8014404:	3ff71547 	.word	0x3ff71547
 8014408:	f85ddf44 	.word	0xf85ddf44
 801440c:	3e54ae0b 	.word	0x3e54ae0b
 8014410:	55555555 	.word	0x55555555
 8014414:	3fd55555 	.word	0x3fd55555
 8014418:	652b82fe 	.word	0x652b82fe
 801441c:	3ff71547 	.word	0x3ff71547
 8014420:	00000000 	.word	0x00000000
 8014424:	bff00000 	.word	0xbff00000
 8014428:	3ff00000 	.word	0x3ff00000
 801442c:	3fd00000 	.word	0x3fd00000
 8014430:	3fe00000 	.word	0x3fe00000
 8014434:	408fffff 	.word	0x408fffff
 8014438:	4bd5      	ldr	r3, [pc, #852]	; (8014790 <__ieee754_pow+0x758>)
 801443a:	402b      	ands	r3, r5
 801443c:	2200      	movs	r2, #0
 801443e:	b92b      	cbnz	r3, 801444c <__ieee754_pow+0x414>
 8014440:	4bd4      	ldr	r3, [pc, #848]	; (8014794 <__ieee754_pow+0x75c>)
 8014442:	f7ec f8e1 	bl	8000608 <__aeabi_dmul>
 8014446:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801444a:	460c      	mov	r4, r1
 801444c:	1523      	asrs	r3, r4, #20
 801444e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014452:	4413      	add	r3, r2
 8014454:	9305      	str	r3, [sp, #20]
 8014456:	4bd0      	ldr	r3, [pc, #832]	; (8014798 <__ieee754_pow+0x760>)
 8014458:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801445c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014460:	429c      	cmp	r4, r3
 8014462:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014466:	dd08      	ble.n	801447a <__ieee754_pow+0x442>
 8014468:	4bcc      	ldr	r3, [pc, #816]	; (801479c <__ieee754_pow+0x764>)
 801446a:	429c      	cmp	r4, r3
 801446c:	f340 8162 	ble.w	8014734 <__ieee754_pow+0x6fc>
 8014470:	9b05      	ldr	r3, [sp, #20]
 8014472:	3301      	adds	r3, #1
 8014474:	9305      	str	r3, [sp, #20]
 8014476:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801447a:	2400      	movs	r4, #0
 801447c:	00e3      	lsls	r3, r4, #3
 801447e:	9307      	str	r3, [sp, #28]
 8014480:	4bc7      	ldr	r3, [pc, #796]	; (80147a0 <__ieee754_pow+0x768>)
 8014482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014486:	ed93 7b00 	vldr	d7, [r3]
 801448a:	4629      	mov	r1, r5
 801448c:	ec53 2b17 	vmov	r2, r3, d7
 8014490:	eeb0 9a47 	vmov.f32	s18, s14
 8014494:	eef0 9a67 	vmov.f32	s19, s15
 8014498:	4682      	mov	sl, r0
 801449a:	f7eb fefd 	bl	8000298 <__aeabi_dsub>
 801449e:	4652      	mov	r2, sl
 80144a0:	4606      	mov	r6, r0
 80144a2:	460f      	mov	r7, r1
 80144a4:	462b      	mov	r3, r5
 80144a6:	ec51 0b19 	vmov	r0, r1, d9
 80144aa:	f7eb fef7 	bl	800029c <__adddf3>
 80144ae:	4602      	mov	r2, r0
 80144b0:	460b      	mov	r3, r1
 80144b2:	2000      	movs	r0, #0
 80144b4:	49bb      	ldr	r1, [pc, #748]	; (80147a4 <__ieee754_pow+0x76c>)
 80144b6:	f7ec f9d1 	bl	800085c <__aeabi_ddiv>
 80144ba:	ec41 0b1a 	vmov	d10, r0, r1
 80144be:	4602      	mov	r2, r0
 80144c0:	460b      	mov	r3, r1
 80144c2:	4630      	mov	r0, r6
 80144c4:	4639      	mov	r1, r7
 80144c6:	f7ec f89f 	bl	8000608 <__aeabi_dmul>
 80144ca:	2300      	movs	r3, #0
 80144cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144d0:	9302      	str	r3, [sp, #8]
 80144d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80144d6:	46ab      	mov	fp, r5
 80144d8:	106d      	asrs	r5, r5, #1
 80144da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80144de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80144e2:	ec41 0b18 	vmov	d8, r0, r1
 80144e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80144ea:	2200      	movs	r2, #0
 80144ec:	4640      	mov	r0, r8
 80144ee:	4649      	mov	r1, r9
 80144f0:	4614      	mov	r4, r2
 80144f2:	461d      	mov	r5, r3
 80144f4:	f7ec f888 	bl	8000608 <__aeabi_dmul>
 80144f8:	4602      	mov	r2, r0
 80144fa:	460b      	mov	r3, r1
 80144fc:	4630      	mov	r0, r6
 80144fe:	4639      	mov	r1, r7
 8014500:	f7eb feca 	bl	8000298 <__aeabi_dsub>
 8014504:	ec53 2b19 	vmov	r2, r3, d9
 8014508:	4606      	mov	r6, r0
 801450a:	460f      	mov	r7, r1
 801450c:	4620      	mov	r0, r4
 801450e:	4629      	mov	r1, r5
 8014510:	f7eb fec2 	bl	8000298 <__aeabi_dsub>
 8014514:	4602      	mov	r2, r0
 8014516:	460b      	mov	r3, r1
 8014518:	4650      	mov	r0, sl
 801451a:	4659      	mov	r1, fp
 801451c:	f7eb febc 	bl	8000298 <__aeabi_dsub>
 8014520:	4642      	mov	r2, r8
 8014522:	464b      	mov	r3, r9
 8014524:	f7ec f870 	bl	8000608 <__aeabi_dmul>
 8014528:	4602      	mov	r2, r0
 801452a:	460b      	mov	r3, r1
 801452c:	4630      	mov	r0, r6
 801452e:	4639      	mov	r1, r7
 8014530:	f7eb feb2 	bl	8000298 <__aeabi_dsub>
 8014534:	ec53 2b1a 	vmov	r2, r3, d10
 8014538:	f7ec f866 	bl	8000608 <__aeabi_dmul>
 801453c:	ec53 2b18 	vmov	r2, r3, d8
 8014540:	ec41 0b19 	vmov	d9, r0, r1
 8014544:	ec51 0b18 	vmov	r0, r1, d8
 8014548:	f7ec f85e 	bl	8000608 <__aeabi_dmul>
 801454c:	a37c      	add	r3, pc, #496	; (adr r3, 8014740 <__ieee754_pow+0x708>)
 801454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014552:	4604      	mov	r4, r0
 8014554:	460d      	mov	r5, r1
 8014556:	f7ec f857 	bl	8000608 <__aeabi_dmul>
 801455a:	a37b      	add	r3, pc, #492	; (adr r3, 8014748 <__ieee754_pow+0x710>)
 801455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014560:	f7eb fe9c 	bl	800029c <__adddf3>
 8014564:	4622      	mov	r2, r4
 8014566:	462b      	mov	r3, r5
 8014568:	f7ec f84e 	bl	8000608 <__aeabi_dmul>
 801456c:	a378      	add	r3, pc, #480	; (adr r3, 8014750 <__ieee754_pow+0x718>)
 801456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014572:	f7eb fe93 	bl	800029c <__adddf3>
 8014576:	4622      	mov	r2, r4
 8014578:	462b      	mov	r3, r5
 801457a:	f7ec f845 	bl	8000608 <__aeabi_dmul>
 801457e:	a376      	add	r3, pc, #472	; (adr r3, 8014758 <__ieee754_pow+0x720>)
 8014580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014584:	f7eb fe8a 	bl	800029c <__adddf3>
 8014588:	4622      	mov	r2, r4
 801458a:	462b      	mov	r3, r5
 801458c:	f7ec f83c 	bl	8000608 <__aeabi_dmul>
 8014590:	a373      	add	r3, pc, #460	; (adr r3, 8014760 <__ieee754_pow+0x728>)
 8014592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014596:	f7eb fe81 	bl	800029c <__adddf3>
 801459a:	4622      	mov	r2, r4
 801459c:	462b      	mov	r3, r5
 801459e:	f7ec f833 	bl	8000608 <__aeabi_dmul>
 80145a2:	a371      	add	r3, pc, #452	; (adr r3, 8014768 <__ieee754_pow+0x730>)
 80145a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a8:	f7eb fe78 	bl	800029c <__adddf3>
 80145ac:	4622      	mov	r2, r4
 80145ae:	4606      	mov	r6, r0
 80145b0:	460f      	mov	r7, r1
 80145b2:	462b      	mov	r3, r5
 80145b4:	4620      	mov	r0, r4
 80145b6:	4629      	mov	r1, r5
 80145b8:	f7ec f826 	bl	8000608 <__aeabi_dmul>
 80145bc:	4602      	mov	r2, r0
 80145be:	460b      	mov	r3, r1
 80145c0:	4630      	mov	r0, r6
 80145c2:	4639      	mov	r1, r7
 80145c4:	f7ec f820 	bl	8000608 <__aeabi_dmul>
 80145c8:	4642      	mov	r2, r8
 80145ca:	4604      	mov	r4, r0
 80145cc:	460d      	mov	r5, r1
 80145ce:	464b      	mov	r3, r9
 80145d0:	ec51 0b18 	vmov	r0, r1, d8
 80145d4:	f7eb fe62 	bl	800029c <__adddf3>
 80145d8:	ec53 2b19 	vmov	r2, r3, d9
 80145dc:	f7ec f814 	bl	8000608 <__aeabi_dmul>
 80145e0:	4622      	mov	r2, r4
 80145e2:	462b      	mov	r3, r5
 80145e4:	f7eb fe5a 	bl	800029c <__adddf3>
 80145e8:	4642      	mov	r2, r8
 80145ea:	4682      	mov	sl, r0
 80145ec:	468b      	mov	fp, r1
 80145ee:	464b      	mov	r3, r9
 80145f0:	4640      	mov	r0, r8
 80145f2:	4649      	mov	r1, r9
 80145f4:	f7ec f808 	bl	8000608 <__aeabi_dmul>
 80145f8:	4b6b      	ldr	r3, [pc, #428]	; (80147a8 <__ieee754_pow+0x770>)
 80145fa:	2200      	movs	r2, #0
 80145fc:	4606      	mov	r6, r0
 80145fe:	460f      	mov	r7, r1
 8014600:	f7eb fe4c 	bl	800029c <__adddf3>
 8014604:	4652      	mov	r2, sl
 8014606:	465b      	mov	r3, fp
 8014608:	f7eb fe48 	bl	800029c <__adddf3>
 801460c:	2000      	movs	r0, #0
 801460e:	4604      	mov	r4, r0
 8014610:	460d      	mov	r5, r1
 8014612:	4602      	mov	r2, r0
 8014614:	460b      	mov	r3, r1
 8014616:	4640      	mov	r0, r8
 8014618:	4649      	mov	r1, r9
 801461a:	f7eb fff5 	bl	8000608 <__aeabi_dmul>
 801461e:	4b62      	ldr	r3, [pc, #392]	; (80147a8 <__ieee754_pow+0x770>)
 8014620:	4680      	mov	r8, r0
 8014622:	4689      	mov	r9, r1
 8014624:	2200      	movs	r2, #0
 8014626:	4620      	mov	r0, r4
 8014628:	4629      	mov	r1, r5
 801462a:	f7eb fe35 	bl	8000298 <__aeabi_dsub>
 801462e:	4632      	mov	r2, r6
 8014630:	463b      	mov	r3, r7
 8014632:	f7eb fe31 	bl	8000298 <__aeabi_dsub>
 8014636:	4602      	mov	r2, r0
 8014638:	460b      	mov	r3, r1
 801463a:	4650      	mov	r0, sl
 801463c:	4659      	mov	r1, fp
 801463e:	f7eb fe2b 	bl	8000298 <__aeabi_dsub>
 8014642:	ec53 2b18 	vmov	r2, r3, d8
 8014646:	f7eb ffdf 	bl	8000608 <__aeabi_dmul>
 801464a:	4622      	mov	r2, r4
 801464c:	4606      	mov	r6, r0
 801464e:	460f      	mov	r7, r1
 8014650:	462b      	mov	r3, r5
 8014652:	ec51 0b19 	vmov	r0, r1, d9
 8014656:	f7eb ffd7 	bl	8000608 <__aeabi_dmul>
 801465a:	4602      	mov	r2, r0
 801465c:	460b      	mov	r3, r1
 801465e:	4630      	mov	r0, r6
 8014660:	4639      	mov	r1, r7
 8014662:	f7eb fe1b 	bl	800029c <__adddf3>
 8014666:	4606      	mov	r6, r0
 8014668:	460f      	mov	r7, r1
 801466a:	4602      	mov	r2, r0
 801466c:	460b      	mov	r3, r1
 801466e:	4640      	mov	r0, r8
 8014670:	4649      	mov	r1, r9
 8014672:	f7eb fe13 	bl	800029c <__adddf3>
 8014676:	a33e      	add	r3, pc, #248	; (adr r3, 8014770 <__ieee754_pow+0x738>)
 8014678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467c:	2000      	movs	r0, #0
 801467e:	4604      	mov	r4, r0
 8014680:	460d      	mov	r5, r1
 8014682:	f7eb ffc1 	bl	8000608 <__aeabi_dmul>
 8014686:	4642      	mov	r2, r8
 8014688:	ec41 0b18 	vmov	d8, r0, r1
 801468c:	464b      	mov	r3, r9
 801468e:	4620      	mov	r0, r4
 8014690:	4629      	mov	r1, r5
 8014692:	f7eb fe01 	bl	8000298 <__aeabi_dsub>
 8014696:	4602      	mov	r2, r0
 8014698:	460b      	mov	r3, r1
 801469a:	4630      	mov	r0, r6
 801469c:	4639      	mov	r1, r7
 801469e:	f7eb fdfb 	bl	8000298 <__aeabi_dsub>
 80146a2:	a335      	add	r3, pc, #212	; (adr r3, 8014778 <__ieee754_pow+0x740>)
 80146a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a8:	f7eb ffae 	bl	8000608 <__aeabi_dmul>
 80146ac:	a334      	add	r3, pc, #208	; (adr r3, 8014780 <__ieee754_pow+0x748>)
 80146ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b2:	4606      	mov	r6, r0
 80146b4:	460f      	mov	r7, r1
 80146b6:	4620      	mov	r0, r4
 80146b8:	4629      	mov	r1, r5
 80146ba:	f7eb ffa5 	bl	8000608 <__aeabi_dmul>
 80146be:	4602      	mov	r2, r0
 80146c0:	460b      	mov	r3, r1
 80146c2:	4630      	mov	r0, r6
 80146c4:	4639      	mov	r1, r7
 80146c6:	f7eb fde9 	bl	800029c <__adddf3>
 80146ca:	9a07      	ldr	r2, [sp, #28]
 80146cc:	4b37      	ldr	r3, [pc, #220]	; (80147ac <__ieee754_pow+0x774>)
 80146ce:	4413      	add	r3, r2
 80146d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d4:	f7eb fde2 	bl	800029c <__adddf3>
 80146d8:	4682      	mov	sl, r0
 80146da:	9805      	ldr	r0, [sp, #20]
 80146dc:	468b      	mov	fp, r1
 80146de:	f7eb ff29 	bl	8000534 <__aeabi_i2d>
 80146e2:	9a07      	ldr	r2, [sp, #28]
 80146e4:	4b32      	ldr	r3, [pc, #200]	; (80147b0 <__ieee754_pow+0x778>)
 80146e6:	4413      	add	r3, r2
 80146e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146ec:	4606      	mov	r6, r0
 80146ee:	460f      	mov	r7, r1
 80146f0:	4652      	mov	r2, sl
 80146f2:	465b      	mov	r3, fp
 80146f4:	ec51 0b18 	vmov	r0, r1, d8
 80146f8:	f7eb fdd0 	bl	800029c <__adddf3>
 80146fc:	4642      	mov	r2, r8
 80146fe:	464b      	mov	r3, r9
 8014700:	f7eb fdcc 	bl	800029c <__adddf3>
 8014704:	4632      	mov	r2, r6
 8014706:	463b      	mov	r3, r7
 8014708:	f7eb fdc8 	bl	800029c <__adddf3>
 801470c:	2000      	movs	r0, #0
 801470e:	4632      	mov	r2, r6
 8014710:	463b      	mov	r3, r7
 8014712:	4604      	mov	r4, r0
 8014714:	460d      	mov	r5, r1
 8014716:	f7eb fdbf 	bl	8000298 <__aeabi_dsub>
 801471a:	4642      	mov	r2, r8
 801471c:	464b      	mov	r3, r9
 801471e:	f7eb fdbb 	bl	8000298 <__aeabi_dsub>
 8014722:	ec53 2b18 	vmov	r2, r3, d8
 8014726:	f7eb fdb7 	bl	8000298 <__aeabi_dsub>
 801472a:	4602      	mov	r2, r0
 801472c:	460b      	mov	r3, r1
 801472e:	4650      	mov	r0, sl
 8014730:	4659      	mov	r1, fp
 8014732:	e610      	b.n	8014356 <__ieee754_pow+0x31e>
 8014734:	2401      	movs	r4, #1
 8014736:	e6a1      	b.n	801447c <__ieee754_pow+0x444>
 8014738:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014788 <__ieee754_pow+0x750>
 801473c:	e617      	b.n	801436e <__ieee754_pow+0x336>
 801473e:	bf00      	nop
 8014740:	4a454eef 	.word	0x4a454eef
 8014744:	3fca7e28 	.word	0x3fca7e28
 8014748:	93c9db65 	.word	0x93c9db65
 801474c:	3fcd864a 	.word	0x3fcd864a
 8014750:	a91d4101 	.word	0xa91d4101
 8014754:	3fd17460 	.word	0x3fd17460
 8014758:	518f264d 	.word	0x518f264d
 801475c:	3fd55555 	.word	0x3fd55555
 8014760:	db6fabff 	.word	0xdb6fabff
 8014764:	3fdb6db6 	.word	0x3fdb6db6
 8014768:	33333303 	.word	0x33333303
 801476c:	3fe33333 	.word	0x3fe33333
 8014770:	e0000000 	.word	0xe0000000
 8014774:	3feec709 	.word	0x3feec709
 8014778:	dc3a03fd 	.word	0xdc3a03fd
 801477c:	3feec709 	.word	0x3feec709
 8014780:	145b01f5 	.word	0x145b01f5
 8014784:	be3e2fe0 	.word	0xbe3e2fe0
 8014788:	00000000 	.word	0x00000000
 801478c:	3ff00000 	.word	0x3ff00000
 8014790:	7ff00000 	.word	0x7ff00000
 8014794:	43400000 	.word	0x43400000
 8014798:	0003988e 	.word	0x0003988e
 801479c:	000bb679 	.word	0x000bb679
 80147a0:	08015fc8 	.word	0x08015fc8
 80147a4:	3ff00000 	.word	0x3ff00000
 80147a8:	40080000 	.word	0x40080000
 80147ac:	08015fe8 	.word	0x08015fe8
 80147b0:	08015fd8 	.word	0x08015fd8
 80147b4:	a3b5      	add	r3, pc, #724	; (adr r3, 8014a8c <__ieee754_pow+0xa54>)
 80147b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ba:	4640      	mov	r0, r8
 80147bc:	4649      	mov	r1, r9
 80147be:	f7eb fd6d 	bl	800029c <__adddf3>
 80147c2:	4622      	mov	r2, r4
 80147c4:	ec41 0b1a 	vmov	d10, r0, r1
 80147c8:	462b      	mov	r3, r5
 80147ca:	4630      	mov	r0, r6
 80147cc:	4639      	mov	r1, r7
 80147ce:	f7eb fd63 	bl	8000298 <__aeabi_dsub>
 80147d2:	4602      	mov	r2, r0
 80147d4:	460b      	mov	r3, r1
 80147d6:	ec51 0b1a 	vmov	r0, r1, d10
 80147da:	f7ec f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 80147de:	2800      	cmp	r0, #0
 80147e0:	f47f ae04 	bne.w	80143ec <__ieee754_pow+0x3b4>
 80147e4:	4aa4      	ldr	r2, [pc, #656]	; (8014a78 <__ieee754_pow+0xa40>)
 80147e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80147ea:	4293      	cmp	r3, r2
 80147ec:	f340 8108 	ble.w	8014a00 <__ieee754_pow+0x9c8>
 80147f0:	151b      	asrs	r3, r3, #20
 80147f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80147f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80147fa:	fa4a f303 	asr.w	r3, sl, r3
 80147fe:	445b      	add	r3, fp
 8014800:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014804:	4e9d      	ldr	r6, [pc, #628]	; (8014a7c <__ieee754_pow+0xa44>)
 8014806:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801480a:	4116      	asrs	r6, r2
 801480c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014810:	2000      	movs	r0, #0
 8014812:	ea23 0106 	bic.w	r1, r3, r6
 8014816:	f1c2 0214 	rsb	r2, r2, #20
 801481a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801481e:	fa4a fa02 	asr.w	sl, sl, r2
 8014822:	f1bb 0f00 	cmp.w	fp, #0
 8014826:	4602      	mov	r2, r0
 8014828:	460b      	mov	r3, r1
 801482a:	4620      	mov	r0, r4
 801482c:	4629      	mov	r1, r5
 801482e:	bfb8      	it	lt
 8014830:	f1ca 0a00 	rsblt	sl, sl, #0
 8014834:	f7eb fd30 	bl	8000298 <__aeabi_dsub>
 8014838:	ec41 0b19 	vmov	d9, r0, r1
 801483c:	4642      	mov	r2, r8
 801483e:	464b      	mov	r3, r9
 8014840:	ec51 0b19 	vmov	r0, r1, d9
 8014844:	f7eb fd2a 	bl	800029c <__adddf3>
 8014848:	a37b      	add	r3, pc, #492	; (adr r3, 8014a38 <__ieee754_pow+0xa00>)
 801484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484e:	2000      	movs	r0, #0
 8014850:	4604      	mov	r4, r0
 8014852:	460d      	mov	r5, r1
 8014854:	f7eb fed8 	bl	8000608 <__aeabi_dmul>
 8014858:	ec53 2b19 	vmov	r2, r3, d9
 801485c:	4606      	mov	r6, r0
 801485e:	460f      	mov	r7, r1
 8014860:	4620      	mov	r0, r4
 8014862:	4629      	mov	r1, r5
 8014864:	f7eb fd18 	bl	8000298 <__aeabi_dsub>
 8014868:	4602      	mov	r2, r0
 801486a:	460b      	mov	r3, r1
 801486c:	4640      	mov	r0, r8
 801486e:	4649      	mov	r1, r9
 8014870:	f7eb fd12 	bl	8000298 <__aeabi_dsub>
 8014874:	a372      	add	r3, pc, #456	; (adr r3, 8014a40 <__ieee754_pow+0xa08>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	f7eb fec5 	bl	8000608 <__aeabi_dmul>
 801487e:	a372      	add	r3, pc, #456	; (adr r3, 8014a48 <__ieee754_pow+0xa10>)
 8014880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014884:	4680      	mov	r8, r0
 8014886:	4689      	mov	r9, r1
 8014888:	4620      	mov	r0, r4
 801488a:	4629      	mov	r1, r5
 801488c:	f7eb febc 	bl	8000608 <__aeabi_dmul>
 8014890:	4602      	mov	r2, r0
 8014892:	460b      	mov	r3, r1
 8014894:	4640      	mov	r0, r8
 8014896:	4649      	mov	r1, r9
 8014898:	f7eb fd00 	bl	800029c <__adddf3>
 801489c:	4604      	mov	r4, r0
 801489e:	460d      	mov	r5, r1
 80148a0:	4602      	mov	r2, r0
 80148a2:	460b      	mov	r3, r1
 80148a4:	4630      	mov	r0, r6
 80148a6:	4639      	mov	r1, r7
 80148a8:	f7eb fcf8 	bl	800029c <__adddf3>
 80148ac:	4632      	mov	r2, r6
 80148ae:	463b      	mov	r3, r7
 80148b0:	4680      	mov	r8, r0
 80148b2:	4689      	mov	r9, r1
 80148b4:	f7eb fcf0 	bl	8000298 <__aeabi_dsub>
 80148b8:	4602      	mov	r2, r0
 80148ba:	460b      	mov	r3, r1
 80148bc:	4620      	mov	r0, r4
 80148be:	4629      	mov	r1, r5
 80148c0:	f7eb fcea 	bl	8000298 <__aeabi_dsub>
 80148c4:	4642      	mov	r2, r8
 80148c6:	4606      	mov	r6, r0
 80148c8:	460f      	mov	r7, r1
 80148ca:	464b      	mov	r3, r9
 80148cc:	4640      	mov	r0, r8
 80148ce:	4649      	mov	r1, r9
 80148d0:	f7eb fe9a 	bl	8000608 <__aeabi_dmul>
 80148d4:	a35e      	add	r3, pc, #376	; (adr r3, 8014a50 <__ieee754_pow+0xa18>)
 80148d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148da:	4604      	mov	r4, r0
 80148dc:	460d      	mov	r5, r1
 80148de:	f7eb fe93 	bl	8000608 <__aeabi_dmul>
 80148e2:	a35d      	add	r3, pc, #372	; (adr r3, 8014a58 <__ieee754_pow+0xa20>)
 80148e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e8:	f7eb fcd6 	bl	8000298 <__aeabi_dsub>
 80148ec:	4622      	mov	r2, r4
 80148ee:	462b      	mov	r3, r5
 80148f0:	f7eb fe8a 	bl	8000608 <__aeabi_dmul>
 80148f4:	a35a      	add	r3, pc, #360	; (adr r3, 8014a60 <__ieee754_pow+0xa28>)
 80148f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fa:	f7eb fccf 	bl	800029c <__adddf3>
 80148fe:	4622      	mov	r2, r4
 8014900:	462b      	mov	r3, r5
 8014902:	f7eb fe81 	bl	8000608 <__aeabi_dmul>
 8014906:	a358      	add	r3, pc, #352	; (adr r3, 8014a68 <__ieee754_pow+0xa30>)
 8014908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490c:	f7eb fcc4 	bl	8000298 <__aeabi_dsub>
 8014910:	4622      	mov	r2, r4
 8014912:	462b      	mov	r3, r5
 8014914:	f7eb fe78 	bl	8000608 <__aeabi_dmul>
 8014918:	a355      	add	r3, pc, #340	; (adr r3, 8014a70 <__ieee754_pow+0xa38>)
 801491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801491e:	f7eb fcbd 	bl	800029c <__adddf3>
 8014922:	4622      	mov	r2, r4
 8014924:	462b      	mov	r3, r5
 8014926:	f7eb fe6f 	bl	8000608 <__aeabi_dmul>
 801492a:	4602      	mov	r2, r0
 801492c:	460b      	mov	r3, r1
 801492e:	4640      	mov	r0, r8
 8014930:	4649      	mov	r1, r9
 8014932:	f7eb fcb1 	bl	8000298 <__aeabi_dsub>
 8014936:	4604      	mov	r4, r0
 8014938:	460d      	mov	r5, r1
 801493a:	4602      	mov	r2, r0
 801493c:	460b      	mov	r3, r1
 801493e:	4640      	mov	r0, r8
 8014940:	4649      	mov	r1, r9
 8014942:	f7eb fe61 	bl	8000608 <__aeabi_dmul>
 8014946:	2200      	movs	r2, #0
 8014948:	ec41 0b19 	vmov	d9, r0, r1
 801494c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014950:	4620      	mov	r0, r4
 8014952:	4629      	mov	r1, r5
 8014954:	f7eb fca0 	bl	8000298 <__aeabi_dsub>
 8014958:	4602      	mov	r2, r0
 801495a:	460b      	mov	r3, r1
 801495c:	ec51 0b19 	vmov	r0, r1, d9
 8014960:	f7eb ff7c 	bl	800085c <__aeabi_ddiv>
 8014964:	4632      	mov	r2, r6
 8014966:	4604      	mov	r4, r0
 8014968:	460d      	mov	r5, r1
 801496a:	463b      	mov	r3, r7
 801496c:	4640      	mov	r0, r8
 801496e:	4649      	mov	r1, r9
 8014970:	f7eb fe4a 	bl	8000608 <__aeabi_dmul>
 8014974:	4632      	mov	r2, r6
 8014976:	463b      	mov	r3, r7
 8014978:	f7eb fc90 	bl	800029c <__adddf3>
 801497c:	4602      	mov	r2, r0
 801497e:	460b      	mov	r3, r1
 8014980:	4620      	mov	r0, r4
 8014982:	4629      	mov	r1, r5
 8014984:	f7eb fc88 	bl	8000298 <__aeabi_dsub>
 8014988:	4642      	mov	r2, r8
 801498a:	464b      	mov	r3, r9
 801498c:	f7eb fc84 	bl	8000298 <__aeabi_dsub>
 8014990:	460b      	mov	r3, r1
 8014992:	4602      	mov	r2, r0
 8014994:	493a      	ldr	r1, [pc, #232]	; (8014a80 <__ieee754_pow+0xa48>)
 8014996:	2000      	movs	r0, #0
 8014998:	f7eb fc7e 	bl	8000298 <__aeabi_dsub>
 801499c:	ec41 0b10 	vmov	d0, r0, r1
 80149a0:	ee10 3a90 	vmov	r3, s1
 80149a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80149a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80149ac:	da2b      	bge.n	8014a06 <__ieee754_pow+0x9ce>
 80149ae:	4650      	mov	r0, sl
 80149b0:	f000 fb0e 	bl	8014fd0 <scalbn>
 80149b4:	ec51 0b10 	vmov	r0, r1, d0
 80149b8:	ec53 2b18 	vmov	r2, r3, d8
 80149bc:	f7ff bbed 	b.w	801419a <__ieee754_pow+0x162>
 80149c0:	4b30      	ldr	r3, [pc, #192]	; (8014a84 <__ieee754_pow+0xa4c>)
 80149c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80149c6:	429e      	cmp	r6, r3
 80149c8:	f77f af0c 	ble.w	80147e4 <__ieee754_pow+0x7ac>
 80149cc:	4b2e      	ldr	r3, [pc, #184]	; (8014a88 <__ieee754_pow+0xa50>)
 80149ce:	440b      	add	r3, r1
 80149d0:	4303      	orrs	r3, r0
 80149d2:	d009      	beq.n	80149e8 <__ieee754_pow+0x9b0>
 80149d4:	ec51 0b18 	vmov	r0, r1, d8
 80149d8:	2200      	movs	r2, #0
 80149da:	2300      	movs	r3, #0
 80149dc:	f7ec f886 	bl	8000aec <__aeabi_dcmplt>
 80149e0:	3800      	subs	r0, #0
 80149e2:	bf18      	it	ne
 80149e4:	2001      	movne	r0, #1
 80149e6:	e447      	b.n	8014278 <__ieee754_pow+0x240>
 80149e8:	4622      	mov	r2, r4
 80149ea:	462b      	mov	r3, r5
 80149ec:	f7eb fc54 	bl	8000298 <__aeabi_dsub>
 80149f0:	4642      	mov	r2, r8
 80149f2:	464b      	mov	r3, r9
 80149f4:	f7ec f88e 	bl	8000b14 <__aeabi_dcmpge>
 80149f8:	2800      	cmp	r0, #0
 80149fa:	f43f aef3 	beq.w	80147e4 <__ieee754_pow+0x7ac>
 80149fe:	e7e9      	b.n	80149d4 <__ieee754_pow+0x99c>
 8014a00:	f04f 0a00 	mov.w	sl, #0
 8014a04:	e71a      	b.n	801483c <__ieee754_pow+0x804>
 8014a06:	ec51 0b10 	vmov	r0, r1, d0
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	e7d4      	b.n	80149b8 <__ieee754_pow+0x980>
 8014a0e:	491c      	ldr	r1, [pc, #112]	; (8014a80 <__ieee754_pow+0xa48>)
 8014a10:	2000      	movs	r0, #0
 8014a12:	f7ff bb30 	b.w	8014076 <__ieee754_pow+0x3e>
 8014a16:	2000      	movs	r0, #0
 8014a18:	2100      	movs	r1, #0
 8014a1a:	f7ff bb2c 	b.w	8014076 <__ieee754_pow+0x3e>
 8014a1e:	4630      	mov	r0, r6
 8014a20:	4639      	mov	r1, r7
 8014a22:	f7ff bb28 	b.w	8014076 <__ieee754_pow+0x3e>
 8014a26:	9204      	str	r2, [sp, #16]
 8014a28:	f7ff bb7a 	b.w	8014120 <__ieee754_pow+0xe8>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	f7ff bb64 	b.w	80140fa <__ieee754_pow+0xc2>
 8014a32:	bf00      	nop
 8014a34:	f3af 8000 	nop.w
 8014a38:	00000000 	.word	0x00000000
 8014a3c:	3fe62e43 	.word	0x3fe62e43
 8014a40:	fefa39ef 	.word	0xfefa39ef
 8014a44:	3fe62e42 	.word	0x3fe62e42
 8014a48:	0ca86c39 	.word	0x0ca86c39
 8014a4c:	be205c61 	.word	0xbe205c61
 8014a50:	72bea4d0 	.word	0x72bea4d0
 8014a54:	3e663769 	.word	0x3e663769
 8014a58:	c5d26bf1 	.word	0xc5d26bf1
 8014a5c:	3ebbbd41 	.word	0x3ebbbd41
 8014a60:	af25de2c 	.word	0xaf25de2c
 8014a64:	3f11566a 	.word	0x3f11566a
 8014a68:	16bebd93 	.word	0x16bebd93
 8014a6c:	3f66c16c 	.word	0x3f66c16c
 8014a70:	5555553e 	.word	0x5555553e
 8014a74:	3fc55555 	.word	0x3fc55555
 8014a78:	3fe00000 	.word	0x3fe00000
 8014a7c:	000fffff 	.word	0x000fffff
 8014a80:	3ff00000 	.word	0x3ff00000
 8014a84:	4090cbff 	.word	0x4090cbff
 8014a88:	3f6f3400 	.word	0x3f6f3400
 8014a8c:	652b82fe 	.word	0x652b82fe
 8014a90:	3c971547 	.word	0x3c971547

08014a94 <__ieee754_sqrt>:
 8014a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a98:	ec55 4b10 	vmov	r4, r5, d0
 8014a9c:	4e55      	ldr	r6, [pc, #340]	; (8014bf4 <__ieee754_sqrt+0x160>)
 8014a9e:	43ae      	bics	r6, r5
 8014aa0:	ee10 0a10 	vmov	r0, s0
 8014aa4:	ee10 3a10 	vmov	r3, s0
 8014aa8:	462a      	mov	r2, r5
 8014aaa:	4629      	mov	r1, r5
 8014aac:	d110      	bne.n	8014ad0 <__ieee754_sqrt+0x3c>
 8014aae:	ee10 2a10 	vmov	r2, s0
 8014ab2:	462b      	mov	r3, r5
 8014ab4:	f7eb fda8 	bl	8000608 <__aeabi_dmul>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	4620      	mov	r0, r4
 8014abe:	4629      	mov	r1, r5
 8014ac0:	f7eb fbec 	bl	800029c <__adddf3>
 8014ac4:	4604      	mov	r4, r0
 8014ac6:	460d      	mov	r5, r1
 8014ac8:	ec45 4b10 	vmov	d0, r4, r5
 8014acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad0:	2d00      	cmp	r5, #0
 8014ad2:	dc10      	bgt.n	8014af6 <__ieee754_sqrt+0x62>
 8014ad4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014ad8:	4330      	orrs	r0, r6
 8014ada:	d0f5      	beq.n	8014ac8 <__ieee754_sqrt+0x34>
 8014adc:	b15d      	cbz	r5, 8014af6 <__ieee754_sqrt+0x62>
 8014ade:	ee10 2a10 	vmov	r2, s0
 8014ae2:	462b      	mov	r3, r5
 8014ae4:	ee10 0a10 	vmov	r0, s0
 8014ae8:	f7eb fbd6 	bl	8000298 <__aeabi_dsub>
 8014aec:	4602      	mov	r2, r0
 8014aee:	460b      	mov	r3, r1
 8014af0:	f7eb feb4 	bl	800085c <__aeabi_ddiv>
 8014af4:	e7e6      	b.n	8014ac4 <__ieee754_sqrt+0x30>
 8014af6:	1512      	asrs	r2, r2, #20
 8014af8:	d074      	beq.n	8014be4 <__ieee754_sqrt+0x150>
 8014afa:	07d4      	lsls	r4, r2, #31
 8014afc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014b00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8014b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014b08:	bf5e      	ittt	pl
 8014b0a:	0fda      	lsrpl	r2, r3, #31
 8014b0c:	005b      	lslpl	r3, r3, #1
 8014b0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8014b12:	2400      	movs	r4, #0
 8014b14:	0fda      	lsrs	r2, r3, #31
 8014b16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8014b1a:	107f      	asrs	r7, r7, #1
 8014b1c:	005b      	lsls	r3, r3, #1
 8014b1e:	2516      	movs	r5, #22
 8014b20:	4620      	mov	r0, r4
 8014b22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014b26:	1886      	adds	r6, r0, r2
 8014b28:	428e      	cmp	r6, r1
 8014b2a:	bfde      	ittt	le
 8014b2c:	1b89      	suble	r1, r1, r6
 8014b2e:	18b0      	addle	r0, r6, r2
 8014b30:	18a4      	addle	r4, r4, r2
 8014b32:	0049      	lsls	r1, r1, #1
 8014b34:	3d01      	subs	r5, #1
 8014b36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8014b3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8014b3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014b42:	d1f0      	bne.n	8014b26 <__ieee754_sqrt+0x92>
 8014b44:	462a      	mov	r2, r5
 8014b46:	f04f 0e20 	mov.w	lr, #32
 8014b4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014b4e:	4281      	cmp	r1, r0
 8014b50:	eb06 0c05 	add.w	ip, r6, r5
 8014b54:	dc02      	bgt.n	8014b5c <__ieee754_sqrt+0xc8>
 8014b56:	d113      	bne.n	8014b80 <__ieee754_sqrt+0xec>
 8014b58:	459c      	cmp	ip, r3
 8014b5a:	d811      	bhi.n	8014b80 <__ieee754_sqrt+0xec>
 8014b5c:	f1bc 0f00 	cmp.w	ip, #0
 8014b60:	eb0c 0506 	add.w	r5, ip, r6
 8014b64:	da43      	bge.n	8014bee <__ieee754_sqrt+0x15a>
 8014b66:	2d00      	cmp	r5, #0
 8014b68:	db41      	blt.n	8014bee <__ieee754_sqrt+0x15a>
 8014b6a:	f100 0801 	add.w	r8, r0, #1
 8014b6e:	1a09      	subs	r1, r1, r0
 8014b70:	459c      	cmp	ip, r3
 8014b72:	bf88      	it	hi
 8014b74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8014b78:	eba3 030c 	sub.w	r3, r3, ip
 8014b7c:	4432      	add	r2, r6
 8014b7e:	4640      	mov	r0, r8
 8014b80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8014b84:	f1be 0e01 	subs.w	lr, lr, #1
 8014b88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8014b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014b90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014b94:	d1db      	bne.n	8014b4e <__ieee754_sqrt+0xba>
 8014b96:	430b      	orrs	r3, r1
 8014b98:	d006      	beq.n	8014ba8 <__ieee754_sqrt+0x114>
 8014b9a:	1c50      	adds	r0, r2, #1
 8014b9c:	bf13      	iteet	ne
 8014b9e:	3201      	addne	r2, #1
 8014ba0:	3401      	addeq	r4, #1
 8014ba2:	4672      	moveq	r2, lr
 8014ba4:	f022 0201 	bicne.w	r2, r2, #1
 8014ba8:	1063      	asrs	r3, r4, #1
 8014baa:	0852      	lsrs	r2, r2, #1
 8014bac:	07e1      	lsls	r1, r4, #31
 8014bae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014bb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014bb6:	bf48      	it	mi
 8014bb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8014bbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	e781      	b.n	8014ac8 <__ieee754_sqrt+0x34>
 8014bc4:	0ad9      	lsrs	r1, r3, #11
 8014bc6:	3815      	subs	r0, #21
 8014bc8:	055b      	lsls	r3, r3, #21
 8014bca:	2900      	cmp	r1, #0
 8014bcc:	d0fa      	beq.n	8014bc4 <__ieee754_sqrt+0x130>
 8014bce:	02cd      	lsls	r5, r1, #11
 8014bd0:	d50a      	bpl.n	8014be8 <__ieee754_sqrt+0x154>
 8014bd2:	f1c2 0420 	rsb	r4, r2, #32
 8014bd6:	fa23 f404 	lsr.w	r4, r3, r4
 8014bda:	1e55      	subs	r5, r2, #1
 8014bdc:	4093      	lsls	r3, r2
 8014bde:	4321      	orrs	r1, r4
 8014be0:	1b42      	subs	r2, r0, r5
 8014be2:	e78a      	b.n	8014afa <__ieee754_sqrt+0x66>
 8014be4:	4610      	mov	r0, r2
 8014be6:	e7f0      	b.n	8014bca <__ieee754_sqrt+0x136>
 8014be8:	0049      	lsls	r1, r1, #1
 8014bea:	3201      	adds	r2, #1
 8014bec:	e7ef      	b.n	8014bce <__ieee754_sqrt+0x13a>
 8014bee:	4680      	mov	r8, r0
 8014bf0:	e7bd      	b.n	8014b6e <__ieee754_sqrt+0xda>
 8014bf2:	bf00      	nop
 8014bf4:	7ff00000 	.word	0x7ff00000

08014bf8 <with_errno>:
 8014bf8:	b570      	push	{r4, r5, r6, lr}
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	460d      	mov	r5, r1
 8014bfe:	4616      	mov	r6, r2
 8014c00:	f7fb fe74 	bl	80108ec <__errno>
 8014c04:	4629      	mov	r1, r5
 8014c06:	6006      	str	r6, [r0, #0]
 8014c08:	4620      	mov	r0, r4
 8014c0a:	bd70      	pop	{r4, r5, r6, pc}

08014c0c <xflow>:
 8014c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c0e:	4614      	mov	r4, r2
 8014c10:	461d      	mov	r5, r3
 8014c12:	b108      	cbz	r0, 8014c18 <xflow+0xc>
 8014c14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c18:	e9cd 2300 	strd	r2, r3, [sp]
 8014c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c20:	4620      	mov	r0, r4
 8014c22:	4629      	mov	r1, r5
 8014c24:	f7eb fcf0 	bl	8000608 <__aeabi_dmul>
 8014c28:	2222      	movs	r2, #34	; 0x22
 8014c2a:	b003      	add	sp, #12
 8014c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c30:	f7ff bfe2 	b.w	8014bf8 <with_errno>

08014c34 <__math_uflow>:
 8014c34:	b508      	push	{r3, lr}
 8014c36:	2200      	movs	r2, #0
 8014c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014c3c:	f7ff ffe6 	bl	8014c0c <xflow>
 8014c40:	ec41 0b10 	vmov	d0, r0, r1
 8014c44:	bd08      	pop	{r3, pc}

08014c46 <__math_oflow>:
 8014c46:	b508      	push	{r3, lr}
 8014c48:	2200      	movs	r2, #0
 8014c4a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014c4e:	f7ff ffdd 	bl	8014c0c <xflow>
 8014c52:	ec41 0b10 	vmov	d0, r0, r1
 8014c56:	bd08      	pop	{r3, pc}

08014c58 <atan>:
 8014c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5c:	ec55 4b10 	vmov	r4, r5, d0
 8014c60:	4bc3      	ldr	r3, [pc, #780]	; (8014f70 <atan+0x318>)
 8014c62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014c66:	429e      	cmp	r6, r3
 8014c68:	46ab      	mov	fp, r5
 8014c6a:	dd18      	ble.n	8014c9e <atan+0x46>
 8014c6c:	4bc1      	ldr	r3, [pc, #772]	; (8014f74 <atan+0x31c>)
 8014c6e:	429e      	cmp	r6, r3
 8014c70:	dc01      	bgt.n	8014c76 <atan+0x1e>
 8014c72:	d109      	bne.n	8014c88 <atan+0x30>
 8014c74:	b144      	cbz	r4, 8014c88 <atan+0x30>
 8014c76:	4622      	mov	r2, r4
 8014c78:	462b      	mov	r3, r5
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	f7eb fb0d 	bl	800029c <__adddf3>
 8014c82:	4604      	mov	r4, r0
 8014c84:	460d      	mov	r5, r1
 8014c86:	e006      	b.n	8014c96 <atan+0x3e>
 8014c88:	f1bb 0f00 	cmp.w	fp, #0
 8014c8c:	f300 8131 	bgt.w	8014ef2 <atan+0x29a>
 8014c90:	a59b      	add	r5, pc, #620	; (adr r5, 8014f00 <atan+0x2a8>)
 8014c92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014c96:	ec45 4b10 	vmov	d0, r4, r5
 8014c9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9e:	4bb6      	ldr	r3, [pc, #728]	; (8014f78 <atan+0x320>)
 8014ca0:	429e      	cmp	r6, r3
 8014ca2:	dc14      	bgt.n	8014cce <atan+0x76>
 8014ca4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014ca8:	429e      	cmp	r6, r3
 8014caa:	dc0d      	bgt.n	8014cc8 <atan+0x70>
 8014cac:	a396      	add	r3, pc, #600	; (adr r3, 8014f08 <atan+0x2b0>)
 8014cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb2:	ee10 0a10 	vmov	r0, s0
 8014cb6:	4629      	mov	r1, r5
 8014cb8:	f7eb faf0 	bl	800029c <__adddf3>
 8014cbc:	4baf      	ldr	r3, [pc, #700]	; (8014f7c <atan+0x324>)
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f7eb ff32 	bl	8000b28 <__aeabi_dcmpgt>
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d1e6      	bne.n	8014c96 <atan+0x3e>
 8014cc8:	f04f 3aff 	mov.w	sl, #4294967295
 8014ccc:	e02b      	b.n	8014d26 <atan+0xce>
 8014cce:	f000 f963 	bl	8014f98 <fabs>
 8014cd2:	4bab      	ldr	r3, [pc, #684]	; (8014f80 <atan+0x328>)
 8014cd4:	429e      	cmp	r6, r3
 8014cd6:	ec55 4b10 	vmov	r4, r5, d0
 8014cda:	f300 80bf 	bgt.w	8014e5c <atan+0x204>
 8014cde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014ce2:	429e      	cmp	r6, r3
 8014ce4:	f300 80a0 	bgt.w	8014e28 <atan+0x1d0>
 8014ce8:	ee10 2a10 	vmov	r2, s0
 8014cec:	ee10 0a10 	vmov	r0, s0
 8014cf0:	462b      	mov	r3, r5
 8014cf2:	4629      	mov	r1, r5
 8014cf4:	f7eb fad2 	bl	800029c <__adddf3>
 8014cf8:	4ba0      	ldr	r3, [pc, #640]	; (8014f7c <atan+0x324>)
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f7eb facc 	bl	8000298 <__aeabi_dsub>
 8014d00:	2200      	movs	r2, #0
 8014d02:	4606      	mov	r6, r0
 8014d04:	460f      	mov	r7, r1
 8014d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	4629      	mov	r1, r5
 8014d0e:	f7eb fac5 	bl	800029c <__adddf3>
 8014d12:	4602      	mov	r2, r0
 8014d14:	460b      	mov	r3, r1
 8014d16:	4630      	mov	r0, r6
 8014d18:	4639      	mov	r1, r7
 8014d1a:	f7eb fd9f 	bl	800085c <__aeabi_ddiv>
 8014d1e:	f04f 0a00 	mov.w	sl, #0
 8014d22:	4604      	mov	r4, r0
 8014d24:	460d      	mov	r5, r1
 8014d26:	4622      	mov	r2, r4
 8014d28:	462b      	mov	r3, r5
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	f7eb fc6b 	bl	8000608 <__aeabi_dmul>
 8014d32:	4602      	mov	r2, r0
 8014d34:	460b      	mov	r3, r1
 8014d36:	4680      	mov	r8, r0
 8014d38:	4689      	mov	r9, r1
 8014d3a:	f7eb fc65 	bl	8000608 <__aeabi_dmul>
 8014d3e:	a374      	add	r3, pc, #464	; (adr r3, 8014f10 <atan+0x2b8>)
 8014d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d44:	4606      	mov	r6, r0
 8014d46:	460f      	mov	r7, r1
 8014d48:	f7eb fc5e 	bl	8000608 <__aeabi_dmul>
 8014d4c:	a372      	add	r3, pc, #456	; (adr r3, 8014f18 <atan+0x2c0>)
 8014d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d52:	f7eb faa3 	bl	800029c <__adddf3>
 8014d56:	4632      	mov	r2, r6
 8014d58:	463b      	mov	r3, r7
 8014d5a:	f7eb fc55 	bl	8000608 <__aeabi_dmul>
 8014d5e:	a370      	add	r3, pc, #448	; (adr r3, 8014f20 <atan+0x2c8>)
 8014d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d64:	f7eb fa9a 	bl	800029c <__adddf3>
 8014d68:	4632      	mov	r2, r6
 8014d6a:	463b      	mov	r3, r7
 8014d6c:	f7eb fc4c 	bl	8000608 <__aeabi_dmul>
 8014d70:	a36d      	add	r3, pc, #436	; (adr r3, 8014f28 <atan+0x2d0>)
 8014d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d76:	f7eb fa91 	bl	800029c <__adddf3>
 8014d7a:	4632      	mov	r2, r6
 8014d7c:	463b      	mov	r3, r7
 8014d7e:	f7eb fc43 	bl	8000608 <__aeabi_dmul>
 8014d82:	a36b      	add	r3, pc, #428	; (adr r3, 8014f30 <atan+0x2d8>)
 8014d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d88:	f7eb fa88 	bl	800029c <__adddf3>
 8014d8c:	4632      	mov	r2, r6
 8014d8e:	463b      	mov	r3, r7
 8014d90:	f7eb fc3a 	bl	8000608 <__aeabi_dmul>
 8014d94:	a368      	add	r3, pc, #416	; (adr r3, 8014f38 <atan+0x2e0>)
 8014d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9a:	f7eb fa7f 	bl	800029c <__adddf3>
 8014d9e:	4642      	mov	r2, r8
 8014da0:	464b      	mov	r3, r9
 8014da2:	f7eb fc31 	bl	8000608 <__aeabi_dmul>
 8014da6:	a366      	add	r3, pc, #408	; (adr r3, 8014f40 <atan+0x2e8>)
 8014da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dac:	4680      	mov	r8, r0
 8014dae:	4689      	mov	r9, r1
 8014db0:	4630      	mov	r0, r6
 8014db2:	4639      	mov	r1, r7
 8014db4:	f7eb fc28 	bl	8000608 <__aeabi_dmul>
 8014db8:	a363      	add	r3, pc, #396	; (adr r3, 8014f48 <atan+0x2f0>)
 8014dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbe:	f7eb fa6b 	bl	8000298 <__aeabi_dsub>
 8014dc2:	4632      	mov	r2, r6
 8014dc4:	463b      	mov	r3, r7
 8014dc6:	f7eb fc1f 	bl	8000608 <__aeabi_dmul>
 8014dca:	a361      	add	r3, pc, #388	; (adr r3, 8014f50 <atan+0x2f8>)
 8014dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd0:	f7eb fa62 	bl	8000298 <__aeabi_dsub>
 8014dd4:	4632      	mov	r2, r6
 8014dd6:	463b      	mov	r3, r7
 8014dd8:	f7eb fc16 	bl	8000608 <__aeabi_dmul>
 8014ddc:	a35e      	add	r3, pc, #376	; (adr r3, 8014f58 <atan+0x300>)
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	f7eb fa59 	bl	8000298 <__aeabi_dsub>
 8014de6:	4632      	mov	r2, r6
 8014de8:	463b      	mov	r3, r7
 8014dea:	f7eb fc0d 	bl	8000608 <__aeabi_dmul>
 8014dee:	a35c      	add	r3, pc, #368	; (adr r3, 8014f60 <atan+0x308>)
 8014df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df4:	f7eb fa50 	bl	8000298 <__aeabi_dsub>
 8014df8:	4632      	mov	r2, r6
 8014dfa:	463b      	mov	r3, r7
 8014dfc:	f7eb fc04 	bl	8000608 <__aeabi_dmul>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	4640      	mov	r0, r8
 8014e06:	4649      	mov	r1, r9
 8014e08:	f7eb fa48 	bl	800029c <__adddf3>
 8014e0c:	4622      	mov	r2, r4
 8014e0e:	462b      	mov	r3, r5
 8014e10:	f7eb fbfa 	bl	8000608 <__aeabi_dmul>
 8014e14:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014e18:	4602      	mov	r2, r0
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	d14b      	bne.n	8014eb6 <atan+0x25e>
 8014e1e:	4620      	mov	r0, r4
 8014e20:	4629      	mov	r1, r5
 8014e22:	f7eb fa39 	bl	8000298 <__aeabi_dsub>
 8014e26:	e72c      	b.n	8014c82 <atan+0x2a>
 8014e28:	ee10 0a10 	vmov	r0, s0
 8014e2c:	4b53      	ldr	r3, [pc, #332]	; (8014f7c <atan+0x324>)
 8014e2e:	2200      	movs	r2, #0
 8014e30:	4629      	mov	r1, r5
 8014e32:	f7eb fa31 	bl	8000298 <__aeabi_dsub>
 8014e36:	4b51      	ldr	r3, [pc, #324]	; (8014f7c <atan+0x324>)
 8014e38:	4606      	mov	r6, r0
 8014e3a:	460f      	mov	r7, r1
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	4620      	mov	r0, r4
 8014e40:	4629      	mov	r1, r5
 8014e42:	f7eb fa2b 	bl	800029c <__adddf3>
 8014e46:	4602      	mov	r2, r0
 8014e48:	460b      	mov	r3, r1
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	f7eb fd05 	bl	800085c <__aeabi_ddiv>
 8014e52:	f04f 0a01 	mov.w	sl, #1
 8014e56:	4604      	mov	r4, r0
 8014e58:	460d      	mov	r5, r1
 8014e5a:	e764      	b.n	8014d26 <atan+0xce>
 8014e5c:	4b49      	ldr	r3, [pc, #292]	; (8014f84 <atan+0x32c>)
 8014e5e:	429e      	cmp	r6, r3
 8014e60:	da1d      	bge.n	8014e9e <atan+0x246>
 8014e62:	ee10 0a10 	vmov	r0, s0
 8014e66:	4b48      	ldr	r3, [pc, #288]	; (8014f88 <atan+0x330>)
 8014e68:	2200      	movs	r2, #0
 8014e6a:	4629      	mov	r1, r5
 8014e6c:	f7eb fa14 	bl	8000298 <__aeabi_dsub>
 8014e70:	4b45      	ldr	r3, [pc, #276]	; (8014f88 <atan+0x330>)
 8014e72:	4606      	mov	r6, r0
 8014e74:	460f      	mov	r7, r1
 8014e76:	2200      	movs	r2, #0
 8014e78:	4620      	mov	r0, r4
 8014e7a:	4629      	mov	r1, r5
 8014e7c:	f7eb fbc4 	bl	8000608 <__aeabi_dmul>
 8014e80:	4b3e      	ldr	r3, [pc, #248]	; (8014f7c <atan+0x324>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	f7eb fa0a 	bl	800029c <__adddf3>
 8014e88:	4602      	mov	r2, r0
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	4630      	mov	r0, r6
 8014e8e:	4639      	mov	r1, r7
 8014e90:	f7eb fce4 	bl	800085c <__aeabi_ddiv>
 8014e94:	f04f 0a02 	mov.w	sl, #2
 8014e98:	4604      	mov	r4, r0
 8014e9a:	460d      	mov	r5, r1
 8014e9c:	e743      	b.n	8014d26 <atan+0xce>
 8014e9e:	462b      	mov	r3, r5
 8014ea0:	ee10 2a10 	vmov	r2, s0
 8014ea4:	4939      	ldr	r1, [pc, #228]	; (8014f8c <atan+0x334>)
 8014ea6:	2000      	movs	r0, #0
 8014ea8:	f7eb fcd8 	bl	800085c <__aeabi_ddiv>
 8014eac:	f04f 0a03 	mov.w	sl, #3
 8014eb0:	4604      	mov	r4, r0
 8014eb2:	460d      	mov	r5, r1
 8014eb4:	e737      	b.n	8014d26 <atan+0xce>
 8014eb6:	4b36      	ldr	r3, [pc, #216]	; (8014f90 <atan+0x338>)
 8014eb8:	4e36      	ldr	r6, [pc, #216]	; (8014f94 <atan+0x33c>)
 8014eba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014ebe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014ec2:	e9da 2300 	ldrd	r2, r3, [sl]
 8014ec6:	f7eb f9e7 	bl	8000298 <__aeabi_dsub>
 8014eca:	4622      	mov	r2, r4
 8014ecc:	462b      	mov	r3, r5
 8014ece:	f7eb f9e3 	bl	8000298 <__aeabi_dsub>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014eda:	f7eb f9dd 	bl	8000298 <__aeabi_dsub>
 8014ede:	f1bb 0f00 	cmp.w	fp, #0
 8014ee2:	4604      	mov	r4, r0
 8014ee4:	460d      	mov	r5, r1
 8014ee6:	f6bf aed6 	bge.w	8014c96 <atan+0x3e>
 8014eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eee:	461d      	mov	r5, r3
 8014ef0:	e6d1      	b.n	8014c96 <atan+0x3e>
 8014ef2:	a51d      	add	r5, pc, #116	; (adr r5, 8014f68 <atan+0x310>)
 8014ef4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014ef8:	e6cd      	b.n	8014c96 <atan+0x3e>
 8014efa:	bf00      	nop
 8014efc:	f3af 8000 	nop.w
 8014f00:	54442d18 	.word	0x54442d18
 8014f04:	bff921fb 	.word	0xbff921fb
 8014f08:	8800759c 	.word	0x8800759c
 8014f0c:	7e37e43c 	.word	0x7e37e43c
 8014f10:	e322da11 	.word	0xe322da11
 8014f14:	3f90ad3a 	.word	0x3f90ad3a
 8014f18:	24760deb 	.word	0x24760deb
 8014f1c:	3fa97b4b 	.word	0x3fa97b4b
 8014f20:	a0d03d51 	.word	0xa0d03d51
 8014f24:	3fb10d66 	.word	0x3fb10d66
 8014f28:	c54c206e 	.word	0xc54c206e
 8014f2c:	3fb745cd 	.word	0x3fb745cd
 8014f30:	920083ff 	.word	0x920083ff
 8014f34:	3fc24924 	.word	0x3fc24924
 8014f38:	5555550d 	.word	0x5555550d
 8014f3c:	3fd55555 	.word	0x3fd55555
 8014f40:	2c6a6c2f 	.word	0x2c6a6c2f
 8014f44:	bfa2b444 	.word	0xbfa2b444
 8014f48:	52defd9a 	.word	0x52defd9a
 8014f4c:	3fadde2d 	.word	0x3fadde2d
 8014f50:	af749a6d 	.word	0xaf749a6d
 8014f54:	3fb3b0f2 	.word	0x3fb3b0f2
 8014f58:	fe231671 	.word	0xfe231671
 8014f5c:	3fbc71c6 	.word	0x3fbc71c6
 8014f60:	9998ebc4 	.word	0x9998ebc4
 8014f64:	3fc99999 	.word	0x3fc99999
 8014f68:	54442d18 	.word	0x54442d18
 8014f6c:	3ff921fb 	.word	0x3ff921fb
 8014f70:	440fffff 	.word	0x440fffff
 8014f74:	7ff00000 	.word	0x7ff00000
 8014f78:	3fdbffff 	.word	0x3fdbffff
 8014f7c:	3ff00000 	.word	0x3ff00000
 8014f80:	3ff2ffff 	.word	0x3ff2ffff
 8014f84:	40038000 	.word	0x40038000
 8014f88:	3ff80000 	.word	0x3ff80000
 8014f8c:	bff00000 	.word	0xbff00000
 8014f90:	08016018 	.word	0x08016018
 8014f94:	08015ff8 	.word	0x08015ff8

08014f98 <fabs>:
 8014f98:	ec51 0b10 	vmov	r0, r1, d0
 8014f9c:	ee10 2a10 	vmov	r2, s0
 8014fa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014fa4:	ec43 2b10 	vmov	d0, r2, r3
 8014fa8:	4770      	bx	lr

08014faa <finite>:
 8014faa:	b082      	sub	sp, #8
 8014fac:	ed8d 0b00 	vstr	d0, [sp]
 8014fb0:	9801      	ldr	r0, [sp, #4]
 8014fb2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014fb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014fba:	0fc0      	lsrs	r0, r0, #31
 8014fbc:	b002      	add	sp, #8
 8014fbe:	4770      	bx	lr

08014fc0 <nan>:
 8014fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014fc8 <nan+0x8>
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	00000000 	.word	0x00000000
 8014fcc:	7ff80000 	.word	0x7ff80000

08014fd0 <scalbn>:
 8014fd0:	b570      	push	{r4, r5, r6, lr}
 8014fd2:	ec55 4b10 	vmov	r4, r5, d0
 8014fd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014fda:	4606      	mov	r6, r0
 8014fdc:	462b      	mov	r3, r5
 8014fde:	b99a      	cbnz	r2, 8015008 <scalbn+0x38>
 8014fe0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014fe4:	4323      	orrs	r3, r4
 8014fe6:	d036      	beq.n	8015056 <scalbn+0x86>
 8014fe8:	4b39      	ldr	r3, [pc, #228]	; (80150d0 <scalbn+0x100>)
 8014fea:	4629      	mov	r1, r5
 8014fec:	ee10 0a10 	vmov	r0, s0
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	f7eb fb09 	bl	8000608 <__aeabi_dmul>
 8014ff6:	4b37      	ldr	r3, [pc, #220]	; (80150d4 <scalbn+0x104>)
 8014ff8:	429e      	cmp	r6, r3
 8014ffa:	4604      	mov	r4, r0
 8014ffc:	460d      	mov	r5, r1
 8014ffe:	da10      	bge.n	8015022 <scalbn+0x52>
 8015000:	a32b      	add	r3, pc, #172	; (adr r3, 80150b0 <scalbn+0xe0>)
 8015002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015006:	e03a      	b.n	801507e <scalbn+0xae>
 8015008:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801500c:	428a      	cmp	r2, r1
 801500e:	d10c      	bne.n	801502a <scalbn+0x5a>
 8015010:	ee10 2a10 	vmov	r2, s0
 8015014:	4620      	mov	r0, r4
 8015016:	4629      	mov	r1, r5
 8015018:	f7eb f940 	bl	800029c <__adddf3>
 801501c:	4604      	mov	r4, r0
 801501e:	460d      	mov	r5, r1
 8015020:	e019      	b.n	8015056 <scalbn+0x86>
 8015022:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015026:	460b      	mov	r3, r1
 8015028:	3a36      	subs	r2, #54	; 0x36
 801502a:	4432      	add	r2, r6
 801502c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015030:	428a      	cmp	r2, r1
 8015032:	dd08      	ble.n	8015046 <scalbn+0x76>
 8015034:	2d00      	cmp	r5, #0
 8015036:	a120      	add	r1, pc, #128	; (adr r1, 80150b8 <scalbn+0xe8>)
 8015038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801503c:	da1c      	bge.n	8015078 <scalbn+0xa8>
 801503e:	a120      	add	r1, pc, #128	; (adr r1, 80150c0 <scalbn+0xf0>)
 8015040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015044:	e018      	b.n	8015078 <scalbn+0xa8>
 8015046:	2a00      	cmp	r2, #0
 8015048:	dd08      	ble.n	801505c <scalbn+0x8c>
 801504a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801504e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015052:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015056:	ec45 4b10 	vmov	d0, r4, r5
 801505a:	bd70      	pop	{r4, r5, r6, pc}
 801505c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015060:	da19      	bge.n	8015096 <scalbn+0xc6>
 8015062:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015066:	429e      	cmp	r6, r3
 8015068:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801506c:	dd0a      	ble.n	8015084 <scalbn+0xb4>
 801506e:	a112      	add	r1, pc, #72	; (adr r1, 80150b8 <scalbn+0xe8>)
 8015070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d1e2      	bne.n	801503e <scalbn+0x6e>
 8015078:	a30f      	add	r3, pc, #60	; (adr r3, 80150b8 <scalbn+0xe8>)
 801507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507e:	f7eb fac3 	bl	8000608 <__aeabi_dmul>
 8015082:	e7cb      	b.n	801501c <scalbn+0x4c>
 8015084:	a10a      	add	r1, pc, #40	; (adr r1, 80150b0 <scalbn+0xe0>)
 8015086:	e9d1 0100 	ldrd	r0, r1, [r1]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d0b8      	beq.n	8015000 <scalbn+0x30>
 801508e:	a10e      	add	r1, pc, #56	; (adr r1, 80150c8 <scalbn+0xf8>)
 8015090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015094:	e7b4      	b.n	8015000 <scalbn+0x30>
 8015096:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801509a:	3236      	adds	r2, #54	; 0x36
 801509c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80150a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80150a4:	4620      	mov	r0, r4
 80150a6:	4b0c      	ldr	r3, [pc, #48]	; (80150d8 <scalbn+0x108>)
 80150a8:	2200      	movs	r2, #0
 80150aa:	e7e8      	b.n	801507e <scalbn+0xae>
 80150ac:	f3af 8000 	nop.w
 80150b0:	c2f8f359 	.word	0xc2f8f359
 80150b4:	01a56e1f 	.word	0x01a56e1f
 80150b8:	8800759c 	.word	0x8800759c
 80150bc:	7e37e43c 	.word	0x7e37e43c
 80150c0:	8800759c 	.word	0x8800759c
 80150c4:	fe37e43c 	.word	0xfe37e43c
 80150c8:	c2f8f359 	.word	0xc2f8f359
 80150cc:	81a56e1f 	.word	0x81a56e1f
 80150d0:	43500000 	.word	0x43500000
 80150d4:	ffff3cb0 	.word	0xffff3cb0
 80150d8:	3c900000 	.word	0x3c900000

080150dc <_init>:
 80150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150de:	bf00      	nop
 80150e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150e2:	bc08      	pop	{r3}
 80150e4:	469e      	mov	lr, r3
 80150e6:	4770      	bx	lr

080150e8 <_fini>:
 80150e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ea:	bf00      	nop
 80150ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150ee:	bc08      	pop	{r3}
 80150f0:	469e      	mov	lr, r3
 80150f2:	4770      	bx	lr
