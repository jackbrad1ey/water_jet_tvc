
neptune-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800d668  0800d668  0001d668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db28  0800db28  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db30  0800db30  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db30  0800db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db34  0800db34  0001db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800db38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e14  200002cc  0800de04  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e0  0800de04  000220e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eae  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ca  00000000  00000000  000381aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9e5  00000000  00000000  0003e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a529  00000000  00000000  0005ada5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d50  00000000  00000000  000752ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011601e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab0  00000000  00000000  00116070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d64c 	.word	0x0800d64c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800d64c 	.word	0x0800d64c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <BMX055_init>:
/**
 @brief Begin Device
 @retval true normaly done
 @retval false device error
 */
bool BMX055_init(BMX055_Handle *bmx055) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	// Set CS pins HIGH
	HAL_GPIO_WritePin(bmx055->acc_CS_port, bmx055->acc_CS_pin, GPIO_PIN_SET);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6858      	ldr	r0, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	891b      	ldrh	r3, [r3, #8]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f001 feca 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->gyro_CS_port, bmx055->gyro_CS_pin, GPIO_PIN_SET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6918      	ldr	r0, [r3, #16]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	8a9b      	ldrh	r3, [r3, #20]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f001 fec2 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bmx055->mag_CS_port, bmx055->mag_CS_pin, GPIO_PIN_SET);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69d8      	ldr	r0, [r3, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8c1b      	ldrh	r3, [r3, #32]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f001 feba 	bl	8002d08 <HAL_GPIO_WritePin>

	// Set accel scale factor and map to m/s^2
	// 12bit (4096) accelerometer maps to specified range. This is used to calculate scale factor.
	// Note: +-16g is range of 32g
	switch (bmx055->acc_range) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a9b      	ldrb	r3, [r3, #10]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d826      	bhi.n	8000fec <BMX055_init+0x90>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <BMX055_init+0x48>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fe5 	.word	0x08000fe5
 8000fa8:	08000fed 	.word	0x08000fed
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fed 	.word	0x08000fed
 8000fb4:	08000fed 	.word	0x08000fed
 8000fb8:	08000fd5 	.word	0x08000fd5
 8000fbc:	08000fed 	.word	0x08000fed
 8000fc0:	08000fed 	.word	0x08000fed
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08000fcd 	.word	0x08000fcd
	case BMX055_ACC_RANGE_16:
		// 16g
		bmx055->acc_rescale = (2.0 * 16.0 / 4096.0) * 9.81;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <BMX055_init+0x118>)
 8000fd0:	60da      	str	r2, [r3, #12]
		break;
 8000fd2:	e00b      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_8:
		// 8g
		bmx055->acc_rescale = (2.0 * 8.0 / 4096.0) * 9.81;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <BMX055_init+0x11c>)
 8000fd8:	60da      	str	r2, [r3, #12]
		break;
 8000fda:	e007      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_4:
		// 4g
		bmx055->acc_rescale = (2.0 * 4.0 / 4096.0) * 9.81;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <BMX055_init+0x120>)
 8000fe0:	60da      	str	r2, [r3, #12]
		break;
 8000fe2:	e003      	b.n	8000fec <BMX055_init+0x90>
	case BMX055_ACC_RANGE_2:
		// 2g
		bmx055->acc_rescale = (2.0 * 2.0 / 4096.0) * 9.81;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a26      	ldr	r2, [pc, #152]	; (8001080 <BMX055_init+0x124>)
 8000fe8:	60da      	str	r2, [r3, #12]
		break;
 8000fea:	bf00      	nop
	}

	// Set gyro scale factor for map to degrees and map from deg to rad
	// 16bit (65536) gyro maps to specified range. This is used to calculate scale factor.
	// Note: +-2000 deg/s is range of 4000 deg/s
	switch (bmx055->gyro_range) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7d9b      	ldrb	r3, [r3, #22]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d821      	bhi.n	8001038 <BMX055_init+0xdc>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <BMX055_init+0xa0>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	08001011 	.word	0x08001011
 8001000:	08001019 	.word	0x08001019
 8001004:	08001021 	.word	0x08001021
 8001008:	08001029 	.word	0x08001029
 800100c:	08001031 	.word	0x08001031
	case BMX055_GYRO_RANGE_16_4:
		// 2000
		bmx055->gyro_rescale = (2.0 * 2000.0 / 65536.0) * (M_PI / 180.0);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <BMX055_init+0x128>)
 8001014:	619a      	str	r2, [r3, #24]
		break;
 8001016:	e00f      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_32_8:
		// 1000
		bmx055->gyro_rescale = (2.0 * 1000.0 / 65536.0) * (M_PI / 180.0);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <BMX055_init+0x12c>)
 800101c:	619a      	str	r2, [r3, #24]
		break;
 800101e:	e00b      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_65_6:
		// 500
		bmx055->gyro_rescale = (2.0 * 500.0 / 65536.0) * (M_PI / 180.0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <BMX055_init+0x130>)
 8001024:	619a      	str	r2, [r3, #24]
		break;
 8001026:	e007      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_131_2:
		// 250
		bmx055->gyro_rescale = (2.0 * 250.0 / 65536.0) * (M_PI / 180.0);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <BMX055_init+0x134>)
 800102c:	619a      	str	r2, [r3, #24]
		break;
 800102e:	e003      	b.n	8001038 <BMX055_init+0xdc>
	case BMX055_GYRO_RANGE_262_4:
		// 125
		bmx055->gyro_rescale = (2.0 * 125.0 / 65536.0) * (M_PI / 180.0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <BMX055_init+0x138>)
 8001034:	619a      	str	r2, [r3, #24]
		break;
 8001036:	bf00      	nop
	}

	// Set mag scale factor to units of uT
	// XY axes are 12bit (4096) and Z axis is 15bit (32768).
	// XY axis maximum value is +-1300uT and Z axis maximum value is +-2500uT
	bmx055->mag_rescale_xy = (2.0*1300.0 / 4096.0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <BMX055_init+0x13c>)
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
	bmx055->mag_rescale_z = (2.0*2500.0 / 32768.0);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <BMX055_init+0x140>)
 8001042:	629a      	str	r2, [r3, #40]	; 0x28


	if (BMX055_searchDevice(bmx055)) {
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f82b 	bl	80010a0 <BMX055_searchDevice>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <BMX055_init+0x10e>
		BMX055_configuration(bmx055);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f878 	bl	8001146 <BMX055_configuration>
//		uint8_t res = perform_adv_self_test(bmx055);
		if (!perform_normal_self_test(bmx055))
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fa21 	bl	800149e <perform_normal_self_test>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <BMX055_init+0x10a>
			return true;
 8001062:	2301      	movs	r3, #1
 8001064:	e002      	b.n	800106c <BMX055_init+0x110>
		else
			return false;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <BMX055_init+0x110>
	} else {
		return false;
 800106a:	2300      	movs	r3, #0
	}
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	3d9cf5c3 	.word	0x3d9cf5c3
 8001078:	3d1cf5c3 	.word	0x3d1cf5c3
 800107c:	3c9cf5c3 	.word	0x3c9cf5c3
 8001080:	3c1cf5c3 	.word	0x3c1cf5c3
 8001084:	3a8ba058 	.word	0x3a8ba058
 8001088:	3a0ba058 	.word	0x3a0ba058
 800108c:	398ba058 	.word	0x398ba058
 8001090:	390ba058 	.word	0x390ba058
 8001094:	388ba058 	.word	0x388ba058
 8001098:	3f228000 	.word	0x3f228000
 800109c:	3e1c4000 	.word	0x3e1c4000

080010a0 <BMX055_searchDevice>:
/**
 * @brief Search bmx055
 * @retval true  Found Device
 * @retval false : Not Found Device
 */
bool BMX055_searchDevice(BMX055_Handle *bmx055) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t acc_device = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
	uint8_t mag_device = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

	// Mag SoftReset
	uint8_t data = 0x82;
 80010b0:	2382      	movs	r3, #130	; 0x82
 80010b2:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69d9      	ldr	r1, [r3, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8c1a      	ldrh	r2, [r3, #32]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030d 	add.w	r3, r7, #13
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	234b      	movs	r3, #75	; 0x4b
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f986 	bl	80013da <BMX055_writeSPI>
	HAL_Delay(2);
 80010ce:	2002      	movs	r0, #2
 80010d0:	f001 f8ee 	bl	80022b0 <HAL_Delay>

	/* Mag Setting */
	// set sleep mode
	data = BMX055_MAG_POW_CTL_SLEEP_MODE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69d9      	ldr	r1, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	8c1a      	ldrh	r2, [r3, #32]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f107 030d 	add.w	r3, r7, #13
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	234b      	movs	r3, #75	; 0x4b
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f974 	bl	80013da <BMX055_writeSPI>
	HAL_Delay(3);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f001 f8dc 	bl	80022b0 <HAL_Delay>

	BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_WHO_AM_I_REG, &acc_device, 1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6859      	ldr	r1, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	891a      	ldrh	r2, [r3, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f990 	bl	8001432 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_CHIP_ID, &mag_device, 1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69d9      	ldr	r1, [r3, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	8c1a      	ldrh	r2, [r3, #32]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f107 030e 	add.w	r3, r7, #14
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f983 	bl	8001432 <BMX055_readSPI>

	if (acc_device == BMX055_ACC_DEVICE && mag_device == BMX055_MAG_DEVICE) {
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2bfa      	cmp	r3, #250	; 0xfa
 8001130:	d104      	bne.n	800113c <BMX055_searchDevice+0x9c>
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	2b32      	cmp	r3, #50	; 0x32
 8001136:	d101      	bne.n	800113c <BMX055_searchDevice+0x9c>
		return true;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <BMX055_searchDevice+0x9e>
	} else {
		return false;
 800113c:	2300      	movs	r3, #0
	}
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <BMX055_configuration>:

/**
 * @brief Set Config
 */
void BMX055_configuration(BMX055_Handle *bmx055) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af02      	add	r7, sp, #8
 800114c:	6078      	str	r0, [r7, #4]
	/* SoftReset */
	uint8_t data = BMX055_INITIATED_SOFT_RESET;
 800114e:	23b6      	movs	r3, #182	; 0xb6
 8001150:	73fb      	strb	r3, [r7, #15]
	// Accel SoftReset
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_RESET_REG, &data, 1);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6859      	ldr	r1, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	891a      	ldrh	r2, [r3, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2314      	movs	r3, #20
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f937 	bl	80013da <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 800116c:	2002      	movs	r0, #2
 800116e:	f001 f89f 	bl	80022b0 <HAL_Delay>
	// Gyro SoftReset
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_RESET_REG, &data, 1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8a9a      	ldrh	r2, [r3, #20]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2314      	movs	r3, #20
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f927 	bl	80013da <BMX055_writeSPI>
	HAL_Delay(2);  // wait 1.8ms
 800118c:	2002      	movs	r0, #2
 800118e:	f001 f88f 	bl	80022b0 <HAL_Delay>

	// adv.st, DataRate, OperationMode, SelfTest (NomalMode)
	data = bmx055->mag_data_rate;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001198:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69d9      	ldr	r1, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	8c1a      	ldrh	r2, [r3, #32]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 030f 	add.w	r3, r7, #15
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	234c      	movs	r3, #76	; 0x4c
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f913 	bl	80013da <BMX055_writeSPI>
	// Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
	data = 0x04;
 80011b4:	2304      	movs	r3, #4
 80011b6:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_XY_REG, &data, 1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8c1a      	ldrh	r2, [r3, #32]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2351      	movs	r3, #81	; 0x51
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f904 	bl	80013da <BMX055_writeSPI>
	// Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
	data = 0x0F;
 80011d2:	230f      	movs	r3, #15
 80011d4:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_Z_REG, &data, 1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69d9      	ldr	r1, [r3, #28]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	8c1a      	ldrh	r2, [r3, #32]
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f107 030f 	add.w	r3, r7, #15
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2352      	movs	r3, #82	; 0x52
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f8f5 	bl	80013da <BMX055_writeSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69d9      	ldr	r1, [r3, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	8c1a      	ldrh	r2, [r3, #32]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	234c      	movs	r3, #76	; 0x4c
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f914 	bl	8001432 <BMX055_readSPI>

	/* Accel Setting */
	// Select Accel PMU Range
	data = bmx055->acc_range;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_RANGE_REG, &data, 1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891a      	ldrh	r2, [r3, #8]
 8001218:	2301      	movs	r3, #1
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	f107 030f 	add.w	r3, r7, #15
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	230f      	movs	r3, #15
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f8d8 	bl	80013da <BMX055_writeSPI>
	// Select Accel PMU_BW
	data = bmx055->acc_range;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a9b      	ldrb	r3, [r3, #10]
 800122e:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_BW_REG, &data, 1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	891a      	ldrh	r2, [r3, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 030f 	add.w	r3, r7, #15
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2310      	movs	r3, #16
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f8c8 	bl	80013da <BMX055_writeSPI>
	// Select Accel PMU_LPW  (NomalMode, SleepDuration 0.5ms)
	data = BMX055_ACC_PMU_LPW_MODE_NOMAL | BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_LPW_REG, &data, 1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6859      	ldr	r1, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891a      	ldrh	r2, [r3, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f107 030f 	add.w	r3, r7, #15
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2311      	movs	r3, #17
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f8b9 	bl	80013da <BMX055_writeSPI>

	/* Gyro Setting */
	// Select Gyro Range
	data = bmx055->gyro_range;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7d9b      	ldrb	r3, [r3, #22]
 800126c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_RANGE_REG, &data, 1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	8a9a      	ldrh	r2, [r3, #20]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	230f      	movs	r3, #15
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f8a9 	bl	80013da <BMX055_writeSPI>
	// Select Gyro BW
	data = bmx055->gyro_bandwidth;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7ddb      	ldrb	r3, [r3, #23]
 800128c:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_BW_REG, &data, 1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8a9a      	ldrh	r2, [r3, #20]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2310      	movs	r3, #16
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f899 	bl	80013da <BMX055_writeSPI>
	// Select Gyro LPM1 (NomalMode, SleepDuration 2ms)
	data = BMX055_GYRO_LPM1_MODE_NOMAL | BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
	BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_LPM1_REG, &data, 1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6919      	ldr	r1, [r3, #16]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	8a9a      	ldrh	r2, [r3, #20]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 030f 	add.w	r3, r7, #15
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2311      	movs	r3, #17
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f88a 	bl	80013da <BMX055_writeSPI>

	HAL_Delay(200);
 80012c6:	20c8      	movs	r0, #200	; 0xc8
 80012c8:	f000 fff2 	bl	80022b0 <HAL_Delay>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <BMX055_readAccel>:

/**
 * @brief Read Accel
 * @param [out] *accl : accel value  (X-accel : accl[0], Y-accel : accl[1], Z-accel : accl[2])
 */
void BMX055_readAccel(BMX055_Handle *bmx055, float *accl) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b08d      	sub	sp, #52	; 0x34
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	uint16_t accl_data[6] = { 0 };
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
	int accel_read[3];

	// read accel value
	for (int i = 0; i < 6; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	e017      	b.n	8001320 <BMX055_readAccel+0x4c>
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8918      	ldrh	r0, [r3, #8]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3302      	adds	r3, #2
 80012fe:	b2dc      	uxtb	r4, r3
		BMX055_ACC_DATA_START_REG + i, &accl_data[i], 1);
 8001300:	f107 0218 	add.w	r2, r7, #24
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
		BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin,
 800130a:	2201      	movs	r2, #1
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4623      	mov	r3, r4
 8001312:	4602      	mov	r2, r0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f88c 	bl	8001432 <BMX055_readSPI>
	for (int i = 0; i < 6; i++) {
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2b05      	cmp	r3, #5
 8001324:	dde4      	ble.n	80012f0 <BMX055_readAccel+0x1c>
	}

	// conv data  accel:12bit
	accel_read[0] = ((accl_data[1] << 4) | (accl_data[0] >> 4));
 8001326:	8b7b      	ldrh	r3, [r7, #26]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	8b3a      	ldrh	r2, [r7, #24]
 800132c:	0912      	lsrs	r2, r2, #4
 800132e:	b292      	uxth	r2, r2
 8001330:	4313      	orrs	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

	if (accel_read[0] > 2047) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133a:	db03      	blt.n	8001344 <BMX055_readAccel+0x70>
		accel_read[0] -= 4096;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001342:	60fb      	str	r3, [r7, #12]
	}
	accl[0] = accel_read[0] * bmx055->acc_rescale;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a03 	vldr	s15, [r3, #12]
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	edc3 7a00 	vstr	s15, [r3]

	accel_read[1] = ((accl_data[3] << 4) | (accl_data[2] >> 4));
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	8bba      	ldrh	r2, [r7, #28]
 8001364:	0912      	lsrs	r2, r2, #4
 8001366:	b292      	uxth	r2, r2
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
	if (accel_read[1] > 2047) {
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001372:	db03      	blt.n	800137c <BMX055_readAccel+0xa8>
		accel_read[1] -= 4096;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800137a:	613b      	str	r3, [r7, #16]
	}
	accl[1] = accel_read[1] * bmx055->acc_rescale;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edd3 7a03 	vldr	s15, [r3, #12]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	edc3 7a00 	vstr	s15, [r3]

	accel_read[2] = ((accl_data[5] << 4) | (accl_data[4] >> 4));
 8001398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	8c3a      	ldrh	r2, [r7, #32]
 800139e:	0912      	lsrs	r2, r2, #4
 80013a0:	b292      	uxth	r2, r2
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
	if (accel_read[2] > 2047) {
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013ac:	db03      	blt.n	80013b6 <BMX055_readAccel+0xe2>
		accel_read[2] -= 4096;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80013b4:	617b      	str	r3, [r7, #20]
	}
	accl[2] = accel_read[2] * bmx055->acc_rescale;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3308      	adds	r3, #8
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc3 7a00 	vstr	s15, [r3]
}
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <BMX055_writeSPI>:
 * @param [in] CS_Pin
 * @param [in] register_addr
 * @param [in] data
 * @param [in] len
 */
void BMX055_writeSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	4611      	mov	r1, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	80fb      	strh	r3, [r7, #6]
 80013ec:	4613      	mov	r3, r2
 80013ee:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f001 fc86 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(bmx055->hspi, &register_addr, 1, 1000);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	1d79      	adds	r1, r7, #5
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	2201      	movs	r2, #1
 8001408:	f003 fbcd 	bl	8004ba6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(bmx055->hspi, data, len, 1000);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	b29a      	uxth	r2, r3
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	69b9      	ldr	r1, [r7, #24]
 800141a:	f003 fbc4 	bl	8004ba6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f001 fc6f 	bl	8002d08 <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <BMX055_readSPI>:
 * @param [in] device Device type (gyro, accel or mag)
 * @param [in] register_addr Register Address
 * @param [in] num Data Length
 * @param [out] *buf Read Data
 */
void BMX055_readSPI(BMX055_Handle *bmx055, GPIO_TypeDef *CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t *data, size_t len) {
 8001432:	b590      	push	{r4, r7, lr}
 8001434:	b08d      	sub	sp, #52	; 0x34
 8001436:	af02      	add	r7, sp, #8
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	4611      	mov	r1, r2
 800143e:	461a      	mov	r2, r3
 8001440:	460b      	mov	r3, r1
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	4613      	mov	r3, r2
 8001446:	717b      	strb	r3, [r7, #5]
	// Add RW bit to start of register
	register_addr = register_addr | 0x80;
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800144e:	b2db      	uxtb	r3, r3
 8001450:	717b      	strb	r3, [r7, #5]
	uint8_t packet[20];

	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f001 fc55 	bl	8002d08 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(bmx055->hspi, &register_addr, packet, len + 1, 1000);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001464:	b29b      	uxth	r3, r3
 8001466:	3301      	adds	r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	f107 0214 	add.w	r2, r7, #20
 800146e:	1d79      	adds	r1, r7, #5
 8001470:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001474:	9400      	str	r4, [sp, #0]
 8001476:	f003 fcd2 	bl	8004e1e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	2201      	movs	r2, #1
 800147e:	4619      	mov	r1, r3
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f001 fc41 	bl	8002d08 <HAL_GPIO_WritePin>

	// Copy data into "data" spot in memory
	memcpy(data, &packet[1], len);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	3301      	adds	r3, #1
 800148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148e:	4619      	mov	r1, r3
 8001490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001492:	f008 fe9d 	bl	800a1d0 <memcpy>
}
 8001496:	bf00      	nop
 8001498:	372c      	adds	r7, #44	; 0x2c
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}

0800149e <perform_normal_self_test>:
}

/*!
 * @brief This internal API is used to perform normal self test
 */
static int8_t perform_normal_self_test(BMX055_Handle *bmx055) {
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	6078      	str	r0, [r7, #4]
	uint8_t read_data;
	uint8_t data;
	// Set sleep mode
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &read_data, 1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69d9      	ldr	r1, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8c1a      	ldrh	r2, [r3, #32]
 80014ae:	2301      	movs	r3, #1
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	f107 030e 	add.w	r3, r7, #14
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	234c      	movs	r3, #76	; 0x4c
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffb9 	bl	8001432 <BMX055_readSPI>
	data = read_data | 0b00000110; // Set opMode to sleep
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	f043 0306 	orr.w	r3, r3, #6
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69d9      	ldr	r1, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8c1a      	ldrh	r2, [r3, #32]
 80014d2:	2301      	movs	r3, #1
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	f107 030d 	add.w	r3, r7, #13
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	234c      	movs	r3, #76	; 0x4c
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff7b 	bl	80013da <BMX055_writeSPI>

	/* Set the Self Test bit(bit0) of the 0x4C register */
	data = read_data | 0b00000001; // Set opMode to sleep
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
	BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69d9      	ldr	r1, [r3, #28]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	8c1a      	ldrh	r2, [r3, #32]
 80014f6:	2301      	movs	r3, #1
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	f107 030d 	add.w	r3, r7, #13
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	234c      	movs	r3, #76	; 0x4c
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff69 	bl	80013da <BMX055_writeSPI>
	HAL_Delay(2);
 8001508:	2002      	movs	r0, #2
 800150a:	f000 fed1 	bl	80022b0 <HAL_Delay>

	/* Validate normal self test */
	uint8_t self_test_rslt[3];
	uint8_t status;
	// Read the data from register 0x42, 0x44 and 0x46
	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG, &self_test_rslt[0], 1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69d9      	ldr	r1, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	8c1a      	ldrh	r2, [r3, #32]
 8001516:	2301      	movs	r3, #1
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2342      	movs	r3, #66	; 0x42
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff85 	bl	8001432 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 2, &self_test_rslt[1], 1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69d9      	ldr	r1, [r3, #28]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8c1a      	ldrh	r2, [r3, #32]
 8001530:	2301      	movs	r3, #1
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	3301      	adds	r3, #1
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2344      	movs	r3, #68	; 0x44
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff77 	bl	8001432 <BMX055_readSPI>

	BMX055_readSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_DATA_START_REG + 4, &self_test_rslt[2], 1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69d9      	ldr	r1, [r3, #28]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	8c1a      	ldrh	r2, [r3, #32]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	3302      	adds	r3, #2
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2346      	movs	r3, #70	; 0x46
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff69 	bl	8001432 <BMX055_readSPI>

	/* Combine the self test status and store it in the first
	 * 3 bits of the status variable for processing
	 */
	status = (uint8_t) ((self_test_rslt[2] & 1) & (self_test_rslt[1] & 1) & (self_test_rslt[0] & 1));
 8001560:	7aba      	ldrb	r2, [r7, #10]
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	4013      	ands	r3, r2
 8001566:	b2da      	uxtb	r2, r3
 8001568:	7a3b      	ldrb	r3, [r7, #8]
 800156a:	4013      	ands	r3, r2
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]

	if (status)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <perform_normal_self_test+0xe0>
		return BMX055_MAG_SELF_TEST_SUCCESS;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <perform_normal_self_test+0xe2>
	else
		return BMX055_MAG_SELF_TEST_FAIL;
 800157e:	2307      	movs	r3, #7
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f000 fe1d 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001592:	f000 f883 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001596:	f000 fa61 	bl	8001a5c <MX_GPIO_Init>
  MX_SPI1_Init();
 800159a:	f000 f93b 	bl	8001814 <MX_SPI1_Init>
  MX_SPI2_Init();
 800159e:	f000 f96f 	bl	8001880 <MX_SPI2_Init>
  MX_SPI3_Init();
 80015a2:	f000 f9a3 	bl	80018ec <MX_SPI3_Init>
  MX_ADC1_Init();
 80015a6:	f000 f8e3 	bl	8001770 <MX_ADC1_Init>
  MX_TIM3_Init();
 80015aa:	f000 f9d5 	bl	8001958 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80015ae:	f008 f8d5 	bl	800975c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015b2:	2100      	movs	r1, #0
 80015b4:	4834      	ldr	r0, [pc, #208]	; (8001688 <main+0x100>)
 80015b6:	f003 ff47 	bl	8005448 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015ba:	2104      	movs	r1, #4
 80015bc:	4832      	ldr	r0, [pc, #200]	; (8001688 <main+0x100>)
 80015be:	f003 ff43 	bl	8005448 <HAL_TIM_PWM_Start>

  /* BMX055 configurations */
	bmx055.hspi = &hspi1;
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <main+0x104>)
 80015c4:	4a32      	ldr	r2, [pc, #200]	; (8001690 <main+0x108>)
 80015c6:	601a      	str	r2, [r3, #0]
	// Accelerometer parameters
	bmx055.acc_CS_port = ACC_CE_GPIO_Port;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <main+0x104>)
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <main+0x10c>)
 80015cc:	605a      	str	r2, [r3, #4]
	bmx055.acc_CS_pin = ACC_CE_Pin;
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <main+0x104>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	811a      	strh	r2, [r3, #8]
	bmx055.acc_range = BMX055_ACC_RANGE_4;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <main+0x104>)
 80015d6:	2205      	movs	r2, #5
 80015d8:	729a      	strb	r2, [r3, #10]
	bmx055.acc_bandwidth = BMX055_ACC_PMU_BW_7_81;
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <main+0x104>)
 80015dc:	2208      	movs	r2, #8
 80015de:	72da      	strb	r2, [r3, #11]

	// Gyroscope parameters
	bmx055.gyro_CS_port = GYR_CE_GPIO_Port;
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <main+0x104>)
 80015e2:	4a2c      	ldr	r2, [pc, #176]	; (8001694 <main+0x10c>)
 80015e4:	611a      	str	r2, [r3, #16]
	bmx055.gyro_CS_pin = GYR_CE_Pin;
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <main+0x104>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	829a      	strh	r2, [r3, #20]
	bmx055.gyro_range = BMX055_GYRO_RANGE_65_6;		// 500 deg/s
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <main+0x104>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	759a      	strb	r2, [r3, #22]
	bmx055.gyro_bandwidth = BMX055_GYRO_BW_64;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <main+0x104>)
 80015f4:	2206      	movs	r2, #6
 80015f6:	75da      	strb	r2, [r3, #23]

	// Magnetometer parameters
	bmx055.mag_CS_port = MAG_CE_GPIO_Port;
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <main+0x104>)
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <main+0x10c>)
 80015fc:	61da      	str	r2, [r3, #28]
	bmx055.mag_CS_pin = MAG_CE_Pin;
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <main+0x104>)
 8001600:	2204      	movs	r2, #4
 8001602:	841a      	strh	r2, [r3, #32]
	bmx055.mag_data_rate = BMX055_MAG_DATA_RATE_30;
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <main+0x104>)
 8001606:	2238      	movs	r2, #56	; 0x38
 8001608:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  while (!BMX055_init(&bmx055)) {
 800160c:	e000      	b.n	8001610 <main+0x88>
    continue;
 800160e:	bf00      	nop
  while (!BMX055_init(&bmx055)) {
 8001610:	481e      	ldr	r0, [pc, #120]	; (800168c <main+0x104>)
 8001612:	f7ff fca3 	bl	8000f5c <BMX055_init>
 8001616:	4603      	mov	r3, r0
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f5      	bne.n	800160e <main+0x86>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	float accel_data[3];
	  BMX055_readAccel(&bmx055, accel_data);
 8001622:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001626:	4619      	mov	r1, r3
 8001628:	4818      	ldr	r0, [pc, #96]	; (800168c <main+0x104>)
 800162a:	f7ff fe53 	bl	80012d4 <BMX055_readAccel>
    
    float roll;
    float pitch;

    get_roll_and_pitch(accel_data, &roll, &pitch);
 800162e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001632:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd20 	bl	8002080 <get_roll_and_pitch>

    char str_buff[50];
    sprintf(str_buff, "Roll: %.2f\tPitch: %.2f\r\n", roll, pitch);
 8001640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff88 	bl	8000558 <__aeabi_f2d>
 8001648:	4604      	mov	r4, r0
 800164a:	460d      	mov	r5, r1
 800164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff82 	bl	8000558 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4638      	mov	r0, r7
 800165a:	e9cd 2300 	strd	r2, r3, [sp]
 800165e:	4622      	mov	r2, r4
 8001660:	462b      	mov	r3, r5
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <main+0x110>)
 8001664:	f009 fa34 	bl	800aad0 <siprintf>
   	CDC_Transmit_FS(str_buff, strlen(str_buff));
 8001668:	463b      	mov	r3, r7
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fdb8 	bl	80001e0 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	463b      	mov	r3, r7
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f008 f92d 	bl	80098d8 <CDC_Transmit_FS>
	// }

  


	HAL_Delay(50);
 800167e:	2032      	movs	r0, #50	; 0x32
 8001680:	f000 fe16 	bl	80022b0 <HAL_Delay>
  {
 8001684:	e7cd      	b.n	8001622 <main+0x9a>
 8001686:	bf00      	nop
 8001688:	20000438 	.word	0x20000438
 800168c:	20000480 	.word	0x20000480
 8001690:	20000330 	.word	0x20000330
 8001694:	40020400 	.word	0x40020400
 8001698:	0800d668 	.word	0x0800d668

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	2230      	movs	r2, #48	; 0x30
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f008 fd9e 	bl	800a1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <SystemClock_Config+0xcc>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <SystemClock_Config+0xcc>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <SystemClock_Config+0xcc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <SystemClock_Config+0xd0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <SystemClock_Config+0xd0>)
 80016e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <SystemClock_Config+0xd0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001702:	2302      	movs	r3, #2
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800170c:	230c      	movs	r3, #12
 800170e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001710:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001716:	2304      	movs	r3, #4
 8001718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800171a:	2308      	movs	r3, #8
 800171c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fd86 	bl	8004234 <HAL_RCC_OscConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800172e:	f000 fa15 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	230f      	movs	r3, #15
 8001734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001736:	2302      	movs	r3, #2
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2103      	movs	r1, #3
 800174e:	4618      	mov	r0, r3
 8001750:	f002 ffe8 	bl	8004724 <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800175a:	f000 f9ff 	bl	8001b5c <Error_Handler>
  }
}
 800175e:	bf00      	nop
 8001760:	3750      	adds	r7, #80	; 0x50
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000

08001770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_ADC1_Init+0x98>)
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <MX_ADC1_Init+0x9c>)
 8001786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_ADC1_Init+0x98>)
 800178a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800178e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_ADC1_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_ADC1_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_ADC1_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_ADC1_Init+0x98>)
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <MX_ADC1_Init+0xa0>)
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_ADC1_Init+0x98>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_ADC1_Init+0x98>)
 80017be:	2201      	movs	r2, #1
 80017c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_ADC1_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_ADC1_Init+0x98>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_ADC1_Init+0x98>)
 80017d2:	f000 fd91 	bl	80022f8 <HAL_ADC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017dc:	f000 f9be 	bl	8001b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_ADC1_Init+0x98>)
 80017f2:	f000 fdc5 	bl	8002380 <HAL_ADC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017fc:	f000 f9ae 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200002e8 	.word	0x200002e8
 800180c:	40012000 	.word	0x40012000
 8001810:	0f000001 	.word	0x0f000001

08001814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_SPI1_Init+0x64>)
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <MX_SPI1_Init+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI1_Init+0x64>)
 8001820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI1_Init+0x64>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI1_Init+0x64>)
 8001848:	2218      	movs	r2, #24
 800184a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <MX_SPI1_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI1_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <MX_SPI1_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI1_Init+0x64>)
 8001860:	220a      	movs	r2, #10
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_SPI1_Init+0x64>)
 8001866:	f003 f915 	bl	8004a94 <HAL_SPI_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001870:	f000 f974 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000330 	.word	0x20000330
 800187c:	40013000 	.word	0x40013000

08001880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_SPI2_Init+0x64>)
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <MX_SPI2_Init+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI2_Init+0x64>)
 800188c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI2_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_SPI2_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018b4:	2220      	movs	r2, #32
 80018b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018cc:	220a      	movs	r2, #10
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018d2:	f003 f8df 	bl	8004a94 <HAL_SPI_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018dc:	f000 f93e 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000388 	.word	0x20000388
 80018e8:	40003800 	.word	0x40003800

080018ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_SPI3_Init+0x64>)
 80018f2:	4a18      	ldr	r2, [pc, #96]	; (8001954 <MX_SPI3_Init+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_SPI3_Init+0x64>)
 80018f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_SPI3_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_SPI3_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_SPI3_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_SPI3_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_SPI3_Init+0x64>)
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_SPI3_Init+0x64>)
 8001920:	2230      	movs	r2, #48	; 0x30
 8001922:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <MX_SPI3_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_SPI3_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <MX_SPI3_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_SPI3_Init+0x64>)
 8001938:	220a      	movs	r2, #10
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_SPI3_Init+0x64>)
 800193e:	f003 f8a9 	bl	8004a94 <HAL_SPI_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001948:	f000 f908 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200003e0 	.word	0x200003e0
 8001954:	40003c00 	.word	0x40003c00

08001958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	; 0x38
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <MX_TIM3_Init+0xfc>)
 800198a:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <MX_TIM3_Init+0x100>)
 800198c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <MX_TIM3_Init+0xfc>)
 8001990:	f242 527f 	movw	r2, #9599	; 0x257f
 8001994:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <MX_TIM3_Init+0xfc>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <MX_TIM3_Init+0xfc>)
 800199e:	22c7      	movs	r2, #199	; 0xc7
 80019a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <MX_TIM3_Init+0xfc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <MX_TIM3_Init+0xfc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ae:	4829      	ldr	r0, [pc, #164]	; (8001a54 <MX_TIM3_Init+0xfc>)
 80019b0:	f003 fca2 	bl	80052f8 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ba:	f000 f8cf 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4822      	ldr	r0, [pc, #136]	; (8001a54 <MX_TIM3_Init+0xfc>)
 80019cc:	f003 feae 	bl	800572c <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019d6:	f000 f8c1 	bl	8001b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_TIM3_Init+0xfc>)
 80019dc:	f003 fcdb 	bl	8005396 <HAL_TIM_PWM_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019e6:	f000 f8b9 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4619      	mov	r1, r3
 80019f8:	4816      	ldr	r0, [pc, #88]	; (8001a54 <MX_TIM3_Init+0xfc>)
 80019fa:	f004 fa2b 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a04:	f000 f8aa 	bl	8001b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a08:	2360      	movs	r3, #96	; 0x60
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_TIM3_Init+0xfc>)
 8001a20:	f003 fdc2 	bl	80055a8 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a2a:	f000 f897 	bl	8001b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2204      	movs	r2, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <MX_TIM3_Init+0xfc>)
 8001a36:	f003 fdb7 	bl	80055a8 <HAL_TIM_PWM_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a40:	f000 f88c 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <MX_TIM3_Init+0xfc>)
 8001a46:	f000 f9d3 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8001a4a:	bf00      	nop
 8001a4c:	3738      	adds	r7, #56	; 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000438 	.word	0x20000438
 8001a58:	40000400 	.word	0x40000400

08001a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <MX_GPIO_Init+0xf4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	210e      	movs	r1, #14
 8001ae6:	481b      	ldr	r0, [pc, #108]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001ae8:	f001 f90e 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2107      	movs	r1, #7
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <MX_GPIO_Init+0xfc>)
 8001af2:	f001 f909 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_10O_Pin */
  GPIO_InitStruct.Pin = RF_10O_Pin;
 8001af6:	2301      	movs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_10O_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001b0a:	f000 ff79 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_RESET_Pin RF_CE_Pin SD_CE_Pin */
  GPIO_InitStruct.Pin = RF_RESET_Pin|RF_CE_Pin|SD_CE_Pin;
 8001b0e:	230e      	movs	r3, #14
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001b26:	f000 ff6b 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_CE_Pin GYR_CE_Pin MAG_CE_Pin */
  GPIO_InitStruct.Pin = ACC_CE_Pin|GYR_CE_Pin|MAG_CE_Pin;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_GPIO_Init+0xfc>)
 8001b42:	f000 ff5d 	bl	8002a00 <HAL_GPIO_Init>

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020400 	.word	0x40020400

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>
	...

08001b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_ADC_MspInit+0x7c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d127      	bne.n	8001c2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_ADC_MspInit+0x80>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = S1_FBK_Pin|S2_FBK_Pin;
 8001c12:	230c      	movs	r3, #12
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_ADC_MspInit+0x84>)
 8001c26:	f000 feeb 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000

08001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	; 0x38
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_SPI_MspInit+0x150>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12c      	bne.n	8001cbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a43      	ldr	r2, [pc, #268]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001c9a:	23e0      	movs	r3, #224	; 0xe0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4838      	ldr	r0, [pc, #224]	; (8001d98 <HAL_SPI_MspInit+0x158>)
 8001cb6:	f000 fea3 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cba:	e064      	b.n	8001d86 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <HAL_SPI_MspInit+0x15c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12d      	bne.n	8001d22 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8001cfe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d10:	2305      	movs	r3, #5
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4821      	ldr	r0, [pc, #132]	; (8001da0 <HAL_SPI_MspInit+0x160>)
 8001d1c:	f000 fe70 	bl	8002a00 <HAL_GPIO_Init>
}
 8001d20:	e031      	b.n	8001d86 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_SPI_MspInit+0x164>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d12c      	bne.n	8001d86 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_SPI_MspInit+0x154>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001d64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d76:	2306      	movs	r3, #6
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <HAL_SPI_MspInit+0x168>)
 8001d82:	f000 fe3d 	bl	8002a00 <HAL_GPIO_Init>
}
 8001d86:	bf00      	nop
 8001d88:	3738      	adds	r7, #56	; 0x38
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40013000 	.word	0x40013000
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40003800 	.word	0x40003800
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40003c00 	.word	0x40003c00
 8001da8:	40020800 	.word	0x40020800

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10d      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_TIM_Base_MspInit+0x40>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_TIM_Base_MspInit+0x40>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_TIM_Base_MspInit+0x40>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_TIM_MspPostInit+0x68>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11d      	bne.n	8001e4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = S1_CTRL_Pin|S2_CTRL_Pin;
 8001e2e:	2330      	movs	r3, #48	; 0x30
 8001e30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_TIM_MspPostInit+0x70>)
 8001e4a:	f000 fdd9 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020400 	.word	0x40020400

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 f9de 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <OTG_FS_IRQHandler+0x10>)
 8001ebe:	f001 f88c 	bl	8002fda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200019a4 	.word	0x200019a4

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_kill>:

int _kill(int pid, int sig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee6:	f008 f949 	bl	800a17c <__errno>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2216      	movs	r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
  return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_exit>:

void _exit (int status)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffe7 	bl	8001edc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0e:	e7fe      	b.n	8001f0e <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
  }

  return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
  }
  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
  return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f008 f8ae 	bl	800a17c <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20020000 	.word	0x20020000
 800204c:	00000400 	.word	0x00000400
 8002050:	200004bc 	.word	0x200004bc
 8002054:	200020e0 	.word	0x200020e0

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00
 800207c:	00000000 	.word	0x00000000

08002080 <get_roll_and_pitch>:
#include "utils.h"

void get_roll_and_pitch(float acc[3], float *roll, float *pitch) {
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
    *roll = atan2(acc[1], acc[2]) * 57.3;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3304      	adds	r3, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa60 	bl	8000558 <__aeabi_f2d>
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3308      	adds	r3, #8
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fa58 	bl	8000558 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	ec43 2b11 	vmov	d1, r2, r3
 80020b0:	ec45 4b10 	vmov	d0, r4, r5
 80020b4:	f00a ff76 	bl	800cfa4 <atan2>
 80020b8:	ec51 0b10 	vmov	r0, r1, d0
 80020bc:	a32c      	add	r3, pc, #176	; (adr r3, 8002170 <get_roll_and_pitch+0xf0>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe faa1 	bl	8000608 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd73 	bl	8000bb8 <__aeabi_d2f>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	601a      	str	r2, [r3, #0]
    *pitch = atan2(-acc[0], sqrt(acc[1]*acc[1] + acc[2]*acc[2])) * 57.3;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	eef1 7a67 	vneg.f32	s15, s15
 80020e2:	ee17 3a90 	vmov	r3, s15
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa36 	bl	8000558 <__aeabi_f2d>
 80020ec:	4604      	mov	r4, r0
 80020ee:	460d      	mov	r5, r1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3304      	adds	r3, #4
 80020f4:	ed93 7a00 	vldr	s14, [r3]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3304      	adds	r3, #4
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3308      	adds	r3, #8
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3308      	adds	r3, #8
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211c:	ee17 0a90 	vmov	r0, s15
 8002120:	f7fe fa1a 	bl	8000558 <__aeabi_f2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ec43 2b10 	vmov	d0, r2, r3
 800212c:	f00a ff3c 	bl	800cfa8 <sqrt>
 8002130:	eeb0 7a40 	vmov.f32	s14, s0
 8002134:	eef0 7a60 	vmov.f32	s15, s1
 8002138:	eeb0 1a47 	vmov.f32	s2, s14
 800213c:	eef0 1a67 	vmov.f32	s3, s15
 8002140:	ec45 4b10 	vmov	d0, r4, r5
 8002144:	f00a ff2e 	bl	800cfa4 <atan2>
 8002148:	ec51 0b10 	vmov	r0, r1, d0
 800214c:	a308      	add	r3, pc, #32	; (adr r3, 8002170 <get_roll_and_pitch+0xf0>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa59 	bl	8000608 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd2b 	bl	8000bb8 <__aeabi_d2f>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	66666666 	.word	0x66666666
 8002174:	404ca666 	.word	0x404ca666

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a2:	f7ff ff59 	bl	8002058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f007 ffef 	bl	800a188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7ff f9ed 	bl	8001588 <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80021bc:	0800db38 	.word	0x0800db38
  ldr r2, =_sbss
 80021c0:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80021c4:	200020e0 	.word	0x200020e0

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_Init+0x40>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_Init+0x40>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_Init+0x40>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 fbc1 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	200f      	movs	r0, #15
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fcb2 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fbd9 	bl	80029e6 <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800224c:	f000 fba1 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000000 	.word	0x20000000
 8002268:	20000008 	.word	0x20000008
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000008 	.word	0x20000008
 8002294:	200004c0 	.word	0x200004c0

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200004c0 	.word	0x200004c0

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008

080022f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e033      	b.n	8002376 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fc4e 	bl	8001bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f94a 	bl	80025e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
 8002366:	e001      	b.n	800236c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1c>
 8002398:	2302      	movs	r3, #2
 800239a:	e113      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x244>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d925      	bls.n	80023f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68d9      	ldr	r1, [r3, #12]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	3b1e      	subs	r3, #30
 80023c2:	2207      	movs	r2, #7
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	400a      	ands	r2, r1
 80023d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68d9      	ldr	r1, [r3, #12]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	4603      	mov	r3, r0
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4403      	add	r3, r0
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e022      	b.n	800243e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	2207      	movs	r2, #7
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	400a      	ands	r2, r1
 800241a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	4603      	mov	r3, r0
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4403      	add	r3, r0
 8002434:	409a      	lsls	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b06      	cmp	r3, #6
 8002444:	d824      	bhi.n	8002490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b05      	subs	r3, #5
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b05      	subs	r3, #5
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
 800248e:	e04c      	b.n	800252a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d824      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b23      	subs	r3, #35	; 0x23
 80024aa:	221f      	movs	r2, #31
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43da      	mvns	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	400a      	ands	r2, r1
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b23      	subs	r3, #35	; 0x23
 80024d4:	fa00 f203 	lsl.w	r2, r0, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
 80024e0:	e023      	b.n	800252a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b41      	subs	r3, #65	; 0x41
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	400a      	ands	r2, r1
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b41      	subs	r3, #65	; 0x41
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_ADC_ConfigChannel+0x250>)
 800252c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <HAL_ADC_ConfigChannel+0x254>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d10f      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1d8>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b12      	cmp	r3, #18
 800253e:	d10b      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_ADC_ConfigChannel+0x254>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d12b      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x23a>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_ADC_ConfigChannel+0x258>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x1f4>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b11      	cmp	r3, #17
 8002572:	d122      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_ADC_ConfigChannel+0x258>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d111      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_ADC_ConfigChannel+0x25c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_ADC_ConfigChannel+0x260>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9a      	lsrs	r2, r3, #18
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025ac:	e002      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40012300 	.word	0x40012300
 80025d4:	40012000 	.word	0x40012000
 80025d8:	10000012 	.word	0x10000012
 80025dc:	20000000 	.word	0x20000000
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ec:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <ADC_Init+0x1f0>)
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800263c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <ADC_Init+0x1f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e00f      	b.n	80026e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0202 	bic.w	r2, r2, #2
 80026f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e1b      	ldrb	r3, [r3, #24]
 80026fc:	005a      	lsls	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800272e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	035a      	lsls	r2, r3, #13
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e007      	b.n	8002758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	3b01      	subs	r3, #1
 8002774:	051a      	lsls	r2, r3, #20
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279a:	025a      	lsls	r2, r3, #9
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	029a      	lsls	r2, r3, #10
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012300 	.word	0x40012300
 80027d8:	0f000001 	.word	0x0f000001

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800295c:	f7ff ff8e 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff29 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff3e 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ff8e 	bl	80028d0 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff5d 	bl	800287c <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff31 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffa2 	bl	8002938 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e159      	b.n	8002cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8148 	bne.w	8002cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a2 	beq.w	8002cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <HAL_GPIO_Init+0x2f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x202>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_GPIO_Init+0x2f4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x1fe>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_GPIO_Init+0x2f8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x1fa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_GPIO_Init+0x2fc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x1f2>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002c02:	2300      	movs	r3, #0
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c46:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	f67f aea2 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d24:	e003      	b.n	8002d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3c:	b08f      	sub	sp, #60	; 0x3c
 8002d3e:	af0a      	add	r7, sp, #40	; 0x28
 8002d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e10f      	b.n	8002f6c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f006 fefe 	bl	8009b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 f9e5 	bl	800615a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	687e      	ldr	r6, [r7, #4]
 8002d98:	466d      	mov	r5, sp
 8002d9a:	f106 0410 	add.w	r4, r6, #16
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dae:	1d33      	adds	r3, r6, #4
 8002db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db2:	6838      	ldr	r0, [r7, #0]
 8002db4:	f003 f8bc 	bl	8005f30 <USB_CoreInit>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0d0      	b.n	8002f6c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 f9d3 	bl	800617c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	e04a      	b.n	8002e72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	333d      	adds	r3, #61	; 0x3d
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	333c      	adds	r3, #60	; 0x3c
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	b298      	uxth	r0, r3
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3344      	adds	r3, #68	; 0x44
 8002e18:	4602      	mov	r2, r0
 8002e1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3340      	adds	r3, #64	; 0x40
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3348      	adds	r3, #72	; 0x48
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334c      	adds	r3, #76	; 0x4c
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3354      	adds	r3, #84	; 0x54
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3af      	bcc.n	8002ddc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e044      	b.n	8002f0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3b5      	bcc.n	8002e82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	687e      	ldr	r6, [r7, #4]
 8002f1e:	466d      	mov	r5, sp
 8002f20:	f106 0410 	add.w	r4, r6, #16
 8002f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f34:	1d33      	adds	r3, r6, #4
 8002f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f38:	6838      	ldr	r0, [r7, #0]
 8002f3a:	f003 f96b 	bl	8006214 <USB_DevInit>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e00d      	b.n	8002f6c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f004 faba 	bl	80074de <USB_DevDisconnect>

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_PCD_Start+0x1c>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e020      	b.n	8002fd2 <HAL_PCD_Start+0x5e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d109      	bne.n	8002fb4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d005      	beq.n	8002fb4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f8bd 	bl	8006138 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fa6a 	bl	800749c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fda:	b590      	push	{r4, r7, lr}
 8002fdc:	b08d      	sub	sp, #52	; 0x34
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f004 fb28 	bl	8007646 <USB_GetMode>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 848a 	bne.w	8003912 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fa8c 	bl	8007520 <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8480 	beq.w	8003910 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f004 fa79 	bl	8007520 <USB_ReadInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d107      	bne.n	8003048 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f002 0202 	and.w	r2, r2, #2
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f004 fa67 	bl	8007520 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b10      	cmp	r3, #16
 800305a:	d161      	bne.n	8003120 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0210 	bic.w	r2, r2, #16
 800306a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	0c5b      	lsrs	r3, r3, #17
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	2b02      	cmp	r3, #2
 8003096:	d124      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d035      	beq.n	8003110 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	6a38      	ldr	r0, [r7, #32]
 80030b8:	f004 f89e 	bl	80071f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c8:	441a      	add	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030da:	441a      	add	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	621a      	str	r2, [r3, #32]
 80030e0:	e016      	b.n	8003110 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	0c5b      	lsrs	r3, r3, #17
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d110      	bne.n	8003110 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f4:	2208      	movs	r2, #8
 80030f6:	4619      	mov	r1, r3
 80030f8:	6a38      	ldr	r0, [r7, #32]
 80030fa:	f004 f87d 	bl	80071f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800310a:	441a      	add	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0210 	orr.w	r2, r2, #16
 800311e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f004 f9fb 	bl	8007520 <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003130:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003134:	f040 80a7 	bne.w	8003286 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f004 fa00 	bl	8007546 <USB_ReadDevAllOutEpInterrupt>
 8003146:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003148:	e099      	b.n	800327e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 808e 	beq.w	8003272 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f004 fa24 	bl	80075ae <USB_ReadDevOutEPInterrupt>
 8003166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	2301      	movs	r3, #1
 8003182:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fec2 	bl	8003f10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	2308      	movs	r3, #8
 80031a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 ff98 	bl	80040e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c6:	461a      	mov	r2, r3
 80031c8:	2310      	movs	r3, #16
 80031ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d030      	beq.n	8003238 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d109      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	78db      	ldrb	r3, [r3, #3]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d108      	bne.n	8003226 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f006 fd9d 	bl	8009d60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	2302      	movs	r3, #2
 8003236:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2320      	movs	r3, #32
 8003252:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	461a      	mov	r2, r3
 800326c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003270:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	3301      	adds	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f af62 	bne.w	800314a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f004 f948 	bl	8007520 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003296:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800329a:	f040 80db 	bne.w	8003454 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f004 f969 	bl	800757a <USB_ReadDevAllInEpInterrupt>
 80032a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032ae:	e0cd      	b.n	800344c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80c2 	beq.w	8003440 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 f98f 	bl	80075ea <USB_ReadDevInEPInterrupt>
 80032cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d057      	beq.n	8003388 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	2201      	movs	r2, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f8:	4013      	ands	r3, r2
 80032fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003308:	461a      	mov	r2, r3
 800330a:	2301      	movs	r3, #1
 800330c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d132      	bne.n	800337c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334c      	adds	r3, #76	; 0x4c
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4403      	add	r3, r0
 8003336:	3348      	adds	r3, #72	; 0x48
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4419      	add	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4403      	add	r3, r0
 800334a:	334c      	adds	r3, #76	; 0x4c
 800334c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d113      	bne.n	800337c <HAL_PCD_IRQHandler+0x3a2>
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3354      	adds	r3, #84	; 0x54
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003374:	461a      	mov	r2, r3
 8003376:	2101      	movs	r1, #1
 8003378:	f004 f996 	bl	80076a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	b2db      	uxtb	r3, r3
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f006 fc71 	bl	8009c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339e:	461a      	mov	r2, r3
 80033a0:	2308      	movs	r3, #8
 80033a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ba:	461a      	mov	r2, r3
 80033bc:	2310      	movs	r3, #16
 80033be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d6:	461a      	mov	r2, r3
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d023      	beq.n	800342e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e8:	6a38      	ldr	r0, [r7, #32]
 80033ea:	f003 f877 	bl	80064dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	3338      	adds	r3, #56	; 0x38
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d108      	bne.n	800341c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	b2db      	uxtb	r3, r3
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f006 fcb4 	bl	8009d84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	461a      	mov	r2, r3
 800342a:	2302      	movs	r3, #2
 800342c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fcdb 	bl	8003df6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	3301      	adds	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f af2e 	bne.w	80032b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 f861 	bl	8007520 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003468:	d122      	bne.n	80034b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003484:	2b01      	cmp	r3, #1
 8003486:	d108      	bne.n	800349a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003490:	2100      	movs	r1, #0
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fec2 	bl	800421c <HAL_PCDEx_LPM_Callback>
 8003498:	e002      	b.n	80034a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f006 fc52 	bl	8009d44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f004 f833 	bl	8007520 <USB_ReadInterrupts>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c4:	d112      	bne.n	80034ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f006 fc0e 	bl	8009cf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 f815 	bl	8007520 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	f040 80b7 	bne.w	8003672 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2110      	movs	r1, #16
 800351e:	4618      	mov	r0, r3
 8003520:	f002 ffdc 	bl	80064dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003528:	e046      	b.n	80035b8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003536:	461a      	mov	r2, r3
 8003538:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800353c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	440a      	add	r2, r1
 8003554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003558:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800355c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003570:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003582:	0151      	lsls	r1, r2, #5
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	440a      	add	r2, r1
 8003588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800358c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003590:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a2:	0151      	lsls	r1, r2, #5
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	440a      	add	r2, r1
 80035a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	3301      	adds	r3, #1
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3b3      	bcc.n	800352a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ee:	f043 030b 	orr.w	r3, r3, #11
 80035f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003604:	f043 030b 	orr.w	r3, r3, #11
 8003608:	6453      	str	r3, [r2, #68]	; 0x44
 800360a:	e015      	b.n	8003638 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800361e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003622:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003632:	f043 030b 	orr.w	r3, r3, #11
 8003636:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003646:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800364a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800365c:	461a      	mov	r2, r3
 800365e:	f004 f823 	bl	80076a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f003 ff52 	bl	8007520 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d124      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f003 ffe8 	bl	8007662 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f002 ff9d 	bl	80065d6 <USB_GetDevSpeed>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681c      	ldr	r4, [r3, #0]
 80036a8:	f001 f9e8 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 80036ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4620      	mov	r0, r4
 80036b8:	f002 fc9c 	bl	8005ff4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f006 fafc 	bl	8009cba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 ff22 	bl	8007520 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d10a      	bne.n	80036fc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f006 fad9 	bl	8009c9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f002 0208 	and.w	r2, r2, #8
 80036fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f003 ff0d 	bl	8007520 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	2b80      	cmp	r3, #128	; 0x80
 800370e:	d122      	bne.n	8003756 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800371c:	2301      	movs	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	e014      	b.n	800374c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb27 	bl	8003d94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	3301      	adds	r3, #1
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	429a      	cmp	r2, r3
 8003754:	d3e5      	bcc.n	8003722 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fee0 	bl	8007520 <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376a:	d13b      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376c:	2301      	movs	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	e02b      	b.n	80037ca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3340      	adds	r3, #64	; 0x40
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d115      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003798:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800379a:	2b00      	cmp	r3, #0
 800379c:	da12      	bge.n	80037c4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	333f      	adds	r3, #63	; 0x3f
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fae8 	bl	8003d94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	3301      	adds	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3ce      	bcc.n	8003772 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 fe99 	bl	8007520 <USB_ReadInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f8:	d155      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fa:	2301      	movs	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	e045      	b.n	800388c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d12e      	bne.n	8003886 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003828:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800382a:	2b00      	cmp	r3, #0
 800382c:	da2b      	bge.n	8003886 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800383a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800383e:	429a      	cmp	r2, r3
 8003840:	d121      	bne.n	8003886 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800387e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003882:	6053      	str	r3, [r2, #4]
            break;
 8003884:	e007      	b.n	8003896 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	3301      	adds	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003892:	429a      	cmp	r2, r3
 8003894:	d3b4      	bcc.n	8003800 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 fe38 	bl	8007520 <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d10a      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f006 fa73 	bl	8009da8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f003 fe22 	bl	8007520 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d115      	bne.n	8003912 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f006 fa63 	bl	8009dc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e000      	b.n	8003912 <HAL_PCD_IRQHandler+0x938>
      return;
 8003910:	bf00      	nop
    }
  }
}
 8003912:	3734      	adds	r7, #52	; 0x34
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}

08003918 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_PCD_SetAddress+0x1a>
 800392e:	2302      	movs	r3, #2
 8003930:	e013      	b.n	800395a <HAL_PCD_SetAddress+0x42>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fd80 	bl	8007450 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	4608      	mov	r0, r1
 800396c:	4611      	mov	r1, r2
 800396e:	461a      	mov	r2, r3
 8003970:	4603      	mov	r3, r0
 8003972:	70fb      	strb	r3, [r7, #3]
 8003974:	460b      	mov	r3, r1
 8003976:	803b      	strh	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003984:	2b00      	cmp	r3, #0
 8003986:	da0f      	bge.n	80039a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	f003 020f 	and.w	r2, r3, #15
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	3338      	adds	r3, #56	; 0x38
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	705a      	strb	r2, [r3, #1]
 80039a6:	e00f      	b.n	80039c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039d4:	883a      	ldrh	r2, [r7, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	78ba      	ldrb	r2, [r7, #2]
 80039de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039f2:	78bb      	ldrb	r3, [r7, #2]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d102      	bne.n	80039fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_PCD_EP_Open+0xaa>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e00e      	b.n	8003a2a <HAL_PCD_EP_Open+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 fe00 	bl	8006620 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a28:	7afb      	ldrb	r3, [r7, #11]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	da0f      	bge.n	8003a66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	3338      	adds	r3, #56	; 0x38
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	705a      	strb	r2, [r3, #1]
 8003a64:	e00f      	b.n	8003a86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 020f 	and.w	r2, r3, #15
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_PCD_EP_Close+0x6e>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e00e      	b.n	8003abe <HAL_PCD_EP_Close+0x8c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fe3e 	bl	8006730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad6:	7afb      	ldrb	r3, [r7, #11]
 8003ad8:	f003 020f 	and.w	r2, r3, #15
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	3304      	adds	r3, #4
 8003aee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2200      	movs	r2, #0
 8003b00:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d102      	bne.n	8003b22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	f003 f91d 	bl	8006d78 <USB_EP0StartXfer>
 8003b3e:	e008      	b.n	8003b52 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6979      	ldr	r1, [r7, #20]
 8003b4e:	f002 fecb 	bl	80068e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 020f 	and.w	r2, r3, #15
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3338      	adds	r3, #56	; 0x38
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6979      	ldr	r1, [r7, #20]
 8003bfe:	f003 f8bb 	bl	8006d78 <USB_EP0StartXfer>
 8003c02:	e008      	b.n	8003c16 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	f002 fe69 	bl	80068e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	f003 020f 	and.w	r2, r3, #15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d901      	bls.n	8003c3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e050      	b.n	8003ce0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da0f      	bge.n	8003c66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3338      	adds	r3, #56	; 0x38
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	705a      	strb	r2, [r3, #1]
 8003c64:	e00d      	b.n	8003c82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	3304      	adds	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PCD_EP_SetStall+0x82>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e01e      	b.n	8003ce0 <HAL_PCD_EP_SetStall+0xc0>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f003 faf9 	bl	80072a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	b2d9      	uxtb	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f003 fce9 	bl	80076a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	f003 020f 	and.w	r2, r3, #15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d901      	bls.n	8003d06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e042      	b.n	8003d8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	da0f      	bge.n	8003d2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3338      	adds	r3, #56	; 0x38
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	705a      	strb	r2, [r3, #1]
 8003d2c:	e00f      	b.n	8003d4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	3304      	adds	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_PCD_EP_ClrStall+0x86>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e00e      	b.n	8003d8c <HAL_PCD_EP_ClrStall+0xa4>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f003 fb01 	bl	8007384 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0c      	bge.n	8003dc2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	3338      	adds	r3, #56	; 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e00c      	b.n	8003ddc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	f003 020f 	and.w	r2, r3, #15
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 f920 	bl	8007028 <USB_EPStopXfer>
 8003de8:	4603      	mov	r3, r0
 8003dea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dec:	7afb      	ldrb	r3, [r7, #11]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b08a      	sub	sp, #40	; 0x28
 8003dfa:	af02      	add	r7, sp, #8
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3338      	adds	r3, #56	; 0x38
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d901      	bls.n	8003e2e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06c      	b.n	8003f08 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d902      	bls.n	8003e4a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e52:	e02b      	b.n	8003eac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d902      	bls.n	8003e70 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3303      	adds	r3, #3
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6919      	ldr	r1, [r3, #16]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f003 f974 	bl	800717c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	441a      	add	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	441a      	add	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d809      	bhi.n	8003ed6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d203      	bcs.n	8003ed6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1be      	bne.n	8003e54 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d811      	bhi.n	8003f06 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	2201      	movs	r2, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	6939      	ldr	r1, [r7, #16]
 8003efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f02:	4013      	ands	r3, r2
 8003f04:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	333c      	adds	r3, #60	; 0x3c
 8003f28:	3304      	adds	r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d17b      	bne.n	800403e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	f240 80b9 	bls.w	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80b3 	beq.w	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f72:	461a      	mov	r2, r3
 8003f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f78:	6093      	str	r3, [r2, #8]
 8003f7a:	e0a7      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	2320      	movs	r3, #32
 8003f96:	6093      	str	r3, [r2, #8]
 8003f98:	e098      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f040 8093 	bne.w	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	; (80040d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d90f      	bls.n	8003fce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fca:	6093      	str	r3, [r2, #8]
 8003fcc:	e07e      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	0159      	lsls	r1, r3, #5
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	440b      	add	r3, r1
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d114      	bne.n	8004030 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004018:	461a      	mov	r2, r3
 800401a:	2101      	movs	r1, #1
 800401c:	f003 fb44 	bl	80076a8 <USB_EP0_OutStart>
 8004020:	e006      	b.n	8004030 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	441a      	add	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f005 fdfc 	bl	8009c34 <HAL_PCD_DataOutStageCallback>
 800403c:	e046      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d124      	bne.n	8004090 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	6093      	str	r3, [r2, #8]
 8004064:	e032      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	461a      	mov	r2, r3
 800407e:	2320      	movs	r3, #32
 8004080:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f005 fdd3 	bl	8009c34 <HAL_PCD_DataOutStageCallback>
 800408e:	e01d      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d114      	bne.n	80040c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040b8:	461a      	mov	r2, r3
 80040ba:	2100      	movs	r1, #0
 80040bc:	f003 faf4 	bl	80076a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f005 fdb4 	bl	8009c34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	4f54300a 	.word	0x4f54300a
 80040dc:	4f54310a 	.word	0x4f54310a

080040e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	333c      	adds	r3, #60	; 0x3c
 80040f8:	3304      	adds	r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <PCD_EP_OutSetupPacket_int+0x88>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d90e      	bls.n	8004134 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f005 fd6b 	bl	8009c10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <PCD_EP_OutSetupPacket_int+0x88>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d90c      	bls.n	800415c <PCD_EP_OutSetupPacket_int+0x7c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d108      	bne.n	800415c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004154:	461a      	mov	r2, r3
 8004156:	2101      	movs	r1, #1
 8004158:	f003 faa6 	bl	80076a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	4f54300a 	.word	0x4f54300a

0800416c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
 8004178:	4613      	mov	r3, r2
 800417a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800418a:	883b      	ldrh	r3, [r7, #0]
 800418c:	0419      	lsls	r1, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	430a      	orrs	r2, r1
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
 8004198:	e028      	b.n	80041ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4413      	add	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e00d      	b.n	80041ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	3340      	adds	r3, #64	; 0x40
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	3301      	adds	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3ec      	bcc.n	80041ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041d4:	883b      	ldrh	r3, [r7, #0]
 80041d6:	0418      	lsls	r0, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	3b01      	subs	r3, #1
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4302      	orrs	r2, r0
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e267      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d075      	beq.n	800433e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b04      	cmp	r3, #4
 800425c:	d00c      	beq.n	8004278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425e:	4b85      	ldr	r3, [pc, #532]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d112      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426a:	4b82      	ldr	r3, [pc, #520]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b7e      	ldr	r3, [pc, #504]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05b      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d157      	bne.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e242      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x74>
 800429a:	4b76      	ldr	r3, [pc, #472]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a75      	ldr	r2, [pc, #468]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x98>
 80042b2:	4b70      	ldr	r3, [pc, #448]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a6f      	ldr	r2, [pc, #444]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6c      	ldr	r2, [pc, #432]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042cc:	4b69      	ldr	r3, [pc, #420]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a68      	ldr	r2, [pc, #416]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fd ffd4 	bl	8002298 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd ffd0 	bl	8002298 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e207      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fd ffc0 	bl	8002298 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd ffbc 	bl	8002298 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1f3      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	4b51      	ldr	r3, [pc, #324]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d063      	beq.n	8004412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434a:	4b4a      	ldr	r3, [pc, #296]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435e:	2b08      	cmp	r3, #8
 8004360:	d11c      	bne.n	800439c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004362:	4b44      	ldr	r3, [pc, #272]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d116      	bne.n	800439c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_RCC_OscConfig+0x152>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d001      	beq.n	8004386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e1c7      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004386:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4937      	ldr	r1, [pc, #220]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	e03a      	b.n	8004412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a4:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_RCC_OscConfig+0x244>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fd ff75 	bl	8002298 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b2:	f7fd ff71 	bl	8002298 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e1a8      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b28      	ldr	r3, [pc, #160]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4925      	ldr	r1, [pc, #148]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	e015      	b.n	8004412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCC_OscConfig+0x244>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd ff54 	bl	8002298 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fd ff50 	bl	8002298 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e187      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d036      	beq.n	800448c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <HAL_RCC_OscConfig+0x248>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd ff34 	bl	8002298 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004434:	f7fd ff30 	bl	8002298 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e167      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_OscConfig+0x240>)
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x200>
 8004452:	e01b      	b.n	800448c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_OscConfig+0x248>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445a:	f7fd ff1d 	bl	8002298 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004460:	e00e      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004462:	f7fd ff19 	bl	8002298 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d907      	bls.n	8004480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e150      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
 8004474:	40023800 	.word	0x40023800
 8004478:	42470000 	.word	0x42470000
 800447c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	4b88      	ldr	r3, [pc, #544]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ea      	bne.n	8004462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8097 	beq.w	80045c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	4b7d      	ldr	r3, [pc, #500]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a7c      	ldr	r2, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b7a      	ldr	r3, [pc, #488]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b77      	ldr	r3, [pc, #476]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d118      	bne.n	8004508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d6:	4b74      	ldr	r3, [pc, #464]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a73      	ldr	r2, [pc, #460]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e2:	f7fd fed9 	bl	8002298 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fd fed5 	bl	8002298 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e10c      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <HAL_RCC_OscConfig+0x474>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x2ea>
 8004510:	4b64      	ldr	r3, [pc, #400]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a63      	ldr	r2, [pc, #396]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	e01c      	b.n	8004558 <HAL_RCC_OscConfig+0x324>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b05      	cmp	r3, #5
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x30c>
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800452c:	f043 0304 	orr.w	r3, r3, #4
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
 8004532:	4b5c      	ldr	r3, [pc, #368]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0x324>
 8004540:	4b58      	ldr	r3, [pc, #352]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a57      	ldr	r2, [pc, #348]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	4b55      	ldr	r3, [pc, #340]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a54      	ldr	r2, [pc, #336]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004552:	f023 0304 	bic.w	r3, r3, #4
 8004556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d015      	beq.n	800458c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fd fe9a 	bl	8002298 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd fe96 	bl	8002298 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0cb      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	4b49      	ldr	r3, [pc, #292]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ee      	beq.n	8004568 <HAL_RCC_OscConfig+0x334>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458c:	f7fd fe84 	bl	8002298 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fd fe80 	bl	8002298 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e0b5      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ee      	bne.n	8004594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a38      	ldr	r2, [pc, #224]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a1 	beq.w	8004714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d2:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d05c      	beq.n	8004698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d141      	bne.n	800466a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_RCC_OscConfig+0x478>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd fe54 	bl	8002298 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fd fe50 	bl	8002298 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e087      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	3b01      	subs	r3, #1
 800462c:	041b      	lsls	r3, r3, #16
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	491b      	ldr	r1, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x478>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fd fe29 	bl	8002298 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd fe25 	bl	8002298 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e05c      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x416>
 8004668:	e054      	b.n	8004714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_RCC_OscConfig+0x478>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fd fe12 	bl	8002298 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd fe0e 	bl	8002298 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e045      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_OscConfig+0x470>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x444>
 8004696:	e03d      	b.n	8004714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e038      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x4ec>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d028      	beq.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d121      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d11a      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d111      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0cc      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90c      	bls.n	8004760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d044      	beq.n	8004844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d119      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b3f      	ldr	r3, [pc, #252]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e067      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4934      	ldr	r1, [pc, #208]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004814:	f7fd fd40 	bl	8002298 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fd fd3c 	bl	8002298 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e04f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d20c      	bcs.n	800486c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490a      	ldr	r1, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fca0 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023c00 	.word	0x40023c00
 80048e0:	40023800 	.word	0x40023800
 80048e4:	0800d6cc 	.word	0x0800d6cc
 80048e8:	20000000 	.word	0x20000000
 80048ec:	20000004 	.word	0x20000004

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b090      	sub	sp, #64	; 0x40
 80048f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004900:	2300      	movs	r3, #0
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b08      	cmp	r3, #8
 8004912:	d00d      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x40>
 8004914:	2b08      	cmp	r3, #8
 8004916:	f200 80a1 	bhi.w	8004a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x34>
 800491e:	2b04      	cmp	r3, #4
 8004920:	d003      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x3a>
 8004922:	e09b      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004928:	e09b      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492a:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800492c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800492e:	e098      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004930:	4b4f      	ldr	r3, [pc, #316]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493a:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d028      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	4b4a      	ldr	r3, [pc, #296]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	2200      	movs	r2, #0
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	627a      	str	r2, [r7, #36]	; 0x24
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004958:	2100      	movs	r1, #0
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800495c:	fb03 f201 	mul.w	r2, r3, r1
 8004960:	2300      	movs	r3, #0
 8004962:	fb00 f303 	mul.w	r3, r0, r3
 8004966:	4413      	add	r3, r2
 8004968:	4a43      	ldr	r2, [pc, #268]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800496a:	fba0 1202 	umull	r1, r2, r0, r2
 800496e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004970:	460a      	mov	r2, r1
 8004972:	62ba      	str	r2, [r7, #40]	; 0x28
 8004974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004976:	4413      	add	r3, r2
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497c:	2200      	movs	r2, #0
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	61fa      	str	r2, [r7, #28]
 8004982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800498a:	f7fc f965 	bl	8000c58 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4613      	mov	r3, r2
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004996:	e053      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004998:	4b35      	ldr	r3, [pc, #212]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	2200      	movs	r2, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	617a      	str	r2, [r7, #20]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049aa:	f04f 0b00 	mov.w	fp, #0
 80049ae:	4652      	mov	r2, sl
 80049b0:	465b      	mov	r3, fp
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	0159      	lsls	r1, r3, #5
 80049bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c0:	0150      	lsls	r0, r2, #5
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	ebb2 080a 	subs.w	r8, r2, sl
 80049ca:	eb63 090b 	sbc.w	r9, r3, fp
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049e2:	ebb2 0408 	subs.w	r4, r2, r8
 80049e6:	eb63 0509 	sbc.w	r5, r3, r9
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	00eb      	lsls	r3, r5, #3
 80049f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f8:	00e2      	lsls	r2, r4, #3
 80049fa:	4614      	mov	r4, r2
 80049fc:	461d      	mov	r5, r3
 80049fe:	eb14 030a 	adds.w	r3, r4, sl
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	eb45 030b 	adc.w	r3, r5, fp
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a16:	4629      	mov	r1, r5
 8004a18:	028b      	lsls	r3, r1, #10
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a20:	4621      	mov	r1, r4
 8004a22:	028a      	lsls	r2, r1, #10
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	60fa      	str	r2, [r7, #12]
 8004a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a34:	f7fc f910 	bl	8000c58 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3740      	adds	r7, #64	; 0x40
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	00f42400 	.word	0x00f42400
 8004a78:	00b71b00 	.word	0x00b71b00

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000000 	.word	0x20000000

08004a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07b      	b.n	8004b9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab6:	d009      	beq.n	8004acc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	61da      	str	r2, [r3, #28]
 8004abe:	e005      	b.n	8004acc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd f8aa 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	ea42 0103 	orr.w	r1, r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0104 	and.w	r1, r3, #4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0210 	and.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b088      	sub	sp, #32
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_SPI_Transmit+0x22>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e126      	b.n	8004e16 <HAL_SPI_Transmit+0x270>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd0:	f7fd fb62 	bl	8002298 <HAL_GetTick>
 8004bd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bea:	e10b      	b.n	8004e04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Transmit+0x52>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bfc:	e102      	b.n	8004e04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	d10f      	bne.n	8004c66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d007      	beq.n	8004c84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8c:	d14b      	bne.n	8004d26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_SPI_Transmit+0xf6>
 8004c96:	8afb      	ldrh	r3, [r7, #22]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d13e      	bne.n	8004d1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	881a      	ldrh	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	1c9a      	adds	r2, r3, #2
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cc0:	e02b      	b.n	8004d1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d112      	bne.n	8004cf6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cf4:	e011      	b.n	8004d1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf6:	f7fd facf 	bl	8002298 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d803      	bhi.n	8004d0e <HAL_SPI_Transmit+0x168>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_Transmit+0x16e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d18:	e074      	b.n	8004e04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ce      	bne.n	8004cc2 <HAL_SPI_Transmit+0x11c>
 8004d24:	e04c      	b.n	8004dc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_SPI_Transmit+0x18e>
 8004d2e:	8afb      	ldrh	r3, [r7, #22]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d140      	bne.n	8004db6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d5a:	e02c      	b.n	8004db6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d113      	bne.n	8004d92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d90:	e011      	b.n	8004db6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d92:	f7fd fa81 	bl	8002298 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d803      	bhi.n	8004daa <HAL_SPI_Transmit+0x204>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Transmit+0x20a>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004db4:	e026      	b.n	8004e04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1cd      	bne.n	8004d5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa55 	bl	8005274 <SPI_EndRxTxTransaction>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e000      	b.n	8004e04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e14:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08c      	sub	sp, #48	; 0x30
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x26>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e18a      	b.n	800515a <HAL_SPI_TransmitReceive+0x33c>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e4c:	f7fd fa24 	bl	8002298 <HAL_GetTick>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d00f      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x70>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e74:	d107      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x68>
 8004e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d003      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
 8004e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e8c:	e15b      	b.n	8005146 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x82>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x82>
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ea6:	e14e      	b.n	8005146 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d003      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	887a      	ldrh	r2, [r7, #2]
 8004ede:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d007      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f18:	d178      	bne.n	800500c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x10a>
 8004f22:	8b7b      	ldrh	r3, [r7, #26]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d166      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	1c9a      	adds	r2, r3, #2
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4c:	e053      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d11b      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x176>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x176>
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d113      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d119      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x1b8>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d014      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	1c9a      	adds	r2, r3, #2
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fd6:	f7fd f95f 	bl	8002298 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d807      	bhi.n	8004ff6 <HAL_SPI_TransmitReceive+0x1d8>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fec:	d003      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ff4:	e0a7      	b.n	8005146 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1a6      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x130>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1a1      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x130>
 800500a:	e07c      	b.n	8005106 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_SPI_TransmitReceive+0x1fc>
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d16b      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005040:	e057      	b.n	80050f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d11c      	bne.n	800508a <HAL_SPI_TransmitReceive+0x26c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d017      	beq.n	800508a <HAL_SPI_TransmitReceive+0x26c>
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d114      	bne.n	800508a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d119      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x2ae>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d014      	beq.n	80050cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050c8:	2301      	movs	r3, #1
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050cc:	f7fd f8e4 	bl	8002298 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d8:	429a      	cmp	r2, r3
 80050da:	d803      	bhi.n	80050e4 <HAL_SPI_TransmitReceive+0x2c6>
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x2cc>
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050f0:	e029      	b.n	8005146 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1a2      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x224>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d19d      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f8b2 	bl	8005274 <SPI_EndRxTxTransaction>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005122:	e010      	b.n	8005146 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	e000      	b.n	8005146 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005144:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800515a:	4618      	mov	r0, r3
 800515c:	3730      	adds	r7, #48	; 0x30
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005174:	f7fd f890 	bl	8002298 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	4413      	add	r3, r2
 8005182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005184:	f7fd f888 	bl	8002298 <HAL_GetTick>
 8005188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	015b      	lsls	r3, r3, #5
 8005190:	0d1b      	lsrs	r3, r3, #20
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800519a:	e054      	b.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a2:	d050      	beq.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051a4:	f7fd f878 	bl	8002298 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d902      	bls.n	80051ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d13d      	bne.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051d2:	d111      	bne.n	80051f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051dc:	d004      	beq.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e6:	d107      	bne.n	80051f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005200:	d10f      	bne.n	8005222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e017      	b.n	8005266 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3b01      	subs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	429a      	cmp	r2, r3
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	429a      	cmp	r2, r3
 8005262:	d19b      	bne.n	800519c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000000 	.word	0x20000000

08005274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <SPI_EndRxTxTransaction+0x7c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <SPI_EndRxTxTransaction+0x80>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0d5b      	lsrs	r3, r3, #21
 800528c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529e:	d112      	bne.n	80052c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ff5a 	bl	8005164 <SPI_WaitFlagStateUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e00f      	b.n	80052e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	d0f2      	beq.n	80052c6 <SPI_EndRxTxTransaction+0x52>
 80052e0:	e000      	b.n	80052e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80052e2:	bf00      	nop
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000000 	.word	0x20000000
 80052f4:	165e9f81 	.word	0x165e9f81

080052f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e041      	b.n	800538e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fc fd44 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f000 fac0 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e041      	b.n	800542c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f839 	bl	8005434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f000 fa71 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_TIM_PWM_Start+0x24>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	e022      	b.n	80054b2 <HAL_TIM_PWM_Start+0x6a>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b04      	cmp	r3, #4
 8005470:	d109      	bne.n	8005486 <HAL_TIM_PWM_Start+0x3e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	bf14      	ite	ne
 800547e:	2301      	movne	r3, #1
 8005480:	2300      	moveq	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	e015      	b.n	80054b2 <HAL_TIM_PWM_Start+0x6a>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d109      	bne.n	80054a0 <HAL_TIM_PWM_Start+0x58>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e008      	b.n	80054b2 <HAL_TIM_PWM_Start+0x6a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e068      	b.n	800558c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Start+0x82>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c8:	e013      	b.n	80054f2 <HAL_TIM_PWM_Start+0xaa>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start+0x92>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d8:	e00b      	b.n	80054f2 <HAL_TIM_PWM_Start+0xaa>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0xa2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	e003      	b.n	80054f2 <HAL_TIM_PWM_Start+0xaa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fc84 	bl	8005e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a23      	ldr	r2, [pc, #140]	; (8005594 <HAL_TIM_PWM_Start+0x14c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d107      	bne.n	800551a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_TIM_PWM_Start+0x14c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_TIM_PWM_Start+0x10e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d013      	beq.n	8005556 <HAL_TIM_PWM_Start+0x10e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a19      	ldr	r2, [pc, #100]	; (8005598 <HAL_TIM_PWM_Start+0x150>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_TIM_PWM_Start+0x10e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a17      	ldr	r2, [pc, #92]	; (800559c <HAL_TIM_PWM_Start+0x154>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_TIM_PWM_Start+0x10e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <HAL_TIM_PWM_Start+0x158>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIM_PWM_Start+0x10e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <HAL_TIM_PWM_Start+0x15c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d111      	bne.n	800557a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d010      	beq.n	800558a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	e007      	b.n	800558a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40010000 	.word	0x40010000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40014000 	.word	0x40014000

080055a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e0ae      	b.n	8005724 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	f200 809f 	bhi.w	8005714 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005715 	.word	0x08005715
 80055e4:	08005715 	.word	0x08005715
 80055e8:	08005715 	.word	0x08005715
 80055ec:	08005651 	.word	0x08005651
 80055f0:	08005715 	.word	0x08005715
 80055f4:	08005715 	.word	0x08005715
 80055f8:	08005715 	.word	0x08005715
 80055fc:	08005693 	.word	0x08005693
 8005600:	08005715 	.word	0x08005715
 8005604:	08005715 	.word	0x08005715
 8005608:	08005715 	.word	0x08005715
 800560c:	080056d3 	.word	0x080056d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f9d0 	bl	80059bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6999      	ldr	r1, [r3, #24]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	619a      	str	r2, [r3, #24]
      break;
 800564e:	e064      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fa16 	bl	8005a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	619a      	str	r2, [r3, #24]
      break;
 8005690:	e043      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fa61 	bl	8005b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0208 	orr.w	r2, r2, #8
 80056ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0204 	bic.w	r2, r2, #4
 80056bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69d9      	ldr	r1, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	61da      	str	r2, [r3, #28]
      break;
 80056d0:	e023      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 faab 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69d9      	ldr	r1, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	021a      	lsls	r2, r3, #8
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	61da      	str	r2, [r3, #28]
      break;
 8005712:	e002      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIM_ConfigClockSource+0x1c>
 8005744:	2302      	movs	r3, #2
 8005746:	e0b4      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x186>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005780:	d03e      	beq.n	8005800 <HAL_TIM_ConfigClockSource+0xd4>
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005786:	f200 8087 	bhi.w	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	f000 8086 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x172>
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d87f      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b70      	cmp	r3, #112	; 0x70
 800579a:	d01a      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xa6>
 800579c:	2b70      	cmp	r3, #112	; 0x70
 800579e:	d87b      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b60      	cmp	r3, #96	; 0x60
 80057a2:	d050      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x11a>
 80057a4:	2b60      	cmp	r3, #96	; 0x60
 80057a6:	d877      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b50      	cmp	r3, #80	; 0x50
 80057aa:	d03c      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0xfa>
 80057ac:	2b50      	cmp	r3, #80	; 0x50
 80057ae:	d873      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d058      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x13a>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d86f      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	d064      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d86b      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d060      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d867      	bhi.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d05c      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d05a      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x15a>
 80057d0:	e062      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6899      	ldr	r1, [r3, #8]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f000 faf1 	bl	8005dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	609a      	str	r2, [r3, #8]
      break;
 80057fe:	e04f      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6899      	ldr	r1, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f000 fada 	bl	8005dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005822:	609a      	str	r2, [r3, #8]
      break;
 8005824:	e03c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fa4e 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2150      	movs	r1, #80	; 0x50
 800583e:	4618      	mov	r0, r3
 8005840:	f000 faa7 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005844:	e02c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fa6d 	bl	8005d32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2160      	movs	r1, #96	; 0x60
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa97 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005864:	e01c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fa2e 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2140      	movs	r1, #64	; 0x40
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fa87 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005884:	e00c      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f000 fa7e 	bl	8005d92 <TIM_ITRx_SetConfig>
      break;
 8005896:	e003      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
      break;
 800589c:	e000      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800589e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00f      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d00b      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <TIM_Base_SetConfig+0xe8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a30      	ldr	r2, [pc, #192]	; (80059a8 <TIM_Base_SetConfig+0xec>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <TIM_Base_SetConfig+0xf0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01b      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d017      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <TIM_Base_SetConfig+0xe8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <TIM_Base_SetConfig+0xec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00f      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a20      	ldr	r2, [pc, #128]	; (80059ac <TIM_Base_SetConfig+0xf0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00b      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <TIM_Base_SetConfig+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <TIM_Base_SetConfig+0xf8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <TIM_Base_SetConfig+0xfc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d108      	bne.n	8005958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f023 0201 	bic.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 0302 	bic.w	r3, r3, #2
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <TIM_OC1_SetConfig+0xc8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d10c      	bne.n	8005a32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0308 	bic.w	r3, r3, #8
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <TIM_OC1_SetConfig+0xc8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d111      	bne.n	8005a5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40010000 	.word	0x40010000

08005a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0210 	bic.w	r2, r3, #16
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0320 	bic.w	r3, r3, #32
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <TIM_OC2_SetConfig+0xd4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10d      	bne.n	8005b04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <TIM_OC2_SetConfig+0xd4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d113      	bne.n	8005b34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000

08005b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <TIM_OC3_SetConfig+0xd0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10d      	bne.n	8005bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <TIM_OC3_SetConfig+0xd0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d113      	bne.n	8005c0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40010000 	.word	0x40010000

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <TIM_OC4_SetConfig+0x9c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d109      	bne.n	8005ca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	019b      	lsls	r3, r3, #6
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000

08005cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 030a 	bic.w	r3, r3, #10
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b087      	sub	sp, #28
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0210 	bic.w	r2, r3, #16
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f043 0307 	orr.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e050      	b.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d018      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d013      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10c      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40014000 	.word	0x40014000

08005f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f30:	b084      	sub	sp, #16
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	f107 001c 	add.w	r0, r7, #28
 8005f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d122      	bne.n	8005f8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fbee 	bl	8007764 <USB_CoreReset>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e01a      	b.n	8005fc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fbe2 	bl	8007764 <USB_CoreReset>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fb6:	e005      	b.n	8005fc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10b      	bne.n	8005fe2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f043 0206 	orr.w	r2, r3, #6
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f043 0220 	orr.w	r2, r3, #32
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fee:	b004      	add	sp, #16
 8005ff0:	4770      	bx	lr
	...

08005ff4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d165      	bne.n	80060d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4a41      	ldr	r2, [pc, #260]	; (8006110 <USB_SetTurnaroundTime+0x11c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d906      	bls.n	800601e <USB_SetTurnaroundTime+0x2a>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a40      	ldr	r2, [pc, #256]	; (8006114 <USB_SetTurnaroundTime+0x120>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d202      	bcs.n	800601e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006018:	230f      	movs	r3, #15
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e062      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4a3c      	ldr	r2, [pc, #240]	; (8006114 <USB_SetTurnaroundTime+0x120>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d306      	bcc.n	8006034 <USB_SetTurnaroundTime+0x40>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4a3b      	ldr	r2, [pc, #236]	; (8006118 <USB_SetTurnaroundTime+0x124>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d202      	bcs.n	8006034 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800602e:	230e      	movs	r3, #14
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e057      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4a38      	ldr	r2, [pc, #224]	; (8006118 <USB_SetTurnaroundTime+0x124>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d306      	bcc.n	800604a <USB_SetTurnaroundTime+0x56>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a37      	ldr	r2, [pc, #220]	; (800611c <USB_SetTurnaroundTime+0x128>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d202      	bcs.n	800604a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006044:	230d      	movs	r3, #13
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e04c      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4a33      	ldr	r2, [pc, #204]	; (800611c <USB_SetTurnaroundTime+0x128>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d306      	bcc.n	8006060 <USB_SetTurnaroundTime+0x6c>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a32      	ldr	r2, [pc, #200]	; (8006120 <USB_SetTurnaroundTime+0x12c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d802      	bhi.n	8006060 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800605a:	230c      	movs	r3, #12
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e041      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4a2f      	ldr	r2, [pc, #188]	; (8006120 <USB_SetTurnaroundTime+0x12c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d906      	bls.n	8006076 <USB_SetTurnaroundTime+0x82>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <USB_SetTurnaroundTime+0x130>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d802      	bhi.n	8006076 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006070:	230b      	movs	r3, #11
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e036      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <USB_SetTurnaroundTime+0x130>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d906      	bls.n	800608c <USB_SetTurnaroundTime+0x98>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <USB_SetTurnaroundTime+0x134>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d802      	bhi.n	800608c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006086:	230a      	movs	r3, #10
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e02b      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4a26      	ldr	r2, [pc, #152]	; (8006128 <USB_SetTurnaroundTime+0x134>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d906      	bls.n	80060a2 <USB_SetTurnaroundTime+0xae>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4a25      	ldr	r2, [pc, #148]	; (800612c <USB_SetTurnaroundTime+0x138>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d202      	bcs.n	80060a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800609c:	2309      	movs	r3, #9
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e020      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4a21      	ldr	r2, [pc, #132]	; (800612c <USB_SetTurnaroundTime+0x138>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d306      	bcc.n	80060b8 <USB_SetTurnaroundTime+0xc4>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a20      	ldr	r2, [pc, #128]	; (8006130 <USB_SetTurnaroundTime+0x13c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060b2:	2308      	movs	r3, #8
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e015      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <USB_SetTurnaroundTime+0x13c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d906      	bls.n	80060ce <USB_SetTurnaroundTime+0xda>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <USB_SetTurnaroundTime+0x140>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d202      	bcs.n	80060ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060c8:	2307      	movs	r3, #7
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e00a      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060ce:	2306      	movs	r3, #6
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e007      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060da:	2309      	movs	r3, #9
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e001      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060e0:	2309      	movs	r3, #9
 80060e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	00d8acbf 	.word	0x00d8acbf
 8006114:	00e4e1c0 	.word	0x00e4e1c0
 8006118:	00f42400 	.word	0x00f42400
 800611c:	01067380 	.word	0x01067380
 8006120:	011a499f 	.word	0x011a499f
 8006124:	01312cff 	.word	0x01312cff
 8006128:	014ca43f 	.word	0x014ca43f
 800612c:	016e3600 	.word	0x016e3600
 8006130:	01a6ab1f 	.word	0x01a6ab1f
 8006134:	01e84800 	.word	0x01e84800

08006138 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f043 0201 	orr.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 0201 	bic.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d115      	bne.n	80061ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f7fc f880 	bl	80022b0 <HAL_Delay>
      ms++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fa45 	bl	8007646 <USB_GetMode>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d01e      	beq.n	8006200 <USB_SetCurrentMode+0x84>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b31      	cmp	r3, #49	; 0x31
 80061c6:	d9f0      	bls.n	80061aa <USB_SetCurrentMode+0x2e>
 80061c8:	e01a      	b.n	8006200 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d115      	bne.n	80061fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061dc:	2001      	movs	r0, #1
 80061de:	f7fc f867 	bl	80022b0 <HAL_Delay>
      ms++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3301      	adds	r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 fa2c 	bl	8007646 <USB_GetMode>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <USB_SetCurrentMode+0x84>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b31      	cmp	r3, #49	; 0x31
 80061f8:	d9f0      	bls.n	80061dc <USB_SetCurrentMode+0x60>
 80061fa:	e001      	b.n	8006200 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e005      	b.n	800620c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b32      	cmp	r3, #50	; 0x32
 8006204:	d101      	bne.n	800620a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006214:	b084      	sub	sp, #16
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e009      	b.n	8006248 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3340      	adds	r3, #64	; 0x40
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	2200      	movs	r2, #0
 8006240:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3301      	adds	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b0e      	cmp	r3, #14
 800624c:	d9f2      	bls.n	8006234 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800624e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11c      	bne.n	800628e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006262:	f043 0302 	orr.w	r3, r3, #2
 8006266:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
 800628c:	e00b      	b.n	80062a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062ac:	461a      	mov	r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b8:	4619      	mov	r1, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c0:	461a      	mov	r2, r3
 80062c2:	680b      	ldr	r3, [r1, #0]
 80062c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10c      	bne.n	80062e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062d2:	2100      	movs	r1, #0
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f965 	bl	80065a4 <USB_SetDevSpeed>
 80062da:	e008      	b.n	80062ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062dc:	2101      	movs	r1, #1
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f960 	bl	80065a4 <USB_SetDevSpeed>
 80062e4:	e003      	b.n	80062ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062e6:	2103      	movs	r1, #3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f95b 	bl	80065a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ee:	2110      	movs	r1, #16
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f8f3 	bl	80064dc <USB_FlushTxFifo>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f91f 	bl	8006544 <USB_FlushRxFifo>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	461a      	mov	r2, r3
 8006318:	2300      	movs	r3, #0
 800631a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	461a      	mov	r2, r3
 8006324:	2300      	movs	r3, #0
 8006326:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	461a      	mov	r2, r3
 8006330:	2300      	movs	r3, #0
 8006332:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e043      	b.n	80063c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006350:	d118      	bne.n	8006384 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	461a      	mov	r2, r3
 8006366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e013      	b.n	8006396 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	461a      	mov	r2, r3
 800637c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e008      	b.n	8006396 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	461a      	mov	r2, r3
 8006392:	2300      	movs	r3, #0
 8006394:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	461a      	mov	r2, r3
 80063a4:	2300      	movs	r3, #0
 80063a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	461a      	mov	r2, r3
 80063b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	3301      	adds	r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d3b7      	bcc.n	800633a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e043      	b.n	8006458 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e6:	d118      	bne.n	800641a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e013      	b.n	800642c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	461a      	mov	r2, r3
 8006412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e008      	b.n	800642c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	461a      	mov	r2, r3
 800643a:	2300      	movs	r3, #0
 800643c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	461a      	mov	r2, r3
 800644c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	d3b7      	bcc.n	80063d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006472:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006480:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f043 0210 	orr.w	r2, r3, #16
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <USB_DevInit+0x2c4>)
 800649a:	4313      	orrs	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f043 0208 	orr.w	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c0:	f043 0304 	orr.w	r3, r3, #4
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d4:	b004      	add	sp, #16
 80064d6:	4770      	bx	lr
 80064d8:	803c3800 	.word	0x803c3800

080064dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4a13      	ldr	r2, [pc, #76]	; (8006540 <USB_FlushTxFifo+0x64>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e01b      	b.n	8006534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	daf2      	bge.n	80064ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	019b      	lsls	r3, r3, #6
 800650c:	f043 0220 	orr.w	r2, r3, #32
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <USB_FlushTxFifo+0x64>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e006      	b.n	8006534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b20      	cmp	r3, #32
 8006530:	d0f0      	beq.n	8006514 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	00030d40 	.word	0x00030d40

08006544 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <USB_FlushRxFifo+0x5c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e018      	b.n	8006594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	daf2      	bge.n	8006550 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2210      	movs	r2, #16
 8006572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <USB_FlushRxFifo+0x5c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d901      	bls.n	8006586 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e006      	b.n	8006594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b10      	cmp	r3, #16
 8006590:	d0f0      	beq.n	8006574 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	00030d40 	.word	0x00030d40

080065a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b087      	sub	sp, #28
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0306 	and.w	r3, r3, #6
 80065ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
 80065fa:	e00a      	b.n	8006612 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d002      	beq.n	8006608 <USB_GetDevSpeed+0x32>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b06      	cmp	r3, #6
 8006606:	d102      	bne.n	800660e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006608:	2302      	movs	r3, #2
 800660a:	75fb      	strb	r3, [r7, #23]
 800660c:	e001      	b.n	8006612 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800660e:	230f      	movs	r3, #15
 8006610:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d13a      	bne.n	80066b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	2101      	movs	r1, #1
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	b29b      	uxth	r3, r3
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665a:	4313      	orrs	r3, r2
 800665c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d155      	bne.n	8006720 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006690:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	059b      	lsls	r3, r3, #22
 8006696:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006698:	4313      	orrs	r3, r2
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e036      	b.n	8006720 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	2101      	movs	r1, #1
 80066c4:	fa01 f303 	lsl.w	r3, r1, r3
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11a      	bne.n	8006720 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	791b      	ldrb	r3, [r3, #4]
 8006704:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006706:	430b      	orrs	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d161      	bne.n	8006810 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006762:	d11f      	bne.n	80067a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	440a      	add	r2, r1
 800677a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006782:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	0151      	lsls	r1, r2, #5
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	440a      	add	r2, r1
 800679a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	2101      	movs	r1, #1
 80067b6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	43db      	mvns	r3, r3
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c4:	4013      	ands	r3, r2
 80067c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	2101      	movs	r1, #1
 80067da:	fa01 f303 	lsl.w	r3, r1, r3
 80067de:	b29b      	uxth	r3, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e8:	4013      	ands	r3, r2
 80067ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	0159      	lsls	r1, r3, #5
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	440b      	add	r3, r1
 8006802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006806:	4619      	mov	r1, r3
 8006808:	4b35      	ldr	r3, [pc, #212]	; (80068e0 <USB_DeactivateEndpoint+0x1b0>)
 800680a:	4013      	ands	r3, r2
 800680c:	600b      	str	r3, [r1, #0]
 800680e:	e060      	b.n	80068d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006826:	d11f      	bne.n	8006868 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006846:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	2101      	movs	r1, #1
 800687a:	fa01 f303 	lsl.w	r3, r1, r3
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	43db      	mvns	r3, r3
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006888:	4013      	ands	r3, r2
 800688a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006892:	69da      	ldr	r2, [r3, #28]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	2101      	movs	r1, #1
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	43db      	mvns	r3, r3
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ac:	4013      	ands	r3, r2
 80068ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	0159      	lsls	r1, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	440b      	add	r3, r1
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	4619      	mov	r1, r3
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <USB_DeactivateEndpoint+0x1b4>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	ec337800 	.word	0xec337800
 80068e4:	eff37800 	.word	0xeff37800

080068e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	f040 815c 	bne.w	8006bc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d132      	bne.n	8006978 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006970:	0cdb      	lsrs	r3, r3, #19
 8006972:	04db      	lsls	r3, r3, #19
 8006974:	6113      	str	r3, [r2, #16]
 8006976:	e074      	b.n	8006a62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	0cdb      	lsrs	r3, r3, #19
 8006994:	04db      	lsls	r3, r3, #19
 8006996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6999      	ldr	r1, [r3, #24]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	440b      	add	r3, r1
 80069d4:	1e59      	subs	r1, r3, #1
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	fbb1 f3f3 	udiv	r3, r1, r3
 80069de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80069e0:	4b9d      	ldr	r3, [pc, #628]	; (8006c58 <USB_EPStartXfer+0x370>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	69b9      	ldr	r1, [r7, #24]
 80069e6:	0148      	lsls	r0, r1, #5
 80069e8:	69f9      	ldr	r1, [r7, #28]
 80069ea:	4401      	add	r1, r0
 80069ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069f0:	4313      	orrs	r3, r2
 80069f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0a:	69b9      	ldr	r1, [r7, #24]
 8006a0c:	0148      	lsls	r0, r1, #5
 8006a0e:	69f9      	ldr	r1, [r7, #28]
 8006a10:	4401      	add	r1, r0
 8006a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d11f      	bne.n	8006a62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d14b      	bne.n	8006b00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	791b      	ldrb	r3, [r3, #4]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d128      	bne.n	8006ade <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d110      	bne.n	8006abe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e00f      	b.n	8006ade <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e133      	b.n	8006d68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	791b      	ldrb	r3, [r3, #4]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d015      	beq.n	8006b54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 811b 	beq.w	8006d68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	2101      	movs	r1, #1
 8006b44:	fa01 f303 	lsl.w	r3, r1, r3
 8006b48:	69f9      	ldr	r1, [r7, #28]
 8006b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	634b      	str	r3, [r1, #52]	; 0x34
 8006b52:	e109      	b.n	8006d68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d110      	bne.n	8006b86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	e00f      	b.n	8006ba6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6919      	ldr	r1, [r3, #16]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	b298      	uxth	r0, r3
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4603      	mov	r3, r0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fade 	bl	800717c <USB_WritePacket>
 8006bc0:	e0d2      	b.n	8006d68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bdc:	0cdb      	lsrs	r3, r3, #19
 8006bde:	04db      	lsls	r3, r3, #19
 8006be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d126      	bne.n	8006c5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	0148      	lsls	r0, r1, #5
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	4401      	add	r1, r0
 8006c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c30:	4313      	orrs	r3, r2
 8006c32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c52:	6113      	str	r3, [r2, #16]
 8006c54:	e03a      	b.n	8006ccc <USB_EPStartXfer+0x3e4>
 8006c56:	bf00      	nop
 8006c58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	1e5a      	subs	r2, r3, #1
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	8afa      	ldrh	r2, [r7, #22]
 8006c78:	fb03 f202 	mul.w	r2, r3, r2
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	04d9      	lsls	r1, r3, #19
 8006c92:	4b38      	ldr	r3, [pc, #224]	; (8006d74 <USB_EPStartXfer+0x48c>)
 8006c94:	400b      	ands	r3, r1
 8006c96:	69b9      	ldr	r1, [r7, #24]
 8006c98:	0148      	lsls	r0, r1, #5
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	4401      	add	r1, r0
 8006c9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	0148      	lsls	r0, r1, #5
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d10d      	bne.n	8006cee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6919      	ldr	r1, [r3, #16]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	460a      	mov	r2, r1
 8006cec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d128      	bne.n	8006d48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e00f      	b.n	8006d48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	1ff80000 	.word	0x1ff80000

08006d78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 80ce 	bne.w	8006f36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d132      	bne.n	8006e08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e00:	0cdb      	lsrs	r3, r3, #19
 8006e02:	04db      	lsls	r3, r3, #19
 8006e04:	6113      	str	r3, [r2, #16]
 8006e06:	e04e      	b.n	8006ea6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e22:	0cdb      	lsrs	r3, r3, #19
 8006e24:	04db      	lsls	r3, r3, #19
 8006e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d903      	bls.n	8006e60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e96:	6939      	ldr	r1, [r7, #16]
 8006e98:	0148      	lsls	r0, r1, #5
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	4401      	add	r1, r0
 8006e9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d11e      	bne.n	8006eea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e097      	b.n	800701a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8083 	beq.w	800701a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2a:	6979      	ldr	r1, [r7, #20]
 8006f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f30:	4313      	orrs	r3, r2
 8006f32:	634b      	str	r3, [r1, #52]	; 0x34
 8006f34:	e071      	b.n	800701a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f50:	0cdb      	lsrs	r3, r3, #19
 8006f52:	04db      	lsls	r3, r3, #19
 8006f54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	0148      	lsls	r0, r1, #5
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	4401      	add	r1, r0
 8006fd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10d      	bne.n	8006ffa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6919      	ldr	r1, [r3, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007018:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d14a      	bne.n	80070dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705e:	f040 8086 	bne.w	800716e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	7812      	ldrb	r2, [r2, #0]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007084:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d902      	bls.n	80070c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	75fb      	strb	r3, [r7, #23]
          break;
 80070be:	e056      	b.n	800716e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d8:	d0e7      	beq.n	80070aa <USB_EPStopXfer+0x82>
 80070da:	e048      	b.n	800716e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f4:	d13b      	bne.n	800716e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007114:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007118:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800713c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f242 7210 	movw	r2, #10000	; 0x2710
 800714a:	4293      	cmp	r3, r2
 800714c:	d902      	bls.n	8007154 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
          break;
 8007152:	e00c      	b.n	800716e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800716c:	d0e7      	beq.n	800713e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800717c:	b480      	push	{r7}
 800717e:	b089      	sub	sp, #36	; 0x24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	460b      	mov	r3, r1
 800718c:	71fb      	strb	r3, [r7, #7]
 800718e:	4613      	mov	r3, r2
 8007190:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800719a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d123      	bne.n	80071ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071a2:	88bb      	ldrh	r3, [r7, #4]
 80071a4:	3303      	adds	r3, #3
 80071a6:	089b      	lsrs	r3, r3, #2
 80071a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e018      	b.n	80071e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	031a      	lsls	r2, r3, #12
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071bc:	461a      	mov	r2, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3301      	adds	r3, #1
 80071da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	3301      	adds	r3, #1
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d3e2      	bcc.n	80071b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3724      	adds	r7, #36	; 0x24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b08b      	sub	sp, #44	; 0x2c
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	089b      	lsrs	r3, r3, #2
 8007212:	b29b      	uxth	r3, r3
 8007214:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800721e:	2300      	movs	r3, #0
 8007220:	623b      	str	r3, [r7, #32]
 8007222:	e014      	b.n	800724e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	3301      	adds	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	3301      	adds	r3, #1
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	3301      	adds	r3, #1
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	3301      	adds	r3, #1
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	3301      	adds	r3, #1
 800724c:	623b      	str	r3, [r7, #32]
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	429a      	cmp	r2, r3
 8007254:	d3e6      	bcc.n	8007224 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007256:	8bfb      	ldrh	r3, [r7, #30]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01e      	beq.n	800729a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007266:	461a      	mov	r2, r3
 8007268:	f107 0310 	add.w	r3, r7, #16
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
 800727c:	b2da      	uxtb	r2, r3
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	701a      	strb	r2, [r3, #0]
      i++;
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	3301      	adds	r3, #1
 8007286:	623b      	str	r3, [r7, #32]
      pDest++;
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	3301      	adds	r3, #1
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800728e:	8bfb      	ldrh	r3, [r7, #30]
 8007290:	3b01      	subs	r3, #1
 8007292:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007294:	8bfb      	ldrh	r3, [r7, #30]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1ea      	bne.n	8007270 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800729c:	4618      	mov	r0, r3
 800729e:	372c      	adds	r7, #44	; 0x2c
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d12c      	bne.n	800731e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db12      	blt.n	80072fc <USB_EPSetStall+0x54>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00f      	beq.n	80072fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e02b      	b.n	8007376 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	db12      	blt.n	8007356 <USB_EPSetStall+0xae>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00f      	beq.n	8007356 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007350:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007354:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007374:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d128      	bne.n	80073f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	791b      	ldrb	r3, [r3, #4]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d003      	beq.n	80073d0 <USB_EPClearStall+0x4c>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	791b      	ldrb	r3, [r3, #4]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d138      	bne.n	8007442 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e027      	b.n	8007442 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007410:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	791b      	ldrb	r3, [r3, #4]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d003      	beq.n	8007422 <USB_EPClearStall+0x9e>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d10f      	bne.n	8007442 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007440:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007472:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007484:	68f9      	ldr	r1, [r7, #12]
 8007486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800748a:	4313      	orrs	r3, r2
 800748c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ca:	f023 0302 	bic.w	r3, r3, #2
 80074ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4013      	ands	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007538:	68fb      	ldr	r3, [r7, #12]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	4013      	ands	r3, r2
 8007568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0c1b      	lsrs	r3, r3, #16
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	4013      	ands	r3, r2
 800759c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	b29b      	uxth	r3, r3
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4013      	ands	r3, r2
 80075da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075dc:	68bb      	ldr	r3, [r7, #8]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	01db      	lsls	r3, r3, #7
 800761c:	b2db      	uxtb	r3, r3
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4013      	ands	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007638:	68bb      	ldr	r3, [r7, #8]
}
 800763a:	4618      	mov	r0, r3
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f003 0301 	and.w	r3, r3, #1
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007680:	f023 0307 	bic.w	r3, r3, #7
 8007684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	460b      	mov	r3, r1
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	333c      	adds	r3, #60	; 0x3c
 80076be:	3304      	adds	r3, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <USB_EP0_OutStart+0xb8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d90a      	bls.n	80076e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076dc:	d101      	bne.n	80076e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e037      	b.n	8007752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	461a      	mov	r2, r3
 80076ea:	2300      	movs	r3, #0
 80076ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007710:	f043 0318 	orr.w	r3, r3, #24
 8007714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10f      	bne.n	8007750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800774e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	4f54300a 	.word	0x4f54300a

08007764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <USB_CoreReset+0x64>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e01b      	b.n	80077ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	daf2      	bge.n	8007770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f043 0201 	orr.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a09      	ldr	r2, [pc, #36]	; (80077c8 <USB_CoreReset+0x64>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d901      	bls.n	80077ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e006      	b.n	80077ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d0f0      	beq.n	800779a <USB_CoreReset+0x36>

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	00030d40 	.word	0x00030d40

080077cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077dc:	f002 fc8a 	bl	800a0f4 <USBD_static_malloc>
 80077e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	32b0      	adds	r2, #176	; 0xb0
 80077f2:	2100      	movs	r1, #0
 80077f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077f8:	2302      	movs	r3, #2
 80077fa:	e0d4      	b.n	80079a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007800:	2100      	movs	r1, #0
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f002 fcf2 	bl	800a1ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32b0      	adds	r2, #176	; 0xb0
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32b0      	adds	r2, #176	; 0xb0
 8007822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7c1b      	ldrb	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d138      	bne.n	80078a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007834:	4b5e      	ldr	r3, [pc, #376]	; (80079b0 <USBD_CDC_Init+0x1e4>)
 8007836:	7819      	ldrb	r1, [r3, #0]
 8007838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783c:	2202      	movs	r2, #2
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f002 fb35 	bl	8009eae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007844:	4b5a      	ldr	r3, [pc, #360]	; (80079b0 <USBD_CDC_Init+0x1e4>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	3324      	adds	r3, #36	; 0x24
 800785a:	2201      	movs	r2, #1
 800785c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800785e:	4b55      	ldr	r3, [pc, #340]	; (80079b4 <USBD_CDC_Init+0x1e8>)
 8007860:	7819      	ldrb	r1, [r3, #0]
 8007862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007866:	2202      	movs	r2, #2
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f002 fb20 	bl	8009eae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800786e:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <USBD_CDC_Init+0x1e8>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 020f 	and.w	r2, r3, #15
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007886:	2201      	movs	r2, #1
 8007888:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800788a:	4b4b      	ldr	r3, [pc, #300]	; (80079b8 <USBD_CDC_Init+0x1ec>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 020f 	and.w	r2, r3, #15
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3326      	adds	r3, #38	; 0x26
 80078a0:	2210      	movs	r2, #16
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	e035      	b.n	8007912 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078a6:	4b42      	ldr	r3, [pc, #264]	; (80079b0 <USBD_CDC_Init+0x1e4>)
 80078a8:	7819      	ldrb	r1, [r3, #0]
 80078aa:	2340      	movs	r3, #64	; 0x40
 80078ac:	2202      	movs	r2, #2
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f002 fafd 	bl	8009eae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078b4:	4b3e      	ldr	r3, [pc, #248]	; (80079b0 <USBD_CDC_Init+0x1e4>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 020f 	and.w	r2, r3, #15
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	3324      	adds	r3, #36	; 0x24
 80078ca:	2201      	movs	r2, #1
 80078cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078ce:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <USBD_CDC_Init+0x1e8>)
 80078d0:	7819      	ldrb	r1, [r3, #0]
 80078d2:	2340      	movs	r3, #64	; 0x40
 80078d4:	2202      	movs	r2, #2
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f002 fae9 	bl	8009eae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078dc:	4b35      	ldr	r3, [pc, #212]	; (80079b4 <USBD_CDC_Init+0x1e8>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078f4:	2201      	movs	r2, #1
 80078f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078f8:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <USBD_CDC_Init+0x1ec>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	3326      	adds	r3, #38	; 0x26
 800790e:	2210      	movs	r2, #16
 8007910:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007912:	4b29      	ldr	r3, [pc, #164]	; (80079b8 <USBD_CDC_Init+0x1ec>)
 8007914:	7819      	ldrb	r1, [r3, #0]
 8007916:	2308      	movs	r3, #8
 8007918:	2203      	movs	r2, #3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f002 fac7 	bl	8009eae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007920:	4b25      	ldr	r3, [pc, #148]	; (80079b8 <USBD_CDC_Init+0x1ec>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	f003 020f 	and.w	r2, r3, #15
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	3324      	adds	r3, #36	; 0x24
 8007936:	2201      	movs	r2, #1
 8007938:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	33b0      	adds	r3, #176	; 0xb0
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007970:	2302      	movs	r3, #2
 8007972:	e018      	b.n	80079a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7c1b      	ldrb	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800797c:	4b0d      	ldr	r3, [pc, #52]	; (80079b4 <USBD_CDC_Init+0x1e8>)
 800797e:	7819      	ldrb	r1, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f002 fb7e 	bl	800a08c <USBD_LL_PrepareReceive>
 8007990:	e008      	b.n	80079a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <USBD_CDC_Init+0x1e8>)
 8007994:	7819      	ldrb	r1, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f002 fb74 	bl	800a08c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000093 	.word	0x20000093
 80079b4:	20000094 	.word	0x20000094
 80079b8:	20000095 	.word	0x20000095

080079bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80079c8:	4b3a      	ldr	r3, [pc, #232]	; (8007ab4 <USBD_CDC_DeInit+0xf8>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f002 fa93 	bl	8009efa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80079d4:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <USBD_CDC_DeInit+0xf8>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	2200      	movs	r2, #0
 80079ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079ee:	4b32      	ldr	r3, [pc, #200]	; (8007ab8 <USBD_CDC_DeInit+0xfc>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f002 fa80 	bl	8009efa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079fa:	4b2f      	ldr	r3, [pc, #188]	; (8007ab8 <USBD_CDC_DeInit+0xfc>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	f003 020f 	and.w	r2, r3, #15
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a12:	2200      	movs	r2, #0
 8007a14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <USBD_CDC_DeInit+0x100>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f002 fa6c 	bl	8009efa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a22:	4b26      	ldr	r3, [pc, #152]	; (8007abc <USBD_CDC_DeInit+0x100>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	f003 020f 	and.w	r2, r3, #15
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	440b      	add	r3, r1
 8007a36:	3324      	adds	r3, #36	; 0x24
 8007a38:	2200      	movs	r2, #0
 8007a3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a3c:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <USBD_CDC_DeInit+0x100>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	3326      	adds	r3, #38	; 0x26
 8007a52:	2200      	movs	r2, #0
 8007a54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	32b0      	adds	r2, #176	; 0xb0
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01f      	beq.n	8007aa8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	33b0      	adds	r3, #176	; 0xb0
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	; 0xb0
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f002 fb40 	bl	800a110 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	32b0      	adds	r2, #176	; 0xb0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000093 	.word	0x20000093
 8007ab8:	20000094 	.word	0x20000094
 8007abc:	20000095 	.word	0x20000095

08007ac0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	32b0      	adds	r2, #176	; 0xb0
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e0bf      	b.n	8007c70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d050      	beq.n	8007b9e <USBD_CDC_Setup+0xde>
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	f040 80af 	bne.w	8007c60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	88db      	ldrh	r3, [r3, #6]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d03a      	beq.n	8007b80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b25b      	sxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da1b      	bge.n	8007b4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	33b0      	adds	r3, #176	; 0xb0
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	88d2      	ldrh	r2, [r2, #6]
 8007b30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	88db      	ldrh	r3, [r3, #6]
 8007b36:	2b07      	cmp	r3, #7
 8007b38:	bf28      	it	cs
 8007b3a:	2307      	movcs	r3, #7
 8007b3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	89fa      	ldrh	r2, [r7, #14]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fd89 	bl	800965c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b4a:	e090      	b.n	8007c6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	785a      	ldrb	r2, [r3, #1]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	88db      	ldrh	r3, [r3, #6]
 8007b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b5c:	d803      	bhi.n	8007b66 <USBD_CDC_Setup+0xa6>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	88db      	ldrh	r3, [r3, #6]
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	e000      	b.n	8007b68 <USBD_CDC_Setup+0xa8>
 8007b66:	2240      	movs	r2, #64	; 0x40
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b6e:	6939      	ldr	r1, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007b76:	461a      	mov	r2, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fd9b 	bl	80096b4 <USBD_CtlPrepareRx>
      break;
 8007b7e:	e076      	b.n	8007c6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	33b0      	adds	r3, #176	; 0xb0
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	7850      	ldrb	r0, [r2, #1]
 8007b96:	2200      	movs	r2, #0
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	4798      	blx	r3
      break;
 8007b9c:	e067      	b.n	8007c6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b0b      	cmp	r3, #11
 8007ba4:	d851      	bhi.n	8007c4a <USBD_CDC_Setup+0x18a>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_CDC_Setup+0xec>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bdd 	.word	0x08007bdd
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c4b 	.word	0x08007c4b
 8007bb8:	08007c4b 	.word	0x08007c4b
 8007bbc:	08007c4b 	.word	0x08007c4b
 8007bc0:	08007c4b 	.word	0x08007c4b
 8007bc4:	08007c4b 	.word	0x08007c4b
 8007bc8:	08007c4b 	.word	0x08007c4b
 8007bcc:	08007c4b 	.word	0x08007c4b
 8007bd0:	08007c4b 	.word	0x08007c4b
 8007bd4:	08007c07 	.word	0x08007c07
 8007bd8:	08007c31 	.word	0x08007c31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d107      	bne.n	8007bf8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007be8:	f107 030a 	add.w	r3, r7, #10
 8007bec:	2202      	movs	r2, #2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 fd33 	bl	800965c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bf6:	e032      	b.n	8007c5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f001 fcbd 	bl	800957a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c00:	2303      	movs	r3, #3
 8007c02:	75fb      	strb	r3, [r7, #23]
          break;
 8007c04:	e02b      	b.n	8007c5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d107      	bne.n	8007c22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c12:	f107 030d 	add.w	r3, r7, #13
 8007c16:	2201      	movs	r2, #1
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 fd1e 	bl	800965c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c20:	e01d      	b.n	8007c5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fca8 	bl	800957a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c2e:	e016      	b.n	8007c5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d00f      	beq.n	8007c5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fc9b 	bl	800957a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c48:	e008      	b.n	8007c5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 fc94 	bl	800957a <USBD_CtlError>
          ret = USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	75fb      	strb	r3, [r7, #23]
          break;
 8007c56:	e002      	b.n	8007c5e <USBD_CDC_Setup+0x19e>
          break;
 8007c58:	bf00      	nop
 8007c5a:	e008      	b.n	8007c6e <USBD_CDC_Setup+0x1ae>
          break;
 8007c5c:	bf00      	nop
      }
      break;
 8007c5e:	e006      	b.n	8007c6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 fc89 	bl	800957a <USBD_CtlError>
      ret = USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	32b0      	adds	r2, #176	; 0xb0
 8007c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e065      	b.n	8007d6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32b0      	adds	r2, #176	; 0xb0
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	3318      	adds	r3, #24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02f      	beq.n	8007d2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	f003 020f 	and.w	r2, r3, #15
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	3318      	adds	r3, #24
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	f003 010f 	and.w	r1, r3, #15
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	460b      	mov	r3, r1
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	440b      	add	r3, r1
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4403      	add	r3, r0
 8007cf4:	3348      	adds	r3, #72	; 0x48
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cfc:	fb01 f303 	mul.w	r3, r1, r3
 8007d00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d112      	bne.n	8007d2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	f003 020f 	and.w	r2, r3, #15
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	440b      	add	r3, r1
 8007d18:	3318      	adds	r3, #24
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d1e:	78f9      	ldrb	r1, [r7, #3]
 8007d20:	2300      	movs	r3, #0
 8007d22:	2200      	movs	r2, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f002 f990 	bl	800a04a <USBD_LL_Transmit>
 8007d2a:	e01f      	b.n	8007d6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	33b0      	adds	r3, #176	; 0xb0
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d010      	beq.n	8007d6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	33b0      	adds	r3, #176	; 0xb0
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	32b0      	adds	r2, #176	; 0xb0
 8007d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32b0      	adds	r2, #176	; 0xb0
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e01a      	b.n	8007dde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f002 f98e 	bl	800a0ce <USBD_LL_GetRxDataSize>
 8007db2:	4602      	mov	r2, r0
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	33b0      	adds	r3, #176	; 0xb0
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	32b0      	adds	r2, #176	; 0xb0
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e025      	b.n	8007e54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	33b0      	adds	r3, #176	; 0xb0
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01a      	beq.n	8007e52 <USBD_CDC_EP0_RxReady+0x6c>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e22:	2bff      	cmp	r3, #255	; 0xff
 8007e24:	d015      	beq.n	8007e52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	33b0      	adds	r3, #176	; 0xb0
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e46:	b292      	uxth	r2, r2
 8007e48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	22ff      	movs	r2, #255	; 0xff
 8007e4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e64:	2182      	movs	r1, #130	; 0x82
 8007e66:	4818      	ldr	r0, [pc, #96]	; (8007ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e68:	f000 fd4f 	bl	800890a <USBD_GetEpDesc>
 8007e6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4815      	ldr	r0, [pc, #84]	; (8007ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e72:	f000 fd4a 	bl	800890a <USBD_GetEpDesc>
 8007e76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e78:	2181      	movs	r1, #129	; 0x81
 8007e7a:	4813      	ldr	r0, [pc, #76]	; (8007ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e7c:	f000 fd45 	bl	800890a <USBD_GetEpDesc>
 8007e80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2210      	movs	r2, #16
 8007e8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d006      	beq.n	8007ea2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e9c:	711a      	strb	r2, [r3, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d006      	beq.n	8007eb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb0:	711a      	strb	r2, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2243      	movs	r2, #67	; 0x43
 8007eba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ebc:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000050 	.word	0x20000050

08007ecc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ed4:	2182      	movs	r1, #130	; 0x82
 8007ed6:	4818      	ldr	r0, [pc, #96]	; (8007f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ed8:	f000 fd17 	bl	800890a <USBD_GetEpDesc>
 8007edc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4815      	ldr	r0, [pc, #84]	; (8007f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ee2:	f000 fd12 	bl	800890a <USBD_GetEpDesc>
 8007ee6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ee8:	2181      	movs	r1, #129	; 0x81
 8007eea:	4813      	ldr	r0, [pc, #76]	; (8007f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007eec:	f000 fd0d 	bl	800890a <USBD_GetEpDesc>
 8007ef0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2210      	movs	r2, #16
 8007efc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d006      	beq.n	8007f12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2200      	movs	r2, #0
 8007f08:	711a      	strb	r2, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f042 0202 	orr.w	r2, r2, #2
 8007f10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d006      	beq.n	8007f26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	711a      	strb	r2, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f042 0202 	orr.w	r2, r2, #2
 8007f24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2243      	movs	r2, #67	; 0x43
 8007f2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000050 	.word	0x20000050

08007f3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f44:	2182      	movs	r1, #130	; 0x82
 8007f46:	4818      	ldr	r0, [pc, #96]	; (8007fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f48:	f000 fcdf 	bl	800890a <USBD_GetEpDesc>
 8007f4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4815      	ldr	r0, [pc, #84]	; (8007fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f52:	f000 fcda 	bl	800890a <USBD_GetEpDesc>
 8007f56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f58:	2181      	movs	r1, #129	; 0x81
 8007f5a:	4813      	ldr	r0, [pc, #76]	; (8007fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f5c:	f000 fcd5 	bl	800890a <USBD_GetEpDesc>
 8007f60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f7c:	711a      	strb	r2, [r3, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d006      	beq.n	8007f96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f90:	711a      	strb	r2, [r3, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2243      	movs	r2, #67	; 0x43
 8007f9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f9c:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000050 	.word	0x20000050

08007fac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	220a      	movs	r2, #10
 8007fb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	2000000c 	.word	0x2000000c

08007fcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e009      	b.n	8007ff4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	33b0      	adds	r3, #176	; 0xb0
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	32b0      	adds	r2, #176	; 0xb0
 8008016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008022:	2303      	movs	r3, #3
 8008024:	e008      	b.n	8008038 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	32b0      	adds	r2, #176	; 0xb0
 8008058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	e004      	b.n	8008072 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	32b0      	adds	r2, #176	; 0xb0
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	32b0      	adds	r2, #176	; 0xb0
 80080a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e025      	b.n	80080fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11f      	bne.n	80080fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2201      	movs	r2, #1
 80080c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80080c4:	4b10      	ldr	r3, [pc, #64]	; (8008108 <USBD_CDC_TransmitPacket+0x88>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	f003 020f 	and.w	r2, r3, #15
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4403      	add	r3, r0
 80080de:	3318      	adds	r3, #24
 80080e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80080e2:	4b09      	ldr	r3, [pc, #36]	; (8008108 <USBD_CDC_TransmitPacket+0x88>)
 80080e4:	7819      	ldrb	r1, [r3, #0]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 ffa9 	bl	800a04a <USBD_LL_Transmit>

    ret = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000093 	.word	0x20000093

0800810c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	32b0      	adds	r2, #176	; 0xb0
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	32b0      	adds	r2, #176	; 0xb0
 800812e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	e018      	b.n	800816c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7c1b      	ldrb	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008142:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <USBD_CDC_ReceivePacket+0x68>)
 8008144:	7819      	ldrb	r1, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800814c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 ff9b 	bl	800a08c <USBD_LL_PrepareReceive>
 8008156:	e008      	b.n	800816a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008158:	4b06      	ldr	r3, [pc, #24]	; (8008174 <USBD_CDC_ReceivePacket+0x68>)
 800815a:	7819      	ldrb	r1, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008162:	2340      	movs	r3, #64	; 0x40
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 ff91 	bl	800a08c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20000094 	.word	0x20000094

08008178 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	e01f      	b.n	80081d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	79fa      	ldrb	r2, [r7, #7]
 80081c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f001 fe0b 	bl	8009de0 <USBD_LL_Init>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e025      	b.n	800823c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32ae      	adds	r2, #174	; 0xae
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00f      	beq.n	800822c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	f107 020e 	add.w	r2, r7, #14
 8008220:	4610      	mov	r0, r2
 8008222:	4798      	blx	r3
 8008224:	4602      	mov	r2, r0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fe13 	bl	8009e78 <USBD_LL_Start>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	4611      	mov	r1, r2
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f908 	bl	8009506 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008304:	461a      	mov	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008312:	f003 031f 	and.w	r3, r3, #31
 8008316:	2b02      	cmp	r3, #2
 8008318:	d01a      	beq.n	8008350 <USBD_LL_SetupStage+0x72>
 800831a:	2b02      	cmp	r3, #2
 800831c:	d822      	bhi.n	8008364 <USBD_LL_SetupStage+0x86>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <USBD_LL_SetupStage+0x4a>
 8008322:	2b01      	cmp	r3, #1
 8008324:	d00a      	beq.n	800833c <USBD_LL_SetupStage+0x5e>
 8008326:	e01d      	b.n	8008364 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fb5f 	bl	80089f4 <USBD_StdDevReq>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
      break;
 800833a:	e020      	b.n	800837e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fbc7 	bl	8008ad8 <USBD_StdItfReq>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
      break;
 800834e:	e016      	b.n	800837e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fc29 	bl	8008bb0 <USBD_StdEPReq>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
      break;
 8008362:	e00c      	b.n	800837e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800836a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800836e:	b2db      	uxtb	r3, r3
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fde0 	bl	8009f38 <USBD_LL_StallEP>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
      break;
 800837c:	bf00      	nop
  }

  return ret;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	460b      	mov	r3, r1
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d16e      	bne.n	800847e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	f040 8098 	bne.w	80084e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d913      	bls.n	80083e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	1ad2      	subs	r2, r2, r3
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	4293      	cmp	r3, r2
 80083d8:	bf28      	it	cs
 80083da:	4613      	movcs	r3, r2
 80083dc:	461a      	mov	r2, r3
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f001 f984 	bl	80096ee <USBD_CtlContinueRx>
 80083e6:	e07d      	b.n	80084e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d014      	beq.n	8008420 <USBD_LL_DataOutStage+0x98>
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d81d      	bhi.n	8008436 <USBD_LL_DataOutStage+0xae>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <USBD_LL_DataOutStage+0x7c>
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d003      	beq.n	800840a <USBD_LL_DataOutStage+0x82>
 8008402:	e018      	b.n	8008436 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	75bb      	strb	r3, [r7, #22]
            break;
 8008408:	e018      	b.n	800843c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008410:	b2db      	uxtb	r3, r3
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fa5e 	bl	80088d6 <USBD_CoreFindIF>
 800841a:	4603      	mov	r3, r0
 800841c:	75bb      	strb	r3, [r7, #22]
            break;
 800841e:	e00d      	b.n	800843c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fa60 	bl	80088f0 <USBD_CoreFindEP>
 8008430:	4603      	mov	r3, r0
 8008432:	75bb      	strb	r3, [r7, #22]
            break;
 8008434:	e002      	b.n	800843c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	75bb      	strb	r3, [r7, #22]
            break;
 800843a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800843c:	7dbb      	ldrb	r3, [r7, #22]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d119      	bne.n	8008476 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b03      	cmp	r3, #3
 800844c:	d113      	bne.n	8008476 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800844e:	7dba      	ldrb	r2, [r7, #22]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	32ae      	adds	r2, #174	; 0xae
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800845e:	7dba      	ldrb	r2, [r7, #22]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008466:	7dba      	ldrb	r2, [r7, #22]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	32ae      	adds	r2, #174	; 0xae
 800846c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 f94a 	bl	8009710 <USBD_CtlSendStatus>
 800847c:	e032      	b.n	80084e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	b2db      	uxtb	r3, r3
 8008486:	4619      	mov	r1, r3
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fa31 	bl	80088f0 <USBD_CoreFindEP>
 800848e:	4603      	mov	r3, r0
 8008490:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008492:	7dbb      	ldrb	r3, [r7, #22]
 8008494:	2bff      	cmp	r3, #255	; 0xff
 8008496:	d025      	beq.n	80084e4 <USBD_LL_DataOutStage+0x15c>
 8008498:	7dbb      	ldrb	r3, [r7, #22]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d122      	bne.n	80084e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d117      	bne.n	80084da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084aa:	7dba      	ldrb	r2, [r7, #22]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	32ae      	adds	r2, #174	; 0xae
 80084b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00f      	beq.n	80084da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80084ba:	7dba      	ldrb	r2, [r7, #22]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80084c2:	7dba      	ldrb	r2, [r7, #22]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	32ae      	adds	r2, #174	; 0xae
 80084c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	7afa      	ldrb	r2, [r7, #11]
 80084d0:	4611      	mov	r1, r2
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	4798      	blx	r3
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	e000      	b.n	80084e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b086      	sub	sp, #24
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	460b      	mov	r3, r1
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d16f      	bne.n	80085e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3314      	adds	r3, #20
 8008506:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800850e:	2b02      	cmp	r3, #2
 8008510:	d15a      	bne.n	80085c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	429a      	cmp	r2, r3
 800851c:	d914      	bls.n	8008548 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	1ad2      	subs	r2, r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	461a      	mov	r2, r3
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f001 f8ac 	bl	8009692 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800853a:	2300      	movs	r3, #0
 800853c:	2200      	movs	r2, #0
 800853e:	2100      	movs	r1, #0
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f001 fda3 	bl	800a08c <USBD_LL_PrepareReceive>
 8008546:	e03f      	b.n	80085c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d11c      	bne.n	800858e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800855c:	429a      	cmp	r2, r3
 800855e:	d316      	bcc.n	800858e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800856a:	429a      	cmp	r2, r3
 800856c:	d20f      	bcs.n	800858e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f001 f88d 	bl	8009692 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008580:	2300      	movs	r3, #0
 8008582:	2200      	movs	r2, #0
 8008584:	2100      	movs	r1, #0
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f001 fd80 	bl	800a08c <USBD_LL_PrepareReceive>
 800858c:	e01c      	b.n	80085c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b03      	cmp	r3, #3
 8008598:	d10f      	bne.n	80085ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ba:	2180      	movs	r1, #128	; 0x80
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fcbb 	bl	8009f38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f001 f8b7 	bl	8009736 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d03a      	beq.n	8008648 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff fe42 	bl	800825c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085e0:	e032      	b.n	8008648 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085e2:	7afb      	ldrb	r3, [r7, #11]
 80085e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	4619      	mov	r1, r3
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f97f 	bl	80088f0 <USBD_CoreFindEP>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	2bff      	cmp	r3, #255	; 0xff
 80085fa:	d025      	beq.n	8008648 <USBD_LL_DataInStage+0x15a>
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d122      	bne.n	8008648 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d11c      	bne.n	8008648 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800860e:	7dfa      	ldrb	r2, [r7, #23]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	32ae      	adds	r2, #174	; 0xae
 8008614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800861e:	7dfa      	ldrb	r2, [r7, #23]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008626:	7dfa      	ldrb	r2, [r7, #23]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	32ae      	adds	r2, #174	; 0xae
 800862c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	7afa      	ldrb	r2, [r7, #11]
 8008634:	4611      	mov	r1, r2
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	4798      	blx	r3
 800863a:	4603      	mov	r3, r0
 800863c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800863e:	7dbb      	ldrb	r3, [r7, #22]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008644:	7dbb      	ldrb	r3, [r7, #22]
 8008646:	e000      	b.n	800864a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d014      	beq.n	80086b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00e      	beq.n	80086b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6852      	ldr	r2, [r2, #4]
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	4611      	mov	r1, r2
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	2200      	movs	r2, #0
 80086bc:	2100      	movs	r1, #0
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fbf5 	bl	8009eae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2240      	movs	r2, #64	; 0x40
 80086d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086d4:	2340      	movs	r3, #64	; 0x40
 80086d6:	2200      	movs	r2, #0
 80086d8:	2180      	movs	r1, #128	; 0x80
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 fbe7 	bl	8009eae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2240      	movs	r2, #64	; 0x40
 80086ea:	621a      	str	r2, [r3, #32]

  return ret;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	460b      	mov	r3, r1
 8008700:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	b2da      	uxtb	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2204      	movs	r2, #4
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b04      	cmp	r3, #4
 8008754:	d106      	bne.n	8008764 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800875c:	b2da      	uxtb	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b03      	cmp	r3, #3
 8008784:	d110      	bne.n	80087a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	32ae      	adds	r2, #174	; 0xae
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e01c      	b.n	800880e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d115      	bne.n	800880c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32ae      	adds	r2, #174	; 0xae
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	32ae      	adds	r2, #174	; 0xae
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4611      	mov	r1, r2
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	32ae      	adds	r2, #174	; 0xae
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008834:	2303      	movs	r3, #3
 8008836:	e01c      	b.n	8008872 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b03      	cmp	r3, #3
 8008842:	d115      	bne.n	8008870 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32ae      	adds	r2, #174	; 0xae
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	32ae      	adds	r2, #174	; 0xae
 8008862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	4611      	mov	r1, r2
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00e      	beq.n	80088cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6852      	ldr	r2, [r2, #4]
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	4611      	mov	r1, r2
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088c8:	2303      	movs	r3, #3
 80088ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	885b      	ldrh	r3, [r3, #2]
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	429a      	cmp	r2, r3
 8008930:	d920      	bls.n	8008974 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800893a:	e013      	b.n	8008964 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800893c:	f107 030a 	add.w	r3, r7, #10
 8008940:	4619      	mov	r1, r3
 8008942:	6978      	ldr	r0, [r7, #20]
 8008944:	f000 f81b 	bl	800897e <USBD_GetNextDesc>
 8008948:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b05      	cmp	r3, #5
 8008950:	d108      	bne.n	8008964 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	789b      	ldrb	r3, [r3, #2]
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	429a      	cmp	r2, r3
 800895e:	d008      	beq.n	8008972 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	885b      	ldrh	r3, [r3, #2]
 8008968:	b29a      	uxth	r2, r3
 800896a:	897b      	ldrh	r3, [r7, #10]
 800896c:	429a      	cmp	r2, r3
 800896e:	d8e5      	bhi.n	800893c <USBD_GetEpDesc+0x32>
 8008970:	e000      	b.n	8008974 <USBD_GetEpDesc+0x6a>
          break;
 8008972:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008974:	693b      	ldr	r3, [r7, #16]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	881a      	ldrh	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	4413      	add	r3, r2
 8008998:	b29a      	uxth	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80089aa:	68fb      	ldr	r3, [r7, #12]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	3301      	adds	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089d6:	8a3b      	ldrh	r3, [r7, #16]
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	b21a      	sxth	r2, r3
 80089dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b21b      	sxth	r3, r3
 80089e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089e6:	89fb      	ldrh	r3, [r7, #14]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a0a:	2b40      	cmp	r3, #64	; 0x40
 8008a0c:	d005      	beq.n	8008a1a <USBD_StdDevReq+0x26>
 8008a0e:	2b40      	cmp	r3, #64	; 0x40
 8008a10:	d857      	bhi.n	8008ac2 <USBD_StdDevReq+0xce>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00f      	beq.n	8008a36 <USBD_StdDevReq+0x42>
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d153      	bne.n	8008ac2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	32ae      	adds	r2, #174	; 0xae
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]
      break;
 8008a34:	e04a      	b.n	8008acc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b09      	cmp	r3, #9
 8008a3c:	d83b      	bhi.n	8008ab6 <USBD_StdDevReq+0xc2>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <USBD_StdDevReq+0x50>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a99 	.word	0x08008a99
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008ab7 	.word	0x08008ab7
 8008a50:	08008aa3 	.word	0x08008aa3
 8008a54:	08008ab7 	.word	0x08008ab7
 8008a58:	08008a77 	.word	0x08008a77
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008ab7 	.word	0x08008ab7
 8008a64:	08008a8f 	.word	0x08008a8f
 8008a68:	08008a81 	.word	0x08008a81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa3c 	bl	8008eec <USBD_GetDescriptor>
          break;
 8008a74:	e024      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fba1 	bl	80091c0 <USBD_SetAddress>
          break;
 8008a7e:	e01f      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fbe0 	bl	8009248 <USBD_SetConfig>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
          break;
 8008a8c:	e018      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fc83 	bl	800939c <USBD_GetConfig>
          break;
 8008a96:	e013      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fcb4 	bl	8009408 <USBD_GetStatus>
          break;
 8008aa0:	e00e      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fce3 	bl	8009470 <USBD_SetFeature>
          break;
 8008aaa:	e009      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fd07 	bl	80094c2 <USBD_ClrFeature>
          break;
 8008ab4:	e004      	b.n	8008ac0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fd5e 	bl	800957a <USBD_CtlError>
          break;
 8008abe:	bf00      	nop
      }
      break;
 8008ac0:	e004      	b.n	8008acc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fd58 	bl	800957a <USBD_CtlError>
      break;
 8008aca:	bf00      	nop
  }

  return ret;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop

08008ad8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	d005      	beq.n	8008afe <USBD_StdItfReq+0x26>
 8008af2:	2b40      	cmp	r3, #64	; 0x40
 8008af4:	d852      	bhi.n	8008b9c <USBD_StdItfReq+0xc4>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <USBD_StdItfReq+0x26>
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d14e      	bne.n	8008b9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	3b01      	subs	r3, #1
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d840      	bhi.n	8008b8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	889b      	ldrh	r3, [r3, #4]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d836      	bhi.n	8008b84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	889b      	ldrh	r3, [r3, #4]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7ff fed9 	bl	80088d6 <USBD_CoreFindIF>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	2bff      	cmp	r3, #255	; 0xff
 8008b2c:	d01d      	beq.n	8008b6a <USBD_StdItfReq+0x92>
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11a      	bne.n	8008b6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b34:	7bba      	ldrb	r2, [r7, #14]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32ae      	adds	r2, #174	; 0xae
 8008b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00f      	beq.n	8008b64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b44:	7bba      	ldrb	r2, [r7, #14]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b4c:	7bba      	ldrb	r2, [r7, #14]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	32ae      	adds	r2, #174	; 0xae
 8008b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b62:	e004      	b.n	8008b6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b64:	2303      	movs	r3, #3
 8008b66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b68:	e001      	b.n	8008b6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d110      	bne.n	8008b98 <USBD_StdItfReq+0xc0>
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fdc7 	bl	8009710 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b82:	e009      	b.n	8008b98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fcf7 	bl	800957a <USBD_CtlError>
          break;
 8008b8c:	e004      	b.n	8008b98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fcf2 	bl	800957a <USBD_CtlError>
          break;
 8008b96:	e000      	b.n	8008b9a <USBD_StdItfReq+0xc2>
          break;
 8008b98:	bf00      	nop
      }
      break;
 8008b9a:	e004      	b.n	8008ba6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fceb 	bl	800957a <USBD_CtlError>
      break;
 8008ba4:	bf00      	nop
  }

  return ret;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	889b      	ldrh	r3, [r3, #4]
 8008bc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d007      	beq.n	8008be0 <USBD_StdEPReq+0x30>
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	f200 817f 	bhi.w	8008ed4 <USBD_StdEPReq+0x324>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d02a      	beq.n	8008c30 <USBD_StdEPReq+0x80>
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	f040 817a 	bne.w	8008ed4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fe83 	bl	80088f0 <USBD_CoreFindEP>
 8008bea:	4603      	mov	r3, r0
 8008bec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bee:	7b7b      	ldrb	r3, [r7, #13]
 8008bf0:	2bff      	cmp	r3, #255	; 0xff
 8008bf2:	f000 8174 	beq.w	8008ede <USBD_StdEPReq+0x32e>
 8008bf6:	7b7b      	ldrb	r3, [r7, #13]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 8170 	bne.w	8008ede <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bfe:	7b7a      	ldrb	r2, [r7, #13]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c06:	7b7a      	ldrb	r2, [r7, #13]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	32ae      	adds	r2, #174	; 0xae
 8008c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 8163 	beq.w	8008ede <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c18:	7b7a      	ldrb	r2, [r7, #13]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	32ae      	adds	r2, #174	; 0xae
 8008c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c2e:	e156      	b.n	8008ede <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d008      	beq.n	8008c4a <USBD_StdEPReq+0x9a>
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	f300 8145 	bgt.w	8008ec8 <USBD_StdEPReq+0x318>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 809b 	beq.w	8008d7a <USBD_StdEPReq+0x1ca>
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d03c      	beq.n	8008cc2 <USBD_StdEPReq+0x112>
 8008c48:	e13e      	b.n	8008ec8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d002      	beq.n	8008c5c <USBD_StdEPReq+0xac>
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d016      	beq.n	8008c88 <USBD_StdEPReq+0xd8>
 8008c5a:	e02c      	b.n	8008cb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <USBD_StdEPReq+0xce>
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b80      	cmp	r3, #128	; 0x80
 8008c66:	d00a      	beq.n	8008c7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f963 	bl	8009f38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c72:	2180      	movs	r1, #128	; 0x80
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f95f 	bl	8009f38 <USBD_LL_StallEP>
 8008c7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c7c:	e020      	b.n	8008cc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fc7a 	bl	800957a <USBD_CtlError>
              break;
 8008c86:	e01b      	b.n	8008cc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	885b      	ldrh	r3, [r3, #2]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10e      	bne.n	8008cae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <USBD_StdEPReq+0xfe>
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b80      	cmp	r3, #128	; 0x80
 8008c9a:	d008      	beq.n	8008cae <USBD_StdEPReq+0xfe>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	88db      	ldrh	r3, [r3, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 f945 	bl	8009f38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fd2e 	bl	8009710 <USBD_CtlSendStatus>

              break;
 8008cb4:	e004      	b.n	8008cc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fc5e 	bl	800957a <USBD_CtlError>
              break;
 8008cbe:	bf00      	nop
          }
          break;
 8008cc0:	e107      	b.n	8008ed2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d002      	beq.n	8008cd4 <USBD_StdEPReq+0x124>
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d016      	beq.n	8008d00 <USBD_StdEPReq+0x150>
 8008cd2:	e04b      	b.n	8008d6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00d      	beq.n	8008cf6 <USBD_StdEPReq+0x146>
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	2b80      	cmp	r3, #128	; 0x80
 8008cde:	d00a      	beq.n	8008cf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 f927 	bl	8009f38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cea:	2180      	movs	r1, #128	; 0x80
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 f923 	bl	8009f38 <USBD_LL_StallEP>
 8008cf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cf4:	e040      	b.n	8008d78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fc3e 	bl	800957a <USBD_CtlError>
              break;
 8008cfe:	e03b      	b.n	8008d78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	885b      	ldrh	r3, [r3, #2]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d136      	bne.n	8008d76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 f92d 	bl	8009f76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fcf7 	bl	8009710 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fde2 	bl	80088f0 <USBD_CoreFindEP>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d30:	7b7b      	ldrb	r3, [r7, #13]
 8008d32:	2bff      	cmp	r3, #255	; 0xff
 8008d34:	d01f      	beq.n	8008d76 <USBD_StdEPReq+0x1c6>
 8008d36:	7b7b      	ldrb	r3, [r7, #13]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d11c      	bne.n	8008d76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d3c:	7b7a      	ldrb	r2, [r7, #13]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d44:	7b7a      	ldrb	r2, [r7, #13]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	32ae      	adds	r2, #174	; 0xae
 8008d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d010      	beq.n	8008d76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d54:	7b7a      	ldrb	r2, [r7, #13]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	32ae      	adds	r2, #174	; 0xae
 8008d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d6a:	e004      	b.n	8008d76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fc03 	bl	800957a <USBD_CtlError>
              break;
 8008d74:	e000      	b.n	8008d78 <USBD_StdEPReq+0x1c8>
              break;
 8008d76:	bf00      	nop
          }
          break;
 8008d78:	e0ab      	b.n	8008ed2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d002      	beq.n	8008d8c <USBD_StdEPReq+0x1dc>
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d032      	beq.n	8008df0 <USBD_StdEPReq+0x240>
 8008d8a:	e097      	b.n	8008ebc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <USBD_StdEPReq+0x1f2>
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	2b80      	cmp	r3, #128	; 0x80
 8008d96:	d004      	beq.n	8008da2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fbed 	bl	800957a <USBD_CtlError>
                break;
 8008da0:	e091      	b.n	8008ec6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da0b      	bge.n	8008dc2 <USBD_StdEPReq+0x212>
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	3310      	adds	r3, #16
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	e00b      	b.n	8008dda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3304      	adds	r3, #4
 8008dda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2202      	movs	r2, #2
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fc37 	bl	800965c <USBD_CtlSendData>
              break;
 8008dee:	e06a      	b.n	8008ec6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da11      	bge.n	8008e1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 020f 	and.w	r2, r3, #15
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	3324      	adds	r3, #36	; 0x24
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d117      	bne.n	8008e42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fbb0 	bl	800957a <USBD_CtlError>
                  break;
 8008e1a:	e054      	b.n	8008ec6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	f003 020f 	and.w	r2, r3, #15
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fb9d 	bl	800957a <USBD_CtlError>
                  break;
 8008e40:	e041      	b.n	8008ec6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	da0b      	bge.n	8008e62 <USBD_StdEPReq+0x2b2>
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	3310      	adds	r3, #16
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3304      	adds	r3, #4
 8008e60:	e00b      	b.n	8008e7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	3304      	adds	r3, #4
 8008e7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <USBD_StdEPReq+0x2d8>
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b80      	cmp	r3, #128	; 0x80
 8008e86:	d103      	bne.n	8008e90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e00e      	b.n	8008eae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f88d 	bl	8009fb4 <USBD_LL_IsStallEP>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fbd1 	bl	800965c <USBD_CtlSendData>
              break;
 8008eba:	e004      	b.n	8008ec6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fb5b 	bl	800957a <USBD_CtlError>
              break;
 8008ec4:	bf00      	nop
          }
          break;
 8008ec6:	e004      	b.n	8008ed2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fb55 	bl	800957a <USBD_CtlError>
          break;
 8008ed0:	bf00      	nop
      }
      break;
 8008ed2:	e005      	b.n	8008ee0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fb4f 	bl	800957a <USBD_CtlError>
      break;
 8008edc:	e000      	b.n	8008ee0 <USBD_StdEPReq+0x330>
      break;
 8008ede:	bf00      	nop
  }

  return ret;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	885b      	ldrh	r3, [r3, #2]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	2b06      	cmp	r3, #6
 8008f0e:	f200 8128 	bhi.w	8009162 <USBD_GetDescriptor+0x276>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <USBD_GetDescriptor+0x2c>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f4d 	.word	0x08008f4d
 8008f20:	08008f8d 	.word	0x08008f8d
 8008f24:	08009163 	.word	0x08009163
 8008f28:	08009163 	.word	0x08009163
 8008f2c:	08009103 	.word	0x08009103
 8008f30:	0800912f 	.word	0x0800912f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
      break;
 8008f4a:	e112      	b.n	8009172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7c1b      	ldrb	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10d      	bne.n	8008f70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	f107 0208 	add.w	r2, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f6e:	e100      	b.n	8009172 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	f107 0208 	add.w	r2, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	2202      	movs	r2, #2
 8008f88:	701a      	strb	r2, [r3, #0]
      break;
 8008f8a:	e0f2      	b.n	8009172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	f200 80ac 	bhi.w	80090f0 <USBD_GetDescriptor+0x204>
 8008f98:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <USBD_GetDescriptor+0xb4>)
 8008f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fed 	.word	0x08008fed
 8008fa8:	08009021 	.word	0x08009021
 8008fac:	08009055 	.word	0x08009055
 8008fb0:	08009089 	.word	0x08009089
 8008fb4:	080090bd 	.word	0x080090bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7c12      	ldrb	r2, [r2, #16]
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fda:	e091      	b.n	8009100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 facb 	bl	800957a <USBD_CtlError>
            err++;
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fea:	e089      	b.n	8009100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	7c12      	ldrb	r2, [r2, #16]
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	4610      	mov	r0, r2
 800900a:	4798      	blx	r3
 800900c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900e:	e077      	b.n	8009100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fab1 	bl	800957a <USBD_CtlError>
            err++;
 8009018:	7afb      	ldrb	r3, [r7, #11]
 800901a:	3301      	adds	r3, #1
 800901c:	72fb      	strb	r3, [r7, #11]
          break;
 800901e:	e06f      	b.n	8009100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	7c12      	ldrb	r2, [r2, #16]
 8009038:	f107 0108 	add.w	r1, r7, #8
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009042:	e05d      	b.n	8009100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa97 	bl	800957a <USBD_CtlError>
            err++;
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	3301      	adds	r3, #1
 8009050:	72fb      	strb	r3, [r7, #11]
          break;
 8009052:	e055      	b.n	8009100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 0108 	add.w	r1, r7, #8
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009076:	e043      	b.n	8009100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa7d 	bl	800957a <USBD_CtlError>
            err++;
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	3301      	adds	r3, #1
 8009084:	72fb      	strb	r3, [r7, #11]
          break;
 8009086:	e03b      	b.n	8009100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7c12      	ldrb	r2, [r2, #16]
 80090a0:	f107 0108 	add.w	r1, r7, #8
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090aa:	e029      	b.n	8009100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa63 	bl	800957a <USBD_CtlError>
            err++;
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	3301      	adds	r3, #1
 80090b8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ba:	e021      	b.n	8009100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7c12      	ldrb	r2, [r2, #16]
 80090d4:	f107 0108 	add.w	r1, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090de:	e00f      	b.n	8009100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa49 	bl	800957a <USBD_CtlError>
            err++;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3301      	adds	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]
          break;
 80090ee:	e007      	b.n	8009100 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa41 	bl	800957a <USBD_CtlError>
          err++;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	3301      	adds	r3, #1
 80090fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090fe:	bf00      	nop
      }
      break;
 8009100:	e037      	b.n	8009172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7c1b      	ldrb	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d109      	bne.n	800911e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009112:	f107 0208 	add.w	r2, r7, #8
 8009116:	4610      	mov	r0, r2
 8009118:	4798      	blx	r3
 800911a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800911c:	e029      	b.n	8009172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa2a 	bl	800957a <USBD_CtlError>
        err++;
 8009126:	7afb      	ldrb	r3, [r7, #11]
 8009128:	3301      	adds	r3, #1
 800912a:	72fb      	strb	r3, [r7, #11]
      break;
 800912c:	e021      	b.n	8009172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7c1b      	ldrb	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f107 0208 	add.w	r2, r7, #8
 8009142:	4610      	mov	r0, r2
 8009144:	4798      	blx	r3
 8009146:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	2207      	movs	r2, #7
 800914e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009150:	e00f      	b.n	8009172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fa10 	bl	800957a <USBD_CtlError>
        err++;
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	3301      	adds	r3, #1
 800915e:	72fb      	strb	r3, [r7, #11]
      break;
 8009160:	e007      	b.n	8009172 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fa08 	bl	800957a <USBD_CtlError>
      err++;
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	3301      	adds	r3, #1
 800916e:	72fb      	strb	r3, [r7, #11]
      break;
 8009170:	bf00      	nop
  }

  if (err != 0U)
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d11e      	bne.n	80091b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	88db      	ldrh	r3, [r3, #6]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d016      	beq.n	80091ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009180:	893b      	ldrh	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00e      	beq.n	80091a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88da      	ldrh	r2, [r3, #6]
 800918a:	893b      	ldrh	r3, [r7, #8]
 800918c:	4293      	cmp	r3, r2
 800918e:	bf28      	it	cs
 8009190:	4613      	movcs	r3, r2
 8009192:	b29b      	uxth	r3, r3
 8009194:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009196:	893b      	ldrh	r3, [r7, #8]
 8009198:	461a      	mov	r2, r3
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa5d 	bl	800965c <USBD_CtlSendData>
 80091a2:	e009      	b.n	80091b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f9e7 	bl	800957a <USBD_CtlError>
 80091ac:	e004      	b.n	80091b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 faae 	bl	8009710 <USBD_CtlSendStatus>
 80091b4:	e000      	b.n	80091b8 <USBD_GetDescriptor+0x2cc>
    return;
 80091b6:	bf00      	nop
  }
}
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop

080091c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	889b      	ldrh	r3, [r3, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d131      	bne.n	8009236 <USBD_SetAddress+0x76>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d12d      	bne.n	8009236 <USBD_SetAddress+0x76>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b7f      	cmp	r3, #127	; 0x7f
 80091e0:	d829      	bhi.n	8009236 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	885b      	ldrh	r3, [r3, #2]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d104      	bne.n	8009204 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f9bc 	bl	800957a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009202:	e01d      	b.n	8009240 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fefb 	bl	800a00c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fa7a 	bl	8009710 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	e009      	b.n	8009240 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009234:	e004      	b.n	8009240 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f99e 	bl	800957a <USBD_CtlError>
  }
}
 800923e:	bf00      	nop
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	885b      	ldrh	r3, [r3, #2]
 800925a:	b2da      	uxtb	r2, r3
 800925c:	4b4e      	ldr	r3, [pc, #312]	; (8009398 <USBD_SetConfig+0x150>)
 800925e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009260:	4b4d      	ldr	r3, [pc, #308]	; (8009398 <USBD_SetConfig+0x150>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d905      	bls.n	8009274 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f985 	bl	800957a <USBD_CtlError>
    return USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e08c      	b.n	800938e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d002      	beq.n	8009286 <USBD_SetConfig+0x3e>
 8009280:	2b03      	cmp	r3, #3
 8009282:	d029      	beq.n	80092d8 <USBD_SetConfig+0x90>
 8009284:	e075      	b.n	8009372 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009286:	4b44      	ldr	r3, [pc, #272]	; (8009398 <USBD_SetConfig+0x150>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d020      	beq.n	80092d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800928e:	4b42      	ldr	r3, [pc, #264]	; (8009398 <USBD_SetConfig+0x150>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009298:	4b3f      	ldr	r3, [pc, #252]	; (8009398 <USBD_SetConfig+0x150>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fe ffe7 	bl	8008272 <USBD_SetClassConfig>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f962 	bl	800957a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092be:	e065      	b.n	800938c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fa25 	bl	8009710 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2203      	movs	r2, #3
 80092ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092ce:	e05d      	b.n	800938c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fa1d 	bl	8009710 <USBD_CtlSendStatus>
      break;
 80092d6:	e059      	b.n	800938c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092d8:	4b2f      	ldr	r3, [pc, #188]	; (8009398 <USBD_SetConfig+0x150>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d112      	bne.n	8009306 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092e8:	4b2b      	ldr	r3, [pc, #172]	; (8009398 <USBD_SetConfig+0x150>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092f2:	4b29      	ldr	r3, [pc, #164]	; (8009398 <USBD_SetConfig+0x150>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7fe ffd6 	bl	80082aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa06 	bl	8009710 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009304:	e042      	b.n	800938c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009306:	4b24      	ldr	r3, [pc, #144]	; (8009398 <USBD_SetConfig+0x150>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d02a      	beq.n	800936a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7fe ffc4 	bl	80082aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009322:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <USBD_SetConfig+0x150>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800932c:	4b1a      	ldr	r3, [pc, #104]	; (8009398 <USBD_SetConfig+0x150>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe ff9d 	bl	8008272 <USBD_SetClassConfig>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00f      	beq.n	8009362 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f918 	bl	800957a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7fe ffa9 	bl	80082aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009360:	e014      	b.n	800938c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9d4 	bl	8009710 <USBD_CtlSendStatus>
      break;
 8009368:	e010      	b.n	800938c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f9d0 	bl	8009710 <USBD_CtlSendStatus>
      break;
 8009370:	e00c      	b.n	800938c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f900 	bl	800957a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800937a:	4b07      	ldr	r3, [pc, #28]	; (8009398 <USBD_SetConfig+0x150>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fe ff92 	bl	80082aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
      break;
 800938a:	bf00      	nop
  }

  return ret;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	200004c4 	.word	0x200004c4

0800939c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	88db      	ldrh	r3, [r3, #6]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d004      	beq.n	80093b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f8e2 	bl	800957a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093b6:	e023      	b.n	8009400 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	dc02      	bgt.n	80093ca <USBD_GetConfig+0x2e>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dc03      	bgt.n	80093d0 <USBD_GetConfig+0x34>
 80093c8:	e015      	b.n	80093f6 <USBD_GetConfig+0x5a>
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d00b      	beq.n	80093e6 <USBD_GetConfig+0x4a>
 80093ce:	e012      	b.n	80093f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3308      	adds	r3, #8
 80093da:	2201      	movs	r2, #1
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f93c 	bl	800965c <USBD_CtlSendData>
        break;
 80093e4:	e00c      	b.n	8009400 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3304      	adds	r3, #4
 80093ea:	2201      	movs	r2, #1
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f934 	bl	800965c <USBD_CtlSendData>
        break;
 80093f4:	e004      	b.n	8009400 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8be 	bl	800957a <USBD_CtlError>
        break;
 80093fe:	bf00      	nop
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009418:	b2db      	uxtb	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	2b02      	cmp	r3, #2
 800941e:	d81e      	bhi.n	800945e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	88db      	ldrh	r3, [r3, #6]
 8009424:	2b02      	cmp	r3, #2
 8009426:	d004      	beq.n	8009432 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f8a5 	bl	800957a <USBD_CtlError>
        break;
 8009430:	e01a      	b.n	8009468 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d005      	beq.n	800944e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f043 0202 	orr.w	r2, r3, #2
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	330c      	adds	r3, #12
 8009452:	2202      	movs	r2, #2
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f900 	bl	800965c <USBD_CtlSendData>
      break;
 800945c:	e004      	b.n	8009468 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f88a 	bl	800957a <USBD_CtlError>
      break;
 8009466:	bf00      	nop
  }
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	885b      	ldrh	r3, [r3, #2]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d107      	bne.n	8009492 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f940 	bl	8009710 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009490:	e013      	b.n	80094ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	885b      	ldrh	r3, [r3, #2]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d10b      	bne.n	80094b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	889b      	ldrh	r3, [r3, #4]
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f930 	bl	8009710 <USBD_CtlSendStatus>
}
 80094b0:	e003      	b.n	80094ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f860 	bl	800957a <USBD_CtlError>
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d80b      	bhi.n	80094f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	885b      	ldrh	r3, [r3, #2]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d10c      	bne.n	80094fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f910 	bl	8009710 <USBD_CtlSendStatus>
      }
      break;
 80094f0:	e004      	b.n	80094fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f840 	bl	800957a <USBD_CtlError>
      break;
 80094fa:	e000      	b.n	80094fe <USBD_ClrFeature+0x3c>
      break;
 80094fc:	bf00      	nop
  }
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff fa41 	bl	80089b8 <SWAPBYTE>
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fa34 	bl	80089b8 <SWAPBYTE>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fa27 	bl	80089b8 <SWAPBYTE>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	80da      	strh	r2, [r3, #6]
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b082      	sub	sp, #8
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009584:	2180      	movs	r1, #128	; 0x80
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fcd6 	bl	8009f38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800958c:	2100      	movs	r1, #0
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fcd2 	bl	8009f38 <USBD_LL_StallEP>
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d036      	beq.n	8009620 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095b6:	6938      	ldr	r0, [r7, #16]
 80095b8:	f000 f836 	bl	8009628 <USBD_GetLen>
 80095bc:	4603      	mov	r3, r0
 80095be:	3301      	adds	r3, #1
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	4413      	add	r3, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	7812      	ldrb	r2, [r2, #0]
 80095d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	3301      	adds	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	2203      	movs	r2, #3
 80095e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	3301      	adds	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095ec:	e013      	b.n	8009616 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4413      	add	r3, r2
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	7812      	ldrb	r2, [r2, #0]
 80095f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	3301      	adds	r3, #1
 80095fe:	613b      	str	r3, [r7, #16]
    idx++;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	3301      	adds	r3, #1
 8009604:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4413      	add	r3, r2
 800960c:	2200      	movs	r2, #0
 800960e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	3301      	adds	r3, #1
 8009614:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e7      	bne.n	80095ee <USBD_GetString+0x52>
 800961e:	e000      	b.n	8009622 <USBD_GetString+0x86>
    return;
 8009620:	bf00      	nop
  }
}
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009638:	e005      	b.n	8009646 <USBD_GetLen+0x1e>
  {
    len++;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	3301      	adds	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	3301      	adds	r3, #1
 8009644:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1f5      	bne.n	800963a <USBD_GetLen+0x12>
  }

  return len;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2202      	movs	r2, #2
 800966c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	2100      	movs	r1, #0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fce1 	bl	800a04a <USBD_LL_Transmit>

  return USBD_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	2100      	movs	r1, #0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fcd0 	bl	800a04a <USBD_LL_Transmit>

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2203      	movs	r2, #3
 80096c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	2100      	movs	r1, #0
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fcd4 	bl	800a08c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	2100      	movs	r1, #0
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 fcc3 	bl	800a08c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2204      	movs	r2, #4
 800971c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009720:	2300      	movs	r3, #0
 8009722:	2200      	movs	r2, #0
 8009724:	2100      	movs	r1, #0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fc8f 	bl	800a04a <USBD_LL_Transmit>

  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2205      	movs	r2, #5
 8009742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009746:	2300      	movs	r3, #0
 8009748:	2200      	movs	r2, #0
 800974a:	2100      	movs	r1, #0
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fc9d 	bl	800a08c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009760:	2200      	movs	r2, #0
 8009762:	4912      	ldr	r1, [pc, #72]	; (80097ac <MX_USB_DEVICE_Init+0x50>)
 8009764:	4812      	ldr	r0, [pc, #72]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 8009766:	f7fe fd07 	bl	8008178 <USBD_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009770:	f7f8 f9f4 	bl	8001b5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009774:	490f      	ldr	r1, [pc, #60]	; (80097b4 <MX_USB_DEVICE_Init+0x58>)
 8009776:	480e      	ldr	r0, [pc, #56]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 8009778:	f7fe fd2e 	bl	80081d8 <USBD_RegisterClass>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009782:	f7f8 f9eb 	bl	8001b5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009786:	490c      	ldr	r1, [pc, #48]	; (80097b8 <MX_USB_DEVICE_Init+0x5c>)
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 800978a:	f7fe fc1f 	bl	8007fcc <USBD_CDC_RegisterInterface>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009794:	f7f8 f9e2 	bl	8001b5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009798:	4805      	ldr	r0, [pc, #20]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 800979a:	f7fe fd53 	bl	8008244 <USBD_Start>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097a4:	f7f8 f9da 	bl	8001b5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097a8:	bf00      	nop
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200000ac 	.word	0x200000ac
 80097b0:	200004c8 	.word	0x200004c8
 80097b4:	20000018 	.word	0x20000018
 80097b8:	20000098 	.word	0x20000098

080097bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097c0:	2200      	movs	r2, #0
 80097c2:	4905      	ldr	r1, [pc, #20]	; (80097d8 <CDC_Init_FS+0x1c>)
 80097c4:	4805      	ldr	r0, [pc, #20]	; (80097dc <CDC_Init_FS+0x20>)
 80097c6:	f7fe fc1b 	bl	8008000 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097ca:	4905      	ldr	r1, [pc, #20]	; (80097e0 <CDC_Init_FS+0x24>)
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <CDC_Init_FS+0x20>)
 80097ce:	f7fe fc39 	bl	8008044 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000fa4 	.word	0x20000fa4
 80097dc:	200004c8 	.word	0x200004c8
 80097e0:	200007a4 	.word	0x200007a4

080097e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
 8009800:	4613      	mov	r3, r2
 8009802:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b23      	cmp	r3, #35	; 0x23
 8009808:	d84a      	bhi.n	80098a0 <CDC_Control_FS+0xac>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <CDC_Control_FS+0x1c>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	080098a1 	.word	0x080098a1
 8009814:	080098a1 	.word	0x080098a1
 8009818:	080098a1 	.word	0x080098a1
 800981c:	080098a1 	.word	0x080098a1
 8009820:	080098a1 	.word	0x080098a1
 8009824:	080098a1 	.word	0x080098a1
 8009828:	080098a1 	.word	0x080098a1
 800982c:	080098a1 	.word	0x080098a1
 8009830:	080098a1 	.word	0x080098a1
 8009834:	080098a1 	.word	0x080098a1
 8009838:	080098a1 	.word	0x080098a1
 800983c:	080098a1 	.word	0x080098a1
 8009840:	080098a1 	.word	0x080098a1
 8009844:	080098a1 	.word	0x080098a1
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098a1 	.word	0x080098a1
 8009850:	080098a1 	.word	0x080098a1
 8009854:	080098a1 	.word	0x080098a1
 8009858:	080098a1 	.word	0x080098a1
 800985c:	080098a1 	.word	0x080098a1
 8009860:	080098a1 	.word	0x080098a1
 8009864:	080098a1 	.word	0x080098a1
 8009868:	080098a1 	.word	0x080098a1
 800986c:	080098a1 	.word	0x080098a1
 8009870:	080098a1 	.word	0x080098a1
 8009874:	080098a1 	.word	0x080098a1
 8009878:	080098a1 	.word	0x080098a1
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098a1 	.word	0x080098a1
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098a1 	.word	0x080098a1
 800988c:	080098a1 	.word	0x080098a1
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098a1 	.word	0x080098a1
 8009898:	080098a1 	.word	0x080098a1
 800989c:	080098a1 	.word	0x080098a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098a0:	bf00      	nop
  }

  return (USBD_OK);
 80098a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4805      	ldr	r0, [pc, #20]	; (80098d4 <CDC_Receive_FS+0x24>)
 80098be:	f7fe fbc1 	bl	8008044 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098c2:	4804      	ldr	r0, [pc, #16]	; (80098d4 <CDC_Receive_FS+0x24>)
 80098c4:	f7fe fc22 	bl	800810c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	200004c8 	.word	0x200004c8

080098d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <CDC_Transmit_FS+0x48>)
 80098ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e00b      	b.n	8009916 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098fe:	887b      	ldrh	r3, [r7, #2]
 8009900:	461a      	mov	r2, r3
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4806      	ldr	r0, [pc, #24]	; (8009920 <CDC_Transmit_FS+0x48>)
 8009906:	f7fe fb7b 	bl	8008000 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <CDC_Transmit_FS+0x48>)
 800990c:	f7fe fbb8 	bl	8008080 <USBD_CDC_TransmitPacket>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200004c8 	.word	0x200004c8

08009924 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4613      	mov	r3, r2
 8009930:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800993a:	4618      	mov	r0, r3
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	6039      	str	r1, [r7, #0]
 8009952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2212      	movs	r2, #18
 8009958:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800995a:	4b03      	ldr	r3, [pc, #12]	; (8009968 <USBD_FS_DeviceDescriptor+0x20>)
}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	200000c8 	.word	0x200000c8

0800996c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	6039      	str	r1, [r7, #0]
 8009976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2204      	movs	r2, #4
 800997c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800997e:	4b03      	ldr	r3, [pc, #12]	; (800998c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	200000dc 	.word	0x200000dc

08009990 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	4907      	ldr	r1, [pc, #28]	; (80099c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80099a6:	4808      	ldr	r0, [pc, #32]	; (80099c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80099a8:	f7ff fdf8 	bl	800959c <USBD_GetString>
 80099ac:	e004      	b.n	80099b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4904      	ldr	r1, [pc, #16]	; (80099c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80099b2:	4805      	ldr	r0, [pc, #20]	; (80099c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80099b4:	f7ff fdf2 	bl	800959c <USBD_GetString>
  }
  return USBD_StrDesc;
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200017a4 	.word	0x200017a4
 80099c8:	0800d684 	.word	0x0800d684

080099cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4904      	ldr	r1, [pc, #16]	; (80099ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099dc:	4804      	ldr	r0, [pc, #16]	; (80099f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099de:	f7ff fddd 	bl	800959c <USBD_GetString>
  return USBD_StrDesc;
 80099e2:	4b02      	ldr	r3, [pc, #8]	; (80099ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	200017a4 	.word	0x200017a4
 80099f0:	0800d69c 	.word	0x0800d69c

080099f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	6039      	str	r1, [r7, #0]
 80099fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	221a      	movs	r2, #26
 8009a04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a06:	f000 f843 	bl	8009a90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a0a:	4b02      	ldr	r3, [pc, #8]	; (8009a14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	200000e0 	.word	0x200000e0

08009a18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	6039      	str	r1, [r7, #0]
 8009a22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	4907      	ldr	r1, [pc, #28]	; (8009a4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a2e:	4808      	ldr	r0, [pc, #32]	; (8009a50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a30:	f7ff fdb4 	bl	800959c <USBD_GetString>
 8009a34:	e004      	b.n	8009a40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4904      	ldr	r1, [pc, #16]	; (8009a4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a3a:	4805      	ldr	r0, [pc, #20]	; (8009a50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a3c:	f7ff fdae 	bl	800959c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a40:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200017a4 	.word	0x200017a4
 8009a50:	0800d6b0 	.word	0x0800d6b0

08009a54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	6039      	str	r1, [r7, #0]
 8009a5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d105      	bne.n	8009a72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4907      	ldr	r1, [pc, #28]	; (8009a88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a6a:	4808      	ldr	r0, [pc, #32]	; (8009a8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a6c:	f7ff fd96 	bl	800959c <USBD_GetString>
 8009a70:	e004      	b.n	8009a7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	4904      	ldr	r1, [pc, #16]	; (8009a88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a76:	4805      	ldr	r0, [pc, #20]	; (8009a8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a78:	f7ff fd90 	bl	800959c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a7c:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	200017a4 	.word	0x200017a4
 8009a8c:	0800d6bc 	.word	0x0800d6bc

08009a90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a96:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <Get_SerialNum+0x44>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <Get_SerialNum+0x48>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009aa2:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <Get_SerialNum+0x4c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d009      	beq.n	8009aca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ab6:	2208      	movs	r2, #8
 8009ab8:	4909      	ldr	r1, [pc, #36]	; (8009ae0 <Get_SerialNum+0x50>)
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 f814 	bl	8009ae8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	4908      	ldr	r1, [pc, #32]	; (8009ae4 <Get_SerialNum+0x54>)
 8009ac4:	68b8      	ldr	r0, [r7, #8]
 8009ac6:	f000 f80f 	bl	8009ae8 <IntToUnicode>
  }
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	1fff7a10 	.word	0x1fff7a10
 8009ad8:	1fff7a14 	.word	0x1fff7a14
 8009adc:	1fff7a18 	.word	0x1fff7a18
 8009ae0:	200000e2 	.word	0x200000e2
 8009ae4:	200000f2 	.word	0x200000f2

08009ae8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]
 8009afe:	e027      	b.n	8009b50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	0f1b      	lsrs	r3, r3, #28
 8009b04:	2b09      	cmp	r3, #9
 8009b06:	d80b      	bhi.n	8009b20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	0f1b      	lsrs	r3, r3, #28
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	4619      	mov	r1, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	440b      	add	r3, r1
 8009b18:	3230      	adds	r2, #48	; 0x30
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	e00a      	b.n	8009b36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	0f1b      	lsrs	r3, r3, #28
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	440b      	add	r3, r1
 8009b30:	3237      	adds	r2, #55	; 0x37
 8009b32:	b2d2      	uxtb	r2, r2
 8009b34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	3301      	adds	r3, #1
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	4413      	add	r3, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
 8009b50:	7dfa      	ldrb	r2, [r7, #23]
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d3d3      	bcc.n	8009b00 <IntToUnicode+0x18>
  }
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
	...

08009b68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b70:	f107 0314 	add.w	r3, r7, #20
 8009b74:	2200      	movs	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	605a      	str	r2, [r3, #4]
 8009b7a:	609a      	str	r2, [r3, #8]
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b88:	d13a      	bne.n	8009c00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	4a1d      	ldr	r2, [pc, #116]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009b94:	f043 0301 	orr.w	r3, r3, #1
 8009b98:	6313      	str	r3, [r2, #48]	; 0x30
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ba6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bac:	2302      	movs	r3, #2
 8009bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bb8:	230a      	movs	r3, #10
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bbc:	f107 0314 	add.w	r3, r7, #20
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4812      	ldr	r0, [pc, #72]	; (8009c0c <HAL_PCD_MspInit+0xa4>)
 8009bc4:	f7f8 ff1c 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bc8:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	4a0e      	ldr	r2, [pc, #56]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd2:	6353      	str	r3, [r2, #52]	; 0x34
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bdc:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009be2:	6453      	str	r3, [r2, #68]	; 0x44
 8009be4:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <HAL_PCD_MspInit+0xa0>)
 8009be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	2043      	movs	r0, #67	; 0x43
 8009bf6:	f7f8 fecc 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bfa:	2043      	movs	r0, #67	; 0x43
 8009bfc:	f7f8 fee5 	bl	80029ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c00:	bf00      	nop
 8009c02:	3728      	adds	r7, #40	; 0x28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	40020000 	.word	0x40020000

08009c10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fe fb59 	bl	80082de <USBD_LL_SetupStage>
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c46:	78fa      	ldrb	r2, [r7, #3]
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f7fe fb93 	bl	8008388 <USBD_LL_DataOutStage>
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c7c:	78fa      	ldrb	r2, [r7, #3]
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4613      	mov	r3, r2
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	440b      	add	r3, r1
 8009c8a:	334c      	adds	r3, #76	; 0x4c
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	78fb      	ldrb	r3, [r7, #3]
 8009c90:	4619      	mov	r1, r3
 8009c92:	f7fe fc2c 	bl	80084ee <USBD_LL_DataInStage>
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fd60 	bl	8008772 <USBD_LL_SOF>
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d001      	beq.n	8009cd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cce:	f7f7 ff45 	bl	8001b5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cd8:	7bfa      	ldrb	r2, [r7, #15]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fe fd0a 	bl	80086f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fcb2 	bl	8008652 <USBD_LL_Reset>
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe fd05 	bl	8008716 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	6812      	ldr	r2, [r2, #0]
 8009d1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d1e:	f043 0301 	orr.w	r3, r3, #1
 8009d22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d2c:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <HAL_PCD_SuspendCallback+0x48>)
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	4a03      	ldr	r2, [pc, #12]	; (8009d40 <HAL_PCD_SuspendCallback+0x48>)
 8009d32:	f043 0306 	orr.w	r3, r3, #6
 8009d36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	e000ed00 	.word	0xe000ed00

08009d44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe fcf5 	bl	8008742 <USBD_LL_Resume>
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fd4d 	bl	8008816 <USBD_LL_IsoOUTIncomplete>
}
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d96:	78fa      	ldrb	r2, [r7, #3]
 8009d98:	4611      	mov	r1, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fd09 	bl	80087b2 <USBD_LL_IsoINIncomplete>
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fd5f 	bl	800887a <USBD_LL_DevConnected>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fd5c 	bl	8008890 <USBD_LL_DevDisconnected>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d13c      	bne.n	8009e6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009df0:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <USBD_LL_Init+0x94>)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a1e      	ldr	r2, [pc, #120]	; (8009e74 <USBD_LL_Init+0x94>)
 8009dfc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e00:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e08:	4b1a      	ldr	r3, [pc, #104]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e0e:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e10:	2202      	movs	r2, #2
 8009e12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e14:	4b17      	ldr	r3, [pc, #92]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e1a:	4b16      	ldr	r3, [pc, #88]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e20:	4b14      	ldr	r3, [pc, #80]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e2c:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e32:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e38:	4b0e      	ldr	r3, [pc, #56]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e3e:	480d      	ldr	r0, [pc, #52]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e40:	f7f8 ff7b 	bl	8002d3a <HAL_PCD_Init>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e4a:	f7f7 fe87 	bl	8001b5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e4e:	2180      	movs	r1, #128	; 0x80
 8009e50:	4808      	ldr	r0, [pc, #32]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e52:	f7fa f9d2 	bl	80041fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e56:	2240      	movs	r2, #64	; 0x40
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4806      	ldr	r0, [pc, #24]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e5c:	f7fa f986 	bl	800416c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e60:	2280      	movs	r2, #128	; 0x80
 8009e62:	2101      	movs	r1, #1
 8009e64:	4803      	ldr	r0, [pc, #12]	; (8009e74 <USBD_LL_Init+0x94>)
 8009e66:	f7fa f981 	bl	800416c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	200019a4 	.word	0x200019a4

08009e78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7f9 f870 	bl	8002f74 <HAL_PCD_Start>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f942 	bl	800a124 <USBD_Get_USB_Status>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	4611      	mov	r1, r2
 8009eba:	461a      	mov	r2, r3
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	70fb      	strb	r3, [r7, #3]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70bb      	strb	r3, [r7, #2]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ed6:	78bb      	ldrb	r3, [r7, #2]
 8009ed8:	883a      	ldrh	r2, [r7, #0]
 8009eda:	78f9      	ldrb	r1, [r7, #3]
 8009edc:	f7f9 fd41 	bl	8003962 <HAL_PCD_EP_Open>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f91c 	bl	800a124 <USBD_Get_USB_Status>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7f9 fd8a 	bl	8003a32 <HAL_PCD_EP_Close>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 f8fd 	bl	800a124 <USBD_Get_USB_Status>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f9 fe62 	bl	8003c20 <HAL_PCD_EP_SetStall>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f8de 	bl	800a124 <USBD_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f90:	78fa      	ldrb	r2, [r7, #3]
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f9 fea7 	bl	8003ce8 <HAL_PCD_EP_ClrStall>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 f8bf 	bl	800a124 <USBD_Get_USB_Status>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	da0b      	bge.n	8009fe8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fd6:	68f9      	ldr	r1, [r7, #12]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	333e      	adds	r3, #62	; 0x3e
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	e00b      	b.n	800a000 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fee:	68f9      	ldr	r1, [r7, #12]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009ffe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a026:	78fa      	ldrb	r2, [r7, #3]
 800a028:	4611      	mov	r1, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7f9 fc74 	bl	8003918 <HAL_PCD_SetAddress>
 800a030:	4603      	mov	r3, r0
 800a032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	4618      	mov	r0, r3
 800a038:	f000 f874 	bl	800a124 <USBD_Get_USB_Status>
 800a03c:	4603      	mov	r3, r0
 800a03e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a040:	7bbb      	ldrb	r3, [r7, #14]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b086      	sub	sp, #24
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	460b      	mov	r3, r1
 800a058:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a068:	7af9      	ldrb	r1, [r7, #11]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	f7f9 fd8d 	bl	8003b8c <HAL_PCD_EP_Transmit>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f853 	bl	800a124 <USBD_Get_USB_Status>
 800a07e:	4603      	mov	r3, r0
 800a080:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a082:	7dbb      	ldrb	r3, [r7, #22]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	607a      	str	r2, [r7, #4]
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	460b      	mov	r3, r1
 800a09a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0aa:	7af9      	ldrb	r1, [r7, #11]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	f7f9 fd09 	bl	8003ac6 <HAL_PCD_EP_Receive>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f832 	bl	800a124 <USBD_Get_USB_Status>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f9 fd39 	bl	8003b5c <HAL_PCD_EP_GetRxCount>
 800a0ea:	4603      	mov	r3, r0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0fc:	4b03      	ldr	r3, [pc, #12]	; (800a10c <USBD_static_malloc+0x18>)
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20001eb0 	.word	0x20001eb0

0800a110 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	4603      	mov	r3, r0
 800a12c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	2b03      	cmp	r3, #3
 800a136:	d817      	bhi.n	800a168 <USBD_Get_USB_Status+0x44>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <USBD_Get_USB_Status+0x1c>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a151 	.word	0x0800a151
 800a144:	0800a157 	.word	0x0800a157
 800a148:	0800a15d 	.word	0x0800a15d
 800a14c:	0800a163 	.word	0x0800a163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
    break;
 800a154:	e00b      	b.n	800a16e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	73fb      	strb	r3, [r7, #15]
    break;
 800a15a:	e008      	b.n	800a16e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a15c:	2301      	movs	r3, #1
 800a15e:	73fb      	strb	r3, [r7, #15]
    break;
 800a160:	e005      	b.n	800a16e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a162:	2303      	movs	r3, #3
 800a164:	73fb      	strb	r3, [r7, #15]
    break;
 800a166:	e002      	b.n	800a16e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a168:	2303      	movs	r3, #3
 800a16a:	73fb      	strb	r3, [r7, #15]
    break;
 800a16c:	bf00      	nop
  }
  return usb_status;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <__errno>:
 800a17c:	4b01      	ldr	r3, [pc, #4]	; (800a184 <__errno+0x8>)
 800a17e:	6818      	ldr	r0, [r3, #0]
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	200000fc 	.word	0x200000fc

0800a188 <__libc_init_array>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4d0d      	ldr	r5, [pc, #52]	; (800a1c0 <__libc_init_array+0x38>)
 800a18c:	4c0d      	ldr	r4, [pc, #52]	; (800a1c4 <__libc_init_array+0x3c>)
 800a18e:	1b64      	subs	r4, r4, r5
 800a190:	10a4      	asrs	r4, r4, #2
 800a192:	2600      	movs	r6, #0
 800a194:	42a6      	cmp	r6, r4
 800a196:	d109      	bne.n	800a1ac <__libc_init_array+0x24>
 800a198:	4d0b      	ldr	r5, [pc, #44]	; (800a1c8 <__libc_init_array+0x40>)
 800a19a:	4c0c      	ldr	r4, [pc, #48]	; (800a1cc <__libc_init_array+0x44>)
 800a19c:	f003 fa56 	bl	800d64c <_init>
 800a1a0:	1b64      	subs	r4, r4, r5
 800a1a2:	10a4      	asrs	r4, r4, #2
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	42a6      	cmp	r6, r4
 800a1a8:	d105      	bne.n	800a1b6 <__libc_init_array+0x2e>
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b0:	4798      	blx	r3
 800a1b2:	3601      	adds	r6, #1
 800a1b4:	e7ee      	b.n	800a194 <__libc_init_array+0xc>
 800a1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ba:	4798      	blx	r3
 800a1bc:	3601      	adds	r6, #1
 800a1be:	e7f2      	b.n	800a1a6 <__libc_init_array+0x1e>
 800a1c0:	0800db30 	.word	0x0800db30
 800a1c4:	0800db30 	.word	0x0800db30
 800a1c8:	0800db30 	.word	0x0800db30
 800a1cc:	0800db34 	.word	0x0800db34

0800a1d0 <memcpy>:
 800a1d0:	440a      	add	r2, r1
 800a1d2:	4291      	cmp	r1, r2
 800a1d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a1d8:	d100      	bne.n	800a1dc <memcpy+0xc>
 800a1da:	4770      	bx	lr
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e6:	4291      	cmp	r1, r2
 800a1e8:	d1f9      	bne.n	800a1de <memcpy+0xe>
 800a1ea:	bd10      	pop	{r4, pc}

0800a1ec <memset>:
 800a1ec:	4402      	add	r2, r0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d100      	bne.n	800a1f6 <memset+0xa>
 800a1f4:	4770      	bx	lr
 800a1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1fa:	e7f9      	b.n	800a1f0 <memset+0x4>

0800a1fc <__cvt>:
 800a1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	ec55 4b10 	vmov	r4, r5, d0
 800a204:	2d00      	cmp	r5, #0
 800a206:	460e      	mov	r6, r1
 800a208:	4619      	mov	r1, r3
 800a20a:	462b      	mov	r3, r5
 800a20c:	bfbb      	ittet	lt
 800a20e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a212:	461d      	movlt	r5, r3
 800a214:	2300      	movge	r3, #0
 800a216:	232d      	movlt	r3, #45	; 0x2d
 800a218:	700b      	strb	r3, [r1, #0]
 800a21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a220:	4691      	mov	r9, r2
 800a222:	f023 0820 	bic.w	r8, r3, #32
 800a226:	bfbc      	itt	lt
 800a228:	4622      	movlt	r2, r4
 800a22a:	4614      	movlt	r4, r2
 800a22c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a230:	d005      	beq.n	800a23e <__cvt+0x42>
 800a232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a236:	d100      	bne.n	800a23a <__cvt+0x3e>
 800a238:	3601      	adds	r6, #1
 800a23a:	2102      	movs	r1, #2
 800a23c:	e000      	b.n	800a240 <__cvt+0x44>
 800a23e:	2103      	movs	r1, #3
 800a240:	ab03      	add	r3, sp, #12
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	ab02      	add	r3, sp, #8
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	ec45 4b10 	vmov	d0, r4, r5
 800a24c:	4653      	mov	r3, sl
 800a24e:	4632      	mov	r2, r6
 800a250:	f000 fcea 	bl	800ac28 <_dtoa_r>
 800a254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a258:	4607      	mov	r7, r0
 800a25a:	d102      	bne.n	800a262 <__cvt+0x66>
 800a25c:	f019 0f01 	tst.w	r9, #1
 800a260:	d022      	beq.n	800a2a8 <__cvt+0xac>
 800a262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a266:	eb07 0906 	add.w	r9, r7, r6
 800a26a:	d110      	bne.n	800a28e <__cvt+0x92>
 800a26c:	783b      	ldrb	r3, [r7, #0]
 800a26e:	2b30      	cmp	r3, #48	; 0x30
 800a270:	d10a      	bne.n	800a288 <__cvt+0x8c>
 800a272:	2200      	movs	r2, #0
 800a274:	2300      	movs	r3, #0
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a27e:	b918      	cbnz	r0, 800a288 <__cvt+0x8c>
 800a280:	f1c6 0601 	rsb	r6, r6, #1
 800a284:	f8ca 6000 	str.w	r6, [sl]
 800a288:	f8da 3000 	ldr.w	r3, [sl]
 800a28c:	4499      	add	r9, r3
 800a28e:	2200      	movs	r2, #0
 800a290:	2300      	movs	r3, #0
 800a292:	4620      	mov	r0, r4
 800a294:	4629      	mov	r1, r5
 800a296:	f7f6 fc1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a29a:	b108      	cbz	r0, 800a2a0 <__cvt+0xa4>
 800a29c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2a0:	2230      	movs	r2, #48	; 0x30
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	454b      	cmp	r3, r9
 800a2a6:	d307      	bcc.n	800a2b8 <__cvt+0xbc>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ac:	1bdb      	subs	r3, r3, r7
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	6013      	str	r3, [r2, #0]
 800a2b2:	b004      	add	sp, #16
 800a2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b8:	1c59      	adds	r1, r3, #1
 800a2ba:	9103      	str	r1, [sp, #12]
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e7f0      	b.n	800a2a2 <__cvt+0xa6>

0800a2c0 <__exponent>:
 800a2c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	bfb8      	it	lt
 800a2c8:	4249      	neglt	r1, r1
 800a2ca:	f803 2b02 	strb.w	r2, [r3], #2
 800a2ce:	bfb4      	ite	lt
 800a2d0:	222d      	movlt	r2, #45	; 0x2d
 800a2d2:	222b      	movge	r2, #43	; 0x2b
 800a2d4:	2909      	cmp	r1, #9
 800a2d6:	7042      	strb	r2, [r0, #1]
 800a2d8:	dd2a      	ble.n	800a330 <__exponent+0x70>
 800a2da:	f10d 0407 	add.w	r4, sp, #7
 800a2de:	46a4      	mov	ip, r4
 800a2e0:	270a      	movs	r7, #10
 800a2e2:	46a6      	mov	lr, r4
 800a2e4:	460a      	mov	r2, r1
 800a2e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2ea:	fb07 1516 	mls	r5, r7, r6, r1
 800a2ee:	3530      	adds	r5, #48	; 0x30
 800a2f0:	2a63      	cmp	r2, #99	; 0x63
 800a2f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a2f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	dcf1      	bgt.n	800a2e2 <__exponent+0x22>
 800a2fe:	3130      	adds	r1, #48	; 0x30
 800a300:	f1ae 0502 	sub.w	r5, lr, #2
 800a304:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a308:	1c44      	adds	r4, r0, #1
 800a30a:	4629      	mov	r1, r5
 800a30c:	4561      	cmp	r1, ip
 800a30e:	d30a      	bcc.n	800a326 <__exponent+0x66>
 800a310:	f10d 0209 	add.w	r2, sp, #9
 800a314:	eba2 020e 	sub.w	r2, r2, lr
 800a318:	4565      	cmp	r5, ip
 800a31a:	bf88      	it	hi
 800a31c:	2200      	movhi	r2, #0
 800a31e:	4413      	add	r3, r2
 800a320:	1a18      	subs	r0, r3, r0
 800a322:	b003      	add	sp, #12
 800a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a32a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a32e:	e7ed      	b.n	800a30c <__exponent+0x4c>
 800a330:	2330      	movs	r3, #48	; 0x30
 800a332:	3130      	adds	r1, #48	; 0x30
 800a334:	7083      	strb	r3, [r0, #2]
 800a336:	70c1      	strb	r1, [r0, #3]
 800a338:	1d03      	adds	r3, r0, #4
 800a33a:	e7f1      	b.n	800a320 <__exponent+0x60>

0800a33c <_printf_float>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	ed2d 8b02 	vpush	{d8}
 800a344:	b08d      	sub	sp, #52	; 0x34
 800a346:	460c      	mov	r4, r1
 800a348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a34c:	4616      	mov	r6, r2
 800a34e:	461f      	mov	r7, r3
 800a350:	4605      	mov	r5, r0
 800a352:	f001 fa57 	bl	800b804 <_localeconv_r>
 800a356:	f8d0 a000 	ldr.w	sl, [r0]
 800a35a:	4650      	mov	r0, sl
 800a35c:	f7f5 ff40 	bl	80001e0 <strlen>
 800a360:	2300      	movs	r3, #0
 800a362:	930a      	str	r3, [sp, #40]	; 0x28
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	f8d8 3000 	ldr.w	r3, [r8]
 800a36c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a370:	3307      	adds	r3, #7
 800a372:	f023 0307 	bic.w	r3, r3, #7
 800a376:	f103 0208 	add.w	r2, r3, #8
 800a37a:	f8c8 2000 	str.w	r2, [r8]
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a38a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	f8cd 8018 	str.w	r8, [sp, #24]
 800a394:	ee08 0a10 	vmov	s16, r0
 800a398:	4b9f      	ldr	r3, [pc, #636]	; (800a618 <_printf_float+0x2dc>)
 800a39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a39e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3a2:	f7f6 fbcb 	bl	8000b3c <__aeabi_dcmpun>
 800a3a6:	bb88      	cbnz	r0, 800a40c <_printf_float+0xd0>
 800a3a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3ac:	4b9a      	ldr	r3, [pc, #616]	; (800a618 <_printf_float+0x2dc>)
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3b2:	f7f6 fba5 	bl	8000b00 <__aeabi_dcmple>
 800a3b6:	bb48      	cbnz	r0, 800a40c <_printf_float+0xd0>
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7f6 fb94 	bl	8000aec <__aeabi_dcmplt>
 800a3c4:	b110      	cbz	r0, 800a3cc <_printf_float+0x90>
 800a3c6:	232d      	movs	r3, #45	; 0x2d
 800a3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3cc:	4b93      	ldr	r3, [pc, #588]	; (800a61c <_printf_float+0x2e0>)
 800a3ce:	4894      	ldr	r0, [pc, #592]	; (800a620 <_printf_float+0x2e4>)
 800a3d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3d4:	bf94      	ite	ls
 800a3d6:	4698      	movls	r8, r3
 800a3d8:	4680      	movhi	r8, r0
 800a3da:	2303      	movs	r3, #3
 800a3dc:	6123      	str	r3, [r4, #16]
 800a3de:	9b05      	ldr	r3, [sp, #20]
 800a3e0:	f023 0204 	bic.w	r2, r3, #4
 800a3e4:	6022      	str	r2, [r4, #0]
 800a3e6:	f04f 0900 	mov.w	r9, #0
 800a3ea:	9700      	str	r7, [sp, #0]
 800a3ec:	4633      	mov	r3, r6
 800a3ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 f9d8 	bl	800a7a8 <_printf_common>
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f040 8090 	bne.w	800a51e <_printf_float+0x1e2>
 800a3fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a402:	b00d      	add	sp, #52	; 0x34
 800a404:	ecbd 8b02 	vpop	{d8}
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	4642      	mov	r2, r8
 800a40e:	464b      	mov	r3, r9
 800a410:	4640      	mov	r0, r8
 800a412:	4649      	mov	r1, r9
 800a414:	f7f6 fb92 	bl	8000b3c <__aeabi_dcmpun>
 800a418:	b140      	cbz	r0, 800a42c <_printf_float+0xf0>
 800a41a:	464b      	mov	r3, r9
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfbc      	itt	lt
 800a420:	232d      	movlt	r3, #45	; 0x2d
 800a422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a426:	487f      	ldr	r0, [pc, #508]	; (800a624 <_printf_float+0x2e8>)
 800a428:	4b7f      	ldr	r3, [pc, #508]	; (800a628 <_printf_float+0x2ec>)
 800a42a:	e7d1      	b.n	800a3d0 <_printf_float+0x94>
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a432:	9206      	str	r2, [sp, #24]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	d13f      	bne.n	800a4b8 <_printf_float+0x17c>
 800a438:	2306      	movs	r3, #6
 800a43a:	6063      	str	r3, [r4, #4]
 800a43c:	9b05      	ldr	r3, [sp, #20]
 800a43e:	6861      	ldr	r1, [r4, #4]
 800a440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a444:	2300      	movs	r3, #0
 800a446:	9303      	str	r3, [sp, #12]
 800a448:	ab0a      	add	r3, sp, #40	; 0x28
 800a44a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a44e:	ab09      	add	r3, sp, #36	; 0x24
 800a450:	ec49 8b10 	vmov	d0, r8, r9
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	6022      	str	r2, [r4, #0]
 800a458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a45c:	4628      	mov	r0, r5
 800a45e:	f7ff fecd 	bl	800a1fc <__cvt>
 800a462:	9b06      	ldr	r3, [sp, #24]
 800a464:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a466:	2b47      	cmp	r3, #71	; 0x47
 800a468:	4680      	mov	r8, r0
 800a46a:	d108      	bne.n	800a47e <_printf_float+0x142>
 800a46c:	1cc8      	adds	r0, r1, #3
 800a46e:	db02      	blt.n	800a476 <_printf_float+0x13a>
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	4299      	cmp	r1, r3
 800a474:	dd41      	ble.n	800a4fa <_printf_float+0x1be>
 800a476:	f1ab 0b02 	sub.w	fp, fp, #2
 800a47a:	fa5f fb8b 	uxtb.w	fp, fp
 800a47e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a482:	d820      	bhi.n	800a4c6 <_printf_float+0x18a>
 800a484:	3901      	subs	r1, #1
 800a486:	465a      	mov	r2, fp
 800a488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a48c:	9109      	str	r1, [sp, #36]	; 0x24
 800a48e:	f7ff ff17 	bl	800a2c0 <__exponent>
 800a492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a494:	1813      	adds	r3, r2, r0
 800a496:	2a01      	cmp	r2, #1
 800a498:	4681      	mov	r9, r0
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	dc02      	bgt.n	800a4a4 <_printf_float+0x168>
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	07d2      	lsls	r2, r2, #31
 800a4a2:	d501      	bpl.n	800a4a8 <_printf_float+0x16c>
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	6123      	str	r3, [r4, #16]
 800a4a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d09c      	beq.n	800a3ea <_printf_float+0xae>
 800a4b0:	232d      	movs	r3, #45	; 0x2d
 800a4b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b6:	e798      	b.n	800a3ea <_printf_float+0xae>
 800a4b8:	9a06      	ldr	r2, [sp, #24]
 800a4ba:	2a47      	cmp	r2, #71	; 0x47
 800a4bc:	d1be      	bne.n	800a43c <_printf_float+0x100>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1bc      	bne.n	800a43c <_printf_float+0x100>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e7b9      	b.n	800a43a <_printf_float+0xfe>
 800a4c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4ca:	d118      	bne.n	800a4fe <_printf_float+0x1c2>
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	6863      	ldr	r3, [r4, #4]
 800a4d0:	dd0b      	ble.n	800a4ea <_printf_float+0x1ae>
 800a4d2:	6121      	str	r1, [r4, #16]
 800a4d4:	b913      	cbnz	r3, 800a4dc <_printf_float+0x1a0>
 800a4d6:	6822      	ldr	r2, [r4, #0]
 800a4d8:	07d0      	lsls	r0, r2, #31
 800a4da:	d502      	bpl.n	800a4e2 <_printf_float+0x1a6>
 800a4dc:	3301      	adds	r3, #1
 800a4de:	440b      	add	r3, r1
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4e4:	f04f 0900 	mov.w	r9, #0
 800a4e8:	e7de      	b.n	800a4a8 <_printf_float+0x16c>
 800a4ea:	b913      	cbnz	r3, 800a4f2 <_printf_float+0x1b6>
 800a4ec:	6822      	ldr	r2, [r4, #0]
 800a4ee:	07d2      	lsls	r2, r2, #31
 800a4f0:	d501      	bpl.n	800a4f6 <_printf_float+0x1ba>
 800a4f2:	3302      	adds	r3, #2
 800a4f4:	e7f4      	b.n	800a4e0 <_printf_float+0x1a4>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7f2      	b.n	800a4e0 <_printf_float+0x1a4>
 800a4fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a500:	4299      	cmp	r1, r3
 800a502:	db05      	blt.n	800a510 <_printf_float+0x1d4>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	6121      	str	r1, [r4, #16]
 800a508:	07d8      	lsls	r0, r3, #31
 800a50a:	d5ea      	bpl.n	800a4e2 <_printf_float+0x1a6>
 800a50c:	1c4b      	adds	r3, r1, #1
 800a50e:	e7e7      	b.n	800a4e0 <_printf_float+0x1a4>
 800a510:	2900      	cmp	r1, #0
 800a512:	bfd4      	ite	le
 800a514:	f1c1 0202 	rsble	r2, r1, #2
 800a518:	2201      	movgt	r2, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	e7e0      	b.n	800a4e0 <_printf_float+0x1a4>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	055a      	lsls	r2, r3, #21
 800a522:	d407      	bmi.n	800a534 <_printf_float+0x1f8>
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	4642      	mov	r2, r8
 800a528:	4631      	mov	r1, r6
 800a52a:	4628      	mov	r0, r5
 800a52c:	47b8      	blx	r7
 800a52e:	3001      	adds	r0, #1
 800a530:	d12c      	bne.n	800a58c <_printf_float+0x250>
 800a532:	e764      	b.n	800a3fe <_printf_float+0xc2>
 800a534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a538:	f240 80e0 	bls.w	800a6fc <_printf_float+0x3c0>
 800a53c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a540:	2200      	movs	r2, #0
 800a542:	2300      	movs	r3, #0
 800a544:	f7f6 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d034      	beq.n	800a5b6 <_printf_float+0x27a>
 800a54c:	4a37      	ldr	r2, [pc, #220]	; (800a62c <_printf_float+0x2f0>)
 800a54e:	2301      	movs	r3, #1
 800a550:	4631      	mov	r1, r6
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	f43f af51 	beq.w	800a3fe <_printf_float+0xc2>
 800a55c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a560:	429a      	cmp	r2, r3
 800a562:	db02      	blt.n	800a56a <_printf_float+0x22e>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	07d8      	lsls	r0, r3, #31
 800a568:	d510      	bpl.n	800a58c <_printf_float+0x250>
 800a56a:	ee18 3a10 	vmov	r3, s16
 800a56e:	4652      	mov	r2, sl
 800a570:	4631      	mov	r1, r6
 800a572:	4628      	mov	r0, r5
 800a574:	47b8      	blx	r7
 800a576:	3001      	adds	r0, #1
 800a578:	f43f af41 	beq.w	800a3fe <_printf_float+0xc2>
 800a57c:	f04f 0800 	mov.w	r8, #0
 800a580:	f104 091a 	add.w	r9, r4, #26
 800a584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a586:	3b01      	subs	r3, #1
 800a588:	4543      	cmp	r3, r8
 800a58a:	dc09      	bgt.n	800a5a0 <_printf_float+0x264>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	079b      	lsls	r3, r3, #30
 800a590:	f100 8105 	bmi.w	800a79e <_printf_float+0x462>
 800a594:	68e0      	ldr	r0, [r4, #12]
 800a596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a598:	4298      	cmp	r0, r3
 800a59a:	bfb8      	it	lt
 800a59c:	4618      	movlt	r0, r3
 800a59e:	e730      	b.n	800a402 <_printf_float+0xc6>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	464a      	mov	r2, r9
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	f43f af27 	beq.w	800a3fe <_printf_float+0xc2>
 800a5b0:	f108 0801 	add.w	r8, r8, #1
 800a5b4:	e7e6      	b.n	800a584 <_printf_float+0x248>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	dc39      	bgt.n	800a630 <_printf_float+0x2f4>
 800a5bc:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <_printf_float+0x2f0>)
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4631      	mov	r1, r6
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	47b8      	blx	r7
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	f43f af19 	beq.w	800a3fe <_printf_float+0xc2>
 800a5cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	d102      	bne.n	800a5da <_printf_float+0x29e>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	07d9      	lsls	r1, r3, #31
 800a5d8:	d5d8      	bpl.n	800a58c <_printf_float+0x250>
 800a5da:	ee18 3a10 	vmov	r3, s16
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f af09 	beq.w	800a3fe <_printf_float+0xc2>
 800a5ec:	f04f 0900 	mov.w	r9, #0
 800a5f0:	f104 0a1a 	add.w	sl, r4, #26
 800a5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f6:	425b      	negs	r3, r3
 800a5f8:	454b      	cmp	r3, r9
 800a5fa:	dc01      	bgt.n	800a600 <_printf_float+0x2c4>
 800a5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fe:	e792      	b.n	800a526 <_printf_float+0x1ea>
 800a600:	2301      	movs	r3, #1
 800a602:	4652      	mov	r2, sl
 800a604:	4631      	mov	r1, r6
 800a606:	4628      	mov	r0, r5
 800a608:	47b8      	blx	r7
 800a60a:	3001      	adds	r0, #1
 800a60c:	f43f aef7 	beq.w	800a3fe <_printf_float+0xc2>
 800a610:	f109 0901 	add.w	r9, r9, #1
 800a614:	e7ee      	b.n	800a5f4 <_printf_float+0x2b8>
 800a616:	bf00      	nop
 800a618:	7fefffff 	.word	0x7fefffff
 800a61c:	0800d6e0 	.word	0x0800d6e0
 800a620:	0800d6e4 	.word	0x0800d6e4
 800a624:	0800d6ec 	.word	0x0800d6ec
 800a628:	0800d6e8 	.word	0x0800d6e8
 800a62c:	0800d6f0 	.word	0x0800d6f0
 800a630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a634:	429a      	cmp	r2, r3
 800a636:	bfa8      	it	ge
 800a638:	461a      	movge	r2, r3
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	4691      	mov	r9, r2
 800a63e:	dc37      	bgt.n	800a6b0 <_printf_float+0x374>
 800a640:	f04f 0b00 	mov.w	fp, #0
 800a644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a648:	f104 021a 	add.w	r2, r4, #26
 800a64c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	eba3 0309 	sub.w	r3, r3, r9
 800a654:	455b      	cmp	r3, fp
 800a656:	dc33      	bgt.n	800a6c0 <_printf_float+0x384>
 800a658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a65c:	429a      	cmp	r2, r3
 800a65e:	db3b      	blt.n	800a6d8 <_printf_float+0x39c>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	07da      	lsls	r2, r3, #31
 800a664:	d438      	bmi.n	800a6d8 <_printf_float+0x39c>
 800a666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a668:	9a05      	ldr	r2, [sp, #20]
 800a66a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a66c:	1a9a      	subs	r2, r3, r2
 800a66e:	eba3 0901 	sub.w	r9, r3, r1
 800a672:	4591      	cmp	r9, r2
 800a674:	bfa8      	it	ge
 800a676:	4691      	movge	r9, r2
 800a678:	f1b9 0f00 	cmp.w	r9, #0
 800a67c:	dc35      	bgt.n	800a6ea <_printf_float+0x3ae>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a686:	f104 0a1a 	add.w	sl, r4, #26
 800a68a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a68e:	1a9b      	subs	r3, r3, r2
 800a690:	eba3 0309 	sub.w	r3, r3, r9
 800a694:	4543      	cmp	r3, r8
 800a696:	f77f af79 	ble.w	800a58c <_printf_float+0x250>
 800a69a:	2301      	movs	r3, #1
 800a69c:	4652      	mov	r2, sl
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	47b8      	blx	r7
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f43f aeaa 	beq.w	800a3fe <_printf_float+0xc2>
 800a6aa:	f108 0801 	add.w	r8, r8, #1
 800a6ae:	e7ec      	b.n	800a68a <_printf_float+0x34e>
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4642      	mov	r2, r8
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	47b8      	blx	r7
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d1c0      	bne.n	800a640 <_printf_float+0x304>
 800a6be:	e69e      	b.n	800a3fe <_printf_float+0xc2>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	9205      	str	r2, [sp, #20]
 800a6c8:	47b8      	blx	r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	f43f ae97 	beq.w	800a3fe <_printf_float+0xc2>
 800a6d0:	9a05      	ldr	r2, [sp, #20]
 800a6d2:	f10b 0b01 	add.w	fp, fp, #1
 800a6d6:	e7b9      	b.n	800a64c <_printf_float+0x310>
 800a6d8:	ee18 3a10 	vmov	r3, s16
 800a6dc:	4652      	mov	r2, sl
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d1be      	bne.n	800a666 <_printf_float+0x32a>
 800a6e8:	e689      	b.n	800a3fe <_printf_float+0xc2>
 800a6ea:	9a05      	ldr	r2, [sp, #20]
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	4442      	add	r2, r8
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d1c1      	bne.n	800a67e <_printf_float+0x342>
 800a6fa:	e680      	b.n	800a3fe <_printf_float+0xc2>
 800a6fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6fe:	2a01      	cmp	r2, #1
 800a700:	dc01      	bgt.n	800a706 <_printf_float+0x3ca>
 800a702:	07db      	lsls	r3, r3, #31
 800a704:	d538      	bpl.n	800a778 <_printf_float+0x43c>
 800a706:	2301      	movs	r3, #1
 800a708:	4642      	mov	r2, r8
 800a70a:	4631      	mov	r1, r6
 800a70c:	4628      	mov	r0, r5
 800a70e:	47b8      	blx	r7
 800a710:	3001      	adds	r0, #1
 800a712:	f43f ae74 	beq.w	800a3fe <_printf_float+0xc2>
 800a716:	ee18 3a10 	vmov	r3, s16
 800a71a:	4652      	mov	r2, sl
 800a71c:	4631      	mov	r1, r6
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	f43f ae6b 	beq.w	800a3fe <_printf_float+0xc2>
 800a728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a72c:	2200      	movs	r2, #0
 800a72e:	2300      	movs	r3, #0
 800a730:	f7f6 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a734:	b9d8      	cbnz	r0, 800a76e <_printf_float+0x432>
 800a736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a738:	f108 0201 	add.w	r2, r8, #1
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	47b8      	blx	r7
 800a744:	3001      	adds	r0, #1
 800a746:	d10e      	bne.n	800a766 <_printf_float+0x42a>
 800a748:	e659      	b.n	800a3fe <_printf_float+0xc2>
 800a74a:	2301      	movs	r3, #1
 800a74c:	4652      	mov	r2, sl
 800a74e:	4631      	mov	r1, r6
 800a750:	4628      	mov	r0, r5
 800a752:	47b8      	blx	r7
 800a754:	3001      	adds	r0, #1
 800a756:	f43f ae52 	beq.w	800a3fe <_printf_float+0xc2>
 800a75a:	f108 0801 	add.w	r8, r8, #1
 800a75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a760:	3b01      	subs	r3, #1
 800a762:	4543      	cmp	r3, r8
 800a764:	dcf1      	bgt.n	800a74a <_printf_float+0x40e>
 800a766:	464b      	mov	r3, r9
 800a768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a76c:	e6dc      	b.n	800a528 <_printf_float+0x1ec>
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	f104 0a1a 	add.w	sl, r4, #26
 800a776:	e7f2      	b.n	800a75e <_printf_float+0x422>
 800a778:	2301      	movs	r3, #1
 800a77a:	4642      	mov	r2, r8
 800a77c:	e7df      	b.n	800a73e <_printf_float+0x402>
 800a77e:	2301      	movs	r3, #1
 800a780:	464a      	mov	r2, r9
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae38 	beq.w	800a3fe <_printf_float+0xc2>
 800a78e:	f108 0801 	add.w	r8, r8, #1
 800a792:	68e3      	ldr	r3, [r4, #12]
 800a794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a796:	1a5b      	subs	r3, r3, r1
 800a798:	4543      	cmp	r3, r8
 800a79a:	dcf0      	bgt.n	800a77e <_printf_float+0x442>
 800a79c:	e6fa      	b.n	800a594 <_printf_float+0x258>
 800a79e:	f04f 0800 	mov.w	r8, #0
 800a7a2:	f104 0919 	add.w	r9, r4, #25
 800a7a6:	e7f4      	b.n	800a792 <_printf_float+0x456>

0800a7a8 <_printf_common>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	688a      	ldr	r2, [r1, #8]
 800a7b2:	690b      	ldr	r3, [r1, #16]
 800a7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfb8      	it	lt
 800a7bc:	4613      	movlt	r3, r2
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_printf_common+0x26>
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0699      	lsls	r1, r3, #26
 800a7d2:	bf42      	ittt	mi
 800a7d4:	6833      	ldrmi	r3, [r6, #0]
 800a7d6:	3302      	addmi	r3, #2
 800a7d8:	6033      	strmi	r3, [r6, #0]
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	f015 0506 	ands.w	r5, r5, #6
 800a7e0:	d106      	bne.n	800a7f0 <_printf_common+0x48>
 800a7e2:	f104 0a19 	add.w	sl, r4, #25
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	6832      	ldr	r2, [r6, #0]
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	42ab      	cmp	r3, r5
 800a7ee:	dc26      	bgt.n	800a83e <_printf_common+0x96>
 800a7f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7f4:	1e13      	subs	r3, r2, #0
 800a7f6:	6822      	ldr	r2, [r4, #0]
 800a7f8:	bf18      	it	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	0692      	lsls	r2, r2, #26
 800a7fe:	d42b      	bmi.n	800a858 <_printf_common+0xb0>
 800a800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a804:	4649      	mov	r1, r9
 800a806:	4638      	mov	r0, r7
 800a808:	47c0      	blx	r8
 800a80a:	3001      	adds	r0, #1
 800a80c:	d01e      	beq.n	800a84c <_printf_common+0xa4>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	68e5      	ldr	r5, [r4, #12]
 800a812:	6832      	ldr	r2, [r6, #0]
 800a814:	f003 0306 	and.w	r3, r3, #6
 800a818:	2b04      	cmp	r3, #4
 800a81a:	bf08      	it	eq
 800a81c:	1aad      	subeq	r5, r5, r2
 800a81e:	68a3      	ldr	r3, [r4, #8]
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	bf0c      	ite	eq
 800a824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a828:	2500      	movne	r5, #0
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bfc4      	itt	gt
 800a82e:	1a9b      	subgt	r3, r3, r2
 800a830:	18ed      	addgt	r5, r5, r3
 800a832:	2600      	movs	r6, #0
 800a834:	341a      	adds	r4, #26
 800a836:	42b5      	cmp	r5, r6
 800a838:	d11a      	bne.n	800a870 <_printf_common+0xc8>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e008      	b.n	800a850 <_printf_common+0xa8>
 800a83e:	2301      	movs	r3, #1
 800a840:	4652      	mov	r2, sl
 800a842:	4649      	mov	r1, r9
 800a844:	4638      	mov	r0, r7
 800a846:	47c0      	blx	r8
 800a848:	3001      	adds	r0, #1
 800a84a:	d103      	bne.n	800a854 <_printf_common+0xac>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a854:	3501      	adds	r5, #1
 800a856:	e7c6      	b.n	800a7e6 <_printf_common+0x3e>
 800a858:	18e1      	adds	r1, r4, r3
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	2030      	movs	r0, #48	; 0x30
 800a85e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a862:	4422      	add	r2, r4
 800a864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a86c:	3302      	adds	r3, #2
 800a86e:	e7c7      	b.n	800a800 <_printf_common+0x58>
 800a870:	2301      	movs	r3, #1
 800a872:	4622      	mov	r2, r4
 800a874:	4649      	mov	r1, r9
 800a876:	4638      	mov	r0, r7
 800a878:	47c0      	blx	r8
 800a87a:	3001      	adds	r0, #1
 800a87c:	d0e6      	beq.n	800a84c <_printf_common+0xa4>
 800a87e:	3601      	adds	r6, #1
 800a880:	e7d9      	b.n	800a836 <_printf_common+0x8e>
	...

0800a884 <_printf_i>:
 800a884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	7e0f      	ldrb	r7, [r1, #24]
 800a88a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a88c:	2f78      	cmp	r7, #120	; 0x78
 800a88e:	4691      	mov	r9, r2
 800a890:	4680      	mov	r8, r0
 800a892:	460c      	mov	r4, r1
 800a894:	469a      	mov	sl, r3
 800a896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a89a:	d807      	bhi.n	800a8ac <_printf_i+0x28>
 800a89c:	2f62      	cmp	r7, #98	; 0x62
 800a89e:	d80a      	bhi.n	800a8b6 <_printf_i+0x32>
 800a8a0:	2f00      	cmp	r7, #0
 800a8a2:	f000 80d8 	beq.w	800aa56 <_printf_i+0x1d2>
 800a8a6:	2f58      	cmp	r7, #88	; 0x58
 800a8a8:	f000 80a3 	beq.w	800a9f2 <_printf_i+0x16e>
 800a8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8b4:	e03a      	b.n	800a92c <_printf_i+0xa8>
 800a8b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ba:	2b15      	cmp	r3, #21
 800a8bc:	d8f6      	bhi.n	800a8ac <_printf_i+0x28>
 800a8be:	a101      	add	r1, pc, #4	; (adr r1, 800a8c4 <_printf_i+0x40>)
 800a8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8c4:	0800a91d 	.word	0x0800a91d
 800a8c8:	0800a931 	.word	0x0800a931
 800a8cc:	0800a8ad 	.word	0x0800a8ad
 800a8d0:	0800a8ad 	.word	0x0800a8ad
 800a8d4:	0800a8ad 	.word	0x0800a8ad
 800a8d8:	0800a8ad 	.word	0x0800a8ad
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a8ad 	.word	0x0800a8ad
 800a8e4:	0800a8ad 	.word	0x0800a8ad
 800a8e8:	0800a8ad 	.word	0x0800a8ad
 800a8ec:	0800a8ad 	.word	0x0800a8ad
 800a8f0:	0800aa3d 	.word	0x0800aa3d
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800aa1f 	.word	0x0800aa1f
 800a8fc:	0800a8ad 	.word	0x0800a8ad
 800a900:	0800a8ad 	.word	0x0800a8ad
 800a904:	0800aa5f 	.word	0x0800aa5f
 800a908:	0800a8ad 	.word	0x0800a8ad
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a8ad 	.word	0x0800a8ad
 800a914:	0800a8ad 	.word	0x0800a8ad
 800a918:	0800aa27 	.word	0x0800aa27
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	602a      	str	r2, [r5, #0]
 800a924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a92c:	2301      	movs	r3, #1
 800a92e:	e0a3      	b.n	800aa78 <_printf_i+0x1f4>
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	6829      	ldr	r1, [r5, #0]
 800a934:	0606      	lsls	r6, r0, #24
 800a936:	f101 0304 	add.w	r3, r1, #4
 800a93a:	d50a      	bpl.n	800a952 <_printf_i+0xce>
 800a93c:	680e      	ldr	r6, [r1, #0]
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	2e00      	cmp	r6, #0
 800a942:	da03      	bge.n	800a94c <_printf_i+0xc8>
 800a944:	232d      	movs	r3, #45	; 0x2d
 800a946:	4276      	negs	r6, r6
 800a948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a94c:	485e      	ldr	r0, [pc, #376]	; (800aac8 <_printf_i+0x244>)
 800a94e:	230a      	movs	r3, #10
 800a950:	e019      	b.n	800a986 <_printf_i+0x102>
 800a952:	680e      	ldr	r6, [r1, #0]
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a95a:	bf18      	it	ne
 800a95c:	b236      	sxthne	r6, r6
 800a95e:	e7ef      	b.n	800a940 <_printf_i+0xbc>
 800a960:	682b      	ldr	r3, [r5, #0]
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	1d19      	adds	r1, r3, #4
 800a966:	6029      	str	r1, [r5, #0]
 800a968:	0601      	lsls	r1, r0, #24
 800a96a:	d501      	bpl.n	800a970 <_printf_i+0xec>
 800a96c:	681e      	ldr	r6, [r3, #0]
 800a96e:	e002      	b.n	800a976 <_printf_i+0xf2>
 800a970:	0646      	lsls	r6, r0, #25
 800a972:	d5fb      	bpl.n	800a96c <_printf_i+0xe8>
 800a974:	881e      	ldrh	r6, [r3, #0]
 800a976:	4854      	ldr	r0, [pc, #336]	; (800aac8 <_printf_i+0x244>)
 800a978:	2f6f      	cmp	r7, #111	; 0x6f
 800a97a:	bf0c      	ite	eq
 800a97c:	2308      	moveq	r3, #8
 800a97e:	230a      	movne	r3, #10
 800a980:	2100      	movs	r1, #0
 800a982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a986:	6865      	ldr	r5, [r4, #4]
 800a988:	60a5      	str	r5, [r4, #8]
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	bfa2      	ittt	ge
 800a98e:	6821      	ldrge	r1, [r4, #0]
 800a990:	f021 0104 	bicge.w	r1, r1, #4
 800a994:	6021      	strge	r1, [r4, #0]
 800a996:	b90e      	cbnz	r6, 800a99c <_printf_i+0x118>
 800a998:	2d00      	cmp	r5, #0
 800a99a:	d04d      	beq.n	800aa38 <_printf_i+0x1b4>
 800a99c:	4615      	mov	r5, r2
 800a99e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a9a6:	5dc7      	ldrb	r7, [r0, r7]
 800a9a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9ac:	4637      	mov	r7, r6
 800a9ae:	42bb      	cmp	r3, r7
 800a9b0:	460e      	mov	r6, r1
 800a9b2:	d9f4      	bls.n	800a99e <_printf_i+0x11a>
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d10b      	bne.n	800a9d0 <_printf_i+0x14c>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	07de      	lsls	r6, r3, #31
 800a9bc:	d508      	bpl.n	800a9d0 <_printf_i+0x14c>
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	6861      	ldr	r1, [r4, #4]
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	bfde      	ittt	le
 800a9c6:	2330      	movle	r3, #48	; 0x30
 800a9c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a9d0:	1b52      	subs	r2, r2, r5
 800a9d2:	6122      	str	r2, [r4, #16]
 800a9d4:	f8cd a000 	str.w	sl, [sp]
 800a9d8:	464b      	mov	r3, r9
 800a9da:	aa03      	add	r2, sp, #12
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4640      	mov	r0, r8
 800a9e0:	f7ff fee2 	bl	800a7a8 <_printf_common>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d14c      	bne.n	800aa82 <_printf_i+0x1fe>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9ec:	b004      	add	sp, #16
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	4835      	ldr	r0, [pc, #212]	; (800aac8 <_printf_i+0x244>)
 800a9f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9f8:	6829      	ldr	r1, [r5, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa00:	6029      	str	r1, [r5, #0]
 800aa02:	061d      	lsls	r5, r3, #24
 800aa04:	d514      	bpl.n	800aa30 <_printf_i+0x1ac>
 800aa06:	07df      	lsls	r7, r3, #31
 800aa08:	bf44      	itt	mi
 800aa0a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa0e:	6023      	strmi	r3, [r4, #0]
 800aa10:	b91e      	cbnz	r6, 800aa1a <_printf_i+0x196>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f023 0320 	bic.w	r3, r3, #32
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	e7b0      	b.n	800a980 <_printf_i+0xfc>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f043 0320 	orr.w	r3, r3, #32
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	2378      	movs	r3, #120	; 0x78
 800aa28:	4828      	ldr	r0, [pc, #160]	; (800aacc <_printf_i+0x248>)
 800aa2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa2e:	e7e3      	b.n	800a9f8 <_printf_i+0x174>
 800aa30:	0659      	lsls	r1, r3, #25
 800aa32:	bf48      	it	mi
 800aa34:	b2b6      	uxthmi	r6, r6
 800aa36:	e7e6      	b.n	800aa06 <_printf_i+0x182>
 800aa38:	4615      	mov	r5, r2
 800aa3a:	e7bb      	b.n	800a9b4 <_printf_i+0x130>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	6826      	ldr	r6, [r4, #0]
 800aa40:	6961      	ldr	r1, [r4, #20]
 800aa42:	1d18      	adds	r0, r3, #4
 800aa44:	6028      	str	r0, [r5, #0]
 800aa46:	0635      	lsls	r5, r6, #24
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	d501      	bpl.n	800aa50 <_printf_i+0x1cc>
 800aa4c:	6019      	str	r1, [r3, #0]
 800aa4e:	e002      	b.n	800aa56 <_printf_i+0x1d2>
 800aa50:	0670      	lsls	r0, r6, #25
 800aa52:	d5fb      	bpl.n	800aa4c <_printf_i+0x1c8>
 800aa54:	8019      	strh	r1, [r3, #0]
 800aa56:	2300      	movs	r3, #0
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	4615      	mov	r5, r2
 800aa5c:	e7ba      	b.n	800a9d4 <_printf_i+0x150>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	602a      	str	r2, [r5, #0]
 800aa64:	681d      	ldr	r5, [r3, #0]
 800aa66:	6862      	ldr	r2, [r4, #4]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f7f5 fbc0 	bl	80001f0 <memchr>
 800aa70:	b108      	cbz	r0, 800aa76 <_printf_i+0x1f2>
 800aa72:	1b40      	subs	r0, r0, r5
 800aa74:	6060      	str	r0, [r4, #4]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa80:	e7a8      	b.n	800a9d4 <_printf_i+0x150>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4649      	mov	r1, r9
 800aa88:	4640      	mov	r0, r8
 800aa8a:	47d0      	blx	sl
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d0ab      	beq.n	800a9e8 <_printf_i+0x164>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	079b      	lsls	r3, r3, #30
 800aa94:	d413      	bmi.n	800aabe <_printf_i+0x23a>
 800aa96:	68e0      	ldr	r0, [r4, #12]
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	4298      	cmp	r0, r3
 800aa9c:	bfb8      	it	lt
 800aa9e:	4618      	movlt	r0, r3
 800aaa0:	e7a4      	b.n	800a9ec <_printf_i+0x168>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d09b      	beq.n	800a9e8 <_printf_i+0x164>
 800aab0:	3501      	adds	r5, #1
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	9903      	ldr	r1, [sp, #12]
 800aab6:	1a5b      	subs	r3, r3, r1
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dcf2      	bgt.n	800aaa2 <_printf_i+0x21e>
 800aabc:	e7eb      	b.n	800aa96 <_printf_i+0x212>
 800aabe:	2500      	movs	r5, #0
 800aac0:	f104 0619 	add.w	r6, r4, #25
 800aac4:	e7f5      	b.n	800aab2 <_printf_i+0x22e>
 800aac6:	bf00      	nop
 800aac8:	0800d6f2 	.word	0x0800d6f2
 800aacc:	0800d703 	.word	0x0800d703

0800aad0 <siprintf>:
 800aad0:	b40e      	push	{r1, r2, r3}
 800aad2:	b500      	push	{lr}
 800aad4:	b09c      	sub	sp, #112	; 0x70
 800aad6:	ab1d      	add	r3, sp, #116	; 0x74
 800aad8:	9002      	str	r0, [sp, #8]
 800aada:	9006      	str	r0, [sp, #24]
 800aadc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aae0:	4809      	ldr	r0, [pc, #36]	; (800ab08 <siprintf+0x38>)
 800aae2:	9107      	str	r1, [sp, #28]
 800aae4:	9104      	str	r1, [sp, #16]
 800aae6:	4909      	ldr	r1, [pc, #36]	; (800ab0c <siprintf+0x3c>)
 800aae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaec:	9105      	str	r1, [sp, #20]
 800aaee:	6800      	ldr	r0, [r0, #0]
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	a902      	add	r1, sp, #8
 800aaf4:	f001 fb68 	bl	800c1c8 <_svfiprintf_r>
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	b01c      	add	sp, #112	; 0x70
 800ab00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab04:	b003      	add	sp, #12
 800ab06:	4770      	bx	lr
 800ab08:	200000fc 	.word	0x200000fc
 800ab0c:	ffff0208 	.word	0xffff0208

0800ab10 <quorem>:
 800ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	6903      	ldr	r3, [r0, #16]
 800ab16:	690c      	ldr	r4, [r1, #16]
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	f2c0 8081 	blt.w	800ac22 <quorem+0x112>
 800ab20:	3c01      	subs	r4, #1
 800ab22:	f101 0814 	add.w	r8, r1, #20
 800ab26:	f100 0514 	add.w	r5, r0, #20
 800ab2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab44:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab48:	d331      	bcc.n	800abae <quorem+0x9e>
 800ab4a:	f04f 0e00 	mov.w	lr, #0
 800ab4e:	4640      	mov	r0, r8
 800ab50:	46ac      	mov	ip, r5
 800ab52:	46f2      	mov	sl, lr
 800ab54:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab58:	b293      	uxth	r3, r2
 800ab5a:	fb06 e303 	mla	r3, r6, r3, lr
 800ab5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	ebaa 0303 	sub.w	r3, sl, r3
 800ab68:	f8dc a000 	ldr.w	sl, [ip]
 800ab6c:	0c12      	lsrs	r2, r2, #16
 800ab6e:	fa13 f38a 	uxtah	r3, r3, sl
 800ab72:	fb06 e202 	mla	r2, r6, r2, lr
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	9b00      	ldr	r3, [sp, #0]
 800ab7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab7e:	b292      	uxth	r2, r2
 800ab80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab88:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab8c:	4581      	cmp	r9, r0
 800ab8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab92:	f84c 3b04 	str.w	r3, [ip], #4
 800ab96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab9a:	d2db      	bcs.n	800ab54 <quorem+0x44>
 800ab9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800aba0:	b92b      	cbnz	r3, 800abae <quorem+0x9e>
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	3b04      	subs	r3, #4
 800aba6:	429d      	cmp	r5, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	d32e      	bcc.n	800ac0a <quorem+0xfa>
 800abac:	613c      	str	r4, [r7, #16]
 800abae:	4638      	mov	r0, r7
 800abb0:	f001 f8b6 	bl	800bd20 <__mcmp>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	db24      	blt.n	800ac02 <quorem+0xf2>
 800abb8:	3601      	adds	r6, #1
 800abba:	4628      	mov	r0, r5
 800abbc:	f04f 0c00 	mov.w	ip, #0
 800abc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800abc4:	f8d0 e000 	ldr.w	lr, [r0]
 800abc8:	b293      	uxth	r3, r2
 800abca:	ebac 0303 	sub.w	r3, ip, r3
 800abce:	0c12      	lsrs	r2, r2, #16
 800abd0:	fa13 f38e 	uxtah	r3, r3, lr
 800abd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800abd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abdc:	b29b      	uxth	r3, r3
 800abde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abe2:	45c1      	cmp	r9, r8
 800abe4:	f840 3b04 	str.w	r3, [r0], #4
 800abe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800abec:	d2e8      	bcs.n	800abc0 <quorem+0xb0>
 800abee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abf6:	b922      	cbnz	r2, 800ac02 <quorem+0xf2>
 800abf8:	3b04      	subs	r3, #4
 800abfa:	429d      	cmp	r5, r3
 800abfc:	461a      	mov	r2, r3
 800abfe:	d30a      	bcc.n	800ac16 <quorem+0x106>
 800ac00:	613c      	str	r4, [r7, #16]
 800ac02:	4630      	mov	r0, r6
 800ac04:	b003      	add	sp, #12
 800ac06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	3b04      	subs	r3, #4
 800ac0e:	2a00      	cmp	r2, #0
 800ac10:	d1cc      	bne.n	800abac <quorem+0x9c>
 800ac12:	3c01      	subs	r4, #1
 800ac14:	e7c7      	b.n	800aba6 <quorem+0x96>
 800ac16:	6812      	ldr	r2, [r2, #0]
 800ac18:	3b04      	subs	r3, #4
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	d1f0      	bne.n	800ac00 <quorem+0xf0>
 800ac1e:	3c01      	subs	r4, #1
 800ac20:	e7eb      	b.n	800abfa <quorem+0xea>
 800ac22:	2000      	movs	r0, #0
 800ac24:	e7ee      	b.n	800ac04 <quorem+0xf4>
	...

0800ac28 <_dtoa_r>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	ed2d 8b04 	vpush	{d8-d9}
 800ac30:	ec57 6b10 	vmov	r6, r7, d0
 800ac34:	b093      	sub	sp, #76	; 0x4c
 800ac36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac3c:	9106      	str	r1, [sp, #24]
 800ac3e:	ee10 aa10 	vmov	sl, s0
 800ac42:	4604      	mov	r4, r0
 800ac44:	9209      	str	r2, [sp, #36]	; 0x24
 800ac46:	930c      	str	r3, [sp, #48]	; 0x30
 800ac48:	46bb      	mov	fp, r7
 800ac4a:	b975      	cbnz	r5, 800ac6a <_dtoa_r+0x42>
 800ac4c:	2010      	movs	r0, #16
 800ac4e:	f000 fddd 	bl	800b80c <malloc>
 800ac52:	4602      	mov	r2, r0
 800ac54:	6260      	str	r0, [r4, #36]	; 0x24
 800ac56:	b920      	cbnz	r0, 800ac62 <_dtoa_r+0x3a>
 800ac58:	4ba7      	ldr	r3, [pc, #668]	; (800aef8 <_dtoa_r+0x2d0>)
 800ac5a:	21ea      	movs	r1, #234	; 0xea
 800ac5c:	48a7      	ldr	r0, [pc, #668]	; (800aefc <_dtoa_r+0x2d4>)
 800ac5e:	f001 fbc3 	bl	800c3e8 <__assert_func>
 800ac62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac66:	6005      	str	r5, [r0, #0]
 800ac68:	60c5      	str	r5, [r0, #12]
 800ac6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac6c:	6819      	ldr	r1, [r3, #0]
 800ac6e:	b151      	cbz	r1, 800ac86 <_dtoa_r+0x5e>
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	604a      	str	r2, [r1, #4]
 800ac74:	2301      	movs	r3, #1
 800ac76:	4093      	lsls	r3, r2
 800ac78:	608b      	str	r3, [r1, #8]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fe0e 	bl	800b89c <_Bfree>
 800ac80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	1e3b      	subs	r3, r7, #0
 800ac88:	bfaa      	itet	ge
 800ac8a:	2300      	movge	r3, #0
 800ac8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac90:	f8c8 3000 	strge.w	r3, [r8]
 800ac94:	4b9a      	ldr	r3, [pc, #616]	; (800af00 <_dtoa_r+0x2d8>)
 800ac96:	bfbc      	itt	lt
 800ac98:	2201      	movlt	r2, #1
 800ac9a:	f8c8 2000 	strlt.w	r2, [r8]
 800ac9e:	ea33 030b 	bics.w	r3, r3, fp
 800aca2:	d11b      	bne.n	800acdc <_dtoa_r+0xb4>
 800aca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aca6:	f242 730f 	movw	r3, #9999	; 0x270f
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acb0:	4333      	orrs	r3, r6
 800acb2:	f000 8592 	beq.w	800b7da <_dtoa_r+0xbb2>
 800acb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acb8:	b963      	cbnz	r3, 800acd4 <_dtoa_r+0xac>
 800acba:	4b92      	ldr	r3, [pc, #584]	; (800af04 <_dtoa_r+0x2dc>)
 800acbc:	e022      	b.n	800ad04 <_dtoa_r+0xdc>
 800acbe:	4b92      	ldr	r3, [pc, #584]	; (800af08 <_dtoa_r+0x2e0>)
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	3308      	adds	r3, #8
 800acc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	9801      	ldr	r0, [sp, #4]
 800acca:	b013      	add	sp, #76	; 0x4c
 800accc:	ecbd 8b04 	vpop	{d8-d9}
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	4b8b      	ldr	r3, [pc, #556]	; (800af04 <_dtoa_r+0x2dc>)
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	3303      	adds	r3, #3
 800acda:	e7f3      	b.n	800acc4 <_dtoa_r+0x9c>
 800acdc:	2200      	movs	r2, #0
 800acde:	2300      	movs	r3, #0
 800ace0:	4650      	mov	r0, sl
 800ace2:	4659      	mov	r1, fp
 800ace4:	f7f5 fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ace8:	ec4b ab19 	vmov	d9, sl, fp
 800acec:	4680      	mov	r8, r0
 800acee:	b158      	cbz	r0, 800ad08 <_dtoa_r+0xe0>
 800acf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acf2:	2301      	movs	r3, #1
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 856b 	beq.w	800b7d4 <_dtoa_r+0xbac>
 800acfe:	4883      	ldr	r0, [pc, #524]	; (800af0c <_dtoa_r+0x2e4>)
 800ad00:	6018      	str	r0, [r3, #0]
 800ad02:	1e43      	subs	r3, r0, #1
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	e7df      	b.n	800acc8 <_dtoa_r+0xa0>
 800ad08:	ec4b ab10 	vmov	d0, sl, fp
 800ad0c:	aa10      	add	r2, sp, #64	; 0x40
 800ad0e:	a911      	add	r1, sp, #68	; 0x44
 800ad10:	4620      	mov	r0, r4
 800ad12:	f001 f8ab 	bl	800be6c <__d2b>
 800ad16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad1a:	ee08 0a10 	vmov	s16, r0
 800ad1e:	2d00      	cmp	r5, #0
 800ad20:	f000 8084 	beq.w	800ae2c <_dtoa_r+0x204>
 800ad24:	ee19 3a90 	vmov	r3, s19
 800ad28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad30:	4656      	mov	r6, sl
 800ad32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad3e:	4b74      	ldr	r3, [pc, #464]	; (800af10 <_dtoa_r+0x2e8>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	4630      	mov	r0, r6
 800ad44:	4639      	mov	r1, r7
 800ad46:	f7f5 faa7 	bl	8000298 <__aeabi_dsub>
 800ad4a:	a365      	add	r3, pc, #404	; (adr r3, 800aee0 <_dtoa_r+0x2b8>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f7f5 fc5a 	bl	8000608 <__aeabi_dmul>
 800ad54:	a364      	add	r3, pc, #400	; (adr r3, 800aee8 <_dtoa_r+0x2c0>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7f5 fa9f 	bl	800029c <__adddf3>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	4628      	mov	r0, r5
 800ad62:	460f      	mov	r7, r1
 800ad64:	f7f5 fbe6 	bl	8000534 <__aeabi_i2d>
 800ad68:	a361      	add	r3, pc, #388	; (adr r3, 800aef0 <_dtoa_r+0x2c8>)
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	f7f5 fc4b 	bl	8000608 <__aeabi_dmul>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	f7f5 fa8f 	bl	800029c <__adddf3>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	f7f5 fef1 	bl	8000b68 <__aeabi_d2iz>
 800ad86:	2200      	movs	r2, #0
 800ad88:	9000      	str	r0, [sp, #0]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	4639      	mov	r1, r7
 800ad90:	f7f5 feac 	bl	8000aec <__aeabi_dcmplt>
 800ad94:	b150      	cbz	r0, 800adac <_dtoa_r+0x184>
 800ad96:	9800      	ldr	r0, [sp, #0]
 800ad98:	f7f5 fbcc 	bl	8000534 <__aeabi_i2d>
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	463b      	mov	r3, r7
 800ada0:	f7f5 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ada4:	b910      	cbnz	r0, 800adac <_dtoa_r+0x184>
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	2b16      	cmp	r3, #22
 800adb0:	d85a      	bhi.n	800ae68 <_dtoa_r+0x240>
 800adb2:	9a00      	ldr	r2, [sp, #0]
 800adb4:	4b57      	ldr	r3, [pc, #348]	; (800af14 <_dtoa_r+0x2ec>)
 800adb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	ec51 0b19 	vmov	r0, r1, d9
 800adc2:	f7f5 fe93 	bl	8000aec <__aeabi_dcmplt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d050      	beq.n	800ae6c <_dtoa_r+0x244>
 800adca:	9b00      	ldr	r3, [sp, #0]
 800adcc:	3b01      	subs	r3, #1
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2300      	movs	r3, #0
 800add2:	930b      	str	r3, [sp, #44]	; 0x2c
 800add4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800add6:	1b5d      	subs	r5, r3, r5
 800add8:	1e6b      	subs	r3, r5, #1
 800adda:	9305      	str	r3, [sp, #20]
 800addc:	bf45      	ittet	mi
 800adde:	f1c5 0301 	rsbmi	r3, r5, #1
 800ade2:	9304      	strmi	r3, [sp, #16]
 800ade4:	2300      	movpl	r3, #0
 800ade6:	2300      	movmi	r3, #0
 800ade8:	bf4c      	ite	mi
 800adea:	9305      	strmi	r3, [sp, #20]
 800adec:	9304      	strpl	r3, [sp, #16]
 800adee:	9b00      	ldr	r3, [sp, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	db3d      	blt.n	800ae70 <_dtoa_r+0x248>
 800adf4:	9b05      	ldr	r3, [sp, #20]
 800adf6:	9a00      	ldr	r2, [sp, #0]
 800adf8:	920a      	str	r2, [sp, #40]	; 0x28
 800adfa:	4413      	add	r3, r2
 800adfc:	9305      	str	r3, [sp, #20]
 800adfe:	2300      	movs	r3, #0
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	9b06      	ldr	r3, [sp, #24]
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	f200 8089 	bhi.w	800af1c <_dtoa_r+0x2f4>
 800ae0a:	2b05      	cmp	r3, #5
 800ae0c:	bfc4      	itt	gt
 800ae0e:	3b04      	subgt	r3, #4
 800ae10:	9306      	strgt	r3, [sp, #24]
 800ae12:	9b06      	ldr	r3, [sp, #24]
 800ae14:	f1a3 0302 	sub.w	r3, r3, #2
 800ae18:	bfcc      	ite	gt
 800ae1a:	2500      	movgt	r5, #0
 800ae1c:	2501      	movle	r5, #1
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	f200 8087 	bhi.w	800af32 <_dtoa_r+0x30a>
 800ae24:	e8df f003 	tbb	[pc, r3]
 800ae28:	59383a2d 	.word	0x59383a2d
 800ae2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae30:	441d      	add	r5, r3
 800ae32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	bfc1      	itttt	gt
 800ae3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae42:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae4a:	bfda      	itte	le
 800ae4c:	f1c3 0320 	rsble	r3, r3, #32
 800ae50:	fa06 f003 	lslle.w	r0, r6, r3
 800ae54:	4318      	orrgt	r0, r3
 800ae56:	f7f5 fb5d 	bl	8000514 <__aeabi_ui2d>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae62:	3d01      	subs	r5, #1
 800ae64:	930e      	str	r3, [sp, #56]	; 0x38
 800ae66:	e76a      	b.n	800ad3e <_dtoa_r+0x116>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e7b2      	b.n	800add2 <_dtoa_r+0x1aa>
 800ae6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae6e:	e7b1      	b.n	800add4 <_dtoa_r+0x1ac>
 800ae70:	9b04      	ldr	r3, [sp, #16]
 800ae72:	9a00      	ldr	r2, [sp, #0]
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	4253      	negs	r3, r2
 800ae7a:	9307      	str	r3, [sp, #28]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae80:	e7bf      	b.n	800ae02 <_dtoa_r+0x1da>
 800ae82:	2300      	movs	r3, #0
 800ae84:	9308      	str	r3, [sp, #32]
 800ae86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dc55      	bgt.n	800af38 <_dtoa_r+0x310>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae92:	461a      	mov	r2, r3
 800ae94:	9209      	str	r2, [sp, #36]	; 0x24
 800ae96:	e00c      	b.n	800aeb2 <_dtoa_r+0x28a>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e7f3      	b.n	800ae84 <_dtoa_r+0x25c>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	4413      	add	r3, r2
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	9303      	str	r3, [sp, #12]
 800aeae:	bfb8      	it	lt
 800aeb0:	2301      	movlt	r3, #1
 800aeb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	6042      	str	r2, [r0, #4]
 800aeb8:	2204      	movs	r2, #4
 800aeba:	f102 0614 	add.w	r6, r2, #20
 800aebe:	429e      	cmp	r6, r3
 800aec0:	6841      	ldr	r1, [r0, #4]
 800aec2:	d93d      	bls.n	800af40 <_dtoa_r+0x318>
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fca9 	bl	800b81c <_Balloc>
 800aeca:	9001      	str	r0, [sp, #4]
 800aecc:	2800      	cmp	r0, #0
 800aece:	d13b      	bne.n	800af48 <_dtoa_r+0x320>
 800aed0:	4b11      	ldr	r3, [pc, #68]	; (800af18 <_dtoa_r+0x2f0>)
 800aed2:	4602      	mov	r2, r0
 800aed4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aed8:	e6c0      	b.n	800ac5c <_dtoa_r+0x34>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e7df      	b.n	800ae9e <_dtoa_r+0x276>
 800aede:	bf00      	nop
 800aee0:	636f4361 	.word	0x636f4361
 800aee4:	3fd287a7 	.word	0x3fd287a7
 800aee8:	8b60c8b3 	.word	0x8b60c8b3
 800aeec:	3fc68a28 	.word	0x3fc68a28
 800aef0:	509f79fb 	.word	0x509f79fb
 800aef4:	3fd34413 	.word	0x3fd34413
 800aef8:	0800d721 	.word	0x0800d721
 800aefc:	0800d738 	.word	0x0800d738
 800af00:	7ff00000 	.word	0x7ff00000
 800af04:	0800d71d 	.word	0x0800d71d
 800af08:	0800d714 	.word	0x0800d714
 800af0c:	0800d6f1 	.word	0x0800d6f1
 800af10:	3ff80000 	.word	0x3ff80000
 800af14:	0800d828 	.word	0x0800d828
 800af18:	0800d793 	.word	0x0800d793
 800af1c:	2501      	movs	r5, #1
 800af1e:	2300      	movs	r3, #0
 800af20:	9306      	str	r3, [sp, #24]
 800af22:	9508      	str	r5, [sp, #32]
 800af24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af2c:	2200      	movs	r2, #0
 800af2e:	2312      	movs	r3, #18
 800af30:	e7b0      	b.n	800ae94 <_dtoa_r+0x26c>
 800af32:	2301      	movs	r3, #1
 800af34:	9308      	str	r3, [sp, #32]
 800af36:	e7f5      	b.n	800af24 <_dtoa_r+0x2fc>
 800af38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af3e:	e7b8      	b.n	800aeb2 <_dtoa_r+0x28a>
 800af40:	3101      	adds	r1, #1
 800af42:	6041      	str	r1, [r0, #4]
 800af44:	0052      	lsls	r2, r2, #1
 800af46:	e7b8      	b.n	800aeba <_dtoa_r+0x292>
 800af48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af4a:	9a01      	ldr	r2, [sp, #4]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	2b0e      	cmp	r3, #14
 800af52:	f200 809d 	bhi.w	800b090 <_dtoa_r+0x468>
 800af56:	2d00      	cmp	r5, #0
 800af58:	f000 809a 	beq.w	800b090 <_dtoa_r+0x468>
 800af5c:	9b00      	ldr	r3, [sp, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dd32      	ble.n	800afc8 <_dtoa_r+0x3a0>
 800af62:	4ab7      	ldr	r2, [pc, #732]	; (800b240 <_dtoa_r+0x618>)
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af70:	9b00      	ldr	r3, [sp, #0]
 800af72:	05d8      	lsls	r0, r3, #23
 800af74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af78:	d516      	bpl.n	800afa8 <_dtoa_r+0x380>
 800af7a:	4bb2      	ldr	r3, [pc, #712]	; (800b244 <_dtoa_r+0x61c>)
 800af7c:	ec51 0b19 	vmov	r0, r1, d9
 800af80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af84:	f7f5 fc6a 	bl	800085c <__aeabi_ddiv>
 800af88:	f007 070f 	and.w	r7, r7, #15
 800af8c:	4682      	mov	sl, r0
 800af8e:	468b      	mov	fp, r1
 800af90:	2503      	movs	r5, #3
 800af92:	4eac      	ldr	r6, [pc, #688]	; (800b244 <_dtoa_r+0x61c>)
 800af94:	b957      	cbnz	r7, 800afac <_dtoa_r+0x384>
 800af96:	4642      	mov	r2, r8
 800af98:	464b      	mov	r3, r9
 800af9a:	4650      	mov	r0, sl
 800af9c:	4659      	mov	r1, fp
 800af9e:	f7f5 fc5d 	bl	800085c <__aeabi_ddiv>
 800afa2:	4682      	mov	sl, r0
 800afa4:	468b      	mov	fp, r1
 800afa6:	e028      	b.n	800affa <_dtoa_r+0x3d2>
 800afa8:	2502      	movs	r5, #2
 800afaa:	e7f2      	b.n	800af92 <_dtoa_r+0x36a>
 800afac:	07f9      	lsls	r1, r7, #31
 800afae:	d508      	bpl.n	800afc2 <_dtoa_r+0x39a>
 800afb0:	4640      	mov	r0, r8
 800afb2:	4649      	mov	r1, r9
 800afb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afb8:	f7f5 fb26 	bl	8000608 <__aeabi_dmul>
 800afbc:	3501      	adds	r5, #1
 800afbe:	4680      	mov	r8, r0
 800afc0:	4689      	mov	r9, r1
 800afc2:	107f      	asrs	r7, r7, #1
 800afc4:	3608      	adds	r6, #8
 800afc6:	e7e5      	b.n	800af94 <_dtoa_r+0x36c>
 800afc8:	f000 809b 	beq.w	800b102 <_dtoa_r+0x4da>
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	4f9d      	ldr	r7, [pc, #628]	; (800b244 <_dtoa_r+0x61c>)
 800afd0:	425e      	negs	r6, r3
 800afd2:	4b9b      	ldr	r3, [pc, #620]	; (800b240 <_dtoa_r+0x618>)
 800afd4:	f006 020f 	and.w	r2, r6, #15
 800afd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	ec51 0b19 	vmov	r0, r1, d9
 800afe4:	f7f5 fb10 	bl	8000608 <__aeabi_dmul>
 800afe8:	1136      	asrs	r6, r6, #4
 800afea:	4682      	mov	sl, r0
 800afec:	468b      	mov	fp, r1
 800afee:	2300      	movs	r3, #0
 800aff0:	2502      	movs	r5, #2
 800aff2:	2e00      	cmp	r6, #0
 800aff4:	d17a      	bne.n	800b0ec <_dtoa_r+0x4c4>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1d3      	bne.n	800afa2 <_dtoa_r+0x37a>
 800affa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8082 	beq.w	800b106 <_dtoa_r+0x4de>
 800b002:	4b91      	ldr	r3, [pc, #580]	; (800b248 <_dtoa_r+0x620>)
 800b004:	2200      	movs	r2, #0
 800b006:	4650      	mov	r0, sl
 800b008:	4659      	mov	r1, fp
 800b00a:	f7f5 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d079      	beq.n	800b106 <_dtoa_r+0x4de>
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d076      	beq.n	800b106 <_dtoa_r+0x4de>
 800b018:	9b02      	ldr	r3, [sp, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dd36      	ble.n	800b08c <_dtoa_r+0x464>
 800b01e:	9b00      	ldr	r3, [sp, #0]
 800b020:	4650      	mov	r0, sl
 800b022:	4659      	mov	r1, fp
 800b024:	1e5f      	subs	r7, r3, #1
 800b026:	2200      	movs	r2, #0
 800b028:	4b88      	ldr	r3, [pc, #544]	; (800b24c <_dtoa_r+0x624>)
 800b02a:	f7f5 faed 	bl	8000608 <__aeabi_dmul>
 800b02e:	9e02      	ldr	r6, [sp, #8]
 800b030:	4682      	mov	sl, r0
 800b032:	468b      	mov	fp, r1
 800b034:	3501      	adds	r5, #1
 800b036:	4628      	mov	r0, r5
 800b038:	f7f5 fa7c 	bl	8000534 <__aeabi_i2d>
 800b03c:	4652      	mov	r2, sl
 800b03e:	465b      	mov	r3, fp
 800b040:	f7f5 fae2 	bl	8000608 <__aeabi_dmul>
 800b044:	4b82      	ldr	r3, [pc, #520]	; (800b250 <_dtoa_r+0x628>)
 800b046:	2200      	movs	r2, #0
 800b048:	f7f5 f928 	bl	800029c <__adddf3>
 800b04c:	46d0      	mov	r8, sl
 800b04e:	46d9      	mov	r9, fp
 800b050:	4682      	mov	sl, r0
 800b052:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b056:	2e00      	cmp	r6, #0
 800b058:	d158      	bne.n	800b10c <_dtoa_r+0x4e4>
 800b05a:	4b7e      	ldr	r3, [pc, #504]	; (800b254 <_dtoa_r+0x62c>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4640      	mov	r0, r8
 800b060:	4649      	mov	r1, r9
 800b062:	f7f5 f919 	bl	8000298 <__aeabi_dsub>
 800b066:	4652      	mov	r2, sl
 800b068:	465b      	mov	r3, fp
 800b06a:	4680      	mov	r8, r0
 800b06c:	4689      	mov	r9, r1
 800b06e:	f7f5 fd5b 	bl	8000b28 <__aeabi_dcmpgt>
 800b072:	2800      	cmp	r0, #0
 800b074:	f040 8295 	bne.w	800b5a2 <_dtoa_r+0x97a>
 800b078:	4652      	mov	r2, sl
 800b07a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 fd33 	bl	8000aec <__aeabi_dcmplt>
 800b086:	2800      	cmp	r0, #0
 800b088:	f040 8289 	bne.w	800b59e <_dtoa_r+0x976>
 800b08c:	ec5b ab19 	vmov	sl, fp, d9
 800b090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b092:	2b00      	cmp	r3, #0
 800b094:	f2c0 8148 	blt.w	800b328 <_dtoa_r+0x700>
 800b098:	9a00      	ldr	r2, [sp, #0]
 800b09a:	2a0e      	cmp	r2, #14
 800b09c:	f300 8144 	bgt.w	800b328 <_dtoa_r+0x700>
 800b0a0:	4b67      	ldr	r3, [pc, #412]	; (800b240 <_dtoa_r+0x618>)
 800b0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f280 80d5 	bge.w	800b25c <_dtoa_r+0x634>
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f300 80d1 	bgt.w	800b25c <_dtoa_r+0x634>
 800b0ba:	f040 826f 	bne.w	800b59c <_dtoa_r+0x974>
 800b0be:	4b65      	ldr	r3, [pc, #404]	; (800b254 <_dtoa_r+0x62c>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	f7f5 fa9f 	bl	8000608 <__aeabi_dmul>
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	465b      	mov	r3, fp
 800b0ce:	f7f5 fd21 	bl	8000b14 <__aeabi_dcmpge>
 800b0d2:	9e03      	ldr	r6, [sp, #12]
 800b0d4:	4637      	mov	r7, r6
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f040 8245 	bne.w	800b566 <_dtoa_r+0x93e>
 800b0dc:	9d01      	ldr	r5, [sp, #4]
 800b0de:	2331      	movs	r3, #49	; 0x31
 800b0e0:	f805 3b01 	strb.w	r3, [r5], #1
 800b0e4:	9b00      	ldr	r3, [sp, #0]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	e240      	b.n	800b56e <_dtoa_r+0x946>
 800b0ec:	07f2      	lsls	r2, r6, #31
 800b0ee:	d505      	bpl.n	800b0fc <_dtoa_r+0x4d4>
 800b0f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f4:	f7f5 fa88 	bl	8000608 <__aeabi_dmul>
 800b0f8:	3501      	adds	r5, #1
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	1076      	asrs	r6, r6, #1
 800b0fe:	3708      	adds	r7, #8
 800b100:	e777      	b.n	800aff2 <_dtoa_r+0x3ca>
 800b102:	2502      	movs	r5, #2
 800b104:	e779      	b.n	800affa <_dtoa_r+0x3d2>
 800b106:	9f00      	ldr	r7, [sp, #0]
 800b108:	9e03      	ldr	r6, [sp, #12]
 800b10a:	e794      	b.n	800b036 <_dtoa_r+0x40e>
 800b10c:	9901      	ldr	r1, [sp, #4]
 800b10e:	4b4c      	ldr	r3, [pc, #304]	; (800b240 <_dtoa_r+0x618>)
 800b110:	4431      	add	r1, r6
 800b112:	910d      	str	r1, [sp, #52]	; 0x34
 800b114:	9908      	ldr	r1, [sp, #32]
 800b116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b11a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b11e:	2900      	cmp	r1, #0
 800b120:	d043      	beq.n	800b1aa <_dtoa_r+0x582>
 800b122:	494d      	ldr	r1, [pc, #308]	; (800b258 <_dtoa_r+0x630>)
 800b124:	2000      	movs	r0, #0
 800b126:	f7f5 fb99 	bl	800085c <__aeabi_ddiv>
 800b12a:	4652      	mov	r2, sl
 800b12c:	465b      	mov	r3, fp
 800b12e:	f7f5 f8b3 	bl	8000298 <__aeabi_dsub>
 800b132:	9d01      	ldr	r5, [sp, #4]
 800b134:	4682      	mov	sl, r0
 800b136:	468b      	mov	fp, r1
 800b138:	4649      	mov	r1, r9
 800b13a:	4640      	mov	r0, r8
 800b13c:	f7f5 fd14 	bl	8000b68 <__aeabi_d2iz>
 800b140:	4606      	mov	r6, r0
 800b142:	f7f5 f9f7 	bl	8000534 <__aeabi_i2d>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	f7f5 f8a3 	bl	8000298 <__aeabi_dsub>
 800b152:	3630      	adds	r6, #48	; 0x30
 800b154:	f805 6b01 	strb.w	r6, [r5], #1
 800b158:	4652      	mov	r2, sl
 800b15a:	465b      	mov	r3, fp
 800b15c:	4680      	mov	r8, r0
 800b15e:	4689      	mov	r9, r1
 800b160:	f7f5 fcc4 	bl	8000aec <__aeabi_dcmplt>
 800b164:	2800      	cmp	r0, #0
 800b166:	d163      	bne.n	800b230 <_dtoa_r+0x608>
 800b168:	4642      	mov	r2, r8
 800b16a:	464b      	mov	r3, r9
 800b16c:	4936      	ldr	r1, [pc, #216]	; (800b248 <_dtoa_r+0x620>)
 800b16e:	2000      	movs	r0, #0
 800b170:	f7f5 f892 	bl	8000298 <__aeabi_dsub>
 800b174:	4652      	mov	r2, sl
 800b176:	465b      	mov	r3, fp
 800b178:	f7f5 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f040 80b5 	bne.w	800b2ec <_dtoa_r+0x6c4>
 800b182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b184:	429d      	cmp	r5, r3
 800b186:	d081      	beq.n	800b08c <_dtoa_r+0x464>
 800b188:	4b30      	ldr	r3, [pc, #192]	; (800b24c <_dtoa_r+0x624>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	4650      	mov	r0, sl
 800b18e:	4659      	mov	r1, fp
 800b190:	f7f5 fa3a 	bl	8000608 <__aeabi_dmul>
 800b194:	4b2d      	ldr	r3, [pc, #180]	; (800b24c <_dtoa_r+0x624>)
 800b196:	4682      	mov	sl, r0
 800b198:	468b      	mov	fp, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f7f5 fa32 	bl	8000608 <__aeabi_dmul>
 800b1a4:	4680      	mov	r8, r0
 800b1a6:	4689      	mov	r9, r1
 800b1a8:	e7c6      	b.n	800b138 <_dtoa_r+0x510>
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	4659      	mov	r1, fp
 800b1ae:	f7f5 fa2b 	bl	8000608 <__aeabi_dmul>
 800b1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b4:	9d01      	ldr	r5, [sp, #4]
 800b1b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	468b      	mov	fp, r1
 800b1bc:	4649      	mov	r1, r9
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f7f5 fcd2 	bl	8000b68 <__aeabi_d2iz>
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	f7f5 f9b5 	bl	8000534 <__aeabi_i2d>
 800b1ca:	3630      	adds	r6, #48	; 0x30
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	f7f5 f860 	bl	8000298 <__aeabi_dsub>
 800b1d8:	f805 6b01 	strb.w	r6, [r5], #1
 800b1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1de:	429d      	cmp	r5, r3
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	4689      	mov	r9, r1
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	d124      	bne.n	800b234 <_dtoa_r+0x60c>
 800b1ea:	4b1b      	ldr	r3, [pc, #108]	; (800b258 <_dtoa_r+0x630>)
 800b1ec:	4650      	mov	r0, sl
 800b1ee:	4659      	mov	r1, fp
 800b1f0:	f7f5 f854 	bl	800029c <__adddf3>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	f7f5 fc94 	bl	8000b28 <__aeabi_dcmpgt>
 800b200:	2800      	cmp	r0, #0
 800b202:	d173      	bne.n	800b2ec <_dtoa_r+0x6c4>
 800b204:	4652      	mov	r2, sl
 800b206:	465b      	mov	r3, fp
 800b208:	4913      	ldr	r1, [pc, #76]	; (800b258 <_dtoa_r+0x630>)
 800b20a:	2000      	movs	r0, #0
 800b20c:	f7f5 f844 	bl	8000298 <__aeabi_dsub>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 fc68 	bl	8000aec <__aeabi_dcmplt>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f43f af35 	beq.w	800b08c <_dtoa_r+0x464>
 800b222:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b224:	1e6b      	subs	r3, r5, #1
 800b226:	930f      	str	r3, [sp, #60]	; 0x3c
 800b228:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b22c:	2b30      	cmp	r3, #48	; 0x30
 800b22e:	d0f8      	beq.n	800b222 <_dtoa_r+0x5fa>
 800b230:	9700      	str	r7, [sp, #0]
 800b232:	e049      	b.n	800b2c8 <_dtoa_r+0x6a0>
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_dtoa_r+0x624>)
 800b236:	f7f5 f9e7 	bl	8000608 <__aeabi_dmul>
 800b23a:	4680      	mov	r8, r0
 800b23c:	4689      	mov	r9, r1
 800b23e:	e7bd      	b.n	800b1bc <_dtoa_r+0x594>
 800b240:	0800d828 	.word	0x0800d828
 800b244:	0800d800 	.word	0x0800d800
 800b248:	3ff00000 	.word	0x3ff00000
 800b24c:	40240000 	.word	0x40240000
 800b250:	401c0000 	.word	0x401c0000
 800b254:	40140000 	.word	0x40140000
 800b258:	3fe00000 	.word	0x3fe00000
 800b25c:	9d01      	ldr	r5, [sp, #4]
 800b25e:	4656      	mov	r6, sl
 800b260:	465f      	mov	r7, fp
 800b262:	4642      	mov	r2, r8
 800b264:	464b      	mov	r3, r9
 800b266:	4630      	mov	r0, r6
 800b268:	4639      	mov	r1, r7
 800b26a:	f7f5 faf7 	bl	800085c <__aeabi_ddiv>
 800b26e:	f7f5 fc7b 	bl	8000b68 <__aeabi_d2iz>
 800b272:	4682      	mov	sl, r0
 800b274:	f7f5 f95e 	bl	8000534 <__aeabi_i2d>
 800b278:	4642      	mov	r2, r8
 800b27a:	464b      	mov	r3, r9
 800b27c:	f7f5 f9c4 	bl	8000608 <__aeabi_dmul>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4630      	mov	r0, r6
 800b286:	4639      	mov	r1, r7
 800b288:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b28c:	f7f5 f804 	bl	8000298 <__aeabi_dsub>
 800b290:	f805 6b01 	strb.w	r6, [r5], #1
 800b294:	9e01      	ldr	r6, [sp, #4]
 800b296:	9f03      	ldr	r7, [sp, #12]
 800b298:	1bae      	subs	r6, r5, r6
 800b29a:	42b7      	cmp	r7, r6
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	d135      	bne.n	800b30e <_dtoa_r+0x6e6>
 800b2a2:	f7f4 fffb 	bl	800029c <__adddf3>
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	f7f5 fc3b 	bl	8000b28 <__aeabi_dcmpgt>
 800b2b2:	b9d0      	cbnz	r0, 800b2ea <_dtoa_r+0x6c2>
 800b2b4:	4642      	mov	r2, r8
 800b2b6:	464b      	mov	r3, r9
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f5 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2c0:	b110      	cbz	r0, 800b2c8 <_dtoa_r+0x6a0>
 800b2c2:	f01a 0f01 	tst.w	sl, #1
 800b2c6:	d110      	bne.n	800b2ea <_dtoa_r+0x6c2>
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	ee18 1a10 	vmov	r1, s16
 800b2ce:	f000 fae5 	bl	800b89c <_Bfree>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9800      	ldr	r0, [sp, #0]
 800b2d6:	702b      	strb	r3, [r5, #0]
 800b2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2da:	3001      	adds	r0, #1
 800b2dc:	6018      	str	r0, [r3, #0]
 800b2de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f43f acf1 	beq.w	800acc8 <_dtoa_r+0xa0>
 800b2e6:	601d      	str	r5, [r3, #0]
 800b2e8:	e4ee      	b.n	800acc8 <_dtoa_r+0xa0>
 800b2ea:	9f00      	ldr	r7, [sp, #0]
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	461d      	mov	r5, r3
 800b2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2f4:	2a39      	cmp	r2, #57	; 0x39
 800b2f6:	d106      	bne.n	800b306 <_dtoa_r+0x6de>
 800b2f8:	9a01      	ldr	r2, [sp, #4]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d1f7      	bne.n	800b2ee <_dtoa_r+0x6c6>
 800b2fe:	9901      	ldr	r1, [sp, #4]
 800b300:	2230      	movs	r2, #48	; 0x30
 800b302:	3701      	adds	r7, #1
 800b304:	700a      	strb	r2, [r1, #0]
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	3201      	adds	r2, #1
 800b30a:	701a      	strb	r2, [r3, #0]
 800b30c:	e790      	b.n	800b230 <_dtoa_r+0x608>
 800b30e:	4ba6      	ldr	r3, [pc, #664]	; (800b5a8 <_dtoa_r+0x980>)
 800b310:	2200      	movs	r2, #0
 800b312:	f7f5 f979 	bl	8000608 <__aeabi_dmul>
 800b316:	2200      	movs	r2, #0
 800b318:	2300      	movs	r3, #0
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	f7f5 fbdb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b322:	2800      	cmp	r0, #0
 800b324:	d09d      	beq.n	800b262 <_dtoa_r+0x63a>
 800b326:	e7cf      	b.n	800b2c8 <_dtoa_r+0x6a0>
 800b328:	9a08      	ldr	r2, [sp, #32]
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	f000 80d7 	beq.w	800b4de <_dtoa_r+0x8b6>
 800b330:	9a06      	ldr	r2, [sp, #24]
 800b332:	2a01      	cmp	r2, #1
 800b334:	f300 80ba 	bgt.w	800b4ac <_dtoa_r+0x884>
 800b338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	f000 80b2 	beq.w	800b4a4 <_dtoa_r+0x87c>
 800b340:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b344:	9e07      	ldr	r6, [sp, #28]
 800b346:	9d04      	ldr	r5, [sp, #16]
 800b348:	9a04      	ldr	r2, [sp, #16]
 800b34a:	441a      	add	r2, r3
 800b34c:	9204      	str	r2, [sp, #16]
 800b34e:	9a05      	ldr	r2, [sp, #20]
 800b350:	2101      	movs	r1, #1
 800b352:	441a      	add	r2, r3
 800b354:	4620      	mov	r0, r4
 800b356:	9205      	str	r2, [sp, #20]
 800b358:	f000 fb58 	bl	800ba0c <__i2b>
 800b35c:	4607      	mov	r7, r0
 800b35e:	2d00      	cmp	r5, #0
 800b360:	dd0c      	ble.n	800b37c <_dtoa_r+0x754>
 800b362:	9b05      	ldr	r3, [sp, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	dd09      	ble.n	800b37c <_dtoa_r+0x754>
 800b368:	42ab      	cmp	r3, r5
 800b36a:	9a04      	ldr	r2, [sp, #16]
 800b36c:	bfa8      	it	ge
 800b36e:	462b      	movge	r3, r5
 800b370:	1ad2      	subs	r2, r2, r3
 800b372:	9204      	str	r2, [sp, #16]
 800b374:	9a05      	ldr	r2, [sp, #20]
 800b376:	1aed      	subs	r5, r5, r3
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	9305      	str	r3, [sp, #20]
 800b37c:	9b07      	ldr	r3, [sp, #28]
 800b37e:	b31b      	cbz	r3, 800b3c8 <_dtoa_r+0x7a0>
 800b380:	9b08      	ldr	r3, [sp, #32]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 80af 	beq.w	800b4e6 <_dtoa_r+0x8be>
 800b388:	2e00      	cmp	r6, #0
 800b38a:	dd13      	ble.n	800b3b4 <_dtoa_r+0x78c>
 800b38c:	4639      	mov	r1, r7
 800b38e:	4632      	mov	r2, r6
 800b390:	4620      	mov	r0, r4
 800b392:	f000 fbfb 	bl	800bb8c <__pow5mult>
 800b396:	ee18 2a10 	vmov	r2, s16
 800b39a:	4601      	mov	r1, r0
 800b39c:	4607      	mov	r7, r0
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 fb4a 	bl	800ba38 <__multiply>
 800b3a4:	ee18 1a10 	vmov	r1, s16
 800b3a8:	4680      	mov	r8, r0
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 fa76 	bl	800b89c <_Bfree>
 800b3b0:	ee08 8a10 	vmov	s16, r8
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	1b9a      	subs	r2, r3, r6
 800b3b8:	d006      	beq.n	800b3c8 <_dtoa_r+0x7a0>
 800b3ba:	ee18 1a10 	vmov	r1, s16
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 fbe4 	bl	800bb8c <__pow5mult>
 800b3c4:	ee08 0a10 	vmov	s16, r0
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fb1e 	bl	800ba0c <__i2b>
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	f340 8088 	ble.w	800b4ea <_dtoa_r+0x8c2>
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4601      	mov	r1, r0
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 fbd4 	bl	800bb8c <__pow5mult>
 800b3e4:	9b06      	ldr	r3, [sp, #24]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	f340 8081 	ble.w	800b4f0 <_dtoa_r+0x8c8>
 800b3ee:	f04f 0800 	mov.w	r8, #0
 800b3f2:	6933      	ldr	r3, [r6, #16]
 800b3f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3f8:	6918      	ldr	r0, [r3, #16]
 800b3fa:	f000 fab7 	bl	800b96c <__hi0bits>
 800b3fe:	f1c0 0020 	rsb	r0, r0, #32
 800b402:	9b05      	ldr	r3, [sp, #20]
 800b404:	4418      	add	r0, r3
 800b406:	f010 001f 	ands.w	r0, r0, #31
 800b40a:	f000 8092 	beq.w	800b532 <_dtoa_r+0x90a>
 800b40e:	f1c0 0320 	rsb	r3, r0, #32
 800b412:	2b04      	cmp	r3, #4
 800b414:	f340 808a 	ble.w	800b52c <_dtoa_r+0x904>
 800b418:	f1c0 001c 	rsb	r0, r0, #28
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	4403      	add	r3, r0
 800b420:	9304      	str	r3, [sp, #16]
 800b422:	9b05      	ldr	r3, [sp, #20]
 800b424:	4403      	add	r3, r0
 800b426:	4405      	add	r5, r0
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	9b04      	ldr	r3, [sp, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dd07      	ble.n	800b440 <_dtoa_r+0x818>
 800b430:	ee18 1a10 	vmov	r1, s16
 800b434:	461a      	mov	r2, r3
 800b436:	4620      	mov	r0, r4
 800b438:	f000 fc02 	bl	800bc40 <__lshift>
 800b43c:	ee08 0a10 	vmov	s16, r0
 800b440:	9b05      	ldr	r3, [sp, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	dd05      	ble.n	800b452 <_dtoa_r+0x82a>
 800b446:	4631      	mov	r1, r6
 800b448:	461a      	mov	r2, r3
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 fbf8 	bl	800bc40 <__lshift>
 800b450:	4606      	mov	r6, r0
 800b452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b454:	2b00      	cmp	r3, #0
 800b456:	d06e      	beq.n	800b536 <_dtoa_r+0x90e>
 800b458:	ee18 0a10 	vmov	r0, s16
 800b45c:	4631      	mov	r1, r6
 800b45e:	f000 fc5f 	bl	800bd20 <__mcmp>
 800b462:	2800      	cmp	r0, #0
 800b464:	da67      	bge.n	800b536 <_dtoa_r+0x90e>
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	3b01      	subs	r3, #1
 800b46a:	ee18 1a10 	vmov	r1, s16
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	220a      	movs	r2, #10
 800b472:	2300      	movs	r3, #0
 800b474:	4620      	mov	r0, r4
 800b476:	f000 fa33 	bl	800b8e0 <__multadd>
 800b47a:	9b08      	ldr	r3, [sp, #32]
 800b47c:	ee08 0a10 	vmov	s16, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 81b1 	beq.w	800b7e8 <_dtoa_r+0xbc0>
 800b486:	2300      	movs	r3, #0
 800b488:	4639      	mov	r1, r7
 800b48a:	220a      	movs	r2, #10
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fa27 	bl	800b8e0 <__multadd>
 800b492:	9b02      	ldr	r3, [sp, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	4607      	mov	r7, r0
 800b498:	f300 808e 	bgt.w	800b5b8 <_dtoa_r+0x990>
 800b49c:	9b06      	ldr	r3, [sp, #24]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	dc51      	bgt.n	800b546 <_dtoa_r+0x91e>
 800b4a2:	e089      	b.n	800b5b8 <_dtoa_r+0x990>
 800b4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4aa:	e74b      	b.n	800b344 <_dtoa_r+0x71c>
 800b4ac:	9b03      	ldr	r3, [sp, #12]
 800b4ae:	1e5e      	subs	r6, r3, #1
 800b4b0:	9b07      	ldr	r3, [sp, #28]
 800b4b2:	42b3      	cmp	r3, r6
 800b4b4:	bfbf      	itttt	lt
 800b4b6:	9b07      	ldrlt	r3, [sp, #28]
 800b4b8:	9607      	strlt	r6, [sp, #28]
 800b4ba:	1af2      	sublt	r2, r6, r3
 800b4bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b4be:	bfb6      	itet	lt
 800b4c0:	189b      	addlt	r3, r3, r2
 800b4c2:	1b9e      	subge	r6, r3, r6
 800b4c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	bfb8      	it	lt
 800b4ca:	2600      	movlt	r6, #0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	bfb7      	itett	lt
 800b4d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b4d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b4d8:	1a9d      	sublt	r5, r3, r2
 800b4da:	2300      	movlt	r3, #0
 800b4dc:	e734      	b.n	800b348 <_dtoa_r+0x720>
 800b4de:	9e07      	ldr	r6, [sp, #28]
 800b4e0:	9d04      	ldr	r5, [sp, #16]
 800b4e2:	9f08      	ldr	r7, [sp, #32]
 800b4e4:	e73b      	b.n	800b35e <_dtoa_r+0x736>
 800b4e6:	9a07      	ldr	r2, [sp, #28]
 800b4e8:	e767      	b.n	800b3ba <_dtoa_r+0x792>
 800b4ea:	9b06      	ldr	r3, [sp, #24]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	dc18      	bgt.n	800b522 <_dtoa_r+0x8fa>
 800b4f0:	f1ba 0f00 	cmp.w	sl, #0
 800b4f4:	d115      	bne.n	800b522 <_dtoa_r+0x8fa>
 800b4f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4fa:	b993      	cbnz	r3, 800b522 <_dtoa_r+0x8fa>
 800b4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b500:	0d1b      	lsrs	r3, r3, #20
 800b502:	051b      	lsls	r3, r3, #20
 800b504:	b183      	cbz	r3, 800b528 <_dtoa_r+0x900>
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	3301      	adds	r3, #1
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	9b05      	ldr	r3, [sp, #20]
 800b50e:	3301      	adds	r3, #1
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	f04f 0801 	mov.w	r8, #1
 800b516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f47f af6a 	bne.w	800b3f2 <_dtoa_r+0x7ca>
 800b51e:	2001      	movs	r0, #1
 800b520:	e76f      	b.n	800b402 <_dtoa_r+0x7da>
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	e7f6      	b.n	800b516 <_dtoa_r+0x8ee>
 800b528:	4698      	mov	r8, r3
 800b52a:	e7f4      	b.n	800b516 <_dtoa_r+0x8ee>
 800b52c:	f43f af7d 	beq.w	800b42a <_dtoa_r+0x802>
 800b530:	4618      	mov	r0, r3
 800b532:	301c      	adds	r0, #28
 800b534:	e772      	b.n	800b41c <_dtoa_r+0x7f4>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	dc37      	bgt.n	800b5ac <_dtoa_r+0x984>
 800b53c:	9b06      	ldr	r3, [sp, #24]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	dd34      	ble.n	800b5ac <_dtoa_r+0x984>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	9302      	str	r3, [sp, #8]
 800b546:	9b02      	ldr	r3, [sp, #8]
 800b548:	b96b      	cbnz	r3, 800b566 <_dtoa_r+0x93e>
 800b54a:	4631      	mov	r1, r6
 800b54c:	2205      	movs	r2, #5
 800b54e:	4620      	mov	r0, r4
 800b550:	f000 f9c6 	bl	800b8e0 <__multadd>
 800b554:	4601      	mov	r1, r0
 800b556:	4606      	mov	r6, r0
 800b558:	ee18 0a10 	vmov	r0, s16
 800b55c:	f000 fbe0 	bl	800bd20 <__mcmp>
 800b560:	2800      	cmp	r0, #0
 800b562:	f73f adbb 	bgt.w	800b0dc <_dtoa_r+0x4b4>
 800b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b568:	9d01      	ldr	r5, [sp, #4]
 800b56a:	43db      	mvns	r3, r3
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	4631      	mov	r1, r6
 800b574:	4620      	mov	r0, r4
 800b576:	f000 f991 	bl	800b89c <_Bfree>
 800b57a:	2f00      	cmp	r7, #0
 800b57c:	f43f aea4 	beq.w	800b2c8 <_dtoa_r+0x6a0>
 800b580:	f1b8 0f00 	cmp.w	r8, #0
 800b584:	d005      	beq.n	800b592 <_dtoa_r+0x96a>
 800b586:	45b8      	cmp	r8, r7
 800b588:	d003      	beq.n	800b592 <_dtoa_r+0x96a>
 800b58a:	4641      	mov	r1, r8
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 f985 	bl	800b89c <_Bfree>
 800b592:	4639      	mov	r1, r7
 800b594:	4620      	mov	r0, r4
 800b596:	f000 f981 	bl	800b89c <_Bfree>
 800b59a:	e695      	b.n	800b2c8 <_dtoa_r+0x6a0>
 800b59c:	2600      	movs	r6, #0
 800b59e:	4637      	mov	r7, r6
 800b5a0:	e7e1      	b.n	800b566 <_dtoa_r+0x93e>
 800b5a2:	9700      	str	r7, [sp, #0]
 800b5a4:	4637      	mov	r7, r6
 800b5a6:	e599      	b.n	800b0dc <_dtoa_r+0x4b4>
 800b5a8:	40240000 	.word	0x40240000
 800b5ac:	9b08      	ldr	r3, [sp, #32]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 80ca 	beq.w	800b748 <_dtoa_r+0xb20>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	9302      	str	r3, [sp, #8]
 800b5b8:	2d00      	cmp	r5, #0
 800b5ba:	dd05      	ble.n	800b5c8 <_dtoa_r+0x9a0>
 800b5bc:	4639      	mov	r1, r7
 800b5be:	462a      	mov	r2, r5
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f000 fb3d 	bl	800bc40 <__lshift>
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	f1b8 0f00 	cmp.w	r8, #0
 800b5cc:	d05b      	beq.n	800b686 <_dtoa_r+0xa5e>
 800b5ce:	6879      	ldr	r1, [r7, #4]
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 f923 	bl	800b81c <_Balloc>
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	b928      	cbnz	r0, 800b5e6 <_dtoa_r+0x9be>
 800b5da:	4b87      	ldr	r3, [pc, #540]	; (800b7f8 <_dtoa_r+0xbd0>)
 800b5dc:	4602      	mov	r2, r0
 800b5de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b5e2:	f7ff bb3b 	b.w	800ac5c <_dtoa_r+0x34>
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	3202      	adds	r2, #2
 800b5ea:	0092      	lsls	r2, r2, #2
 800b5ec:	f107 010c 	add.w	r1, r7, #12
 800b5f0:	300c      	adds	r0, #12
 800b5f2:	f7fe fded 	bl	800a1d0 <memcpy>
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fb20 	bl	800bc40 <__lshift>
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	f103 0901 	add.w	r9, r3, #1
 800b606:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	9305      	str	r3, [sp, #20]
 800b60e:	f00a 0301 	and.w	r3, sl, #1
 800b612:	46b8      	mov	r8, r7
 800b614:	9304      	str	r3, [sp, #16]
 800b616:	4607      	mov	r7, r0
 800b618:	4631      	mov	r1, r6
 800b61a:	ee18 0a10 	vmov	r0, s16
 800b61e:	f7ff fa77 	bl	800ab10 <quorem>
 800b622:	4641      	mov	r1, r8
 800b624:	9002      	str	r0, [sp, #8]
 800b626:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b62a:	ee18 0a10 	vmov	r0, s16
 800b62e:	f000 fb77 	bl	800bd20 <__mcmp>
 800b632:	463a      	mov	r2, r7
 800b634:	9003      	str	r0, [sp, #12]
 800b636:	4631      	mov	r1, r6
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fb8d 	bl	800bd58 <__mdiff>
 800b63e:	68c2      	ldr	r2, [r0, #12]
 800b640:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b644:	4605      	mov	r5, r0
 800b646:	bb02      	cbnz	r2, 800b68a <_dtoa_r+0xa62>
 800b648:	4601      	mov	r1, r0
 800b64a:	ee18 0a10 	vmov	r0, s16
 800b64e:	f000 fb67 	bl	800bd20 <__mcmp>
 800b652:	4602      	mov	r2, r0
 800b654:	4629      	mov	r1, r5
 800b656:	4620      	mov	r0, r4
 800b658:	9207      	str	r2, [sp, #28]
 800b65a:	f000 f91f 	bl	800b89c <_Bfree>
 800b65e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b662:	ea43 0102 	orr.w	r1, r3, r2
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	430b      	orrs	r3, r1
 800b66a:	464d      	mov	r5, r9
 800b66c:	d10f      	bne.n	800b68e <_dtoa_r+0xa66>
 800b66e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b672:	d02a      	beq.n	800b6ca <_dtoa_r+0xaa2>
 800b674:	9b03      	ldr	r3, [sp, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd02      	ble.n	800b680 <_dtoa_r+0xa58>
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b680:	f88b a000 	strb.w	sl, [fp]
 800b684:	e775      	b.n	800b572 <_dtoa_r+0x94a>
 800b686:	4638      	mov	r0, r7
 800b688:	e7ba      	b.n	800b600 <_dtoa_r+0x9d8>
 800b68a:	2201      	movs	r2, #1
 800b68c:	e7e2      	b.n	800b654 <_dtoa_r+0xa2c>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	db04      	blt.n	800b69e <_dtoa_r+0xa76>
 800b694:	9906      	ldr	r1, [sp, #24]
 800b696:	430b      	orrs	r3, r1
 800b698:	9904      	ldr	r1, [sp, #16]
 800b69a:	430b      	orrs	r3, r1
 800b69c:	d122      	bne.n	800b6e4 <_dtoa_r+0xabc>
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	ddee      	ble.n	800b680 <_dtoa_r+0xa58>
 800b6a2:	ee18 1a10 	vmov	r1, s16
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fac9 	bl	800bc40 <__lshift>
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	ee08 0a10 	vmov	s16, r0
 800b6b4:	f000 fb34 	bl	800bd20 <__mcmp>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	dc03      	bgt.n	800b6c4 <_dtoa_r+0xa9c>
 800b6bc:	d1e0      	bne.n	800b680 <_dtoa_r+0xa58>
 800b6be:	f01a 0f01 	tst.w	sl, #1
 800b6c2:	d0dd      	beq.n	800b680 <_dtoa_r+0xa58>
 800b6c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6c8:	d1d7      	bne.n	800b67a <_dtoa_r+0xa52>
 800b6ca:	2339      	movs	r3, #57	; 0x39
 800b6cc:	f88b 3000 	strb.w	r3, [fp]
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	461d      	mov	r5, r3
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6da:	2a39      	cmp	r2, #57	; 0x39
 800b6dc:	d071      	beq.n	800b7c2 <_dtoa_r+0xb9a>
 800b6de:	3201      	adds	r2, #1
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	e746      	b.n	800b572 <_dtoa_r+0x94a>
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	dd07      	ble.n	800b6f8 <_dtoa_r+0xad0>
 800b6e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6ec:	d0ed      	beq.n	800b6ca <_dtoa_r+0xaa2>
 800b6ee:	f10a 0301 	add.w	r3, sl, #1
 800b6f2:	f88b 3000 	strb.w	r3, [fp]
 800b6f6:	e73c      	b.n	800b572 <_dtoa_r+0x94a>
 800b6f8:	9b05      	ldr	r3, [sp, #20]
 800b6fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b6fe:	4599      	cmp	r9, r3
 800b700:	d047      	beq.n	800b792 <_dtoa_r+0xb6a>
 800b702:	ee18 1a10 	vmov	r1, s16
 800b706:	2300      	movs	r3, #0
 800b708:	220a      	movs	r2, #10
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f8e8 	bl	800b8e0 <__multadd>
 800b710:	45b8      	cmp	r8, r7
 800b712:	ee08 0a10 	vmov	s16, r0
 800b716:	f04f 0300 	mov.w	r3, #0
 800b71a:	f04f 020a 	mov.w	r2, #10
 800b71e:	4641      	mov	r1, r8
 800b720:	4620      	mov	r0, r4
 800b722:	d106      	bne.n	800b732 <_dtoa_r+0xb0a>
 800b724:	f000 f8dc 	bl	800b8e0 <__multadd>
 800b728:	4680      	mov	r8, r0
 800b72a:	4607      	mov	r7, r0
 800b72c:	f109 0901 	add.w	r9, r9, #1
 800b730:	e772      	b.n	800b618 <_dtoa_r+0x9f0>
 800b732:	f000 f8d5 	bl	800b8e0 <__multadd>
 800b736:	4639      	mov	r1, r7
 800b738:	4680      	mov	r8, r0
 800b73a:	2300      	movs	r3, #0
 800b73c:	220a      	movs	r2, #10
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 f8ce 	bl	800b8e0 <__multadd>
 800b744:	4607      	mov	r7, r0
 800b746:	e7f1      	b.n	800b72c <_dtoa_r+0xb04>
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	9302      	str	r3, [sp, #8]
 800b74c:	9d01      	ldr	r5, [sp, #4]
 800b74e:	ee18 0a10 	vmov	r0, s16
 800b752:	4631      	mov	r1, r6
 800b754:	f7ff f9dc 	bl	800ab10 <quorem>
 800b758:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b75c:	9b01      	ldr	r3, [sp, #4]
 800b75e:	f805 ab01 	strb.w	sl, [r5], #1
 800b762:	1aea      	subs	r2, r5, r3
 800b764:	9b02      	ldr	r3, [sp, #8]
 800b766:	4293      	cmp	r3, r2
 800b768:	dd09      	ble.n	800b77e <_dtoa_r+0xb56>
 800b76a:	ee18 1a10 	vmov	r1, s16
 800b76e:	2300      	movs	r3, #0
 800b770:	220a      	movs	r2, #10
 800b772:	4620      	mov	r0, r4
 800b774:	f000 f8b4 	bl	800b8e0 <__multadd>
 800b778:	ee08 0a10 	vmov	s16, r0
 800b77c:	e7e7      	b.n	800b74e <_dtoa_r+0xb26>
 800b77e:	9b02      	ldr	r3, [sp, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	bfc8      	it	gt
 800b784:	461d      	movgt	r5, r3
 800b786:	9b01      	ldr	r3, [sp, #4]
 800b788:	bfd8      	it	le
 800b78a:	2501      	movle	r5, #1
 800b78c:	441d      	add	r5, r3
 800b78e:	f04f 0800 	mov.w	r8, #0
 800b792:	ee18 1a10 	vmov	r1, s16
 800b796:	2201      	movs	r2, #1
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 fa51 	bl	800bc40 <__lshift>
 800b79e:	4631      	mov	r1, r6
 800b7a0:	ee08 0a10 	vmov	s16, r0
 800b7a4:	f000 fabc 	bl	800bd20 <__mcmp>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	dc91      	bgt.n	800b6d0 <_dtoa_r+0xaa8>
 800b7ac:	d102      	bne.n	800b7b4 <_dtoa_r+0xb8c>
 800b7ae:	f01a 0f01 	tst.w	sl, #1
 800b7b2:	d18d      	bne.n	800b6d0 <_dtoa_r+0xaa8>
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	461d      	mov	r5, r3
 800b7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7bc:	2a30      	cmp	r2, #48	; 0x30
 800b7be:	d0fa      	beq.n	800b7b6 <_dtoa_r+0xb8e>
 800b7c0:	e6d7      	b.n	800b572 <_dtoa_r+0x94a>
 800b7c2:	9a01      	ldr	r2, [sp, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d184      	bne.n	800b6d2 <_dtoa_r+0xaaa>
 800b7c8:	9b00      	ldr	r3, [sp, #0]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	2331      	movs	r3, #49	; 0x31
 800b7d0:	7013      	strb	r3, [r2, #0]
 800b7d2:	e6ce      	b.n	800b572 <_dtoa_r+0x94a>
 800b7d4:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <_dtoa_r+0xbd4>)
 800b7d6:	f7ff ba95 	b.w	800ad04 <_dtoa_r+0xdc>
 800b7da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f47f aa6e 	bne.w	800acbe <_dtoa_r+0x96>
 800b7e2:	4b07      	ldr	r3, [pc, #28]	; (800b800 <_dtoa_r+0xbd8>)
 800b7e4:	f7ff ba8e 	b.w	800ad04 <_dtoa_r+0xdc>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dcae      	bgt.n	800b74c <_dtoa_r+0xb24>
 800b7ee:	9b06      	ldr	r3, [sp, #24]
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	f73f aea8 	bgt.w	800b546 <_dtoa_r+0x91e>
 800b7f6:	e7a9      	b.n	800b74c <_dtoa_r+0xb24>
 800b7f8:	0800d793 	.word	0x0800d793
 800b7fc:	0800d6f0 	.word	0x0800d6f0
 800b800:	0800d714 	.word	0x0800d714

0800b804 <_localeconv_r>:
 800b804:	4800      	ldr	r0, [pc, #0]	; (800b808 <_localeconv_r+0x4>)
 800b806:	4770      	bx	lr
 800b808:	20000250 	.word	0x20000250

0800b80c <malloc>:
 800b80c:	4b02      	ldr	r3, [pc, #8]	; (800b818 <malloc+0xc>)
 800b80e:	4601      	mov	r1, r0
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	f000 bc09 	b.w	800c028 <_malloc_r>
 800b816:	bf00      	nop
 800b818:	200000fc 	.word	0x200000fc

0800b81c <_Balloc>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	b976      	cbnz	r6, 800b844 <_Balloc+0x28>
 800b826:	2010      	movs	r0, #16
 800b828:	f7ff fff0 	bl	800b80c <malloc>
 800b82c:	4602      	mov	r2, r0
 800b82e:	6260      	str	r0, [r4, #36]	; 0x24
 800b830:	b920      	cbnz	r0, 800b83c <_Balloc+0x20>
 800b832:	4b18      	ldr	r3, [pc, #96]	; (800b894 <_Balloc+0x78>)
 800b834:	4818      	ldr	r0, [pc, #96]	; (800b898 <_Balloc+0x7c>)
 800b836:	2166      	movs	r1, #102	; 0x66
 800b838:	f000 fdd6 	bl	800c3e8 <__assert_func>
 800b83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b840:	6006      	str	r6, [r0, #0]
 800b842:	60c6      	str	r6, [r0, #12]
 800b844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b846:	68f3      	ldr	r3, [r6, #12]
 800b848:	b183      	cbz	r3, 800b86c <_Balloc+0x50>
 800b84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b852:	b9b8      	cbnz	r0, 800b884 <_Balloc+0x68>
 800b854:	2101      	movs	r1, #1
 800b856:	fa01 f605 	lsl.w	r6, r1, r5
 800b85a:	1d72      	adds	r2, r6, #5
 800b85c:	0092      	lsls	r2, r2, #2
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 fb60 	bl	800bf24 <_calloc_r>
 800b864:	b160      	cbz	r0, 800b880 <_Balloc+0x64>
 800b866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b86a:	e00e      	b.n	800b88a <_Balloc+0x6e>
 800b86c:	2221      	movs	r2, #33	; 0x21
 800b86e:	2104      	movs	r1, #4
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fb57 	bl	800bf24 <_calloc_r>
 800b876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b878:	60f0      	str	r0, [r6, #12]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e4      	bne.n	800b84a <_Balloc+0x2e>
 800b880:	2000      	movs	r0, #0
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	6802      	ldr	r2, [r0, #0]
 800b886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b88a:	2300      	movs	r3, #0
 800b88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b890:	e7f7      	b.n	800b882 <_Balloc+0x66>
 800b892:	bf00      	nop
 800b894:	0800d721 	.word	0x0800d721
 800b898:	0800d7a4 	.word	0x0800d7a4

0800b89c <_Bfree>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	b976      	cbnz	r6, 800b8c4 <_Bfree+0x28>
 800b8a6:	2010      	movs	r0, #16
 800b8a8:	f7ff ffb0 	bl	800b80c <malloc>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6268      	str	r0, [r5, #36]	; 0x24
 800b8b0:	b920      	cbnz	r0, 800b8bc <_Bfree+0x20>
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <_Bfree+0x3c>)
 800b8b4:	4809      	ldr	r0, [pc, #36]	; (800b8dc <_Bfree+0x40>)
 800b8b6:	218a      	movs	r1, #138	; 0x8a
 800b8b8:	f000 fd96 	bl	800c3e8 <__assert_func>
 800b8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c0:	6006      	str	r6, [r0, #0]
 800b8c2:	60c6      	str	r6, [r0, #12]
 800b8c4:	b13c      	cbz	r4, 800b8d6 <_Bfree+0x3a>
 800b8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8c8:	6862      	ldr	r2, [r4, #4]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8d0:	6021      	str	r1, [r4, #0]
 800b8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	0800d721 	.word	0x0800d721
 800b8dc:	0800d7a4 	.word	0x0800d7a4

0800b8e0 <__multadd>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	690d      	ldr	r5, [r1, #16]
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	461e      	mov	r6, r3
 800b8ec:	f101 0c14 	add.w	ip, r1, #20
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800b8f6:	b299      	uxth	r1, r3
 800b8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800b8fc:	0c1e      	lsrs	r6, r3, #16
 800b8fe:	0c0b      	lsrs	r3, r1, #16
 800b900:	fb02 3306 	mla	r3, r2, r6, r3
 800b904:	b289      	uxth	r1, r1
 800b906:	3001      	adds	r0, #1
 800b908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b90c:	4285      	cmp	r5, r0
 800b90e:	f84c 1b04 	str.w	r1, [ip], #4
 800b912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b916:	dcec      	bgt.n	800b8f2 <__multadd+0x12>
 800b918:	b30e      	cbz	r6, 800b95e <__multadd+0x7e>
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	42ab      	cmp	r3, r5
 800b91e:	dc19      	bgt.n	800b954 <__multadd+0x74>
 800b920:	6861      	ldr	r1, [r4, #4]
 800b922:	4638      	mov	r0, r7
 800b924:	3101      	adds	r1, #1
 800b926:	f7ff ff79 	bl	800b81c <_Balloc>
 800b92a:	4680      	mov	r8, r0
 800b92c:	b928      	cbnz	r0, 800b93a <__multadd+0x5a>
 800b92e:	4602      	mov	r2, r0
 800b930:	4b0c      	ldr	r3, [pc, #48]	; (800b964 <__multadd+0x84>)
 800b932:	480d      	ldr	r0, [pc, #52]	; (800b968 <__multadd+0x88>)
 800b934:	21b5      	movs	r1, #181	; 0xb5
 800b936:	f000 fd57 	bl	800c3e8 <__assert_func>
 800b93a:	6922      	ldr	r2, [r4, #16]
 800b93c:	3202      	adds	r2, #2
 800b93e:	f104 010c 	add.w	r1, r4, #12
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	300c      	adds	r0, #12
 800b946:	f7fe fc43 	bl	800a1d0 <memcpy>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff ffa5 	bl	800b89c <_Bfree>
 800b952:	4644      	mov	r4, r8
 800b954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b958:	3501      	adds	r5, #1
 800b95a:	615e      	str	r6, [r3, #20]
 800b95c:	6125      	str	r5, [r4, #16]
 800b95e:	4620      	mov	r0, r4
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	0800d793 	.word	0x0800d793
 800b968:	0800d7a4 	.word	0x0800d7a4

0800b96c <__hi0bits>:
 800b96c:	0c03      	lsrs	r3, r0, #16
 800b96e:	041b      	lsls	r3, r3, #16
 800b970:	b9d3      	cbnz	r3, 800b9a8 <__hi0bits+0x3c>
 800b972:	0400      	lsls	r0, r0, #16
 800b974:	2310      	movs	r3, #16
 800b976:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b97a:	bf04      	itt	eq
 800b97c:	0200      	lsleq	r0, r0, #8
 800b97e:	3308      	addeq	r3, #8
 800b980:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b984:	bf04      	itt	eq
 800b986:	0100      	lsleq	r0, r0, #4
 800b988:	3304      	addeq	r3, #4
 800b98a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b98e:	bf04      	itt	eq
 800b990:	0080      	lsleq	r0, r0, #2
 800b992:	3302      	addeq	r3, #2
 800b994:	2800      	cmp	r0, #0
 800b996:	db05      	blt.n	800b9a4 <__hi0bits+0x38>
 800b998:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b99c:	f103 0301 	add.w	r3, r3, #1
 800b9a0:	bf08      	it	eq
 800b9a2:	2320      	moveq	r3, #32
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	4770      	bx	lr
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	e7e4      	b.n	800b976 <__hi0bits+0xa>

0800b9ac <__lo0bits>:
 800b9ac:	6803      	ldr	r3, [r0, #0]
 800b9ae:	f013 0207 	ands.w	r2, r3, #7
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	d00b      	beq.n	800b9ce <__lo0bits+0x22>
 800b9b6:	07da      	lsls	r2, r3, #31
 800b9b8:	d423      	bmi.n	800ba02 <__lo0bits+0x56>
 800b9ba:	0798      	lsls	r0, r3, #30
 800b9bc:	bf49      	itett	mi
 800b9be:	085b      	lsrmi	r3, r3, #1
 800b9c0:	089b      	lsrpl	r3, r3, #2
 800b9c2:	2001      	movmi	r0, #1
 800b9c4:	600b      	strmi	r3, [r1, #0]
 800b9c6:	bf5c      	itt	pl
 800b9c8:	600b      	strpl	r3, [r1, #0]
 800b9ca:	2002      	movpl	r0, #2
 800b9cc:	4770      	bx	lr
 800b9ce:	b298      	uxth	r0, r3
 800b9d0:	b9a8      	cbnz	r0, 800b9fe <__lo0bits+0x52>
 800b9d2:	0c1b      	lsrs	r3, r3, #16
 800b9d4:	2010      	movs	r0, #16
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	b90a      	cbnz	r2, 800b9de <__lo0bits+0x32>
 800b9da:	3008      	adds	r0, #8
 800b9dc:	0a1b      	lsrs	r3, r3, #8
 800b9de:	071a      	lsls	r2, r3, #28
 800b9e0:	bf04      	itt	eq
 800b9e2:	091b      	lsreq	r3, r3, #4
 800b9e4:	3004      	addeq	r0, #4
 800b9e6:	079a      	lsls	r2, r3, #30
 800b9e8:	bf04      	itt	eq
 800b9ea:	089b      	lsreq	r3, r3, #2
 800b9ec:	3002      	addeq	r0, #2
 800b9ee:	07da      	lsls	r2, r3, #31
 800b9f0:	d403      	bmi.n	800b9fa <__lo0bits+0x4e>
 800b9f2:	085b      	lsrs	r3, r3, #1
 800b9f4:	f100 0001 	add.w	r0, r0, #1
 800b9f8:	d005      	beq.n	800ba06 <__lo0bits+0x5a>
 800b9fa:	600b      	str	r3, [r1, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	4610      	mov	r0, r2
 800ba00:	e7e9      	b.n	800b9d6 <__lo0bits+0x2a>
 800ba02:	2000      	movs	r0, #0
 800ba04:	4770      	bx	lr
 800ba06:	2020      	movs	r0, #32
 800ba08:	4770      	bx	lr
	...

0800ba0c <__i2b>:
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	460c      	mov	r4, r1
 800ba10:	2101      	movs	r1, #1
 800ba12:	f7ff ff03 	bl	800b81c <_Balloc>
 800ba16:	4602      	mov	r2, r0
 800ba18:	b928      	cbnz	r0, 800ba26 <__i2b+0x1a>
 800ba1a:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <__i2b+0x24>)
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <__i2b+0x28>)
 800ba1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba22:	f000 fce1 	bl	800c3e8 <__assert_func>
 800ba26:	2301      	movs	r3, #1
 800ba28:	6144      	str	r4, [r0, #20]
 800ba2a:	6103      	str	r3, [r0, #16]
 800ba2c:	bd10      	pop	{r4, pc}
 800ba2e:	bf00      	nop
 800ba30:	0800d793 	.word	0x0800d793
 800ba34:	0800d7a4 	.word	0x0800d7a4

0800ba38 <__multiply>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	4691      	mov	r9, r2
 800ba3e:	690a      	ldr	r2, [r1, #16]
 800ba40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	bfb8      	it	lt
 800ba48:	460b      	movlt	r3, r1
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	bfbc      	itt	lt
 800ba4e:	464c      	movlt	r4, r9
 800ba50:	4699      	movlt	r9, r3
 800ba52:	6927      	ldr	r7, [r4, #16]
 800ba54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba58:	68a3      	ldr	r3, [r4, #8]
 800ba5a:	6861      	ldr	r1, [r4, #4]
 800ba5c:	eb07 060a 	add.w	r6, r7, sl
 800ba60:	42b3      	cmp	r3, r6
 800ba62:	b085      	sub	sp, #20
 800ba64:	bfb8      	it	lt
 800ba66:	3101      	addlt	r1, #1
 800ba68:	f7ff fed8 	bl	800b81c <_Balloc>
 800ba6c:	b930      	cbnz	r0, 800ba7c <__multiply+0x44>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	4b44      	ldr	r3, [pc, #272]	; (800bb84 <__multiply+0x14c>)
 800ba72:	4845      	ldr	r0, [pc, #276]	; (800bb88 <__multiply+0x150>)
 800ba74:	f240 115d 	movw	r1, #349	; 0x15d
 800ba78:	f000 fcb6 	bl	800c3e8 <__assert_func>
 800ba7c:	f100 0514 	add.w	r5, r0, #20
 800ba80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba84:	462b      	mov	r3, r5
 800ba86:	2200      	movs	r2, #0
 800ba88:	4543      	cmp	r3, r8
 800ba8a:	d321      	bcc.n	800bad0 <__multiply+0x98>
 800ba8c:	f104 0314 	add.w	r3, r4, #20
 800ba90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba94:	f109 0314 	add.w	r3, r9, #20
 800ba98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba9c:	9202      	str	r2, [sp, #8]
 800ba9e:	1b3a      	subs	r2, r7, r4
 800baa0:	3a15      	subs	r2, #21
 800baa2:	f022 0203 	bic.w	r2, r2, #3
 800baa6:	3204      	adds	r2, #4
 800baa8:	f104 0115 	add.w	r1, r4, #21
 800baac:	428f      	cmp	r7, r1
 800baae:	bf38      	it	cc
 800bab0:	2204      	movcc	r2, #4
 800bab2:	9201      	str	r2, [sp, #4]
 800bab4:	9a02      	ldr	r2, [sp, #8]
 800bab6:	9303      	str	r3, [sp, #12]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d80c      	bhi.n	800bad6 <__multiply+0x9e>
 800babc:	2e00      	cmp	r6, #0
 800babe:	dd03      	ble.n	800bac8 <__multiply+0x90>
 800bac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d05a      	beq.n	800bb7e <__multiply+0x146>
 800bac8:	6106      	str	r6, [r0, #16]
 800baca:	b005      	add	sp, #20
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	f843 2b04 	str.w	r2, [r3], #4
 800bad4:	e7d8      	b.n	800ba88 <__multiply+0x50>
 800bad6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bada:	f1ba 0f00 	cmp.w	sl, #0
 800bade:	d024      	beq.n	800bb2a <__multiply+0xf2>
 800bae0:	f104 0e14 	add.w	lr, r4, #20
 800bae4:	46a9      	mov	r9, r5
 800bae6:	f04f 0c00 	mov.w	ip, #0
 800baea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800baee:	f8d9 1000 	ldr.w	r1, [r9]
 800baf2:	fa1f fb82 	uxth.w	fp, r2
 800baf6:	b289      	uxth	r1, r1
 800baf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bafc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb00:	f8d9 2000 	ldr.w	r2, [r9]
 800bb04:	4461      	add	r1, ip
 800bb06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb12:	b289      	uxth	r1, r1
 800bb14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb18:	4577      	cmp	r7, lr
 800bb1a:	f849 1b04 	str.w	r1, [r9], #4
 800bb1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb22:	d8e2      	bhi.n	800baea <__multiply+0xb2>
 800bb24:	9a01      	ldr	r2, [sp, #4]
 800bb26:	f845 c002 	str.w	ip, [r5, r2]
 800bb2a:	9a03      	ldr	r2, [sp, #12]
 800bb2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb30:	3304      	adds	r3, #4
 800bb32:	f1b9 0f00 	cmp.w	r9, #0
 800bb36:	d020      	beq.n	800bb7a <__multiply+0x142>
 800bb38:	6829      	ldr	r1, [r5, #0]
 800bb3a:	f104 0c14 	add.w	ip, r4, #20
 800bb3e:	46ae      	mov	lr, r5
 800bb40:	f04f 0a00 	mov.w	sl, #0
 800bb44:	f8bc b000 	ldrh.w	fp, [ip]
 800bb48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb4c:	fb09 220b 	mla	r2, r9, fp, r2
 800bb50:	4492      	add	sl, r2
 800bb52:	b289      	uxth	r1, r1
 800bb54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb58:	f84e 1b04 	str.w	r1, [lr], #4
 800bb5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb60:	f8be 1000 	ldrh.w	r1, [lr]
 800bb64:	0c12      	lsrs	r2, r2, #16
 800bb66:	fb09 1102 	mla	r1, r9, r2, r1
 800bb6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb6e:	4567      	cmp	r7, ip
 800bb70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb74:	d8e6      	bhi.n	800bb44 <__multiply+0x10c>
 800bb76:	9a01      	ldr	r2, [sp, #4]
 800bb78:	50a9      	str	r1, [r5, r2]
 800bb7a:	3504      	adds	r5, #4
 800bb7c:	e79a      	b.n	800bab4 <__multiply+0x7c>
 800bb7e:	3e01      	subs	r6, #1
 800bb80:	e79c      	b.n	800babc <__multiply+0x84>
 800bb82:	bf00      	nop
 800bb84:	0800d793 	.word	0x0800d793
 800bb88:	0800d7a4 	.word	0x0800d7a4

0800bb8c <__pow5mult>:
 800bb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb90:	4615      	mov	r5, r2
 800bb92:	f012 0203 	ands.w	r2, r2, #3
 800bb96:	4606      	mov	r6, r0
 800bb98:	460f      	mov	r7, r1
 800bb9a:	d007      	beq.n	800bbac <__pow5mult+0x20>
 800bb9c:	4c25      	ldr	r4, [pc, #148]	; (800bc34 <__pow5mult+0xa8>)
 800bb9e:	3a01      	subs	r2, #1
 800bba0:	2300      	movs	r3, #0
 800bba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bba6:	f7ff fe9b 	bl	800b8e0 <__multadd>
 800bbaa:	4607      	mov	r7, r0
 800bbac:	10ad      	asrs	r5, r5, #2
 800bbae:	d03d      	beq.n	800bc2c <__pow5mult+0xa0>
 800bbb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbb2:	b97c      	cbnz	r4, 800bbd4 <__pow5mult+0x48>
 800bbb4:	2010      	movs	r0, #16
 800bbb6:	f7ff fe29 	bl	800b80c <malloc>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	6270      	str	r0, [r6, #36]	; 0x24
 800bbbe:	b928      	cbnz	r0, 800bbcc <__pow5mult+0x40>
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <__pow5mult+0xac>)
 800bbc2:	481e      	ldr	r0, [pc, #120]	; (800bc3c <__pow5mult+0xb0>)
 800bbc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bbc8:	f000 fc0e 	bl	800c3e8 <__assert_func>
 800bbcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbd0:	6004      	str	r4, [r0, #0]
 800bbd2:	60c4      	str	r4, [r0, #12]
 800bbd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbdc:	b94c      	cbnz	r4, 800bbf2 <__pow5mult+0x66>
 800bbde:	f240 2171 	movw	r1, #625	; 0x271
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff ff12 	bl	800ba0c <__i2b>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbee:	4604      	mov	r4, r0
 800bbf0:	6003      	str	r3, [r0, #0]
 800bbf2:	f04f 0900 	mov.w	r9, #0
 800bbf6:	07eb      	lsls	r3, r5, #31
 800bbf8:	d50a      	bpl.n	800bc10 <__pow5mult+0x84>
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7ff ff1a 	bl	800ba38 <__multiply>
 800bc04:	4639      	mov	r1, r7
 800bc06:	4680      	mov	r8, r0
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7ff fe47 	bl	800b89c <_Bfree>
 800bc0e:	4647      	mov	r7, r8
 800bc10:	106d      	asrs	r5, r5, #1
 800bc12:	d00b      	beq.n	800bc2c <__pow5mult+0xa0>
 800bc14:	6820      	ldr	r0, [r4, #0]
 800bc16:	b938      	cbnz	r0, 800bc28 <__pow5mult+0x9c>
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff ff0b 	bl	800ba38 <__multiply>
 800bc22:	6020      	str	r0, [r4, #0]
 800bc24:	f8c0 9000 	str.w	r9, [r0]
 800bc28:	4604      	mov	r4, r0
 800bc2a:	e7e4      	b.n	800bbf6 <__pow5mult+0x6a>
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc32:	bf00      	nop
 800bc34:	0800d8f0 	.word	0x0800d8f0
 800bc38:	0800d721 	.word	0x0800d721
 800bc3c:	0800d7a4 	.word	0x0800d7a4

0800bc40 <__lshift>:
 800bc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc44:	460c      	mov	r4, r1
 800bc46:	6849      	ldr	r1, [r1, #4]
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	4607      	mov	r7, r0
 800bc52:	4691      	mov	r9, r2
 800bc54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc58:	f108 0601 	add.w	r6, r8, #1
 800bc5c:	42b3      	cmp	r3, r6
 800bc5e:	db0b      	blt.n	800bc78 <__lshift+0x38>
 800bc60:	4638      	mov	r0, r7
 800bc62:	f7ff fddb 	bl	800b81c <_Balloc>
 800bc66:	4605      	mov	r5, r0
 800bc68:	b948      	cbnz	r0, 800bc7e <__lshift+0x3e>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	4b2a      	ldr	r3, [pc, #168]	; (800bd18 <__lshift+0xd8>)
 800bc6e:	482b      	ldr	r0, [pc, #172]	; (800bd1c <__lshift+0xdc>)
 800bc70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc74:	f000 fbb8 	bl	800c3e8 <__assert_func>
 800bc78:	3101      	adds	r1, #1
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	e7ee      	b.n	800bc5c <__lshift+0x1c>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f100 0114 	add.w	r1, r0, #20
 800bc84:	f100 0210 	add.w	r2, r0, #16
 800bc88:	4618      	mov	r0, r3
 800bc8a:	4553      	cmp	r3, sl
 800bc8c:	db37      	blt.n	800bcfe <__lshift+0xbe>
 800bc8e:	6920      	ldr	r0, [r4, #16]
 800bc90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc94:	f104 0314 	add.w	r3, r4, #20
 800bc98:	f019 091f 	ands.w	r9, r9, #31
 800bc9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bca4:	d02f      	beq.n	800bd06 <__lshift+0xc6>
 800bca6:	f1c9 0e20 	rsb	lr, r9, #32
 800bcaa:	468a      	mov	sl, r1
 800bcac:	f04f 0c00 	mov.w	ip, #0
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	fa02 f209 	lsl.w	r2, r2, r9
 800bcb6:	ea42 020c 	orr.w	r2, r2, ip
 800bcba:	f84a 2b04 	str.w	r2, [sl], #4
 800bcbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc2:	4298      	cmp	r0, r3
 800bcc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bcc8:	d8f2      	bhi.n	800bcb0 <__lshift+0x70>
 800bcca:	1b03      	subs	r3, r0, r4
 800bccc:	3b15      	subs	r3, #21
 800bcce:	f023 0303 	bic.w	r3, r3, #3
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	f104 0215 	add.w	r2, r4, #21
 800bcd8:	4290      	cmp	r0, r2
 800bcda:	bf38      	it	cc
 800bcdc:	2304      	movcc	r3, #4
 800bcde:	f841 c003 	str.w	ip, [r1, r3]
 800bce2:	f1bc 0f00 	cmp.w	ip, #0
 800bce6:	d001      	beq.n	800bcec <__lshift+0xac>
 800bce8:	f108 0602 	add.w	r6, r8, #2
 800bcec:	3e01      	subs	r6, #1
 800bcee:	4638      	mov	r0, r7
 800bcf0:	612e      	str	r6, [r5, #16]
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	f7ff fdd2 	bl	800b89c <_Bfree>
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd02:	3301      	adds	r3, #1
 800bd04:	e7c1      	b.n	800bc8a <__lshift+0x4a>
 800bd06:	3904      	subs	r1, #4
 800bd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd10:	4298      	cmp	r0, r3
 800bd12:	d8f9      	bhi.n	800bd08 <__lshift+0xc8>
 800bd14:	e7ea      	b.n	800bcec <__lshift+0xac>
 800bd16:	bf00      	nop
 800bd18:	0800d793 	.word	0x0800d793
 800bd1c:	0800d7a4 	.word	0x0800d7a4

0800bd20 <__mcmp>:
 800bd20:	b530      	push	{r4, r5, lr}
 800bd22:	6902      	ldr	r2, [r0, #16]
 800bd24:	690c      	ldr	r4, [r1, #16]
 800bd26:	1b12      	subs	r2, r2, r4
 800bd28:	d10e      	bne.n	800bd48 <__mcmp+0x28>
 800bd2a:	f100 0314 	add.w	r3, r0, #20
 800bd2e:	3114      	adds	r1, #20
 800bd30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd40:	42a5      	cmp	r5, r4
 800bd42:	d003      	beq.n	800bd4c <__mcmp+0x2c>
 800bd44:	d305      	bcc.n	800bd52 <__mcmp+0x32>
 800bd46:	2201      	movs	r2, #1
 800bd48:	4610      	mov	r0, r2
 800bd4a:	bd30      	pop	{r4, r5, pc}
 800bd4c:	4283      	cmp	r3, r0
 800bd4e:	d3f3      	bcc.n	800bd38 <__mcmp+0x18>
 800bd50:	e7fa      	b.n	800bd48 <__mcmp+0x28>
 800bd52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd56:	e7f7      	b.n	800bd48 <__mcmp+0x28>

0800bd58 <__mdiff>:
 800bd58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	4606      	mov	r6, r0
 800bd60:	4611      	mov	r1, r2
 800bd62:	4620      	mov	r0, r4
 800bd64:	4690      	mov	r8, r2
 800bd66:	f7ff ffdb 	bl	800bd20 <__mcmp>
 800bd6a:	1e05      	subs	r5, r0, #0
 800bd6c:	d110      	bne.n	800bd90 <__mdiff+0x38>
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff fd53 	bl	800b81c <_Balloc>
 800bd76:	b930      	cbnz	r0, 800bd86 <__mdiff+0x2e>
 800bd78:	4b3a      	ldr	r3, [pc, #232]	; (800be64 <__mdiff+0x10c>)
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	f240 2132 	movw	r1, #562	; 0x232
 800bd80:	4839      	ldr	r0, [pc, #228]	; (800be68 <__mdiff+0x110>)
 800bd82:	f000 fb31 	bl	800c3e8 <__assert_func>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd90:	bfa4      	itt	ge
 800bd92:	4643      	movge	r3, r8
 800bd94:	46a0      	movge	r8, r4
 800bd96:	4630      	mov	r0, r6
 800bd98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd9c:	bfa6      	itte	ge
 800bd9e:	461c      	movge	r4, r3
 800bda0:	2500      	movge	r5, #0
 800bda2:	2501      	movlt	r5, #1
 800bda4:	f7ff fd3a 	bl	800b81c <_Balloc>
 800bda8:	b920      	cbnz	r0, 800bdb4 <__mdiff+0x5c>
 800bdaa:	4b2e      	ldr	r3, [pc, #184]	; (800be64 <__mdiff+0x10c>)
 800bdac:	4602      	mov	r2, r0
 800bdae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bdb2:	e7e5      	b.n	800bd80 <__mdiff+0x28>
 800bdb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdb8:	6926      	ldr	r6, [r4, #16]
 800bdba:	60c5      	str	r5, [r0, #12]
 800bdbc:	f104 0914 	add.w	r9, r4, #20
 800bdc0:	f108 0514 	add.w	r5, r8, #20
 800bdc4:	f100 0e14 	add.w	lr, r0, #20
 800bdc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bdcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdd0:	f108 0210 	add.w	r2, r8, #16
 800bdd4:	46f2      	mov	sl, lr
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bddc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bde0:	fa1f f883 	uxth.w	r8, r3
 800bde4:	fa11 f18b 	uxtah	r1, r1, fp
 800bde8:	0c1b      	lsrs	r3, r3, #16
 800bdea:	eba1 0808 	sub.w	r8, r1, r8
 800bdee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdf6:	fa1f f888 	uxth.w	r8, r8
 800bdfa:	1419      	asrs	r1, r3, #16
 800bdfc:	454e      	cmp	r6, r9
 800bdfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be02:	f84a 3b04 	str.w	r3, [sl], #4
 800be06:	d8e7      	bhi.n	800bdd8 <__mdiff+0x80>
 800be08:	1b33      	subs	r3, r6, r4
 800be0a:	3b15      	subs	r3, #21
 800be0c:	f023 0303 	bic.w	r3, r3, #3
 800be10:	3304      	adds	r3, #4
 800be12:	3415      	adds	r4, #21
 800be14:	42a6      	cmp	r6, r4
 800be16:	bf38      	it	cc
 800be18:	2304      	movcc	r3, #4
 800be1a:	441d      	add	r5, r3
 800be1c:	4473      	add	r3, lr
 800be1e:	469e      	mov	lr, r3
 800be20:	462e      	mov	r6, r5
 800be22:	4566      	cmp	r6, ip
 800be24:	d30e      	bcc.n	800be44 <__mdiff+0xec>
 800be26:	f10c 0203 	add.w	r2, ip, #3
 800be2a:	1b52      	subs	r2, r2, r5
 800be2c:	f022 0203 	bic.w	r2, r2, #3
 800be30:	3d03      	subs	r5, #3
 800be32:	45ac      	cmp	ip, r5
 800be34:	bf38      	it	cc
 800be36:	2200      	movcc	r2, #0
 800be38:	441a      	add	r2, r3
 800be3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be3e:	b17b      	cbz	r3, 800be60 <__mdiff+0x108>
 800be40:	6107      	str	r7, [r0, #16]
 800be42:	e7a3      	b.n	800bd8c <__mdiff+0x34>
 800be44:	f856 8b04 	ldr.w	r8, [r6], #4
 800be48:	fa11 f288 	uxtah	r2, r1, r8
 800be4c:	1414      	asrs	r4, r2, #16
 800be4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be52:	b292      	uxth	r2, r2
 800be54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be58:	f84e 2b04 	str.w	r2, [lr], #4
 800be5c:	1421      	asrs	r1, r4, #16
 800be5e:	e7e0      	b.n	800be22 <__mdiff+0xca>
 800be60:	3f01      	subs	r7, #1
 800be62:	e7ea      	b.n	800be3a <__mdiff+0xe2>
 800be64:	0800d793 	.word	0x0800d793
 800be68:	0800d7a4 	.word	0x0800d7a4

0800be6c <__d2b>:
 800be6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be70:	4689      	mov	r9, r1
 800be72:	2101      	movs	r1, #1
 800be74:	ec57 6b10 	vmov	r6, r7, d0
 800be78:	4690      	mov	r8, r2
 800be7a:	f7ff fccf 	bl	800b81c <_Balloc>
 800be7e:	4604      	mov	r4, r0
 800be80:	b930      	cbnz	r0, 800be90 <__d2b+0x24>
 800be82:	4602      	mov	r2, r0
 800be84:	4b25      	ldr	r3, [pc, #148]	; (800bf1c <__d2b+0xb0>)
 800be86:	4826      	ldr	r0, [pc, #152]	; (800bf20 <__d2b+0xb4>)
 800be88:	f240 310a 	movw	r1, #778	; 0x30a
 800be8c:	f000 faac 	bl	800c3e8 <__assert_func>
 800be90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be98:	bb35      	cbnz	r5, 800bee8 <__d2b+0x7c>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	d028      	beq.n	800bef2 <__d2b+0x86>
 800bea0:	4668      	mov	r0, sp
 800bea2:	9600      	str	r6, [sp, #0]
 800bea4:	f7ff fd82 	bl	800b9ac <__lo0bits>
 800bea8:	9900      	ldr	r1, [sp, #0]
 800beaa:	b300      	cbz	r0, 800beee <__d2b+0x82>
 800beac:	9a01      	ldr	r2, [sp, #4]
 800beae:	f1c0 0320 	rsb	r3, r0, #32
 800beb2:	fa02 f303 	lsl.w	r3, r2, r3
 800beb6:	430b      	orrs	r3, r1
 800beb8:	40c2      	lsrs	r2, r0
 800beba:	6163      	str	r3, [r4, #20]
 800bebc:	9201      	str	r2, [sp, #4]
 800bebe:	9b01      	ldr	r3, [sp, #4]
 800bec0:	61a3      	str	r3, [r4, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bf14      	ite	ne
 800bec6:	2202      	movne	r2, #2
 800bec8:	2201      	moveq	r2, #1
 800beca:	6122      	str	r2, [r4, #16]
 800becc:	b1d5      	cbz	r5, 800bf04 <__d2b+0x98>
 800bece:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bed2:	4405      	add	r5, r0
 800bed4:	f8c9 5000 	str.w	r5, [r9]
 800bed8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bedc:	f8c8 0000 	str.w	r0, [r8]
 800bee0:	4620      	mov	r0, r4
 800bee2:	b003      	add	sp, #12
 800bee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beec:	e7d5      	b.n	800be9a <__d2b+0x2e>
 800beee:	6161      	str	r1, [r4, #20]
 800bef0:	e7e5      	b.n	800bebe <__d2b+0x52>
 800bef2:	a801      	add	r0, sp, #4
 800bef4:	f7ff fd5a 	bl	800b9ac <__lo0bits>
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	6163      	str	r3, [r4, #20]
 800befc:	2201      	movs	r2, #1
 800befe:	6122      	str	r2, [r4, #16]
 800bf00:	3020      	adds	r0, #32
 800bf02:	e7e3      	b.n	800becc <__d2b+0x60>
 800bf04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf0c:	f8c9 0000 	str.w	r0, [r9]
 800bf10:	6918      	ldr	r0, [r3, #16]
 800bf12:	f7ff fd2b 	bl	800b96c <__hi0bits>
 800bf16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf1a:	e7df      	b.n	800bedc <__d2b+0x70>
 800bf1c:	0800d793 	.word	0x0800d793
 800bf20:	0800d7a4 	.word	0x0800d7a4

0800bf24 <_calloc_r>:
 800bf24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf26:	fba1 2402 	umull	r2, r4, r1, r2
 800bf2a:	b94c      	cbnz	r4, 800bf40 <_calloc_r+0x1c>
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	9201      	str	r2, [sp, #4]
 800bf30:	f000 f87a 	bl	800c028 <_malloc_r>
 800bf34:	9a01      	ldr	r2, [sp, #4]
 800bf36:	4605      	mov	r5, r0
 800bf38:	b930      	cbnz	r0, 800bf48 <_calloc_r+0x24>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	b003      	add	sp, #12
 800bf3e:	bd30      	pop	{r4, r5, pc}
 800bf40:	220c      	movs	r2, #12
 800bf42:	6002      	str	r2, [r0, #0]
 800bf44:	2500      	movs	r5, #0
 800bf46:	e7f8      	b.n	800bf3a <_calloc_r+0x16>
 800bf48:	4621      	mov	r1, r4
 800bf4a:	f7fe f94f 	bl	800a1ec <memset>
 800bf4e:	e7f4      	b.n	800bf3a <_calloc_r+0x16>

0800bf50 <_free_r>:
 800bf50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf52:	2900      	cmp	r1, #0
 800bf54:	d044      	beq.n	800bfe0 <_free_r+0x90>
 800bf56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf5a:	9001      	str	r0, [sp, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f1a1 0404 	sub.w	r4, r1, #4
 800bf62:	bfb8      	it	lt
 800bf64:	18e4      	addlt	r4, r4, r3
 800bf66:	f000 fa9b 	bl	800c4a0 <__malloc_lock>
 800bf6a:	4a1e      	ldr	r2, [pc, #120]	; (800bfe4 <_free_r+0x94>)
 800bf6c:	9801      	ldr	r0, [sp, #4]
 800bf6e:	6813      	ldr	r3, [r2, #0]
 800bf70:	b933      	cbnz	r3, 800bf80 <_free_r+0x30>
 800bf72:	6063      	str	r3, [r4, #4]
 800bf74:	6014      	str	r4, [r2, #0]
 800bf76:	b003      	add	sp, #12
 800bf78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf7c:	f000 ba96 	b.w	800c4ac <__malloc_unlock>
 800bf80:	42a3      	cmp	r3, r4
 800bf82:	d908      	bls.n	800bf96 <_free_r+0x46>
 800bf84:	6825      	ldr	r5, [r4, #0]
 800bf86:	1961      	adds	r1, r4, r5
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	bf01      	itttt	eq
 800bf8c:	6819      	ldreq	r1, [r3, #0]
 800bf8e:	685b      	ldreq	r3, [r3, #4]
 800bf90:	1949      	addeq	r1, r1, r5
 800bf92:	6021      	streq	r1, [r4, #0]
 800bf94:	e7ed      	b.n	800bf72 <_free_r+0x22>
 800bf96:	461a      	mov	r2, r3
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	b10b      	cbz	r3, 800bfa0 <_free_r+0x50>
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	d9fa      	bls.n	800bf96 <_free_r+0x46>
 800bfa0:	6811      	ldr	r1, [r2, #0]
 800bfa2:	1855      	adds	r5, r2, r1
 800bfa4:	42a5      	cmp	r5, r4
 800bfa6:	d10b      	bne.n	800bfc0 <_free_r+0x70>
 800bfa8:	6824      	ldr	r4, [r4, #0]
 800bfaa:	4421      	add	r1, r4
 800bfac:	1854      	adds	r4, r2, r1
 800bfae:	42a3      	cmp	r3, r4
 800bfb0:	6011      	str	r1, [r2, #0]
 800bfb2:	d1e0      	bne.n	800bf76 <_free_r+0x26>
 800bfb4:	681c      	ldr	r4, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	6053      	str	r3, [r2, #4]
 800bfba:	4421      	add	r1, r4
 800bfbc:	6011      	str	r1, [r2, #0]
 800bfbe:	e7da      	b.n	800bf76 <_free_r+0x26>
 800bfc0:	d902      	bls.n	800bfc8 <_free_r+0x78>
 800bfc2:	230c      	movs	r3, #12
 800bfc4:	6003      	str	r3, [r0, #0]
 800bfc6:	e7d6      	b.n	800bf76 <_free_r+0x26>
 800bfc8:	6825      	ldr	r5, [r4, #0]
 800bfca:	1961      	adds	r1, r4, r5
 800bfcc:	428b      	cmp	r3, r1
 800bfce:	bf04      	itt	eq
 800bfd0:	6819      	ldreq	r1, [r3, #0]
 800bfd2:	685b      	ldreq	r3, [r3, #4]
 800bfd4:	6063      	str	r3, [r4, #4]
 800bfd6:	bf04      	itt	eq
 800bfd8:	1949      	addeq	r1, r1, r5
 800bfda:	6021      	streq	r1, [r4, #0]
 800bfdc:	6054      	str	r4, [r2, #4]
 800bfde:	e7ca      	b.n	800bf76 <_free_r+0x26>
 800bfe0:	b003      	add	sp, #12
 800bfe2:	bd30      	pop	{r4, r5, pc}
 800bfe4:	200020d0 	.word	0x200020d0

0800bfe8 <sbrk_aligned>:
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	4e0e      	ldr	r6, [pc, #56]	; (800c024 <sbrk_aligned+0x3c>)
 800bfec:	460c      	mov	r4, r1
 800bfee:	6831      	ldr	r1, [r6, #0]
 800bff0:	4605      	mov	r5, r0
 800bff2:	b911      	cbnz	r1, 800bffa <sbrk_aligned+0x12>
 800bff4:	f000 f9e8 	bl	800c3c8 <_sbrk_r>
 800bff8:	6030      	str	r0, [r6, #0]
 800bffa:	4621      	mov	r1, r4
 800bffc:	4628      	mov	r0, r5
 800bffe:	f000 f9e3 	bl	800c3c8 <_sbrk_r>
 800c002:	1c43      	adds	r3, r0, #1
 800c004:	d00a      	beq.n	800c01c <sbrk_aligned+0x34>
 800c006:	1cc4      	adds	r4, r0, #3
 800c008:	f024 0403 	bic.w	r4, r4, #3
 800c00c:	42a0      	cmp	r0, r4
 800c00e:	d007      	beq.n	800c020 <sbrk_aligned+0x38>
 800c010:	1a21      	subs	r1, r4, r0
 800c012:	4628      	mov	r0, r5
 800c014:	f000 f9d8 	bl	800c3c8 <_sbrk_r>
 800c018:	3001      	adds	r0, #1
 800c01a:	d101      	bne.n	800c020 <sbrk_aligned+0x38>
 800c01c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c020:	4620      	mov	r0, r4
 800c022:	bd70      	pop	{r4, r5, r6, pc}
 800c024:	200020d4 	.word	0x200020d4

0800c028 <_malloc_r>:
 800c028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02c:	1ccd      	adds	r5, r1, #3
 800c02e:	f025 0503 	bic.w	r5, r5, #3
 800c032:	3508      	adds	r5, #8
 800c034:	2d0c      	cmp	r5, #12
 800c036:	bf38      	it	cc
 800c038:	250c      	movcc	r5, #12
 800c03a:	2d00      	cmp	r5, #0
 800c03c:	4607      	mov	r7, r0
 800c03e:	db01      	blt.n	800c044 <_malloc_r+0x1c>
 800c040:	42a9      	cmp	r1, r5
 800c042:	d905      	bls.n	800c050 <_malloc_r+0x28>
 800c044:	230c      	movs	r3, #12
 800c046:	603b      	str	r3, [r7, #0]
 800c048:	2600      	movs	r6, #0
 800c04a:	4630      	mov	r0, r6
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	4e2e      	ldr	r6, [pc, #184]	; (800c10c <_malloc_r+0xe4>)
 800c052:	f000 fa25 	bl	800c4a0 <__malloc_lock>
 800c056:	6833      	ldr	r3, [r6, #0]
 800c058:	461c      	mov	r4, r3
 800c05a:	bb34      	cbnz	r4, 800c0aa <_malloc_r+0x82>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4638      	mov	r0, r7
 800c060:	f7ff ffc2 	bl	800bfe8 <sbrk_aligned>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	4604      	mov	r4, r0
 800c068:	d14d      	bne.n	800c106 <_malloc_r+0xde>
 800c06a:	6834      	ldr	r4, [r6, #0]
 800c06c:	4626      	mov	r6, r4
 800c06e:	2e00      	cmp	r6, #0
 800c070:	d140      	bne.n	800c0f4 <_malloc_r+0xcc>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	4631      	mov	r1, r6
 800c076:	4638      	mov	r0, r7
 800c078:	eb04 0803 	add.w	r8, r4, r3
 800c07c:	f000 f9a4 	bl	800c3c8 <_sbrk_r>
 800c080:	4580      	cmp	r8, r0
 800c082:	d13a      	bne.n	800c0fa <_malloc_r+0xd2>
 800c084:	6821      	ldr	r1, [r4, #0]
 800c086:	3503      	adds	r5, #3
 800c088:	1a6d      	subs	r5, r5, r1
 800c08a:	f025 0503 	bic.w	r5, r5, #3
 800c08e:	3508      	adds	r5, #8
 800c090:	2d0c      	cmp	r5, #12
 800c092:	bf38      	it	cc
 800c094:	250c      	movcc	r5, #12
 800c096:	4629      	mov	r1, r5
 800c098:	4638      	mov	r0, r7
 800c09a:	f7ff ffa5 	bl	800bfe8 <sbrk_aligned>
 800c09e:	3001      	adds	r0, #1
 800c0a0:	d02b      	beq.n	800c0fa <_malloc_r+0xd2>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	442b      	add	r3, r5
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	e00e      	b.n	800c0c8 <_malloc_r+0xa0>
 800c0aa:	6822      	ldr	r2, [r4, #0]
 800c0ac:	1b52      	subs	r2, r2, r5
 800c0ae:	d41e      	bmi.n	800c0ee <_malloc_r+0xc6>
 800c0b0:	2a0b      	cmp	r2, #11
 800c0b2:	d916      	bls.n	800c0e2 <_malloc_r+0xba>
 800c0b4:	1961      	adds	r1, r4, r5
 800c0b6:	42a3      	cmp	r3, r4
 800c0b8:	6025      	str	r5, [r4, #0]
 800c0ba:	bf18      	it	ne
 800c0bc:	6059      	strne	r1, [r3, #4]
 800c0be:	6863      	ldr	r3, [r4, #4]
 800c0c0:	bf08      	it	eq
 800c0c2:	6031      	streq	r1, [r6, #0]
 800c0c4:	5162      	str	r2, [r4, r5]
 800c0c6:	604b      	str	r3, [r1, #4]
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f104 060b 	add.w	r6, r4, #11
 800c0ce:	f000 f9ed 	bl	800c4ac <__malloc_unlock>
 800c0d2:	f026 0607 	bic.w	r6, r6, #7
 800c0d6:	1d23      	adds	r3, r4, #4
 800c0d8:	1af2      	subs	r2, r6, r3
 800c0da:	d0b6      	beq.n	800c04a <_malloc_r+0x22>
 800c0dc:	1b9b      	subs	r3, r3, r6
 800c0de:	50a3      	str	r3, [r4, r2]
 800c0e0:	e7b3      	b.n	800c04a <_malloc_r+0x22>
 800c0e2:	6862      	ldr	r2, [r4, #4]
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	bf0c      	ite	eq
 800c0e8:	6032      	streq	r2, [r6, #0]
 800c0ea:	605a      	strne	r2, [r3, #4]
 800c0ec:	e7ec      	b.n	800c0c8 <_malloc_r+0xa0>
 800c0ee:	4623      	mov	r3, r4
 800c0f0:	6864      	ldr	r4, [r4, #4]
 800c0f2:	e7b2      	b.n	800c05a <_malloc_r+0x32>
 800c0f4:	4634      	mov	r4, r6
 800c0f6:	6876      	ldr	r6, [r6, #4]
 800c0f8:	e7b9      	b.n	800c06e <_malloc_r+0x46>
 800c0fa:	230c      	movs	r3, #12
 800c0fc:	603b      	str	r3, [r7, #0]
 800c0fe:	4638      	mov	r0, r7
 800c100:	f000 f9d4 	bl	800c4ac <__malloc_unlock>
 800c104:	e7a1      	b.n	800c04a <_malloc_r+0x22>
 800c106:	6025      	str	r5, [r4, #0]
 800c108:	e7de      	b.n	800c0c8 <_malloc_r+0xa0>
 800c10a:	bf00      	nop
 800c10c:	200020d0 	.word	0x200020d0

0800c110 <__ssputs_r>:
 800c110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	688e      	ldr	r6, [r1, #8]
 800c116:	429e      	cmp	r6, r3
 800c118:	4682      	mov	sl, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	4690      	mov	r8, r2
 800c11e:	461f      	mov	r7, r3
 800c120:	d838      	bhi.n	800c194 <__ssputs_r+0x84>
 800c122:	898a      	ldrh	r2, [r1, #12]
 800c124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c128:	d032      	beq.n	800c190 <__ssputs_r+0x80>
 800c12a:	6825      	ldr	r5, [r4, #0]
 800c12c:	6909      	ldr	r1, [r1, #16]
 800c12e:	eba5 0901 	sub.w	r9, r5, r1
 800c132:	6965      	ldr	r5, [r4, #20]
 800c134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c13c:	3301      	adds	r3, #1
 800c13e:	444b      	add	r3, r9
 800c140:	106d      	asrs	r5, r5, #1
 800c142:	429d      	cmp	r5, r3
 800c144:	bf38      	it	cc
 800c146:	461d      	movcc	r5, r3
 800c148:	0553      	lsls	r3, r2, #21
 800c14a:	d531      	bpl.n	800c1b0 <__ssputs_r+0xa0>
 800c14c:	4629      	mov	r1, r5
 800c14e:	f7ff ff6b 	bl	800c028 <_malloc_r>
 800c152:	4606      	mov	r6, r0
 800c154:	b950      	cbnz	r0, 800c16c <__ssputs_r+0x5c>
 800c156:	230c      	movs	r3, #12
 800c158:	f8ca 3000 	str.w	r3, [sl]
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c162:	81a3      	strh	r3, [r4, #12]
 800c164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16c:	6921      	ldr	r1, [r4, #16]
 800c16e:	464a      	mov	r2, r9
 800c170:	f7fe f82e 	bl	800a1d0 <memcpy>
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c17a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	6126      	str	r6, [r4, #16]
 800c182:	6165      	str	r5, [r4, #20]
 800c184:	444e      	add	r6, r9
 800c186:	eba5 0509 	sub.w	r5, r5, r9
 800c18a:	6026      	str	r6, [r4, #0]
 800c18c:	60a5      	str	r5, [r4, #8]
 800c18e:	463e      	mov	r6, r7
 800c190:	42be      	cmp	r6, r7
 800c192:	d900      	bls.n	800c196 <__ssputs_r+0x86>
 800c194:	463e      	mov	r6, r7
 800c196:	6820      	ldr	r0, [r4, #0]
 800c198:	4632      	mov	r2, r6
 800c19a:	4641      	mov	r1, r8
 800c19c:	f000 f966 	bl	800c46c <memmove>
 800c1a0:	68a3      	ldr	r3, [r4, #8]
 800c1a2:	1b9b      	subs	r3, r3, r6
 800c1a4:	60a3      	str	r3, [r4, #8]
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	4433      	add	r3, r6
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	e7db      	b.n	800c168 <__ssputs_r+0x58>
 800c1b0:	462a      	mov	r2, r5
 800c1b2:	f000 f981 	bl	800c4b8 <_realloc_r>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d1e1      	bne.n	800c180 <__ssputs_r+0x70>
 800c1bc:	6921      	ldr	r1, [r4, #16]
 800c1be:	4650      	mov	r0, sl
 800c1c0:	f7ff fec6 	bl	800bf50 <_free_r>
 800c1c4:	e7c7      	b.n	800c156 <__ssputs_r+0x46>
	...

0800c1c8 <_svfiprintf_r>:
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	4698      	mov	r8, r3
 800c1ce:	898b      	ldrh	r3, [r1, #12]
 800c1d0:	061b      	lsls	r3, r3, #24
 800c1d2:	b09d      	sub	sp, #116	; 0x74
 800c1d4:	4607      	mov	r7, r0
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	4614      	mov	r4, r2
 800c1da:	d50e      	bpl.n	800c1fa <_svfiprintf_r+0x32>
 800c1dc:	690b      	ldr	r3, [r1, #16]
 800c1de:	b963      	cbnz	r3, 800c1fa <_svfiprintf_r+0x32>
 800c1e0:	2140      	movs	r1, #64	; 0x40
 800c1e2:	f7ff ff21 	bl	800c028 <_malloc_r>
 800c1e6:	6028      	str	r0, [r5, #0]
 800c1e8:	6128      	str	r0, [r5, #16]
 800c1ea:	b920      	cbnz	r0, 800c1f6 <_svfiprintf_r+0x2e>
 800c1ec:	230c      	movs	r3, #12
 800c1ee:	603b      	str	r3, [r7, #0]
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1f4:	e0d1      	b.n	800c39a <_svfiprintf_r+0x1d2>
 800c1f6:	2340      	movs	r3, #64	; 0x40
 800c1f8:	616b      	str	r3, [r5, #20]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1fe:	2320      	movs	r3, #32
 800c200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c204:	f8cd 800c 	str.w	r8, [sp, #12]
 800c208:	2330      	movs	r3, #48	; 0x30
 800c20a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3b4 <_svfiprintf_r+0x1ec>
 800c20e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c212:	f04f 0901 	mov.w	r9, #1
 800c216:	4623      	mov	r3, r4
 800c218:	469a      	mov	sl, r3
 800c21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c21e:	b10a      	cbz	r2, 800c224 <_svfiprintf_r+0x5c>
 800c220:	2a25      	cmp	r2, #37	; 0x25
 800c222:	d1f9      	bne.n	800c218 <_svfiprintf_r+0x50>
 800c224:	ebba 0b04 	subs.w	fp, sl, r4
 800c228:	d00b      	beq.n	800c242 <_svfiprintf_r+0x7a>
 800c22a:	465b      	mov	r3, fp
 800c22c:	4622      	mov	r2, r4
 800c22e:	4629      	mov	r1, r5
 800c230:	4638      	mov	r0, r7
 800c232:	f7ff ff6d 	bl	800c110 <__ssputs_r>
 800c236:	3001      	adds	r0, #1
 800c238:	f000 80aa 	beq.w	800c390 <_svfiprintf_r+0x1c8>
 800c23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c23e:	445a      	add	r2, fp
 800c240:	9209      	str	r2, [sp, #36]	; 0x24
 800c242:	f89a 3000 	ldrb.w	r3, [sl]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 80a2 	beq.w	800c390 <_svfiprintf_r+0x1c8>
 800c24c:	2300      	movs	r3, #0
 800c24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c256:	f10a 0a01 	add.w	sl, sl, #1
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	9307      	str	r3, [sp, #28]
 800c25e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c262:	931a      	str	r3, [sp, #104]	; 0x68
 800c264:	4654      	mov	r4, sl
 800c266:	2205      	movs	r2, #5
 800c268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26c:	4851      	ldr	r0, [pc, #324]	; (800c3b4 <_svfiprintf_r+0x1ec>)
 800c26e:	f7f3 ffbf 	bl	80001f0 <memchr>
 800c272:	9a04      	ldr	r2, [sp, #16]
 800c274:	b9d8      	cbnz	r0, 800c2ae <_svfiprintf_r+0xe6>
 800c276:	06d0      	lsls	r0, r2, #27
 800c278:	bf44      	itt	mi
 800c27a:	2320      	movmi	r3, #32
 800c27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c280:	0711      	lsls	r1, r2, #28
 800c282:	bf44      	itt	mi
 800c284:	232b      	movmi	r3, #43	; 0x2b
 800c286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c28a:	f89a 3000 	ldrb.w	r3, [sl]
 800c28e:	2b2a      	cmp	r3, #42	; 0x2a
 800c290:	d015      	beq.n	800c2be <_svfiprintf_r+0xf6>
 800c292:	9a07      	ldr	r2, [sp, #28]
 800c294:	4654      	mov	r4, sl
 800c296:	2000      	movs	r0, #0
 800c298:	f04f 0c0a 	mov.w	ip, #10
 800c29c:	4621      	mov	r1, r4
 800c29e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2a2:	3b30      	subs	r3, #48	; 0x30
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	d94e      	bls.n	800c346 <_svfiprintf_r+0x17e>
 800c2a8:	b1b0      	cbz	r0, 800c2d8 <_svfiprintf_r+0x110>
 800c2aa:	9207      	str	r2, [sp, #28]
 800c2ac:	e014      	b.n	800c2d8 <_svfiprintf_r+0x110>
 800c2ae:	eba0 0308 	sub.w	r3, r0, r8
 800c2b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	46a2      	mov	sl, r4
 800c2bc:	e7d2      	b.n	800c264 <_svfiprintf_r+0x9c>
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	1d19      	adds	r1, r3, #4
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	9103      	str	r1, [sp, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfbb      	ittet	lt
 800c2ca:	425b      	neglt	r3, r3
 800c2cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d0:	9307      	strge	r3, [sp, #28]
 800c2d2:	9307      	strlt	r3, [sp, #28]
 800c2d4:	bfb8      	it	lt
 800c2d6:	9204      	strlt	r2, [sp, #16]
 800c2d8:	7823      	ldrb	r3, [r4, #0]
 800c2da:	2b2e      	cmp	r3, #46	; 0x2e
 800c2dc:	d10c      	bne.n	800c2f8 <_svfiprintf_r+0x130>
 800c2de:	7863      	ldrb	r3, [r4, #1]
 800c2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2e2:	d135      	bne.n	800c350 <_svfiprintf_r+0x188>
 800c2e4:	9b03      	ldr	r3, [sp, #12]
 800c2e6:	1d1a      	adds	r2, r3, #4
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	9203      	str	r2, [sp, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	bfb8      	it	lt
 800c2f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c2f4:	3402      	adds	r4, #2
 800c2f6:	9305      	str	r3, [sp, #20]
 800c2f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3c4 <_svfiprintf_r+0x1fc>
 800c2fc:	7821      	ldrb	r1, [r4, #0]
 800c2fe:	2203      	movs	r2, #3
 800c300:	4650      	mov	r0, sl
 800c302:	f7f3 ff75 	bl	80001f0 <memchr>
 800c306:	b140      	cbz	r0, 800c31a <_svfiprintf_r+0x152>
 800c308:	2340      	movs	r3, #64	; 0x40
 800c30a:	eba0 000a 	sub.w	r0, r0, sl
 800c30e:	fa03 f000 	lsl.w	r0, r3, r0
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	4303      	orrs	r3, r0
 800c316:	3401      	adds	r4, #1
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31e:	4826      	ldr	r0, [pc, #152]	; (800c3b8 <_svfiprintf_r+0x1f0>)
 800c320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c324:	2206      	movs	r2, #6
 800c326:	f7f3 ff63 	bl	80001f0 <memchr>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d038      	beq.n	800c3a0 <_svfiprintf_r+0x1d8>
 800c32e:	4b23      	ldr	r3, [pc, #140]	; (800c3bc <_svfiprintf_r+0x1f4>)
 800c330:	bb1b      	cbnz	r3, 800c37a <_svfiprintf_r+0x1b2>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	3307      	adds	r3, #7
 800c336:	f023 0307 	bic.w	r3, r3, #7
 800c33a:	3308      	adds	r3, #8
 800c33c:	9303      	str	r3, [sp, #12]
 800c33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c340:	4433      	add	r3, r6
 800c342:	9309      	str	r3, [sp, #36]	; 0x24
 800c344:	e767      	b.n	800c216 <_svfiprintf_r+0x4e>
 800c346:	fb0c 3202 	mla	r2, ip, r2, r3
 800c34a:	460c      	mov	r4, r1
 800c34c:	2001      	movs	r0, #1
 800c34e:	e7a5      	b.n	800c29c <_svfiprintf_r+0xd4>
 800c350:	2300      	movs	r3, #0
 800c352:	3401      	adds	r4, #1
 800c354:	9305      	str	r3, [sp, #20]
 800c356:	4619      	mov	r1, r3
 800c358:	f04f 0c0a 	mov.w	ip, #10
 800c35c:	4620      	mov	r0, r4
 800c35e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c362:	3a30      	subs	r2, #48	; 0x30
 800c364:	2a09      	cmp	r2, #9
 800c366:	d903      	bls.n	800c370 <_svfiprintf_r+0x1a8>
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d0c5      	beq.n	800c2f8 <_svfiprintf_r+0x130>
 800c36c:	9105      	str	r1, [sp, #20]
 800c36e:	e7c3      	b.n	800c2f8 <_svfiprintf_r+0x130>
 800c370:	fb0c 2101 	mla	r1, ip, r1, r2
 800c374:	4604      	mov	r4, r0
 800c376:	2301      	movs	r3, #1
 800c378:	e7f0      	b.n	800c35c <_svfiprintf_r+0x194>
 800c37a:	ab03      	add	r3, sp, #12
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	462a      	mov	r2, r5
 800c380:	4b0f      	ldr	r3, [pc, #60]	; (800c3c0 <_svfiprintf_r+0x1f8>)
 800c382:	a904      	add	r1, sp, #16
 800c384:	4638      	mov	r0, r7
 800c386:	f7fd ffd9 	bl	800a33c <_printf_float>
 800c38a:	1c42      	adds	r2, r0, #1
 800c38c:	4606      	mov	r6, r0
 800c38e:	d1d6      	bne.n	800c33e <_svfiprintf_r+0x176>
 800c390:	89ab      	ldrh	r3, [r5, #12]
 800c392:	065b      	lsls	r3, r3, #25
 800c394:	f53f af2c 	bmi.w	800c1f0 <_svfiprintf_r+0x28>
 800c398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c39a:	b01d      	add	sp, #116	; 0x74
 800c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a0:	ab03      	add	r3, sp, #12
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <_svfiprintf_r+0x1f8>)
 800c3a8:	a904      	add	r1, sp, #16
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f7fe fa6a 	bl	800a884 <_printf_i>
 800c3b0:	e7eb      	b.n	800c38a <_svfiprintf_r+0x1c2>
 800c3b2:	bf00      	nop
 800c3b4:	0800d8fc 	.word	0x0800d8fc
 800c3b8:	0800d906 	.word	0x0800d906
 800c3bc:	0800a33d 	.word	0x0800a33d
 800c3c0:	0800c111 	.word	0x0800c111
 800c3c4:	0800d902 	.word	0x0800d902

0800c3c8 <_sbrk_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	; (800c3e4 <_sbrk_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f5 fe0a 	bl	8001fec <_sbrk>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_sbrk_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_sbrk_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	200020d8 	.word	0x200020d8

0800c3e8 <__assert_func>:
 800c3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3ea:	4614      	mov	r4, r2
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	4b09      	ldr	r3, [pc, #36]	; (800c414 <__assert_func+0x2c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	68d8      	ldr	r0, [r3, #12]
 800c3f6:	b14c      	cbz	r4, 800c40c <__assert_func+0x24>
 800c3f8:	4b07      	ldr	r3, [pc, #28]	; (800c418 <__assert_func+0x30>)
 800c3fa:	9100      	str	r1, [sp, #0]
 800c3fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c400:	4906      	ldr	r1, [pc, #24]	; (800c41c <__assert_func+0x34>)
 800c402:	462b      	mov	r3, r5
 800c404:	f000 f80e 	bl	800c424 <fiprintf>
 800c408:	f000 faac 	bl	800c964 <abort>
 800c40c:	4b04      	ldr	r3, [pc, #16]	; (800c420 <__assert_func+0x38>)
 800c40e:	461c      	mov	r4, r3
 800c410:	e7f3      	b.n	800c3fa <__assert_func+0x12>
 800c412:	bf00      	nop
 800c414:	200000fc 	.word	0x200000fc
 800c418:	0800d90d 	.word	0x0800d90d
 800c41c:	0800d91a 	.word	0x0800d91a
 800c420:	0800d948 	.word	0x0800d948

0800c424 <fiprintf>:
 800c424:	b40e      	push	{r1, r2, r3}
 800c426:	b503      	push	{r0, r1, lr}
 800c428:	4601      	mov	r1, r0
 800c42a:	ab03      	add	r3, sp, #12
 800c42c:	4805      	ldr	r0, [pc, #20]	; (800c444 <fiprintf+0x20>)
 800c42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c432:	6800      	ldr	r0, [r0, #0]
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	f000 f897 	bl	800c568 <_vfiprintf_r>
 800c43a:	b002      	add	sp, #8
 800c43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c440:	b003      	add	sp, #12
 800c442:	4770      	bx	lr
 800c444:	200000fc 	.word	0x200000fc

0800c448 <__ascii_mbtowc>:
 800c448:	b082      	sub	sp, #8
 800c44a:	b901      	cbnz	r1, 800c44e <__ascii_mbtowc+0x6>
 800c44c:	a901      	add	r1, sp, #4
 800c44e:	b142      	cbz	r2, 800c462 <__ascii_mbtowc+0x1a>
 800c450:	b14b      	cbz	r3, 800c466 <__ascii_mbtowc+0x1e>
 800c452:	7813      	ldrb	r3, [r2, #0]
 800c454:	600b      	str	r3, [r1, #0]
 800c456:	7812      	ldrb	r2, [r2, #0]
 800c458:	1e10      	subs	r0, r2, #0
 800c45a:	bf18      	it	ne
 800c45c:	2001      	movne	r0, #1
 800c45e:	b002      	add	sp, #8
 800c460:	4770      	bx	lr
 800c462:	4610      	mov	r0, r2
 800c464:	e7fb      	b.n	800c45e <__ascii_mbtowc+0x16>
 800c466:	f06f 0001 	mvn.w	r0, #1
 800c46a:	e7f8      	b.n	800c45e <__ascii_mbtowc+0x16>

0800c46c <memmove>:
 800c46c:	4288      	cmp	r0, r1
 800c46e:	b510      	push	{r4, lr}
 800c470:	eb01 0402 	add.w	r4, r1, r2
 800c474:	d902      	bls.n	800c47c <memmove+0x10>
 800c476:	4284      	cmp	r4, r0
 800c478:	4623      	mov	r3, r4
 800c47a:	d807      	bhi.n	800c48c <memmove+0x20>
 800c47c:	1e43      	subs	r3, r0, #1
 800c47e:	42a1      	cmp	r1, r4
 800c480:	d008      	beq.n	800c494 <memmove+0x28>
 800c482:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c48a:	e7f8      	b.n	800c47e <memmove+0x12>
 800c48c:	4402      	add	r2, r0
 800c48e:	4601      	mov	r1, r0
 800c490:	428a      	cmp	r2, r1
 800c492:	d100      	bne.n	800c496 <memmove+0x2a>
 800c494:	bd10      	pop	{r4, pc}
 800c496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c49a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c49e:	e7f7      	b.n	800c490 <memmove+0x24>

0800c4a0 <__malloc_lock>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__malloc_lock+0x8>)
 800c4a2:	f000 bc1f 	b.w	800cce4 <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	200020dc 	.word	0x200020dc

0800c4ac <__malloc_unlock>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__malloc_unlock+0x8>)
 800c4ae:	f000 bc1a 	b.w	800cce6 <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	200020dc 	.word	0x200020dc

0800c4b8 <_realloc_r>:
 800c4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4614      	mov	r4, r2
 800c4c0:	460e      	mov	r6, r1
 800c4c2:	b921      	cbnz	r1, 800c4ce <_realloc_r+0x16>
 800c4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	f7ff bdad 	b.w	800c028 <_malloc_r>
 800c4ce:	b92a      	cbnz	r2, 800c4dc <_realloc_r+0x24>
 800c4d0:	f7ff fd3e 	bl	800bf50 <_free_r>
 800c4d4:	4625      	mov	r5, r4
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4dc:	f000 fc6a 	bl	800cdb4 <_malloc_usable_size_r>
 800c4e0:	4284      	cmp	r4, r0
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	d802      	bhi.n	800c4ec <_realloc_r+0x34>
 800c4e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4ea:	d812      	bhi.n	800c512 <_realloc_r+0x5a>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7ff fd9a 	bl	800c028 <_malloc_r>
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d0ed      	beq.n	800c4d6 <_realloc_r+0x1e>
 800c4fa:	42bc      	cmp	r4, r7
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4631      	mov	r1, r6
 800c500:	bf28      	it	cs
 800c502:	463a      	movcs	r2, r7
 800c504:	f7fd fe64 	bl	800a1d0 <memcpy>
 800c508:	4631      	mov	r1, r6
 800c50a:	4640      	mov	r0, r8
 800c50c:	f7ff fd20 	bl	800bf50 <_free_r>
 800c510:	e7e1      	b.n	800c4d6 <_realloc_r+0x1e>
 800c512:	4635      	mov	r5, r6
 800c514:	e7df      	b.n	800c4d6 <_realloc_r+0x1e>

0800c516 <__sfputc_r>:
 800c516:	6893      	ldr	r3, [r2, #8]
 800c518:	3b01      	subs	r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	b410      	push	{r4}
 800c51e:	6093      	str	r3, [r2, #8]
 800c520:	da08      	bge.n	800c534 <__sfputc_r+0x1e>
 800c522:	6994      	ldr	r4, [r2, #24]
 800c524:	42a3      	cmp	r3, r4
 800c526:	db01      	blt.n	800c52c <__sfputc_r+0x16>
 800c528:	290a      	cmp	r1, #10
 800c52a:	d103      	bne.n	800c534 <__sfputc_r+0x1e>
 800c52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c530:	f000 b94a 	b.w	800c7c8 <__swbuf_r>
 800c534:	6813      	ldr	r3, [r2, #0]
 800c536:	1c58      	adds	r0, r3, #1
 800c538:	6010      	str	r0, [r2, #0]
 800c53a:	7019      	strb	r1, [r3, #0]
 800c53c:	4608      	mov	r0, r1
 800c53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <__sfputs_r>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	4606      	mov	r6, r0
 800c548:	460f      	mov	r7, r1
 800c54a:	4614      	mov	r4, r2
 800c54c:	18d5      	adds	r5, r2, r3
 800c54e:	42ac      	cmp	r4, r5
 800c550:	d101      	bne.n	800c556 <__sfputs_r+0x12>
 800c552:	2000      	movs	r0, #0
 800c554:	e007      	b.n	800c566 <__sfputs_r+0x22>
 800c556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55a:	463a      	mov	r2, r7
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff ffda 	bl	800c516 <__sfputc_r>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d1f3      	bne.n	800c54e <__sfputs_r+0xa>
 800c566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c568 <_vfiprintf_r>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	460d      	mov	r5, r1
 800c56e:	b09d      	sub	sp, #116	; 0x74
 800c570:	4614      	mov	r4, r2
 800c572:	4698      	mov	r8, r3
 800c574:	4606      	mov	r6, r0
 800c576:	b118      	cbz	r0, 800c580 <_vfiprintf_r+0x18>
 800c578:	6983      	ldr	r3, [r0, #24]
 800c57a:	b90b      	cbnz	r3, 800c580 <_vfiprintf_r+0x18>
 800c57c:	f000 fb14 	bl	800cba8 <__sinit>
 800c580:	4b89      	ldr	r3, [pc, #548]	; (800c7a8 <_vfiprintf_r+0x240>)
 800c582:	429d      	cmp	r5, r3
 800c584:	d11b      	bne.n	800c5be <_vfiprintf_r+0x56>
 800c586:	6875      	ldr	r5, [r6, #4]
 800c588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c58a:	07d9      	lsls	r1, r3, #31
 800c58c:	d405      	bmi.n	800c59a <_vfiprintf_r+0x32>
 800c58e:	89ab      	ldrh	r3, [r5, #12]
 800c590:	059a      	lsls	r2, r3, #22
 800c592:	d402      	bmi.n	800c59a <_vfiprintf_r+0x32>
 800c594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c596:	f000 fba5 	bl	800cce4 <__retarget_lock_acquire_recursive>
 800c59a:	89ab      	ldrh	r3, [r5, #12]
 800c59c:	071b      	lsls	r3, r3, #28
 800c59e:	d501      	bpl.n	800c5a4 <_vfiprintf_r+0x3c>
 800c5a0:	692b      	ldr	r3, [r5, #16]
 800c5a2:	b9eb      	cbnz	r3, 800c5e0 <_vfiprintf_r+0x78>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f000 f96e 	bl	800c888 <__swsetup_r>
 800c5ac:	b1c0      	cbz	r0, 800c5e0 <_vfiprintf_r+0x78>
 800c5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b0:	07dc      	lsls	r4, r3, #31
 800c5b2:	d50e      	bpl.n	800c5d2 <_vfiprintf_r+0x6a>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5b8:	b01d      	add	sp, #116	; 0x74
 800c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5be:	4b7b      	ldr	r3, [pc, #492]	; (800c7ac <_vfiprintf_r+0x244>)
 800c5c0:	429d      	cmp	r5, r3
 800c5c2:	d101      	bne.n	800c5c8 <_vfiprintf_r+0x60>
 800c5c4:	68b5      	ldr	r5, [r6, #8]
 800c5c6:	e7df      	b.n	800c588 <_vfiprintf_r+0x20>
 800c5c8:	4b79      	ldr	r3, [pc, #484]	; (800c7b0 <_vfiprintf_r+0x248>)
 800c5ca:	429d      	cmp	r5, r3
 800c5cc:	bf08      	it	eq
 800c5ce:	68f5      	ldreq	r5, [r6, #12]
 800c5d0:	e7da      	b.n	800c588 <_vfiprintf_r+0x20>
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	0598      	lsls	r0, r3, #22
 800c5d6:	d4ed      	bmi.n	800c5b4 <_vfiprintf_r+0x4c>
 800c5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5da:	f000 fb84 	bl	800cce6 <__retarget_lock_release_recursive>
 800c5de:	e7e9      	b.n	800c5b4 <_vfiprintf_r+0x4c>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e4:	2320      	movs	r3, #32
 800c5e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ee:	2330      	movs	r3, #48	; 0x30
 800c5f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7b4 <_vfiprintf_r+0x24c>
 800c5f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5f8:	f04f 0901 	mov.w	r9, #1
 800c5fc:	4623      	mov	r3, r4
 800c5fe:	469a      	mov	sl, r3
 800c600:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c604:	b10a      	cbz	r2, 800c60a <_vfiprintf_r+0xa2>
 800c606:	2a25      	cmp	r2, #37	; 0x25
 800c608:	d1f9      	bne.n	800c5fe <_vfiprintf_r+0x96>
 800c60a:	ebba 0b04 	subs.w	fp, sl, r4
 800c60e:	d00b      	beq.n	800c628 <_vfiprintf_r+0xc0>
 800c610:	465b      	mov	r3, fp
 800c612:	4622      	mov	r2, r4
 800c614:	4629      	mov	r1, r5
 800c616:	4630      	mov	r0, r6
 800c618:	f7ff ff94 	bl	800c544 <__sfputs_r>
 800c61c:	3001      	adds	r0, #1
 800c61e:	f000 80aa 	beq.w	800c776 <_vfiprintf_r+0x20e>
 800c622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c624:	445a      	add	r2, fp
 800c626:	9209      	str	r2, [sp, #36]	; 0x24
 800c628:	f89a 3000 	ldrb.w	r3, [sl]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80a2 	beq.w	800c776 <_vfiprintf_r+0x20e>
 800c632:	2300      	movs	r3, #0
 800c634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63c:	f10a 0a01 	add.w	sl, sl, #1
 800c640:	9304      	str	r3, [sp, #16]
 800c642:	9307      	str	r3, [sp, #28]
 800c644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c648:	931a      	str	r3, [sp, #104]	; 0x68
 800c64a:	4654      	mov	r4, sl
 800c64c:	2205      	movs	r2, #5
 800c64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c652:	4858      	ldr	r0, [pc, #352]	; (800c7b4 <_vfiprintf_r+0x24c>)
 800c654:	f7f3 fdcc 	bl	80001f0 <memchr>
 800c658:	9a04      	ldr	r2, [sp, #16]
 800c65a:	b9d8      	cbnz	r0, 800c694 <_vfiprintf_r+0x12c>
 800c65c:	06d1      	lsls	r1, r2, #27
 800c65e:	bf44      	itt	mi
 800c660:	2320      	movmi	r3, #32
 800c662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c666:	0713      	lsls	r3, r2, #28
 800c668:	bf44      	itt	mi
 800c66a:	232b      	movmi	r3, #43	; 0x2b
 800c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c670:	f89a 3000 	ldrb.w	r3, [sl]
 800c674:	2b2a      	cmp	r3, #42	; 0x2a
 800c676:	d015      	beq.n	800c6a4 <_vfiprintf_r+0x13c>
 800c678:	9a07      	ldr	r2, [sp, #28]
 800c67a:	4654      	mov	r4, sl
 800c67c:	2000      	movs	r0, #0
 800c67e:	f04f 0c0a 	mov.w	ip, #10
 800c682:	4621      	mov	r1, r4
 800c684:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c688:	3b30      	subs	r3, #48	; 0x30
 800c68a:	2b09      	cmp	r3, #9
 800c68c:	d94e      	bls.n	800c72c <_vfiprintf_r+0x1c4>
 800c68e:	b1b0      	cbz	r0, 800c6be <_vfiprintf_r+0x156>
 800c690:	9207      	str	r2, [sp, #28]
 800c692:	e014      	b.n	800c6be <_vfiprintf_r+0x156>
 800c694:	eba0 0308 	sub.w	r3, r0, r8
 800c698:	fa09 f303 	lsl.w	r3, r9, r3
 800c69c:	4313      	orrs	r3, r2
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	46a2      	mov	sl, r4
 800c6a2:	e7d2      	b.n	800c64a <_vfiprintf_r+0xe2>
 800c6a4:	9b03      	ldr	r3, [sp, #12]
 800c6a6:	1d19      	adds	r1, r3, #4
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	9103      	str	r1, [sp, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bfbb      	ittet	lt
 800c6b0:	425b      	neglt	r3, r3
 800c6b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b6:	9307      	strge	r3, [sp, #28]
 800c6b8:	9307      	strlt	r3, [sp, #28]
 800c6ba:	bfb8      	it	lt
 800c6bc:	9204      	strlt	r2, [sp, #16]
 800c6be:	7823      	ldrb	r3, [r4, #0]
 800c6c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c2:	d10c      	bne.n	800c6de <_vfiprintf_r+0x176>
 800c6c4:	7863      	ldrb	r3, [r4, #1]
 800c6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c8:	d135      	bne.n	800c736 <_vfiprintf_r+0x1ce>
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	1d1a      	adds	r2, r3, #4
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	9203      	str	r2, [sp, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bfb8      	it	lt
 800c6d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6da:	3402      	adds	r4, #2
 800c6dc:	9305      	str	r3, [sp, #20]
 800c6de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7c4 <_vfiprintf_r+0x25c>
 800c6e2:	7821      	ldrb	r1, [r4, #0]
 800c6e4:	2203      	movs	r2, #3
 800c6e6:	4650      	mov	r0, sl
 800c6e8:	f7f3 fd82 	bl	80001f0 <memchr>
 800c6ec:	b140      	cbz	r0, 800c700 <_vfiprintf_r+0x198>
 800c6ee:	2340      	movs	r3, #64	; 0x40
 800c6f0:	eba0 000a 	sub.w	r0, r0, sl
 800c6f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c6f8:	9b04      	ldr	r3, [sp, #16]
 800c6fa:	4303      	orrs	r3, r0
 800c6fc:	3401      	adds	r4, #1
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c704:	482c      	ldr	r0, [pc, #176]	; (800c7b8 <_vfiprintf_r+0x250>)
 800c706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c70a:	2206      	movs	r2, #6
 800c70c:	f7f3 fd70 	bl	80001f0 <memchr>
 800c710:	2800      	cmp	r0, #0
 800c712:	d03f      	beq.n	800c794 <_vfiprintf_r+0x22c>
 800c714:	4b29      	ldr	r3, [pc, #164]	; (800c7bc <_vfiprintf_r+0x254>)
 800c716:	bb1b      	cbnz	r3, 800c760 <_vfiprintf_r+0x1f8>
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	3307      	adds	r3, #7
 800c71c:	f023 0307 	bic.w	r3, r3, #7
 800c720:	3308      	adds	r3, #8
 800c722:	9303      	str	r3, [sp, #12]
 800c724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c726:	443b      	add	r3, r7
 800c728:	9309      	str	r3, [sp, #36]	; 0x24
 800c72a:	e767      	b.n	800c5fc <_vfiprintf_r+0x94>
 800c72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c730:	460c      	mov	r4, r1
 800c732:	2001      	movs	r0, #1
 800c734:	e7a5      	b.n	800c682 <_vfiprintf_r+0x11a>
 800c736:	2300      	movs	r3, #0
 800c738:	3401      	adds	r4, #1
 800c73a:	9305      	str	r3, [sp, #20]
 800c73c:	4619      	mov	r1, r3
 800c73e:	f04f 0c0a 	mov.w	ip, #10
 800c742:	4620      	mov	r0, r4
 800c744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c748:	3a30      	subs	r2, #48	; 0x30
 800c74a:	2a09      	cmp	r2, #9
 800c74c:	d903      	bls.n	800c756 <_vfiprintf_r+0x1ee>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0c5      	beq.n	800c6de <_vfiprintf_r+0x176>
 800c752:	9105      	str	r1, [sp, #20]
 800c754:	e7c3      	b.n	800c6de <_vfiprintf_r+0x176>
 800c756:	fb0c 2101 	mla	r1, ip, r1, r2
 800c75a:	4604      	mov	r4, r0
 800c75c:	2301      	movs	r3, #1
 800c75e:	e7f0      	b.n	800c742 <_vfiprintf_r+0x1da>
 800c760:	ab03      	add	r3, sp, #12
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	462a      	mov	r2, r5
 800c766:	4b16      	ldr	r3, [pc, #88]	; (800c7c0 <_vfiprintf_r+0x258>)
 800c768:	a904      	add	r1, sp, #16
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7fd fde6 	bl	800a33c <_printf_float>
 800c770:	4607      	mov	r7, r0
 800c772:	1c78      	adds	r0, r7, #1
 800c774:	d1d6      	bne.n	800c724 <_vfiprintf_r+0x1bc>
 800c776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c778:	07d9      	lsls	r1, r3, #31
 800c77a:	d405      	bmi.n	800c788 <_vfiprintf_r+0x220>
 800c77c:	89ab      	ldrh	r3, [r5, #12]
 800c77e:	059a      	lsls	r2, r3, #22
 800c780:	d402      	bmi.n	800c788 <_vfiprintf_r+0x220>
 800c782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c784:	f000 faaf 	bl	800cce6 <__retarget_lock_release_recursive>
 800c788:	89ab      	ldrh	r3, [r5, #12]
 800c78a:	065b      	lsls	r3, r3, #25
 800c78c:	f53f af12 	bmi.w	800c5b4 <_vfiprintf_r+0x4c>
 800c790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c792:	e711      	b.n	800c5b8 <_vfiprintf_r+0x50>
 800c794:	ab03      	add	r3, sp, #12
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	462a      	mov	r2, r5
 800c79a:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <_vfiprintf_r+0x258>)
 800c79c:	a904      	add	r1, sp, #16
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f7fe f870 	bl	800a884 <_printf_i>
 800c7a4:	e7e4      	b.n	800c770 <_vfiprintf_r+0x208>
 800c7a6:	bf00      	nop
 800c7a8:	0800da74 	.word	0x0800da74
 800c7ac:	0800da94 	.word	0x0800da94
 800c7b0:	0800da54 	.word	0x0800da54
 800c7b4:	0800d8fc 	.word	0x0800d8fc
 800c7b8:	0800d906 	.word	0x0800d906
 800c7bc:	0800a33d 	.word	0x0800a33d
 800c7c0:	0800c545 	.word	0x0800c545
 800c7c4:	0800d902 	.word	0x0800d902

0800c7c8 <__swbuf_r>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b118      	cbz	r0, 800c7da <__swbuf_r+0x12>
 800c7d2:	6983      	ldr	r3, [r0, #24]
 800c7d4:	b90b      	cbnz	r3, 800c7da <__swbuf_r+0x12>
 800c7d6:	f000 f9e7 	bl	800cba8 <__sinit>
 800c7da:	4b21      	ldr	r3, [pc, #132]	; (800c860 <__swbuf_r+0x98>)
 800c7dc:	429c      	cmp	r4, r3
 800c7de:	d12b      	bne.n	800c838 <__swbuf_r+0x70>
 800c7e0:	686c      	ldr	r4, [r5, #4]
 800c7e2:	69a3      	ldr	r3, [r4, #24]
 800c7e4:	60a3      	str	r3, [r4, #8]
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	071a      	lsls	r2, r3, #28
 800c7ea:	d52f      	bpl.n	800c84c <__swbuf_r+0x84>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	b36b      	cbz	r3, 800c84c <__swbuf_r+0x84>
 800c7f0:	6923      	ldr	r3, [r4, #16]
 800c7f2:	6820      	ldr	r0, [r4, #0]
 800c7f4:	1ac0      	subs	r0, r0, r3
 800c7f6:	6963      	ldr	r3, [r4, #20]
 800c7f8:	b2f6      	uxtb	r6, r6
 800c7fa:	4283      	cmp	r3, r0
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	dc04      	bgt.n	800c80a <__swbuf_r+0x42>
 800c800:	4621      	mov	r1, r4
 800c802:	4628      	mov	r0, r5
 800c804:	f000 f93c 	bl	800ca80 <_fflush_r>
 800c808:	bb30      	cbnz	r0, 800c858 <__swbuf_r+0x90>
 800c80a:	68a3      	ldr	r3, [r4, #8]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	60a3      	str	r3, [r4, #8]
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	6022      	str	r2, [r4, #0]
 800c816:	701e      	strb	r6, [r3, #0]
 800c818:	6963      	ldr	r3, [r4, #20]
 800c81a:	3001      	adds	r0, #1
 800c81c:	4283      	cmp	r3, r0
 800c81e:	d004      	beq.n	800c82a <__swbuf_r+0x62>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	07db      	lsls	r3, r3, #31
 800c824:	d506      	bpl.n	800c834 <__swbuf_r+0x6c>
 800c826:	2e0a      	cmp	r6, #10
 800c828:	d104      	bne.n	800c834 <__swbuf_r+0x6c>
 800c82a:	4621      	mov	r1, r4
 800c82c:	4628      	mov	r0, r5
 800c82e:	f000 f927 	bl	800ca80 <_fflush_r>
 800c832:	b988      	cbnz	r0, 800c858 <__swbuf_r+0x90>
 800c834:	4638      	mov	r0, r7
 800c836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c838:	4b0a      	ldr	r3, [pc, #40]	; (800c864 <__swbuf_r+0x9c>)
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d101      	bne.n	800c842 <__swbuf_r+0x7a>
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	e7cf      	b.n	800c7e2 <__swbuf_r+0x1a>
 800c842:	4b09      	ldr	r3, [pc, #36]	; (800c868 <__swbuf_r+0xa0>)
 800c844:	429c      	cmp	r4, r3
 800c846:	bf08      	it	eq
 800c848:	68ec      	ldreq	r4, [r5, #12]
 800c84a:	e7ca      	b.n	800c7e2 <__swbuf_r+0x1a>
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f81a 	bl	800c888 <__swsetup_r>
 800c854:	2800      	cmp	r0, #0
 800c856:	d0cb      	beq.n	800c7f0 <__swbuf_r+0x28>
 800c858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c85c:	e7ea      	b.n	800c834 <__swbuf_r+0x6c>
 800c85e:	bf00      	nop
 800c860:	0800da74 	.word	0x0800da74
 800c864:	0800da94 	.word	0x0800da94
 800c868:	0800da54 	.word	0x0800da54

0800c86c <__ascii_wctomb>:
 800c86c:	b149      	cbz	r1, 800c882 <__ascii_wctomb+0x16>
 800c86e:	2aff      	cmp	r2, #255	; 0xff
 800c870:	bf85      	ittet	hi
 800c872:	238a      	movhi	r3, #138	; 0x8a
 800c874:	6003      	strhi	r3, [r0, #0]
 800c876:	700a      	strbls	r2, [r1, #0]
 800c878:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c87c:	bf98      	it	ls
 800c87e:	2001      	movls	r0, #1
 800c880:	4770      	bx	lr
 800c882:	4608      	mov	r0, r1
 800c884:	4770      	bx	lr
	...

0800c888 <__swsetup_r>:
 800c888:	4b32      	ldr	r3, [pc, #200]	; (800c954 <__swsetup_r+0xcc>)
 800c88a:	b570      	push	{r4, r5, r6, lr}
 800c88c:	681d      	ldr	r5, [r3, #0]
 800c88e:	4606      	mov	r6, r0
 800c890:	460c      	mov	r4, r1
 800c892:	b125      	cbz	r5, 800c89e <__swsetup_r+0x16>
 800c894:	69ab      	ldr	r3, [r5, #24]
 800c896:	b913      	cbnz	r3, 800c89e <__swsetup_r+0x16>
 800c898:	4628      	mov	r0, r5
 800c89a:	f000 f985 	bl	800cba8 <__sinit>
 800c89e:	4b2e      	ldr	r3, [pc, #184]	; (800c958 <__swsetup_r+0xd0>)
 800c8a0:	429c      	cmp	r4, r3
 800c8a2:	d10f      	bne.n	800c8c4 <__swsetup_r+0x3c>
 800c8a4:	686c      	ldr	r4, [r5, #4]
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8ac:	0719      	lsls	r1, r3, #28
 800c8ae:	d42c      	bmi.n	800c90a <__swsetup_r+0x82>
 800c8b0:	06dd      	lsls	r5, r3, #27
 800c8b2:	d411      	bmi.n	800c8d8 <__swsetup_r+0x50>
 800c8b4:	2309      	movs	r3, #9
 800c8b6:	6033      	str	r3, [r6, #0]
 800c8b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8bc:	81a3      	strh	r3, [r4, #12]
 800c8be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c2:	e03e      	b.n	800c942 <__swsetup_r+0xba>
 800c8c4:	4b25      	ldr	r3, [pc, #148]	; (800c95c <__swsetup_r+0xd4>)
 800c8c6:	429c      	cmp	r4, r3
 800c8c8:	d101      	bne.n	800c8ce <__swsetup_r+0x46>
 800c8ca:	68ac      	ldr	r4, [r5, #8]
 800c8cc:	e7eb      	b.n	800c8a6 <__swsetup_r+0x1e>
 800c8ce:	4b24      	ldr	r3, [pc, #144]	; (800c960 <__swsetup_r+0xd8>)
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	bf08      	it	eq
 800c8d4:	68ec      	ldreq	r4, [r5, #12]
 800c8d6:	e7e6      	b.n	800c8a6 <__swsetup_r+0x1e>
 800c8d8:	0758      	lsls	r0, r3, #29
 800c8da:	d512      	bpl.n	800c902 <__swsetup_r+0x7a>
 800c8dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8de:	b141      	cbz	r1, 800c8f2 <__swsetup_r+0x6a>
 800c8e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e4:	4299      	cmp	r1, r3
 800c8e6:	d002      	beq.n	800c8ee <__swsetup_r+0x66>
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff fb31 	bl	800bf50 <_free_r>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8f8:	81a3      	strh	r3, [r4, #12]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	6063      	str	r3, [r4, #4]
 800c8fe:	6923      	ldr	r3, [r4, #16]
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	f043 0308 	orr.w	r3, r3, #8
 800c908:	81a3      	strh	r3, [r4, #12]
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	b94b      	cbnz	r3, 800c922 <__swsetup_r+0x9a>
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c918:	d003      	beq.n	800c922 <__swsetup_r+0x9a>
 800c91a:	4621      	mov	r1, r4
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 fa09 	bl	800cd34 <__smakebuf_r>
 800c922:	89a0      	ldrh	r0, [r4, #12]
 800c924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c928:	f010 0301 	ands.w	r3, r0, #1
 800c92c:	d00a      	beq.n	800c944 <__swsetup_r+0xbc>
 800c92e:	2300      	movs	r3, #0
 800c930:	60a3      	str	r3, [r4, #8]
 800c932:	6963      	ldr	r3, [r4, #20]
 800c934:	425b      	negs	r3, r3
 800c936:	61a3      	str	r3, [r4, #24]
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	b943      	cbnz	r3, 800c94e <__swsetup_r+0xc6>
 800c93c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c940:	d1ba      	bne.n	800c8b8 <__swsetup_r+0x30>
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	0781      	lsls	r1, r0, #30
 800c946:	bf58      	it	pl
 800c948:	6963      	ldrpl	r3, [r4, #20]
 800c94a:	60a3      	str	r3, [r4, #8]
 800c94c:	e7f4      	b.n	800c938 <__swsetup_r+0xb0>
 800c94e:	2000      	movs	r0, #0
 800c950:	e7f7      	b.n	800c942 <__swsetup_r+0xba>
 800c952:	bf00      	nop
 800c954:	200000fc 	.word	0x200000fc
 800c958:	0800da74 	.word	0x0800da74
 800c95c:	0800da94 	.word	0x0800da94
 800c960:	0800da54 	.word	0x0800da54

0800c964 <abort>:
 800c964:	b508      	push	{r3, lr}
 800c966:	2006      	movs	r0, #6
 800c968:	f000 fa54 	bl	800ce14 <raise>
 800c96c:	2001      	movs	r0, #1
 800c96e:	f7f5 fac5 	bl	8001efc <_exit>
	...

0800c974 <__sflush_r>:
 800c974:	898a      	ldrh	r2, [r1, #12]
 800c976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c97a:	4605      	mov	r5, r0
 800c97c:	0710      	lsls	r0, r2, #28
 800c97e:	460c      	mov	r4, r1
 800c980:	d458      	bmi.n	800ca34 <__sflush_r+0xc0>
 800c982:	684b      	ldr	r3, [r1, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	dc05      	bgt.n	800c994 <__sflush_r+0x20>
 800c988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	dc02      	bgt.n	800c994 <__sflush_r+0x20>
 800c98e:	2000      	movs	r0, #0
 800c990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c996:	2e00      	cmp	r6, #0
 800c998:	d0f9      	beq.n	800c98e <__sflush_r+0x1a>
 800c99a:	2300      	movs	r3, #0
 800c99c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9a0:	682f      	ldr	r7, [r5, #0]
 800c9a2:	602b      	str	r3, [r5, #0]
 800c9a4:	d032      	beq.n	800ca0c <__sflush_r+0x98>
 800c9a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9a8:	89a3      	ldrh	r3, [r4, #12]
 800c9aa:	075a      	lsls	r2, r3, #29
 800c9ac:	d505      	bpl.n	800c9ba <__sflush_r+0x46>
 800c9ae:	6863      	ldr	r3, [r4, #4]
 800c9b0:	1ac0      	subs	r0, r0, r3
 800c9b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9b4:	b10b      	cbz	r3, 800c9ba <__sflush_r+0x46>
 800c9b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9b8:	1ac0      	subs	r0, r0, r3
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4602      	mov	r2, r0
 800c9be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9c0:	6a21      	ldr	r1, [r4, #32]
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	47b0      	blx	r6
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	d106      	bne.n	800c9da <__sflush_r+0x66>
 800c9cc:	6829      	ldr	r1, [r5, #0]
 800c9ce:	291d      	cmp	r1, #29
 800c9d0:	d82c      	bhi.n	800ca2c <__sflush_r+0xb8>
 800c9d2:	4a2a      	ldr	r2, [pc, #168]	; (800ca7c <__sflush_r+0x108>)
 800c9d4:	40ca      	lsrs	r2, r1
 800c9d6:	07d6      	lsls	r6, r2, #31
 800c9d8:	d528      	bpl.n	800ca2c <__sflush_r+0xb8>
 800c9da:	2200      	movs	r2, #0
 800c9dc:	6062      	str	r2, [r4, #4]
 800c9de:	04d9      	lsls	r1, r3, #19
 800c9e0:	6922      	ldr	r2, [r4, #16]
 800c9e2:	6022      	str	r2, [r4, #0]
 800c9e4:	d504      	bpl.n	800c9f0 <__sflush_r+0x7c>
 800c9e6:	1c42      	adds	r2, r0, #1
 800c9e8:	d101      	bne.n	800c9ee <__sflush_r+0x7a>
 800c9ea:	682b      	ldr	r3, [r5, #0]
 800c9ec:	b903      	cbnz	r3, 800c9f0 <__sflush_r+0x7c>
 800c9ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f2:	602f      	str	r7, [r5, #0]
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	d0ca      	beq.n	800c98e <__sflush_r+0x1a>
 800c9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <__sflush_r+0x92>
 800ca00:	4628      	mov	r0, r5
 800ca02:	f7ff faa5 	bl	800bf50 <_free_r>
 800ca06:	2000      	movs	r0, #0
 800ca08:	6360      	str	r0, [r4, #52]	; 0x34
 800ca0a:	e7c1      	b.n	800c990 <__sflush_r+0x1c>
 800ca0c:	6a21      	ldr	r1, [r4, #32]
 800ca0e:	2301      	movs	r3, #1
 800ca10:	4628      	mov	r0, r5
 800ca12:	47b0      	blx	r6
 800ca14:	1c41      	adds	r1, r0, #1
 800ca16:	d1c7      	bne.n	800c9a8 <__sflush_r+0x34>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0c4      	beq.n	800c9a8 <__sflush_r+0x34>
 800ca1e:	2b1d      	cmp	r3, #29
 800ca20:	d001      	beq.n	800ca26 <__sflush_r+0xb2>
 800ca22:	2b16      	cmp	r3, #22
 800ca24:	d101      	bne.n	800ca2a <__sflush_r+0xb6>
 800ca26:	602f      	str	r7, [r5, #0]
 800ca28:	e7b1      	b.n	800c98e <__sflush_r+0x1a>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca30:	81a3      	strh	r3, [r4, #12]
 800ca32:	e7ad      	b.n	800c990 <__sflush_r+0x1c>
 800ca34:	690f      	ldr	r7, [r1, #16]
 800ca36:	2f00      	cmp	r7, #0
 800ca38:	d0a9      	beq.n	800c98e <__sflush_r+0x1a>
 800ca3a:	0793      	lsls	r3, r2, #30
 800ca3c:	680e      	ldr	r6, [r1, #0]
 800ca3e:	bf08      	it	eq
 800ca40:	694b      	ldreq	r3, [r1, #20]
 800ca42:	600f      	str	r7, [r1, #0]
 800ca44:	bf18      	it	ne
 800ca46:	2300      	movne	r3, #0
 800ca48:	eba6 0807 	sub.w	r8, r6, r7
 800ca4c:	608b      	str	r3, [r1, #8]
 800ca4e:	f1b8 0f00 	cmp.w	r8, #0
 800ca52:	dd9c      	ble.n	800c98e <__sflush_r+0x1a>
 800ca54:	6a21      	ldr	r1, [r4, #32]
 800ca56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca58:	4643      	mov	r3, r8
 800ca5a:	463a      	mov	r2, r7
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	47b0      	blx	r6
 800ca60:	2800      	cmp	r0, #0
 800ca62:	dc06      	bgt.n	800ca72 <__sflush_r+0xfe>
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca6a:	81a3      	strh	r3, [r4, #12]
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca70:	e78e      	b.n	800c990 <__sflush_r+0x1c>
 800ca72:	4407      	add	r7, r0
 800ca74:	eba8 0800 	sub.w	r8, r8, r0
 800ca78:	e7e9      	b.n	800ca4e <__sflush_r+0xda>
 800ca7a:	bf00      	nop
 800ca7c:	20400001 	.word	0x20400001

0800ca80 <_fflush_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	690b      	ldr	r3, [r1, #16]
 800ca84:	4605      	mov	r5, r0
 800ca86:	460c      	mov	r4, r1
 800ca88:	b913      	cbnz	r3, 800ca90 <_fflush_r+0x10>
 800ca8a:	2500      	movs	r5, #0
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	bd38      	pop	{r3, r4, r5, pc}
 800ca90:	b118      	cbz	r0, 800ca9a <_fflush_r+0x1a>
 800ca92:	6983      	ldr	r3, [r0, #24]
 800ca94:	b90b      	cbnz	r3, 800ca9a <_fflush_r+0x1a>
 800ca96:	f000 f887 	bl	800cba8 <__sinit>
 800ca9a:	4b14      	ldr	r3, [pc, #80]	; (800caec <_fflush_r+0x6c>)
 800ca9c:	429c      	cmp	r4, r3
 800ca9e:	d11b      	bne.n	800cad8 <_fflush_r+0x58>
 800caa0:	686c      	ldr	r4, [r5, #4]
 800caa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d0ef      	beq.n	800ca8a <_fflush_r+0xa>
 800caaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800caac:	07d0      	lsls	r0, r2, #31
 800caae:	d404      	bmi.n	800caba <_fflush_r+0x3a>
 800cab0:	0599      	lsls	r1, r3, #22
 800cab2:	d402      	bmi.n	800caba <_fflush_r+0x3a>
 800cab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cab6:	f000 f915 	bl	800cce4 <__retarget_lock_acquire_recursive>
 800caba:	4628      	mov	r0, r5
 800cabc:	4621      	mov	r1, r4
 800cabe:	f7ff ff59 	bl	800c974 <__sflush_r>
 800cac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cac4:	07da      	lsls	r2, r3, #31
 800cac6:	4605      	mov	r5, r0
 800cac8:	d4e0      	bmi.n	800ca8c <_fflush_r+0xc>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	059b      	lsls	r3, r3, #22
 800cace:	d4dd      	bmi.n	800ca8c <_fflush_r+0xc>
 800cad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cad2:	f000 f908 	bl	800cce6 <__retarget_lock_release_recursive>
 800cad6:	e7d9      	b.n	800ca8c <_fflush_r+0xc>
 800cad8:	4b05      	ldr	r3, [pc, #20]	; (800caf0 <_fflush_r+0x70>)
 800cada:	429c      	cmp	r4, r3
 800cadc:	d101      	bne.n	800cae2 <_fflush_r+0x62>
 800cade:	68ac      	ldr	r4, [r5, #8]
 800cae0:	e7df      	b.n	800caa2 <_fflush_r+0x22>
 800cae2:	4b04      	ldr	r3, [pc, #16]	; (800caf4 <_fflush_r+0x74>)
 800cae4:	429c      	cmp	r4, r3
 800cae6:	bf08      	it	eq
 800cae8:	68ec      	ldreq	r4, [r5, #12]
 800caea:	e7da      	b.n	800caa2 <_fflush_r+0x22>
 800caec:	0800da74 	.word	0x0800da74
 800caf0:	0800da94 	.word	0x0800da94
 800caf4:	0800da54 	.word	0x0800da54

0800caf8 <std>:
 800caf8:	2300      	movs	r3, #0
 800cafa:	b510      	push	{r4, lr}
 800cafc:	4604      	mov	r4, r0
 800cafe:	e9c0 3300 	strd	r3, r3, [r0]
 800cb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb06:	6083      	str	r3, [r0, #8]
 800cb08:	8181      	strh	r1, [r0, #12]
 800cb0a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb0c:	81c2      	strh	r2, [r0, #14]
 800cb0e:	6183      	str	r3, [r0, #24]
 800cb10:	4619      	mov	r1, r3
 800cb12:	2208      	movs	r2, #8
 800cb14:	305c      	adds	r0, #92	; 0x5c
 800cb16:	f7fd fb69 	bl	800a1ec <memset>
 800cb1a:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <std+0x38>)
 800cb1c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb1e:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <std+0x3c>)
 800cb20:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb22:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <std+0x40>)
 800cb24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <std+0x44>)
 800cb28:	6224      	str	r4, [r4, #32]
 800cb2a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	bf00      	nop
 800cb30:	0800ce4d 	.word	0x0800ce4d
 800cb34:	0800ce6f 	.word	0x0800ce6f
 800cb38:	0800cea7 	.word	0x0800cea7
 800cb3c:	0800cecb 	.word	0x0800cecb

0800cb40 <_cleanup_r>:
 800cb40:	4901      	ldr	r1, [pc, #4]	; (800cb48 <_cleanup_r+0x8>)
 800cb42:	f000 b8af 	b.w	800cca4 <_fwalk_reent>
 800cb46:	bf00      	nop
 800cb48:	0800ca81 	.word	0x0800ca81

0800cb4c <__sfmoreglue>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	2268      	movs	r2, #104	; 0x68
 800cb50:	1e4d      	subs	r5, r1, #1
 800cb52:	4355      	muls	r5, r2
 800cb54:	460e      	mov	r6, r1
 800cb56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb5a:	f7ff fa65 	bl	800c028 <_malloc_r>
 800cb5e:	4604      	mov	r4, r0
 800cb60:	b140      	cbz	r0, 800cb74 <__sfmoreglue+0x28>
 800cb62:	2100      	movs	r1, #0
 800cb64:	e9c0 1600 	strd	r1, r6, [r0]
 800cb68:	300c      	adds	r0, #12
 800cb6a:	60a0      	str	r0, [r4, #8]
 800cb6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb70:	f7fd fb3c 	bl	800a1ec <memset>
 800cb74:	4620      	mov	r0, r4
 800cb76:	bd70      	pop	{r4, r5, r6, pc}

0800cb78 <__sfp_lock_acquire>:
 800cb78:	4801      	ldr	r0, [pc, #4]	; (800cb80 <__sfp_lock_acquire+0x8>)
 800cb7a:	f000 b8b3 	b.w	800cce4 <__retarget_lock_acquire_recursive>
 800cb7e:	bf00      	nop
 800cb80:	200020dd 	.word	0x200020dd

0800cb84 <__sfp_lock_release>:
 800cb84:	4801      	ldr	r0, [pc, #4]	; (800cb8c <__sfp_lock_release+0x8>)
 800cb86:	f000 b8ae 	b.w	800cce6 <__retarget_lock_release_recursive>
 800cb8a:	bf00      	nop
 800cb8c:	200020dd 	.word	0x200020dd

0800cb90 <__sinit_lock_acquire>:
 800cb90:	4801      	ldr	r0, [pc, #4]	; (800cb98 <__sinit_lock_acquire+0x8>)
 800cb92:	f000 b8a7 	b.w	800cce4 <__retarget_lock_acquire_recursive>
 800cb96:	bf00      	nop
 800cb98:	200020de 	.word	0x200020de

0800cb9c <__sinit_lock_release>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	; (800cba4 <__sinit_lock_release+0x8>)
 800cb9e:	f000 b8a2 	b.w	800cce6 <__retarget_lock_release_recursive>
 800cba2:	bf00      	nop
 800cba4:	200020de 	.word	0x200020de

0800cba8 <__sinit>:
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	4604      	mov	r4, r0
 800cbac:	f7ff fff0 	bl	800cb90 <__sinit_lock_acquire>
 800cbb0:	69a3      	ldr	r3, [r4, #24]
 800cbb2:	b11b      	cbz	r3, 800cbbc <__sinit+0x14>
 800cbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbb8:	f7ff bff0 	b.w	800cb9c <__sinit_lock_release>
 800cbbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbc0:	6523      	str	r3, [r4, #80]	; 0x50
 800cbc2:	4b13      	ldr	r3, [pc, #76]	; (800cc10 <__sinit+0x68>)
 800cbc4:	4a13      	ldr	r2, [pc, #76]	; (800cc14 <__sinit+0x6c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	bf04      	itt	eq
 800cbce:	2301      	moveq	r3, #1
 800cbd0:	61a3      	streq	r3, [r4, #24]
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f000 f820 	bl	800cc18 <__sfp>
 800cbd8:	6060      	str	r0, [r4, #4]
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f000 f81c 	bl	800cc18 <__sfp>
 800cbe0:	60a0      	str	r0, [r4, #8]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 f818 	bl	800cc18 <__sfp>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	60e0      	str	r0, [r4, #12]
 800cbec:	2104      	movs	r1, #4
 800cbee:	6860      	ldr	r0, [r4, #4]
 800cbf0:	f7ff ff82 	bl	800caf8 <std>
 800cbf4:	68a0      	ldr	r0, [r4, #8]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	2109      	movs	r1, #9
 800cbfa:	f7ff ff7d 	bl	800caf8 <std>
 800cbfe:	68e0      	ldr	r0, [r4, #12]
 800cc00:	2202      	movs	r2, #2
 800cc02:	2112      	movs	r1, #18
 800cc04:	f7ff ff78 	bl	800caf8 <std>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	61a3      	str	r3, [r4, #24]
 800cc0c:	e7d2      	b.n	800cbb4 <__sinit+0xc>
 800cc0e:	bf00      	nop
 800cc10:	0800d6dc 	.word	0x0800d6dc
 800cc14:	0800cb41 	.word	0x0800cb41

0800cc18 <__sfp>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	4607      	mov	r7, r0
 800cc1c:	f7ff ffac 	bl	800cb78 <__sfp_lock_acquire>
 800cc20:	4b1e      	ldr	r3, [pc, #120]	; (800cc9c <__sfp+0x84>)
 800cc22:	681e      	ldr	r6, [r3, #0]
 800cc24:	69b3      	ldr	r3, [r6, #24]
 800cc26:	b913      	cbnz	r3, 800cc2e <__sfp+0x16>
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7ff ffbd 	bl	800cba8 <__sinit>
 800cc2e:	3648      	adds	r6, #72	; 0x48
 800cc30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	d503      	bpl.n	800cc40 <__sfp+0x28>
 800cc38:	6833      	ldr	r3, [r6, #0]
 800cc3a:	b30b      	cbz	r3, 800cc80 <__sfp+0x68>
 800cc3c:	6836      	ldr	r6, [r6, #0]
 800cc3e:	e7f7      	b.n	800cc30 <__sfp+0x18>
 800cc40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc44:	b9d5      	cbnz	r5, 800cc7c <__sfp+0x64>
 800cc46:	4b16      	ldr	r3, [pc, #88]	; (800cca0 <__sfp+0x88>)
 800cc48:	60e3      	str	r3, [r4, #12]
 800cc4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc4e:	6665      	str	r5, [r4, #100]	; 0x64
 800cc50:	f000 f847 	bl	800cce2 <__retarget_lock_init_recursive>
 800cc54:	f7ff ff96 	bl	800cb84 <__sfp_lock_release>
 800cc58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc60:	6025      	str	r5, [r4, #0]
 800cc62:	61a5      	str	r5, [r4, #24]
 800cc64:	2208      	movs	r2, #8
 800cc66:	4629      	mov	r1, r5
 800cc68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc6c:	f7fd fabe 	bl	800a1ec <memset>
 800cc70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc78:	4620      	mov	r0, r4
 800cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc7c:	3468      	adds	r4, #104	; 0x68
 800cc7e:	e7d9      	b.n	800cc34 <__sfp+0x1c>
 800cc80:	2104      	movs	r1, #4
 800cc82:	4638      	mov	r0, r7
 800cc84:	f7ff ff62 	bl	800cb4c <__sfmoreglue>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	6030      	str	r0, [r6, #0]
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d1d5      	bne.n	800cc3c <__sfp+0x24>
 800cc90:	f7ff ff78 	bl	800cb84 <__sfp_lock_release>
 800cc94:	230c      	movs	r3, #12
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	e7ee      	b.n	800cc78 <__sfp+0x60>
 800cc9a:	bf00      	nop
 800cc9c:	0800d6dc 	.word	0x0800d6dc
 800cca0:	ffff0001 	.word	0xffff0001

0800cca4 <_fwalk_reent>:
 800cca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca8:	4606      	mov	r6, r0
 800ccaa:	4688      	mov	r8, r1
 800ccac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccb0:	2700      	movs	r7, #0
 800ccb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccb6:	f1b9 0901 	subs.w	r9, r9, #1
 800ccba:	d505      	bpl.n	800ccc8 <_fwalk_reent+0x24>
 800ccbc:	6824      	ldr	r4, [r4, #0]
 800ccbe:	2c00      	cmp	r4, #0
 800ccc0:	d1f7      	bne.n	800ccb2 <_fwalk_reent+0xe>
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc8:	89ab      	ldrh	r3, [r5, #12]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d907      	bls.n	800ccde <_fwalk_reent+0x3a>
 800ccce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	d003      	beq.n	800ccde <_fwalk_reent+0x3a>
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	4630      	mov	r0, r6
 800ccda:	47c0      	blx	r8
 800ccdc:	4307      	orrs	r7, r0
 800ccde:	3568      	adds	r5, #104	; 0x68
 800cce0:	e7e9      	b.n	800ccb6 <_fwalk_reent+0x12>

0800cce2 <__retarget_lock_init_recursive>:
 800cce2:	4770      	bx	lr

0800cce4 <__retarget_lock_acquire_recursive>:
 800cce4:	4770      	bx	lr

0800cce6 <__retarget_lock_release_recursive>:
 800cce6:	4770      	bx	lr

0800cce8 <__swhatbuf_r>:
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	460e      	mov	r6, r1
 800ccec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	b096      	sub	sp, #88	; 0x58
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	461d      	mov	r5, r3
 800ccf8:	da08      	bge.n	800cd0c <__swhatbuf_r+0x24>
 800ccfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	602a      	str	r2, [r5, #0]
 800cd02:	061a      	lsls	r2, r3, #24
 800cd04:	d410      	bmi.n	800cd28 <__swhatbuf_r+0x40>
 800cd06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd0a:	e00e      	b.n	800cd2a <__swhatbuf_r+0x42>
 800cd0c:	466a      	mov	r2, sp
 800cd0e:	f000 f903 	bl	800cf18 <_fstat_r>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	dbf1      	blt.n	800ccfa <__swhatbuf_r+0x12>
 800cd16:	9a01      	ldr	r2, [sp, #4]
 800cd18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd20:	425a      	negs	r2, r3
 800cd22:	415a      	adcs	r2, r3
 800cd24:	602a      	str	r2, [r5, #0]
 800cd26:	e7ee      	b.n	800cd06 <__swhatbuf_r+0x1e>
 800cd28:	2340      	movs	r3, #64	; 0x40
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	b016      	add	sp, #88	; 0x58
 800cd30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd34 <__smakebuf_r>:
 800cd34:	898b      	ldrh	r3, [r1, #12]
 800cd36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd38:	079d      	lsls	r5, r3, #30
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	d507      	bpl.n	800cd50 <__smakebuf_r+0x1c>
 800cd40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	6123      	str	r3, [r4, #16]
 800cd48:	2301      	movs	r3, #1
 800cd4a:	6163      	str	r3, [r4, #20]
 800cd4c:	b002      	add	sp, #8
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	ab01      	add	r3, sp, #4
 800cd52:	466a      	mov	r2, sp
 800cd54:	f7ff ffc8 	bl	800cce8 <__swhatbuf_r>
 800cd58:	9900      	ldr	r1, [sp, #0]
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f7ff f963 	bl	800c028 <_malloc_r>
 800cd62:	b948      	cbnz	r0, 800cd78 <__smakebuf_r+0x44>
 800cd64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd68:	059a      	lsls	r2, r3, #22
 800cd6a:	d4ef      	bmi.n	800cd4c <__smakebuf_r+0x18>
 800cd6c:	f023 0303 	bic.w	r3, r3, #3
 800cd70:	f043 0302 	orr.w	r3, r3, #2
 800cd74:	81a3      	strh	r3, [r4, #12]
 800cd76:	e7e3      	b.n	800cd40 <__smakebuf_r+0xc>
 800cd78:	4b0d      	ldr	r3, [pc, #52]	; (800cdb0 <__smakebuf_r+0x7c>)
 800cd7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	6020      	str	r0, [r4, #0]
 800cd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	9b00      	ldr	r3, [sp, #0]
 800cd88:	6163      	str	r3, [r4, #20]
 800cd8a:	9b01      	ldr	r3, [sp, #4]
 800cd8c:	6120      	str	r0, [r4, #16]
 800cd8e:	b15b      	cbz	r3, 800cda8 <__smakebuf_r+0x74>
 800cd90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd94:	4630      	mov	r0, r6
 800cd96:	f000 f8d1 	bl	800cf3c <_isatty_r>
 800cd9a:	b128      	cbz	r0, 800cda8 <__smakebuf_r+0x74>
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	f023 0303 	bic.w	r3, r3, #3
 800cda2:	f043 0301 	orr.w	r3, r3, #1
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	89a0      	ldrh	r0, [r4, #12]
 800cdaa:	4305      	orrs	r5, r0
 800cdac:	81a5      	strh	r5, [r4, #12]
 800cdae:	e7cd      	b.n	800cd4c <__smakebuf_r+0x18>
 800cdb0:	0800cb41 	.word	0x0800cb41

0800cdb4 <_malloc_usable_size_r>:
 800cdb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdb8:	1f18      	subs	r0, r3, #4
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bfbc      	itt	lt
 800cdbe:	580b      	ldrlt	r3, [r1, r0]
 800cdc0:	18c0      	addlt	r0, r0, r3
 800cdc2:	4770      	bx	lr

0800cdc4 <_raise_r>:
 800cdc4:	291f      	cmp	r1, #31
 800cdc6:	b538      	push	{r3, r4, r5, lr}
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	d904      	bls.n	800cdd8 <_raise_r+0x14>
 800cdce:	2316      	movs	r3, #22
 800cdd0:	6003      	str	r3, [r0, #0]
 800cdd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cdda:	b112      	cbz	r2, 800cde2 <_raise_r+0x1e>
 800cddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cde0:	b94b      	cbnz	r3, 800cdf6 <_raise_r+0x32>
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 f830 	bl	800ce48 <_getpid_r>
 800cde8:	462a      	mov	r2, r5
 800cdea:	4601      	mov	r1, r0
 800cdec:	4620      	mov	r0, r4
 800cdee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdf2:	f000 b817 	b.w	800ce24 <_kill_r>
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d00a      	beq.n	800ce10 <_raise_r+0x4c>
 800cdfa:	1c59      	adds	r1, r3, #1
 800cdfc:	d103      	bne.n	800ce06 <_raise_r+0x42>
 800cdfe:	2316      	movs	r3, #22
 800ce00:	6003      	str	r3, [r0, #0]
 800ce02:	2001      	movs	r0, #1
 800ce04:	e7e7      	b.n	800cdd6 <_raise_r+0x12>
 800ce06:	2400      	movs	r4, #0
 800ce08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	4798      	blx	r3
 800ce10:	2000      	movs	r0, #0
 800ce12:	e7e0      	b.n	800cdd6 <_raise_r+0x12>

0800ce14 <raise>:
 800ce14:	4b02      	ldr	r3, [pc, #8]	; (800ce20 <raise+0xc>)
 800ce16:	4601      	mov	r1, r0
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	f7ff bfd3 	b.w	800cdc4 <_raise_r>
 800ce1e:	bf00      	nop
 800ce20:	200000fc 	.word	0x200000fc

0800ce24 <_kill_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	4d07      	ldr	r5, [pc, #28]	; (800ce44 <_kill_r+0x20>)
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	4611      	mov	r1, r2
 800ce30:	602b      	str	r3, [r5, #0]
 800ce32:	f7f5 f853 	bl	8001edc <_kill>
 800ce36:	1c43      	adds	r3, r0, #1
 800ce38:	d102      	bne.n	800ce40 <_kill_r+0x1c>
 800ce3a:	682b      	ldr	r3, [r5, #0]
 800ce3c:	b103      	cbz	r3, 800ce40 <_kill_r+0x1c>
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	bd38      	pop	{r3, r4, r5, pc}
 800ce42:	bf00      	nop
 800ce44:	200020d8 	.word	0x200020d8

0800ce48 <_getpid_r>:
 800ce48:	f7f5 b840 	b.w	8001ecc <_getpid>

0800ce4c <__sread>:
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	460c      	mov	r4, r1
 800ce50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce54:	f000 f894 	bl	800cf80 <_read_r>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	bfab      	itete	ge
 800ce5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce60:	181b      	addge	r3, r3, r0
 800ce62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce66:	bfac      	ite	ge
 800ce68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce6a:	81a3      	strhlt	r3, [r4, #12]
 800ce6c:	bd10      	pop	{r4, pc}

0800ce6e <__swrite>:
 800ce6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce72:	461f      	mov	r7, r3
 800ce74:	898b      	ldrh	r3, [r1, #12]
 800ce76:	05db      	lsls	r3, r3, #23
 800ce78:	4605      	mov	r5, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	d505      	bpl.n	800ce8c <__swrite+0x1e>
 800ce80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce84:	2302      	movs	r3, #2
 800ce86:	2200      	movs	r2, #0
 800ce88:	f000 f868 	bl	800cf5c <_lseek_r>
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce96:	81a3      	strh	r3, [r4, #12]
 800ce98:	4632      	mov	r2, r6
 800ce9a:	463b      	mov	r3, r7
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cea2:	f000 b817 	b.w	800ced4 <_write_r>

0800cea6 <__sseek>:
 800cea6:	b510      	push	{r4, lr}
 800cea8:	460c      	mov	r4, r1
 800ceaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceae:	f000 f855 	bl	800cf5c <_lseek_r>
 800ceb2:	1c43      	adds	r3, r0, #1
 800ceb4:	89a3      	ldrh	r3, [r4, #12]
 800ceb6:	bf15      	itete	ne
 800ceb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cec2:	81a3      	strheq	r3, [r4, #12]
 800cec4:	bf18      	it	ne
 800cec6:	81a3      	strhne	r3, [r4, #12]
 800cec8:	bd10      	pop	{r4, pc}

0800ceca <__sclose>:
 800ceca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cece:	f000 b813 	b.w	800cef8 <_close_r>
	...

0800ced4 <_write_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d07      	ldr	r5, [pc, #28]	; (800cef4 <_write_r+0x20>)
 800ced8:	4604      	mov	r4, r0
 800ceda:	4608      	mov	r0, r1
 800cedc:	4611      	mov	r1, r2
 800cede:	2200      	movs	r2, #0
 800cee0:	602a      	str	r2, [r5, #0]
 800cee2:	461a      	mov	r2, r3
 800cee4:	f7f5 f831 	bl	8001f4a <_write>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_write_r+0x1e>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_write_r+0x1e>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	200020d8 	.word	0x200020d8

0800cef8 <_close_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4d06      	ldr	r5, [pc, #24]	; (800cf14 <_close_r+0x1c>)
 800cefc:	2300      	movs	r3, #0
 800cefe:	4604      	mov	r4, r0
 800cf00:	4608      	mov	r0, r1
 800cf02:	602b      	str	r3, [r5, #0]
 800cf04:	f7f5 f83d 	bl	8001f82 <_close>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_close_r+0x1a>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_close_r+0x1a>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	200020d8 	.word	0x200020d8

0800cf18 <_fstat_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	; (800cf38 <_fstat_r+0x20>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	4611      	mov	r1, r2
 800cf24:	602b      	str	r3, [r5, #0]
 800cf26:	f7f5 f838 	bl	8001f9a <_fstat>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d102      	bne.n	800cf34 <_fstat_r+0x1c>
 800cf2e:	682b      	ldr	r3, [r5, #0]
 800cf30:	b103      	cbz	r3, 800cf34 <_fstat_r+0x1c>
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	bd38      	pop	{r3, r4, r5, pc}
 800cf36:	bf00      	nop
 800cf38:	200020d8 	.word	0x200020d8

0800cf3c <_isatty_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4d06      	ldr	r5, [pc, #24]	; (800cf58 <_isatty_r+0x1c>)
 800cf40:	2300      	movs	r3, #0
 800cf42:	4604      	mov	r4, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	f7f5 f837 	bl	8001fba <_isatty>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_isatty_r+0x1a>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_isatty_r+0x1a>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	200020d8 	.word	0x200020d8

0800cf5c <_lseek_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d07      	ldr	r5, [pc, #28]	; (800cf7c <_lseek_r+0x20>)
 800cf60:	4604      	mov	r4, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	4611      	mov	r1, r2
 800cf66:	2200      	movs	r2, #0
 800cf68:	602a      	str	r2, [r5, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f7f5 f830 	bl	8001fd0 <_lseek>
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	d102      	bne.n	800cf7a <_lseek_r+0x1e>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b103      	cbz	r3, 800cf7a <_lseek_r+0x1e>
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	200020d8 	.word	0x200020d8

0800cf80 <_read_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d07      	ldr	r5, [pc, #28]	; (800cfa0 <_read_r+0x20>)
 800cf84:	4604      	mov	r4, r0
 800cf86:	4608      	mov	r0, r1
 800cf88:	4611      	mov	r1, r2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	602a      	str	r2, [r5, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f7f4 ffbe 	bl	8001f10 <_read>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_read_r+0x1e>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_read_r+0x1e>
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	200020d8 	.word	0x200020d8

0800cfa4 <atan2>:
 800cfa4:	f000 b82c 	b.w	800d000 <__ieee754_atan2>

0800cfa8 <sqrt>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	ed2d 8b02 	vpush	{d8}
 800cfae:	ec55 4b10 	vmov	r4, r5, d0
 800cfb2:	f000 f8ef 	bl	800d194 <__ieee754_sqrt>
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	462b      	mov	r3, r5
 800cfba:	4620      	mov	r0, r4
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	eeb0 8a40 	vmov.f32	s16, s0
 800cfc2:	eef0 8a60 	vmov.f32	s17, s1
 800cfc6:	f7f3 fdb9 	bl	8000b3c <__aeabi_dcmpun>
 800cfca:	b990      	cbnz	r0, 800cff2 <sqrt+0x4a>
 800cfcc:	2200      	movs	r2, #0
 800cfce:	2300      	movs	r3, #0
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	f7f3 fd8a 	bl	8000aec <__aeabi_dcmplt>
 800cfd8:	b158      	cbz	r0, 800cff2 <sqrt+0x4a>
 800cfda:	f7fd f8cf 	bl	800a17c <__errno>
 800cfde:	2321      	movs	r3, #33	; 0x21
 800cfe0:	6003      	str	r3, [r0, #0]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	4619      	mov	r1, r3
 800cfea:	f7f3 fc37 	bl	800085c <__aeabi_ddiv>
 800cfee:	ec41 0b18 	vmov	d8, r0, r1
 800cff2:	eeb0 0a48 	vmov.f32	s0, s16
 800cff6:	eef0 0a68 	vmov.f32	s1, s17
 800cffa:	ecbd 8b02 	vpop	{d8}
 800cffe:	bd38      	pop	{r3, r4, r5, pc}

0800d000 <__ieee754_atan2>:
 800d000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d004:	ec57 6b11 	vmov	r6, r7, d1
 800d008:	4273      	negs	r3, r6
 800d00a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d190 <__ieee754_atan2+0x190>
 800d00e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d012:	4333      	orrs	r3, r6
 800d014:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d018:	4573      	cmp	r3, lr
 800d01a:	ec51 0b10 	vmov	r0, r1, d0
 800d01e:	ee11 8a10 	vmov	r8, s2
 800d022:	d80a      	bhi.n	800d03a <__ieee754_atan2+0x3a>
 800d024:	4244      	negs	r4, r0
 800d026:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d02a:	4304      	orrs	r4, r0
 800d02c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d030:	4574      	cmp	r4, lr
 800d032:	ee10 9a10 	vmov	r9, s0
 800d036:	468c      	mov	ip, r1
 800d038:	d907      	bls.n	800d04a <__ieee754_atan2+0x4a>
 800d03a:	4632      	mov	r2, r6
 800d03c:	463b      	mov	r3, r7
 800d03e:	f7f3 f92d 	bl	800029c <__adddf3>
 800d042:	ec41 0b10 	vmov	d0, r0, r1
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d04e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d052:	4334      	orrs	r4, r6
 800d054:	d103      	bne.n	800d05e <__ieee754_atan2+0x5e>
 800d056:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d05a:	f000 b94d 	b.w	800d2f8 <atan>
 800d05e:	17bc      	asrs	r4, r7, #30
 800d060:	f004 0402 	and.w	r4, r4, #2
 800d064:	ea53 0909 	orrs.w	r9, r3, r9
 800d068:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d06c:	d107      	bne.n	800d07e <__ieee754_atan2+0x7e>
 800d06e:	2c02      	cmp	r4, #2
 800d070:	d060      	beq.n	800d134 <__ieee754_atan2+0x134>
 800d072:	2c03      	cmp	r4, #3
 800d074:	d1e5      	bne.n	800d042 <__ieee754_atan2+0x42>
 800d076:	a142      	add	r1, pc, #264	; (adr r1, 800d180 <__ieee754_atan2+0x180>)
 800d078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d07c:	e7e1      	b.n	800d042 <__ieee754_atan2+0x42>
 800d07e:	ea52 0808 	orrs.w	r8, r2, r8
 800d082:	d106      	bne.n	800d092 <__ieee754_atan2+0x92>
 800d084:	f1bc 0f00 	cmp.w	ip, #0
 800d088:	da5f      	bge.n	800d14a <__ieee754_atan2+0x14a>
 800d08a:	a13f      	add	r1, pc, #252	; (adr r1, 800d188 <__ieee754_atan2+0x188>)
 800d08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d090:	e7d7      	b.n	800d042 <__ieee754_atan2+0x42>
 800d092:	4572      	cmp	r2, lr
 800d094:	d10f      	bne.n	800d0b6 <__ieee754_atan2+0xb6>
 800d096:	4293      	cmp	r3, r2
 800d098:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d09c:	d107      	bne.n	800d0ae <__ieee754_atan2+0xae>
 800d09e:	2c02      	cmp	r4, #2
 800d0a0:	d84c      	bhi.n	800d13c <__ieee754_atan2+0x13c>
 800d0a2:	4b35      	ldr	r3, [pc, #212]	; (800d178 <__ieee754_atan2+0x178>)
 800d0a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d0a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d0ac:	e7c9      	b.n	800d042 <__ieee754_atan2+0x42>
 800d0ae:	2c02      	cmp	r4, #2
 800d0b0:	d848      	bhi.n	800d144 <__ieee754_atan2+0x144>
 800d0b2:	4b32      	ldr	r3, [pc, #200]	; (800d17c <__ieee754_atan2+0x17c>)
 800d0b4:	e7f6      	b.n	800d0a4 <__ieee754_atan2+0xa4>
 800d0b6:	4573      	cmp	r3, lr
 800d0b8:	d0e4      	beq.n	800d084 <__ieee754_atan2+0x84>
 800d0ba:	1a9b      	subs	r3, r3, r2
 800d0bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d0c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d0c4:	da1e      	bge.n	800d104 <__ieee754_atan2+0x104>
 800d0c6:	2f00      	cmp	r7, #0
 800d0c8:	da01      	bge.n	800d0ce <__ieee754_atan2+0xce>
 800d0ca:	323c      	adds	r2, #60	; 0x3c
 800d0cc:	db1e      	blt.n	800d10c <__ieee754_atan2+0x10c>
 800d0ce:	4632      	mov	r2, r6
 800d0d0:	463b      	mov	r3, r7
 800d0d2:	f7f3 fbc3 	bl	800085c <__aeabi_ddiv>
 800d0d6:	ec41 0b10 	vmov	d0, r0, r1
 800d0da:	f000 faad 	bl	800d638 <fabs>
 800d0de:	f000 f90b 	bl	800d2f8 <atan>
 800d0e2:	ec51 0b10 	vmov	r0, r1, d0
 800d0e6:	2c01      	cmp	r4, #1
 800d0e8:	d013      	beq.n	800d112 <__ieee754_atan2+0x112>
 800d0ea:	2c02      	cmp	r4, #2
 800d0ec:	d015      	beq.n	800d11a <__ieee754_atan2+0x11a>
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	d0a7      	beq.n	800d042 <__ieee754_atan2+0x42>
 800d0f2:	a319      	add	r3, pc, #100	; (adr r3, 800d158 <__ieee754_atan2+0x158>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 f8ce 	bl	8000298 <__aeabi_dsub>
 800d0fc:	a318      	add	r3, pc, #96	; (adr r3, 800d160 <__ieee754_atan2+0x160>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	e014      	b.n	800d12e <__ieee754_atan2+0x12e>
 800d104:	a118      	add	r1, pc, #96	; (adr r1, 800d168 <__ieee754_atan2+0x168>)
 800d106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d10a:	e7ec      	b.n	800d0e6 <__ieee754_atan2+0xe6>
 800d10c:	2000      	movs	r0, #0
 800d10e:	2100      	movs	r1, #0
 800d110:	e7e9      	b.n	800d0e6 <__ieee754_atan2+0xe6>
 800d112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d116:	4619      	mov	r1, r3
 800d118:	e793      	b.n	800d042 <__ieee754_atan2+0x42>
 800d11a:	a30f      	add	r3, pc, #60	; (adr r3, 800d158 <__ieee754_atan2+0x158>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 f8ba 	bl	8000298 <__aeabi_dsub>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	a10d      	add	r1, pc, #52	; (adr r1, 800d160 <__ieee754_atan2+0x160>)
 800d12a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d12e:	f7f3 f8b3 	bl	8000298 <__aeabi_dsub>
 800d132:	e786      	b.n	800d042 <__ieee754_atan2+0x42>
 800d134:	a10a      	add	r1, pc, #40	; (adr r1, 800d160 <__ieee754_atan2+0x160>)
 800d136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d13a:	e782      	b.n	800d042 <__ieee754_atan2+0x42>
 800d13c:	a10c      	add	r1, pc, #48	; (adr r1, 800d170 <__ieee754_atan2+0x170>)
 800d13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d142:	e77e      	b.n	800d042 <__ieee754_atan2+0x42>
 800d144:	2000      	movs	r0, #0
 800d146:	2100      	movs	r1, #0
 800d148:	e77b      	b.n	800d042 <__ieee754_atan2+0x42>
 800d14a:	a107      	add	r1, pc, #28	; (adr r1, 800d168 <__ieee754_atan2+0x168>)
 800d14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d150:	e777      	b.n	800d042 <__ieee754_atan2+0x42>
 800d152:	bf00      	nop
 800d154:	f3af 8000 	nop.w
 800d158:	33145c07 	.word	0x33145c07
 800d15c:	3ca1a626 	.word	0x3ca1a626
 800d160:	54442d18 	.word	0x54442d18
 800d164:	400921fb 	.word	0x400921fb
 800d168:	54442d18 	.word	0x54442d18
 800d16c:	3ff921fb 	.word	0x3ff921fb
 800d170:	54442d18 	.word	0x54442d18
 800d174:	3fe921fb 	.word	0x3fe921fb
 800d178:	0800dab8 	.word	0x0800dab8
 800d17c:	0800dad0 	.word	0x0800dad0
 800d180:	54442d18 	.word	0x54442d18
 800d184:	c00921fb 	.word	0xc00921fb
 800d188:	54442d18 	.word	0x54442d18
 800d18c:	bff921fb 	.word	0xbff921fb
 800d190:	7ff00000 	.word	0x7ff00000

0800d194 <__ieee754_sqrt>:
 800d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d198:	ec55 4b10 	vmov	r4, r5, d0
 800d19c:	4e55      	ldr	r6, [pc, #340]	; (800d2f4 <__ieee754_sqrt+0x160>)
 800d19e:	43ae      	bics	r6, r5
 800d1a0:	ee10 0a10 	vmov	r0, s0
 800d1a4:	ee10 3a10 	vmov	r3, s0
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	d110      	bne.n	800d1d0 <__ieee754_sqrt+0x3c>
 800d1ae:	ee10 2a10 	vmov	r2, s0
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	f7f3 fa28 	bl	8000608 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4620      	mov	r0, r4
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f7f3 f86c 	bl	800029c <__adddf3>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	460d      	mov	r5, r1
 800d1c8:	ec45 4b10 	vmov	d0, r4, r5
 800d1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	dc10      	bgt.n	800d1f6 <__ieee754_sqrt+0x62>
 800d1d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1d8:	4330      	orrs	r0, r6
 800d1da:	d0f5      	beq.n	800d1c8 <__ieee754_sqrt+0x34>
 800d1dc:	b15d      	cbz	r5, 800d1f6 <__ieee754_sqrt+0x62>
 800d1de:	ee10 2a10 	vmov	r2, s0
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	ee10 0a10 	vmov	r0, s0
 800d1e8:	f7f3 f856 	bl	8000298 <__aeabi_dsub>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	f7f3 fb34 	bl	800085c <__aeabi_ddiv>
 800d1f4:	e7e6      	b.n	800d1c4 <__ieee754_sqrt+0x30>
 800d1f6:	1512      	asrs	r2, r2, #20
 800d1f8:	d074      	beq.n	800d2e4 <__ieee754_sqrt+0x150>
 800d1fa:	07d4      	lsls	r4, r2, #31
 800d1fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d200:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d208:	bf5e      	ittt	pl
 800d20a:	0fda      	lsrpl	r2, r3, #31
 800d20c:	005b      	lslpl	r3, r3, #1
 800d20e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d212:	2400      	movs	r4, #0
 800d214:	0fda      	lsrs	r2, r3, #31
 800d216:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d21a:	107f      	asrs	r7, r7, #1
 800d21c:	005b      	lsls	r3, r3, #1
 800d21e:	2516      	movs	r5, #22
 800d220:	4620      	mov	r0, r4
 800d222:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d226:	1886      	adds	r6, r0, r2
 800d228:	428e      	cmp	r6, r1
 800d22a:	bfde      	ittt	le
 800d22c:	1b89      	suble	r1, r1, r6
 800d22e:	18b0      	addle	r0, r6, r2
 800d230:	18a4      	addle	r4, r4, r2
 800d232:	0049      	lsls	r1, r1, #1
 800d234:	3d01      	subs	r5, #1
 800d236:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d23a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d23e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d242:	d1f0      	bne.n	800d226 <__ieee754_sqrt+0x92>
 800d244:	462a      	mov	r2, r5
 800d246:	f04f 0e20 	mov.w	lr, #32
 800d24a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d24e:	4281      	cmp	r1, r0
 800d250:	eb06 0c05 	add.w	ip, r6, r5
 800d254:	dc02      	bgt.n	800d25c <__ieee754_sqrt+0xc8>
 800d256:	d113      	bne.n	800d280 <__ieee754_sqrt+0xec>
 800d258:	459c      	cmp	ip, r3
 800d25a:	d811      	bhi.n	800d280 <__ieee754_sqrt+0xec>
 800d25c:	f1bc 0f00 	cmp.w	ip, #0
 800d260:	eb0c 0506 	add.w	r5, ip, r6
 800d264:	da43      	bge.n	800d2ee <__ieee754_sqrt+0x15a>
 800d266:	2d00      	cmp	r5, #0
 800d268:	db41      	blt.n	800d2ee <__ieee754_sqrt+0x15a>
 800d26a:	f100 0801 	add.w	r8, r0, #1
 800d26e:	1a09      	subs	r1, r1, r0
 800d270:	459c      	cmp	ip, r3
 800d272:	bf88      	it	hi
 800d274:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d278:	eba3 030c 	sub.w	r3, r3, ip
 800d27c:	4432      	add	r2, r6
 800d27e:	4640      	mov	r0, r8
 800d280:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d284:	f1be 0e01 	subs.w	lr, lr, #1
 800d288:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d28c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d290:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d294:	d1db      	bne.n	800d24e <__ieee754_sqrt+0xba>
 800d296:	430b      	orrs	r3, r1
 800d298:	d006      	beq.n	800d2a8 <__ieee754_sqrt+0x114>
 800d29a:	1c50      	adds	r0, r2, #1
 800d29c:	bf13      	iteet	ne
 800d29e:	3201      	addne	r2, #1
 800d2a0:	3401      	addeq	r4, #1
 800d2a2:	4672      	moveq	r2, lr
 800d2a4:	f022 0201 	bicne.w	r2, r2, #1
 800d2a8:	1063      	asrs	r3, r4, #1
 800d2aa:	0852      	lsrs	r2, r2, #1
 800d2ac:	07e1      	lsls	r1, r4, #31
 800d2ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d2b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d2b6:	bf48      	it	mi
 800d2b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d2bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	e781      	b.n	800d1c8 <__ieee754_sqrt+0x34>
 800d2c4:	0ad9      	lsrs	r1, r3, #11
 800d2c6:	3815      	subs	r0, #21
 800d2c8:	055b      	lsls	r3, r3, #21
 800d2ca:	2900      	cmp	r1, #0
 800d2cc:	d0fa      	beq.n	800d2c4 <__ieee754_sqrt+0x130>
 800d2ce:	02cd      	lsls	r5, r1, #11
 800d2d0:	d50a      	bpl.n	800d2e8 <__ieee754_sqrt+0x154>
 800d2d2:	f1c2 0420 	rsb	r4, r2, #32
 800d2d6:	fa23 f404 	lsr.w	r4, r3, r4
 800d2da:	1e55      	subs	r5, r2, #1
 800d2dc:	4093      	lsls	r3, r2
 800d2de:	4321      	orrs	r1, r4
 800d2e0:	1b42      	subs	r2, r0, r5
 800d2e2:	e78a      	b.n	800d1fa <__ieee754_sqrt+0x66>
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	e7f0      	b.n	800d2ca <__ieee754_sqrt+0x136>
 800d2e8:	0049      	lsls	r1, r1, #1
 800d2ea:	3201      	adds	r2, #1
 800d2ec:	e7ef      	b.n	800d2ce <__ieee754_sqrt+0x13a>
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	e7bd      	b.n	800d26e <__ieee754_sqrt+0xda>
 800d2f2:	bf00      	nop
 800d2f4:	7ff00000 	.word	0x7ff00000

0800d2f8 <atan>:
 800d2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fc:	ec55 4b10 	vmov	r4, r5, d0
 800d300:	4bc3      	ldr	r3, [pc, #780]	; (800d610 <atan+0x318>)
 800d302:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d306:	429e      	cmp	r6, r3
 800d308:	46ab      	mov	fp, r5
 800d30a:	dd18      	ble.n	800d33e <atan+0x46>
 800d30c:	4bc1      	ldr	r3, [pc, #772]	; (800d614 <atan+0x31c>)
 800d30e:	429e      	cmp	r6, r3
 800d310:	dc01      	bgt.n	800d316 <atan+0x1e>
 800d312:	d109      	bne.n	800d328 <atan+0x30>
 800d314:	b144      	cbz	r4, 800d328 <atan+0x30>
 800d316:	4622      	mov	r2, r4
 800d318:	462b      	mov	r3, r5
 800d31a:	4620      	mov	r0, r4
 800d31c:	4629      	mov	r1, r5
 800d31e:	f7f2 ffbd 	bl	800029c <__adddf3>
 800d322:	4604      	mov	r4, r0
 800d324:	460d      	mov	r5, r1
 800d326:	e006      	b.n	800d336 <atan+0x3e>
 800d328:	f1bb 0f00 	cmp.w	fp, #0
 800d32c:	f300 8131 	bgt.w	800d592 <atan+0x29a>
 800d330:	a59b      	add	r5, pc, #620	; (adr r5, 800d5a0 <atan+0x2a8>)
 800d332:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d336:	ec45 4b10 	vmov	d0, r4, r5
 800d33a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	4bb6      	ldr	r3, [pc, #728]	; (800d618 <atan+0x320>)
 800d340:	429e      	cmp	r6, r3
 800d342:	dc14      	bgt.n	800d36e <atan+0x76>
 800d344:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d348:	429e      	cmp	r6, r3
 800d34a:	dc0d      	bgt.n	800d368 <atan+0x70>
 800d34c:	a396      	add	r3, pc, #600	; (adr r3, 800d5a8 <atan+0x2b0>)
 800d34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d352:	ee10 0a10 	vmov	r0, s0
 800d356:	4629      	mov	r1, r5
 800d358:	f7f2 ffa0 	bl	800029c <__adddf3>
 800d35c:	4baf      	ldr	r3, [pc, #700]	; (800d61c <atan+0x324>)
 800d35e:	2200      	movs	r2, #0
 800d360:	f7f3 fbe2 	bl	8000b28 <__aeabi_dcmpgt>
 800d364:	2800      	cmp	r0, #0
 800d366:	d1e6      	bne.n	800d336 <atan+0x3e>
 800d368:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d36c:	e02b      	b.n	800d3c6 <atan+0xce>
 800d36e:	f000 f963 	bl	800d638 <fabs>
 800d372:	4bab      	ldr	r3, [pc, #684]	; (800d620 <atan+0x328>)
 800d374:	429e      	cmp	r6, r3
 800d376:	ec55 4b10 	vmov	r4, r5, d0
 800d37a:	f300 80bf 	bgt.w	800d4fc <atan+0x204>
 800d37e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d382:	429e      	cmp	r6, r3
 800d384:	f300 80a0 	bgt.w	800d4c8 <atan+0x1d0>
 800d388:	ee10 2a10 	vmov	r2, s0
 800d38c:	ee10 0a10 	vmov	r0, s0
 800d390:	462b      	mov	r3, r5
 800d392:	4629      	mov	r1, r5
 800d394:	f7f2 ff82 	bl	800029c <__adddf3>
 800d398:	4ba0      	ldr	r3, [pc, #640]	; (800d61c <atan+0x324>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	f7f2 ff7c 	bl	8000298 <__aeabi_dsub>
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	460f      	mov	r7, r1
 800d3a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	f7f2 ff75 	bl	800029c <__adddf3>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	f7f3 fa4f 	bl	800085c <__aeabi_ddiv>
 800d3be:	f04f 0a00 	mov.w	sl, #0
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	462b      	mov	r3, r5
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	f7f3 f91b 	bl	8000608 <__aeabi_dmul>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	4689      	mov	r9, r1
 800d3da:	f7f3 f915 	bl	8000608 <__aeabi_dmul>
 800d3de:	a374      	add	r3, pc, #464	; (adr r3, 800d5b0 <atan+0x2b8>)
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	f7f3 f90e 	bl	8000608 <__aeabi_dmul>
 800d3ec:	a372      	add	r3, pc, #456	; (adr r3, 800d5b8 <atan+0x2c0>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f7f2 ff53 	bl	800029c <__adddf3>
 800d3f6:	4632      	mov	r2, r6
 800d3f8:	463b      	mov	r3, r7
 800d3fa:	f7f3 f905 	bl	8000608 <__aeabi_dmul>
 800d3fe:	a370      	add	r3, pc, #448	; (adr r3, 800d5c0 <atan+0x2c8>)
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f7f2 ff4a 	bl	800029c <__adddf3>
 800d408:	4632      	mov	r2, r6
 800d40a:	463b      	mov	r3, r7
 800d40c:	f7f3 f8fc 	bl	8000608 <__aeabi_dmul>
 800d410:	a36d      	add	r3, pc, #436	; (adr r3, 800d5c8 <atan+0x2d0>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	f7f2 ff41 	bl	800029c <__adddf3>
 800d41a:	4632      	mov	r2, r6
 800d41c:	463b      	mov	r3, r7
 800d41e:	f7f3 f8f3 	bl	8000608 <__aeabi_dmul>
 800d422:	a36b      	add	r3, pc, #428	; (adr r3, 800d5d0 <atan+0x2d8>)
 800d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d428:	f7f2 ff38 	bl	800029c <__adddf3>
 800d42c:	4632      	mov	r2, r6
 800d42e:	463b      	mov	r3, r7
 800d430:	f7f3 f8ea 	bl	8000608 <__aeabi_dmul>
 800d434:	a368      	add	r3, pc, #416	; (adr r3, 800d5d8 <atan+0x2e0>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f7f2 ff2f 	bl	800029c <__adddf3>
 800d43e:	4642      	mov	r2, r8
 800d440:	464b      	mov	r3, r9
 800d442:	f7f3 f8e1 	bl	8000608 <__aeabi_dmul>
 800d446:	a366      	add	r3, pc, #408	; (adr r3, 800d5e0 <atan+0x2e8>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	4680      	mov	r8, r0
 800d44e:	4689      	mov	r9, r1
 800d450:	4630      	mov	r0, r6
 800d452:	4639      	mov	r1, r7
 800d454:	f7f3 f8d8 	bl	8000608 <__aeabi_dmul>
 800d458:	a363      	add	r3, pc, #396	; (adr r3, 800d5e8 <atan+0x2f0>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	f7f2 ff1b 	bl	8000298 <__aeabi_dsub>
 800d462:	4632      	mov	r2, r6
 800d464:	463b      	mov	r3, r7
 800d466:	f7f3 f8cf 	bl	8000608 <__aeabi_dmul>
 800d46a:	a361      	add	r3, pc, #388	; (adr r3, 800d5f0 <atan+0x2f8>)
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	f7f2 ff12 	bl	8000298 <__aeabi_dsub>
 800d474:	4632      	mov	r2, r6
 800d476:	463b      	mov	r3, r7
 800d478:	f7f3 f8c6 	bl	8000608 <__aeabi_dmul>
 800d47c:	a35e      	add	r3, pc, #376	; (adr r3, 800d5f8 <atan+0x300>)
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	f7f2 ff09 	bl	8000298 <__aeabi_dsub>
 800d486:	4632      	mov	r2, r6
 800d488:	463b      	mov	r3, r7
 800d48a:	f7f3 f8bd 	bl	8000608 <__aeabi_dmul>
 800d48e:	a35c      	add	r3, pc, #368	; (adr r3, 800d600 <atan+0x308>)
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	f7f2 ff00 	bl	8000298 <__aeabi_dsub>
 800d498:	4632      	mov	r2, r6
 800d49a:	463b      	mov	r3, r7
 800d49c:	f7f3 f8b4 	bl	8000608 <__aeabi_dmul>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	4649      	mov	r1, r9
 800d4a8:	f7f2 fef8 	bl	800029c <__adddf3>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	f7f3 f8aa 	bl	8000608 <__aeabi_dmul>
 800d4b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	d14b      	bne.n	800d556 <atan+0x25e>
 800d4be:	4620      	mov	r0, r4
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	f7f2 fee9 	bl	8000298 <__aeabi_dsub>
 800d4c6:	e72c      	b.n	800d322 <atan+0x2a>
 800d4c8:	ee10 0a10 	vmov	r0, s0
 800d4cc:	4b53      	ldr	r3, [pc, #332]	; (800d61c <atan+0x324>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	f7f2 fee1 	bl	8000298 <__aeabi_dsub>
 800d4d6:	4b51      	ldr	r3, [pc, #324]	; (800d61c <atan+0x324>)
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f2 fedb 	bl	800029c <__adddf3>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	f7f3 f9b5 	bl	800085c <__aeabi_ddiv>
 800d4f2:	f04f 0a01 	mov.w	sl, #1
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	e764      	b.n	800d3c6 <atan+0xce>
 800d4fc:	4b49      	ldr	r3, [pc, #292]	; (800d624 <atan+0x32c>)
 800d4fe:	429e      	cmp	r6, r3
 800d500:	da1d      	bge.n	800d53e <atan+0x246>
 800d502:	ee10 0a10 	vmov	r0, s0
 800d506:	4b48      	ldr	r3, [pc, #288]	; (800d628 <atan+0x330>)
 800d508:	2200      	movs	r2, #0
 800d50a:	4629      	mov	r1, r5
 800d50c:	f7f2 fec4 	bl	8000298 <__aeabi_dsub>
 800d510:	4b45      	ldr	r3, [pc, #276]	; (800d628 <atan+0x330>)
 800d512:	4606      	mov	r6, r0
 800d514:	460f      	mov	r7, r1
 800d516:	2200      	movs	r2, #0
 800d518:	4620      	mov	r0, r4
 800d51a:	4629      	mov	r1, r5
 800d51c:	f7f3 f874 	bl	8000608 <__aeabi_dmul>
 800d520:	4b3e      	ldr	r3, [pc, #248]	; (800d61c <atan+0x324>)
 800d522:	2200      	movs	r2, #0
 800d524:	f7f2 feba 	bl	800029c <__adddf3>
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	4630      	mov	r0, r6
 800d52e:	4639      	mov	r1, r7
 800d530:	f7f3 f994 	bl	800085c <__aeabi_ddiv>
 800d534:	f04f 0a02 	mov.w	sl, #2
 800d538:	4604      	mov	r4, r0
 800d53a:	460d      	mov	r5, r1
 800d53c:	e743      	b.n	800d3c6 <atan+0xce>
 800d53e:	462b      	mov	r3, r5
 800d540:	ee10 2a10 	vmov	r2, s0
 800d544:	4939      	ldr	r1, [pc, #228]	; (800d62c <atan+0x334>)
 800d546:	2000      	movs	r0, #0
 800d548:	f7f3 f988 	bl	800085c <__aeabi_ddiv>
 800d54c:	f04f 0a03 	mov.w	sl, #3
 800d550:	4604      	mov	r4, r0
 800d552:	460d      	mov	r5, r1
 800d554:	e737      	b.n	800d3c6 <atan+0xce>
 800d556:	4b36      	ldr	r3, [pc, #216]	; (800d630 <atan+0x338>)
 800d558:	4e36      	ldr	r6, [pc, #216]	; (800d634 <atan+0x33c>)
 800d55a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d55e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d562:	e9da 2300 	ldrd	r2, r3, [sl]
 800d566:	f7f2 fe97 	bl	8000298 <__aeabi_dsub>
 800d56a:	4622      	mov	r2, r4
 800d56c:	462b      	mov	r3, r5
 800d56e:	f7f2 fe93 	bl	8000298 <__aeabi_dsub>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d57a:	f7f2 fe8d 	bl	8000298 <__aeabi_dsub>
 800d57e:	f1bb 0f00 	cmp.w	fp, #0
 800d582:	4604      	mov	r4, r0
 800d584:	460d      	mov	r5, r1
 800d586:	f6bf aed6 	bge.w	800d336 <atan+0x3e>
 800d58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d58e:	461d      	mov	r5, r3
 800d590:	e6d1      	b.n	800d336 <atan+0x3e>
 800d592:	a51d      	add	r5, pc, #116	; (adr r5, 800d608 <atan+0x310>)
 800d594:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d598:	e6cd      	b.n	800d336 <atan+0x3e>
 800d59a:	bf00      	nop
 800d59c:	f3af 8000 	nop.w
 800d5a0:	54442d18 	.word	0x54442d18
 800d5a4:	bff921fb 	.word	0xbff921fb
 800d5a8:	8800759c 	.word	0x8800759c
 800d5ac:	7e37e43c 	.word	0x7e37e43c
 800d5b0:	e322da11 	.word	0xe322da11
 800d5b4:	3f90ad3a 	.word	0x3f90ad3a
 800d5b8:	24760deb 	.word	0x24760deb
 800d5bc:	3fa97b4b 	.word	0x3fa97b4b
 800d5c0:	a0d03d51 	.word	0xa0d03d51
 800d5c4:	3fb10d66 	.word	0x3fb10d66
 800d5c8:	c54c206e 	.word	0xc54c206e
 800d5cc:	3fb745cd 	.word	0x3fb745cd
 800d5d0:	920083ff 	.word	0x920083ff
 800d5d4:	3fc24924 	.word	0x3fc24924
 800d5d8:	5555550d 	.word	0x5555550d
 800d5dc:	3fd55555 	.word	0x3fd55555
 800d5e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d5e4:	bfa2b444 	.word	0xbfa2b444
 800d5e8:	52defd9a 	.word	0x52defd9a
 800d5ec:	3fadde2d 	.word	0x3fadde2d
 800d5f0:	af749a6d 	.word	0xaf749a6d
 800d5f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d5f8:	fe231671 	.word	0xfe231671
 800d5fc:	3fbc71c6 	.word	0x3fbc71c6
 800d600:	9998ebc4 	.word	0x9998ebc4
 800d604:	3fc99999 	.word	0x3fc99999
 800d608:	54442d18 	.word	0x54442d18
 800d60c:	3ff921fb 	.word	0x3ff921fb
 800d610:	440fffff 	.word	0x440fffff
 800d614:	7ff00000 	.word	0x7ff00000
 800d618:	3fdbffff 	.word	0x3fdbffff
 800d61c:	3ff00000 	.word	0x3ff00000
 800d620:	3ff2ffff 	.word	0x3ff2ffff
 800d624:	40038000 	.word	0x40038000
 800d628:	3ff80000 	.word	0x3ff80000
 800d62c:	bff00000 	.word	0xbff00000
 800d630:	0800db08 	.word	0x0800db08
 800d634:	0800dae8 	.word	0x0800dae8

0800d638 <fabs>:
 800d638:	ec51 0b10 	vmov	r0, r1, d0
 800d63c:	ee10 2a10 	vmov	r2, s0
 800d640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d644:	ec43 2b10 	vmov	d0, r2, r3
 800d648:	4770      	bx	lr
	...

0800d64c <_init>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr

0800d658 <_fini>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	bf00      	nop
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr
